/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 场馆表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class SYS_VENUE implements org.apache.thrift.TBase<SYS_VENUE, SYS_VENUE._Fields>, java.io.Serializable, Cloneable, Comparable<SYS_VENUE> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SYS_VENUE");

  private static final org.apache.thrift.protocol.TField VENUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("venueId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField VENUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("venueName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SYS_VENUEStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SYS_VENUETupleSchemeFactory();

  /**
   * 场馆编号
   */
  public long venueId; // required
  /**
   * 场馆名称
   */
  public java.lang.String venueName; // required
  /**
   * 状态(Y启用N停用)
   */
  public java.lang.String stat; // optional
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // optional
  /**
   * 操作时间
   */
  public long opeTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 场馆编号
     */
    VENUE_ID((short)1, "venueId"),
    /**
     * 场馆名称
     */
    VENUE_NAME((short)2, "venueName"),
    /**
     * 状态(Y启用N停用)
     */
    STAT((short)3, "stat"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)4, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)5, "opeTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // VENUE_ID
          return VENUE_ID;
        case 2: // VENUE_NAME
          return VENUE_NAME;
        case 3: // STAT
          return STAT;
        case 4: // OPE_USER_ID
          return OPE_USER_ID;
        case 5: // OPE_TIME
          return OPE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VENUEID_ISSET_ID = 0;
  private static final int __OPETIME_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.STAT,_Fields.OPE_USER_ID,_Fields.OPE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.VENUE_ID, new org.apache.thrift.meta_data.FieldMetaData("venueId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VENUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("venueName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SYS_VENUE.class, metaDataMap);
  }

  public SYS_VENUE() {
  }

  public SYS_VENUE(
    long venueId,
    java.lang.String venueName)
  {
    this();
    this.venueId = venueId;
    setVenueIdIsSet(true);
    this.venueName = venueName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SYS_VENUE(SYS_VENUE other) {
    __isset_bitfield = other.__isset_bitfield;
    this.venueId = other.venueId;
    if (other.isSetVenueName()) {
      this.venueName = other.venueName;
    }
    if (other.isSetStat()) {
      this.stat = other.stat;
    }
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
  }

  public SYS_VENUE deepCopy() {
    return new SYS_VENUE(this);
  }

  @Override
  public void clear() {
    setVenueIdIsSet(false);
    this.venueId = 0;
    this.venueName = null;
    this.stat = null;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
  }

  /**
   * 场馆编号
   */
  public long getVenueId() {
    return this.venueId;
  }

  /**
   * 场馆编号
   */
  public SYS_VENUE setVenueId(long venueId) {
    this.venueId = venueId;
    setVenueIdIsSet(true);
    return this;
  }

  public void unsetVenueId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VENUEID_ISSET_ID);
  }

  /** Returns true if field venueId is set (has been assigned a value) and false otherwise */
  public boolean isSetVenueId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VENUEID_ISSET_ID);
  }

  public void setVenueIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VENUEID_ISSET_ID, value);
  }

  /**
   * 场馆名称
   */
  public java.lang.String getVenueName() {
    return this.venueName;
  }

  /**
   * 场馆名称
   */
  public SYS_VENUE setVenueName(java.lang.String venueName) {
    this.venueName = venueName;
    return this;
  }

  public void unsetVenueName() {
    this.venueName = null;
  }

  /** Returns true if field venueName is set (has been assigned a value) and false otherwise */
  public boolean isSetVenueName() {
    return this.venueName != null;
  }

  public void setVenueNameIsSet(boolean value) {
    if (!value) {
      this.venueName = null;
    }
  }

  /**
   * 状态(Y启用N停用)
   */
  public java.lang.String getStat() {
    return this.stat;
  }

  /**
   * 状态(Y启用N停用)
   */
  public SYS_VENUE setStat(java.lang.String stat) {
    this.stat = stat;
    return this;
  }

  public void unsetStat() {
    this.stat = null;
  }

  /** Returns true if field stat is set (has been assigned a value) and false otherwise */
  public boolean isSetStat() {
    return this.stat != null;
  }

  public void setStatIsSet(boolean value) {
    if (!value) {
      this.stat = null;
    }
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SYS_VENUE setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SYS_VENUE setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case VENUE_ID:
      if (value == null) {
        unsetVenueId();
      } else {
        setVenueId((java.lang.Long)value);
      }
      break;

    case VENUE_NAME:
      if (value == null) {
        unsetVenueName();
      } else {
        setVenueName((java.lang.String)value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((java.lang.String)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case VENUE_ID:
      return getVenueId();

    case VENUE_NAME:
      return getVenueName();

    case STAT:
      return getStat();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case VENUE_ID:
      return isSetVenueId();
    case VENUE_NAME:
      return isSetVenueName();
    case STAT:
      return isSetStat();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SYS_VENUE)
      return this.equals((SYS_VENUE)that);
    return false;
  }

  public boolean equals(SYS_VENUE that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_venueId = true;
    boolean that_present_venueId = true;
    if (this_present_venueId || that_present_venueId) {
      if (!(this_present_venueId && that_present_venueId))
        return false;
      if (this.venueId != that.venueId)
        return false;
    }

    boolean this_present_venueName = true && this.isSetVenueName();
    boolean that_present_venueName = true && that.isSetVenueName();
    if (this_present_venueName || that_present_venueName) {
      if (!(this_present_venueName && that_present_venueName))
        return false;
      if (!this.venueName.equals(that.venueName))
        return false;
    }

    boolean this_present_stat = true && this.isSetStat();
    boolean that_present_stat = true && that.isSetStat();
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!this.stat.equals(that.stat))
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true && this.isSetOpeTime();
    boolean that_present_opeTime = true && that.isSetOpeTime();
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(venueId);

    hashCode = hashCode * 8191 + ((isSetVenueName()) ? 131071 : 524287);
    if (isSetVenueName())
      hashCode = hashCode * 8191 + venueName.hashCode();

    hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
    if (isSetStat())
      hashCode = hashCode * 8191 + stat.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeTime()) ? 131071 : 524287);
    if (isSetOpeTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    return hashCode;
  }

  @Override
  public int compareTo(SYS_VENUE other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetVenueId()).compareTo(other.isSetVenueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVenueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.venueId, other.venueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVenueName()).compareTo(other.isSetVenueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVenueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.venueName, other.venueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SYS_VENUE(");
    boolean first = true;

    sb.append("venueId:");
    sb.append(this.venueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("venueName:");
    if (this.venueName == null) {
      sb.append("null");
    } else {
      sb.append(this.venueName);
    }
    first = false;
    if (isSetStat()) {
      if (!first) sb.append(", ");
      sb.append("stat:");
      if (this.stat == null) {
        sb.append("null");
      } else {
        sb.append(this.stat);
      }
      first = false;
    }
    if (isSetOpeUserId()) {
      if (!first) sb.append(", ");
      sb.append("opeUserId:");
      if (this.opeUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.opeUserId);
      }
      first = false;
    }
    if (isSetOpeTime()) {
      if (!first) sb.append(", ");
      sb.append("opeTime:");
      sb.append(this.opeTime);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'venueId' because it's a primitive and you chose the non-beans generator.
    if (venueName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'venueName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SYS_VENUEStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_VENUEStandardScheme getScheme() {
      return new SYS_VENUEStandardScheme();
    }
  }

  private static class SYS_VENUEStandardScheme extends org.apache.thrift.scheme.StandardScheme<SYS_VENUE> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SYS_VENUE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // VENUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.venueId = iprot.readI64();
              struct.setVenueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // VENUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.venueName = iprot.readString();
              struct.setVenueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stat = iprot.readString();
              struct.setStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetVenueId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'venueId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SYS_VENUE struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(VENUE_ID_FIELD_DESC);
      oprot.writeI64(struct.venueId);
      oprot.writeFieldEnd();
      if (struct.venueName != null) {
        oprot.writeFieldBegin(VENUE_NAME_FIELD_DESC);
        oprot.writeString(struct.venueName);
        oprot.writeFieldEnd();
      }
      if (struct.stat != null) {
        if (struct.isSetStat()) {
          oprot.writeFieldBegin(STAT_FIELD_DESC);
          oprot.writeString(struct.stat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.opeUserId != null) {
        if (struct.isSetOpeUserId()) {
          oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.opeUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpeTime()) {
        oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
        oprot.writeI64(struct.opeTime);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SYS_VENUETupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_VENUETupleScheme getScheme() {
      return new SYS_VENUETupleScheme();
    }
  }

  private static class SYS_VENUETupleScheme extends org.apache.thrift.scheme.TupleScheme<SYS_VENUE> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SYS_VENUE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.venueId);
      oprot.writeString(struct.venueName);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetStat()) {
        optionals.set(0);
      }
      if (struct.isSetOpeUserId()) {
        optionals.set(1);
      }
      if (struct.isSetOpeTime()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetStat()) {
        oprot.writeString(struct.stat);
      }
      if (struct.isSetOpeUserId()) {
        oprot.writeString(struct.opeUserId);
      }
      if (struct.isSetOpeTime()) {
        oprot.writeI64(struct.opeTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SYS_VENUE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.venueId = iprot.readI64();
      struct.setVenueIdIsSet(true);
      struct.venueName = iprot.readString();
      struct.setVenueNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.stat = iprot.readString();
        struct.setStatIsSet(true);
      }
      if (incoming.get(1)) {
        struct.opeUserId = iprot.readString();
        struct.setOpeUserIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.opeTime = iprot.readI64();
        struct.setOpeTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

