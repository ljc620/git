/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 门票库存表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class STR_TICKET_INFO implements org.apache.thrift.TBase<STR_TICKET_INFO, STR_TICKET_INFO._Fields>, java.io.Serializable, Cloneable, Comparable<STR_TICKET_INFO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("STR_TICKET_INFO");

  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketUid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chipId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHEST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chestId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField BOX_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("boxId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField BATCH_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("batchId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SALE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("saleTime", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField BACKLIST_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("backlistFlag", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new STR_TICKET_INFOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new STR_TICKET_INFOTupleSchemeFactory();

  /**
   * 票号
   */
  public long ticketId; // required
  /**
   * 票据唯一号
   */
  public java.lang.String ticketUid; // optional
  /**
   * 芯片ID
   */
  public java.lang.String chipId; // optional
  /**
   * 箱号
   */
  public java.lang.String chestId; // optional
  /**
   * 盒号
   */
  public java.lang.String boxId; // optional
  /**
   * 批次号
   */
  public java.lang.String batchId; // optional
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // required
  /**
   * 状态状态(000-未核实 001-已核实 003-已销售,004-已作废)
   */
  public java.lang.String stat; // required
  /**
   * 出票时间
   */
  public java.lang.String saleTime; // optional
  /**
   * 出票网点编号
   */
  public java.lang.String outletId; // optional
  /**
   * 出票网点名称
   */
  public java.lang.String outletName; // optional
  /**
   * 是否在黑名单
   */
  public java.lang.String backlistFlag; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 票号
     */
    TICKET_ID((short)1, "ticketId"),
    /**
     * 票据唯一号
     */
    TICKET_UID((short)2, "ticketUid"),
    /**
     * 芯片ID
     */
    CHIP_ID((short)3, "chipId"),
    /**
     * 箱号
     */
    CHEST_ID((short)4, "chestId"),
    /**
     * 盒号
     */
    BOX_ID((short)5, "boxId"),
    /**
     * 批次号
     */
    BATCH_ID((short)6, "batchId"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)7, "ticketTypeId"),
    /**
     * 状态状态(000-未核实 001-已核实 003-已销售,004-已作废)
     */
    STAT((short)8, "stat"),
    /**
     * 出票时间
     */
    SALE_TIME((short)9, "saleTime"),
    /**
     * 出票网点编号
     */
    OUTLET_ID((short)10, "outletId"),
    /**
     * 出票网点名称
     */
    OUTLET_NAME((short)11, "outletName"),
    /**
     * 是否在黑名单
     */
    BACKLIST_FLAG((short)12, "backlistFlag");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TICKET_ID
          return TICKET_ID;
        case 2: // TICKET_UID
          return TICKET_UID;
        case 3: // CHIP_ID
          return CHIP_ID;
        case 4: // CHEST_ID
          return CHEST_ID;
        case 5: // BOX_ID
          return BOX_ID;
        case 6: // BATCH_ID
          return BATCH_ID;
        case 7: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 8: // STAT
          return STAT;
        case 9: // SALE_TIME
          return SALE_TIME;
        case 10: // OUTLET_ID
          return OUTLET_ID;
        case 11: // OUTLET_NAME
          return OUTLET_NAME;
        case 12: // BACKLIST_FLAG
          return BACKLIST_FLAG;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKETID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TICKET_UID,_Fields.CHIP_ID,_Fields.CHEST_ID,_Fields.BOX_ID,_Fields.BATCH_ID,_Fields.SALE_TIME,_Fields.OUTLET_ID,_Fields.OUTLET_NAME,_Fields.BACKLIST_FLAG};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_UID, new org.apache.thrift.meta_data.FieldMetaData("ticketUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHIP_ID, new org.apache.thrift.meta_data.FieldMetaData("chipId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHEST_ID, new org.apache.thrift.meta_data.FieldMetaData("chestId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BOX_ID, new org.apache.thrift.meta_data.FieldMetaData("boxId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BATCH_ID, new org.apache.thrift.meta_data.FieldMetaData("batchId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_TIME, new org.apache.thrift.meta_data.FieldMetaData("saleTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BACKLIST_FLAG, new org.apache.thrift.meta_data.FieldMetaData("backlistFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(STR_TICKET_INFO.class, metaDataMap);
  }

  public STR_TICKET_INFO() {
  }

  public STR_TICKET_INFO(
    long ticketId,
    java.lang.String ticketTypeId,
    java.lang.String stat)
  {
    this();
    this.ticketId = ticketId;
    setTicketIdIsSet(true);
    this.ticketTypeId = ticketTypeId;
    this.stat = stat;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public STR_TICKET_INFO(STR_TICKET_INFO other) {
    __isset_bitfield = other.__isset_bitfield;
    this.ticketId = other.ticketId;
    if (other.isSetTicketUid()) {
      this.ticketUid = other.ticketUid;
    }
    if (other.isSetChipId()) {
      this.chipId = other.chipId;
    }
    if (other.isSetChestId()) {
      this.chestId = other.chestId;
    }
    if (other.isSetBoxId()) {
      this.boxId = other.boxId;
    }
    if (other.isSetBatchId()) {
      this.batchId = other.batchId;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetStat()) {
      this.stat = other.stat;
    }
    if (other.isSetSaleTime()) {
      this.saleTime = other.saleTime;
    }
    if (other.isSetOutletId()) {
      this.outletId = other.outletId;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetBacklistFlag()) {
      this.backlistFlag = other.backlistFlag;
    }
  }

  public STR_TICKET_INFO deepCopy() {
    return new STR_TICKET_INFO(this);
  }

  @Override
  public void clear() {
    setTicketIdIsSet(false);
    this.ticketId = 0;
    this.ticketUid = null;
    this.chipId = null;
    this.chestId = null;
    this.boxId = null;
    this.batchId = null;
    this.ticketTypeId = null;
    this.stat = null;
    this.saleTime = null;
    this.outletId = null;
    this.outletName = null;
    this.backlistFlag = null;
  }

  /**
   * 票号
   */
  public long getTicketId() {
    return this.ticketId;
  }

  /**
   * 票号
   */
  public STR_TICKET_INFO setTicketId(long ticketId) {
    this.ticketId = ticketId;
    setTicketIdIsSet(true);
    return this;
  }

  public void unsetTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  public void setTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKETID_ISSET_ID, value);
  }

  /**
   * 票据唯一号
   */
  public java.lang.String getTicketUid() {
    return this.ticketUid;
  }

  /**
   * 票据唯一号
   */
  public STR_TICKET_INFO setTicketUid(java.lang.String ticketUid) {
    this.ticketUid = ticketUid;
    return this;
  }

  public void unsetTicketUid() {
    this.ticketUid = null;
  }

  /** Returns true if field ticketUid is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketUid() {
    return this.ticketUid != null;
  }

  public void setTicketUidIsSet(boolean value) {
    if (!value) {
      this.ticketUid = null;
    }
  }

  /**
   * 芯片ID
   */
  public java.lang.String getChipId() {
    return this.chipId;
  }

  /**
   * 芯片ID
   */
  public STR_TICKET_INFO setChipId(java.lang.String chipId) {
    this.chipId = chipId;
    return this;
  }

  public void unsetChipId() {
    this.chipId = null;
  }

  /** Returns true if field chipId is set (has been assigned a value) and false otherwise */
  public boolean isSetChipId() {
    return this.chipId != null;
  }

  public void setChipIdIsSet(boolean value) {
    if (!value) {
      this.chipId = null;
    }
  }

  /**
   * 箱号
   */
  public java.lang.String getChestId() {
    return this.chestId;
  }

  /**
   * 箱号
   */
  public STR_TICKET_INFO setChestId(java.lang.String chestId) {
    this.chestId = chestId;
    return this;
  }

  public void unsetChestId() {
    this.chestId = null;
  }

  /** Returns true if field chestId is set (has been assigned a value) and false otherwise */
  public boolean isSetChestId() {
    return this.chestId != null;
  }

  public void setChestIdIsSet(boolean value) {
    if (!value) {
      this.chestId = null;
    }
  }

  /**
   * 盒号
   */
  public java.lang.String getBoxId() {
    return this.boxId;
  }

  /**
   * 盒号
   */
  public STR_TICKET_INFO setBoxId(java.lang.String boxId) {
    this.boxId = boxId;
    return this;
  }

  public void unsetBoxId() {
    this.boxId = null;
  }

  /** Returns true if field boxId is set (has been assigned a value) and false otherwise */
  public boolean isSetBoxId() {
    return this.boxId != null;
  }

  public void setBoxIdIsSet(boolean value) {
    if (!value) {
      this.boxId = null;
    }
  }

  /**
   * 批次号
   */
  public java.lang.String getBatchId() {
    return this.batchId;
  }

  /**
   * 批次号
   */
  public STR_TICKET_INFO setBatchId(java.lang.String batchId) {
    this.batchId = batchId;
    return this;
  }

  public void unsetBatchId() {
    this.batchId = null;
  }

  /** Returns true if field batchId is set (has been assigned a value) and false otherwise */
  public boolean isSetBatchId() {
    return this.batchId != null;
  }

  public void setBatchIdIsSet(boolean value) {
    if (!value) {
      this.batchId = null;
    }
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public STR_TICKET_INFO setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 状态状态(000-未核实 001-已核实 003-已销售,004-已作废)
   */
  public java.lang.String getStat() {
    return this.stat;
  }

  /**
   * 状态状态(000-未核实 001-已核实 003-已销售,004-已作废)
   */
  public STR_TICKET_INFO setStat(java.lang.String stat) {
    this.stat = stat;
    return this;
  }

  public void unsetStat() {
    this.stat = null;
  }

  /** Returns true if field stat is set (has been assigned a value) and false otherwise */
  public boolean isSetStat() {
    return this.stat != null;
  }

  public void setStatIsSet(boolean value) {
    if (!value) {
      this.stat = null;
    }
  }

  /**
   * 出票时间
   */
  public java.lang.String getSaleTime() {
    return this.saleTime;
  }

  /**
   * 出票时间
   */
  public STR_TICKET_INFO setSaleTime(java.lang.String saleTime) {
    this.saleTime = saleTime;
    return this;
  }

  public void unsetSaleTime() {
    this.saleTime = null;
  }

  /** Returns true if field saleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleTime() {
    return this.saleTime != null;
  }

  public void setSaleTimeIsSet(boolean value) {
    if (!value) {
      this.saleTime = null;
    }
  }

  /**
   * 出票网点编号
   */
  public java.lang.String getOutletId() {
    return this.outletId;
  }

  /**
   * 出票网点编号
   */
  public STR_TICKET_INFO setOutletId(java.lang.String outletId) {
    this.outletId = outletId;
    return this;
  }

  public void unsetOutletId() {
    this.outletId = null;
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return this.outletId != null;
  }

  public void setOutletIdIsSet(boolean value) {
    if (!value) {
      this.outletId = null;
    }
  }

  /**
   * 出票网点名称
   */
  public java.lang.String getOutletName() {
    return this.outletName;
  }

  /**
   * 出票网点名称
   */
  public STR_TICKET_INFO setOutletName(java.lang.String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 是否在黑名单
   */
  public java.lang.String getBacklistFlag() {
    return this.backlistFlag;
  }

  /**
   * 是否在黑名单
   */
  public STR_TICKET_INFO setBacklistFlag(java.lang.String backlistFlag) {
    this.backlistFlag = backlistFlag;
    return this;
  }

  public void unsetBacklistFlag() {
    this.backlistFlag = null;
  }

  /** Returns true if field backlistFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetBacklistFlag() {
    return this.backlistFlag != null;
  }

  public void setBacklistFlagIsSet(boolean value) {
    if (!value) {
      this.backlistFlag = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((java.lang.Long)value);
      }
      break;

    case TICKET_UID:
      if (value == null) {
        unsetTicketUid();
      } else {
        setTicketUid((java.lang.String)value);
      }
      break;

    case CHIP_ID:
      if (value == null) {
        unsetChipId();
      } else {
        setChipId((java.lang.String)value);
      }
      break;

    case CHEST_ID:
      if (value == null) {
        unsetChestId();
      } else {
        setChestId((java.lang.String)value);
      }
      break;

    case BOX_ID:
      if (value == null) {
        unsetBoxId();
      } else {
        setBoxId((java.lang.String)value);
      }
      break;

    case BATCH_ID:
      if (value == null) {
        unsetBatchId();
      } else {
        setBatchId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((java.lang.String)value);
      }
      break;

    case SALE_TIME:
      if (value == null) {
        unsetSaleTime();
      } else {
        setSaleTime((java.lang.String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((java.lang.String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((java.lang.String)value);
      }
      break;

    case BACKLIST_FLAG:
      if (value == null) {
        unsetBacklistFlag();
      } else {
        setBacklistFlag((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TICKET_ID:
      return getTicketId();

    case TICKET_UID:
      return getTicketUid();

    case CHIP_ID:
      return getChipId();

    case CHEST_ID:
      return getChestId();

    case BOX_ID:
      return getBoxId();

    case BATCH_ID:
      return getBatchId();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case STAT:
      return getStat();

    case SALE_TIME:
      return getSaleTime();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case BACKLIST_FLAG:
      return getBacklistFlag();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TICKET_ID:
      return isSetTicketId();
    case TICKET_UID:
      return isSetTicketUid();
    case CHIP_ID:
      return isSetChipId();
    case CHEST_ID:
      return isSetChestId();
    case BOX_ID:
      return isSetBoxId();
    case BATCH_ID:
      return isSetBatchId();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case STAT:
      return isSetStat();
    case SALE_TIME:
      return isSetSaleTime();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case BACKLIST_FLAG:
      return isSetBacklistFlag();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof STR_TICKET_INFO)
      return this.equals((STR_TICKET_INFO)that);
    return false;
  }

  public boolean equals(STR_TICKET_INFO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ticketId = true;
    boolean that_present_ticketId = true;
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (this.ticketId != that.ticketId)
        return false;
    }

    boolean this_present_ticketUid = true && this.isSetTicketUid();
    boolean that_present_ticketUid = true && that.isSetTicketUid();
    if (this_present_ticketUid || that_present_ticketUid) {
      if (!(this_present_ticketUid && that_present_ticketUid))
        return false;
      if (!this.ticketUid.equals(that.ticketUid))
        return false;
    }

    boolean this_present_chipId = true && this.isSetChipId();
    boolean that_present_chipId = true && that.isSetChipId();
    if (this_present_chipId || that_present_chipId) {
      if (!(this_present_chipId && that_present_chipId))
        return false;
      if (!this.chipId.equals(that.chipId))
        return false;
    }

    boolean this_present_chestId = true && this.isSetChestId();
    boolean that_present_chestId = true && that.isSetChestId();
    if (this_present_chestId || that_present_chestId) {
      if (!(this_present_chestId && that_present_chestId))
        return false;
      if (!this.chestId.equals(that.chestId))
        return false;
    }

    boolean this_present_boxId = true && this.isSetBoxId();
    boolean that_present_boxId = true && that.isSetBoxId();
    if (this_present_boxId || that_present_boxId) {
      if (!(this_present_boxId && that_present_boxId))
        return false;
      if (!this.boxId.equals(that.boxId))
        return false;
    }

    boolean this_present_batchId = true && this.isSetBatchId();
    boolean that_present_batchId = true && that.isSetBatchId();
    if (this_present_batchId || that_present_batchId) {
      if (!(this_present_batchId && that_present_batchId))
        return false;
      if (!this.batchId.equals(that.batchId))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_stat = true && this.isSetStat();
    boolean that_present_stat = true && that.isSetStat();
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!this.stat.equals(that.stat))
        return false;
    }

    boolean this_present_saleTime = true && this.isSetSaleTime();
    boolean that_present_saleTime = true && that.isSetSaleTime();
    if (this_present_saleTime || that_present_saleTime) {
      if (!(this_present_saleTime && that_present_saleTime))
        return false;
      if (!this.saleTime.equals(that.saleTime))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (!this.outletId.equals(that.outletId))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_backlistFlag = true && this.isSetBacklistFlag();
    boolean that_present_backlistFlag = true && that.isSetBacklistFlag();
    if (this_present_backlistFlag || that_present_backlistFlag) {
      if (!(this_present_backlistFlag && that_present_backlistFlag))
        return false;
      if (!this.backlistFlag.equals(that.backlistFlag))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticketId);

    hashCode = hashCode * 8191 + ((isSetTicketUid()) ? 131071 : 524287);
    if (isSetTicketUid())
      hashCode = hashCode * 8191 + ticketUid.hashCode();

    hashCode = hashCode * 8191 + ((isSetChipId()) ? 131071 : 524287);
    if (isSetChipId())
      hashCode = hashCode * 8191 + chipId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChestId()) ? 131071 : 524287);
    if (isSetChestId())
      hashCode = hashCode * 8191 + chestId.hashCode();

    hashCode = hashCode * 8191 + ((isSetBoxId()) ? 131071 : 524287);
    if (isSetBoxId())
      hashCode = hashCode * 8191 + boxId.hashCode();

    hashCode = hashCode * 8191 + ((isSetBatchId()) ? 131071 : 524287);
    if (isSetBatchId())
      hashCode = hashCode * 8191 + batchId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
    if (isSetStat())
      hashCode = hashCode * 8191 + stat.hashCode();

    hashCode = hashCode * 8191 + ((isSetSaleTime()) ? 131071 : 524287);
    if (isSetSaleTime())
      hashCode = hashCode * 8191 + saleTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutletId()) ? 131071 : 524287);
    if (isSetOutletId())
      hashCode = hashCode * 8191 + outletId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutletName()) ? 131071 : 524287);
    if (isSetOutletName())
      hashCode = hashCode * 8191 + outletName.hashCode();

    hashCode = hashCode * 8191 + ((isSetBacklistFlag()) ? 131071 : 524287);
    if (isSetBacklistFlag())
      hashCode = hashCode * 8191 + backlistFlag.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(STR_TICKET_INFO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketUid()).compareTo(other.isSetTicketUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketUid, other.ticketUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChipId()).compareTo(other.isSetChipId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChipId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chipId, other.chipId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChestId()).compareTo(other.isSetChestId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChestId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chestId, other.chestId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBoxId()).compareTo(other.isSetBoxId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBoxId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.boxId, other.boxId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBatchId()).compareTo(other.isSetBatchId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBatchId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.batchId, other.batchId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleTime()).compareTo(other.isSetSaleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleTime, other.saleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBacklistFlag()).compareTo(other.isSetBacklistFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBacklistFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.backlistFlag, other.backlistFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("STR_TICKET_INFO(");
    boolean first = true;

    sb.append("ticketId:");
    sb.append(this.ticketId);
    first = false;
    if (isSetTicketUid()) {
      if (!first) sb.append(", ");
      sb.append("ticketUid:");
      if (this.ticketUid == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketUid);
      }
      first = false;
    }
    if (isSetChipId()) {
      if (!first) sb.append(", ");
      sb.append("chipId:");
      if (this.chipId == null) {
        sb.append("null");
      } else {
        sb.append(this.chipId);
      }
      first = false;
    }
    if (isSetChestId()) {
      if (!first) sb.append(", ");
      sb.append("chestId:");
      if (this.chestId == null) {
        sb.append("null");
      } else {
        sb.append(this.chestId);
      }
      first = false;
    }
    if (isSetBoxId()) {
      if (!first) sb.append(", ");
      sb.append("boxId:");
      if (this.boxId == null) {
        sb.append("null");
      } else {
        sb.append(this.boxId);
      }
      first = false;
    }
    if (isSetBatchId()) {
      if (!first) sb.append(", ");
      sb.append("batchId:");
      if (this.batchId == null) {
        sb.append("null");
      } else {
        sb.append(this.batchId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ticketTypeId:");
    if (this.ticketTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("stat:");
    if (this.stat == null) {
      sb.append("null");
    } else {
      sb.append(this.stat);
    }
    first = false;
    if (isSetSaleTime()) {
      if (!first) sb.append(", ");
      sb.append("saleTime:");
      if (this.saleTime == null) {
        sb.append("null");
      } else {
        sb.append(this.saleTime);
      }
      first = false;
    }
    if (isSetOutletId()) {
      if (!first) sb.append(", ");
      sb.append("outletId:");
      if (this.outletId == null) {
        sb.append("null");
      } else {
        sb.append(this.outletId);
      }
      first = false;
    }
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetBacklistFlag()) {
      if (!first) sb.append(", ");
      sb.append("backlistFlag:");
      if (this.backlistFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.backlistFlag);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'ticketId' because it's a primitive and you chose the non-beans generator.
    if (ticketTypeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketTypeId' was not present! Struct: " + toString());
    }
    if (stat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'stat' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class STR_TICKET_INFOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STR_TICKET_INFOStandardScheme getScheme() {
      return new STR_TICKET_INFOStandardScheme();
    }
  }

  private static class STR_TICKET_INFOStandardScheme extends org.apache.thrift.scheme.StandardScheme<STR_TICKET_INFO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, STR_TICKET_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketId = iprot.readI64();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketUid = iprot.readString();
              struct.setTicketUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chipId = iprot.readString();
              struct.setChipIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHEST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chestId = iprot.readString();
              struct.setChestIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // BOX_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.boxId = iprot.readString();
              struct.setBoxIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // BATCH_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.batchId = iprot.readString();
              struct.setBatchIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stat = iprot.readString();
              struct.setStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SALE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saleTime = iprot.readString();
              struct.setSaleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletId = iprot.readString();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // BACKLIST_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.backlistFlag = iprot.readString();
              struct.setBacklistFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTicketId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, STR_TICKET_INFO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
      oprot.writeI64(struct.ticketId);
      oprot.writeFieldEnd();
      if (struct.ticketUid != null) {
        if (struct.isSetTicketUid()) {
          oprot.writeFieldBegin(TICKET_UID_FIELD_DESC);
          oprot.writeString(struct.ticketUid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chipId != null) {
        if (struct.isSetChipId()) {
          oprot.writeFieldBegin(CHIP_ID_FIELD_DESC);
          oprot.writeString(struct.chipId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chestId != null) {
        if (struct.isSetChestId()) {
          oprot.writeFieldBegin(CHEST_ID_FIELD_DESC);
          oprot.writeString(struct.chestId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.boxId != null) {
        if (struct.isSetBoxId()) {
          oprot.writeFieldBegin(BOX_ID_FIELD_DESC);
          oprot.writeString(struct.boxId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.batchId != null) {
        if (struct.isSetBatchId()) {
          oprot.writeFieldBegin(BATCH_ID_FIELD_DESC);
          oprot.writeString(struct.batchId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeId != null) {
        oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.ticketTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.stat != null) {
        oprot.writeFieldBegin(STAT_FIELD_DESC);
        oprot.writeString(struct.stat);
        oprot.writeFieldEnd();
      }
      if (struct.saleTime != null) {
        if (struct.isSetSaleTime()) {
          oprot.writeFieldBegin(SALE_TIME_FIELD_DESC);
          oprot.writeString(struct.saleTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.outletId != null) {
        if (struct.isSetOutletId()) {
          oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
          oprot.writeString(struct.outletId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.backlistFlag != null) {
        if (struct.isSetBacklistFlag()) {
          oprot.writeFieldBegin(BACKLIST_FLAG_FIELD_DESC);
          oprot.writeString(struct.backlistFlag);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class STR_TICKET_INFOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STR_TICKET_INFOTupleScheme getScheme() {
      return new STR_TICKET_INFOTupleScheme();
    }
  }

  private static class STR_TICKET_INFOTupleScheme extends org.apache.thrift.scheme.TupleScheme<STR_TICKET_INFO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, STR_TICKET_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.ticketId);
      oprot.writeString(struct.ticketTypeId);
      oprot.writeString(struct.stat);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTicketUid()) {
        optionals.set(0);
      }
      if (struct.isSetChipId()) {
        optionals.set(1);
      }
      if (struct.isSetChestId()) {
        optionals.set(2);
      }
      if (struct.isSetBoxId()) {
        optionals.set(3);
      }
      if (struct.isSetBatchId()) {
        optionals.set(4);
      }
      if (struct.isSetSaleTime()) {
        optionals.set(5);
      }
      if (struct.isSetOutletId()) {
        optionals.set(6);
      }
      if (struct.isSetOutletName()) {
        optionals.set(7);
      }
      if (struct.isSetBacklistFlag()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetTicketUid()) {
        oprot.writeString(struct.ticketUid);
      }
      if (struct.isSetChipId()) {
        oprot.writeString(struct.chipId);
      }
      if (struct.isSetChestId()) {
        oprot.writeString(struct.chestId);
      }
      if (struct.isSetBoxId()) {
        oprot.writeString(struct.boxId);
      }
      if (struct.isSetBatchId()) {
        oprot.writeString(struct.batchId);
      }
      if (struct.isSetSaleTime()) {
        oprot.writeString(struct.saleTime);
      }
      if (struct.isSetOutletId()) {
        oprot.writeString(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetBacklistFlag()) {
        oprot.writeString(struct.backlistFlag);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, STR_TICKET_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ticketId = iprot.readI64();
      struct.setTicketIdIsSet(true);
      struct.ticketTypeId = iprot.readString();
      struct.setTicketTypeIdIsSet(true);
      struct.stat = iprot.readString();
      struct.setStatIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.ticketUid = iprot.readString();
        struct.setTicketUidIsSet(true);
      }
      if (incoming.get(1)) {
        struct.chipId = iprot.readString();
        struct.setChipIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chestId = iprot.readString();
        struct.setChestIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.boxId = iprot.readString();
        struct.setBoxIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.batchId = iprot.readString();
        struct.setBatchIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.saleTime = iprot.readString();
        struct.setSaleTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.outletId = iprot.readString();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.backlistFlag = iprot.readString();
        struct.setBacklistFlagIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

