/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 参数表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class SYS_PAREMETER implements org.apache.thrift.TBase<SYS_PAREMETER, SYS_PAREMETER._Fields>, java.io.Serializable, Cloneable, Comparable<SYS_PAREMETER> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SYS_PAREMETER");

  private static final org.apache.thrift.protocol.TField PAREMETER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("paremeterId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PAREMETER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("paremeterName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAREMETER_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("paremeterVal", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField PAREMETER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("paremeterType", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SYS_PAREMETERStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SYS_PAREMETERTupleSchemeFactory();

  /**
   * 销售参数ID
   */
  public java.lang.String paremeterId; // required
  /**
   * 参数名称
   */
  public java.lang.String paremeterName; // required
  /**
   * 参数值
   */
  public java.lang.String paremeterVal; // required
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // optional
  /**
   * 操作时间
   */
  public long opeTime; // optional
  /**
   * 参数类型(0销售参数1非销售参数)
   */
  public java.lang.String paremeterType; // required
  /**
   * 版本号
   */
  public long versionNo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 销售参数ID
     */
    PAREMETER_ID((short)1, "paremeterId"),
    /**
     * 参数名称
     */
    PAREMETER_NAME((short)2, "paremeterName"),
    /**
     * 参数值
     */
    PAREMETER_VAL((short)3, "paremeterVal"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)4, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)5, "opeTime"),
    /**
     * 参数类型(0销售参数1非销售参数)
     */
    PAREMETER_TYPE((short)6, "paremeterType"),
    /**
     * 版本号
     */
    VERSION_NO((short)7, "versionNo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAREMETER_ID
          return PAREMETER_ID;
        case 2: // PAREMETER_NAME
          return PAREMETER_NAME;
        case 3: // PAREMETER_VAL
          return PAREMETER_VAL;
        case 4: // OPE_USER_ID
          return OPE_USER_ID;
        case 5: // OPE_TIME
          return OPE_TIME;
        case 6: // PAREMETER_TYPE
          return PAREMETER_TYPE;
        case 7: // VERSION_NO
          return VERSION_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPETIME_ISSET_ID = 0;
  private static final int __VERSIONNO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OPE_USER_ID,_Fields.OPE_TIME,_Fields.VERSION_NO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAREMETER_ID, new org.apache.thrift.meta_data.FieldMetaData("paremeterId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAREMETER_NAME, new org.apache.thrift.meta_data.FieldMetaData("paremeterName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAREMETER_VAL, new org.apache.thrift.meta_data.FieldMetaData("paremeterVal", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAREMETER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("paremeterType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SYS_PAREMETER.class, metaDataMap);
  }

  public SYS_PAREMETER() {
  }

  public SYS_PAREMETER(
    java.lang.String paremeterId,
    java.lang.String paremeterName,
    java.lang.String paremeterVal,
    java.lang.String paremeterType)
  {
    this();
    this.paremeterId = paremeterId;
    this.paremeterName = paremeterName;
    this.paremeterVal = paremeterVal;
    this.paremeterType = paremeterType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SYS_PAREMETER(SYS_PAREMETER other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetParemeterId()) {
      this.paremeterId = other.paremeterId;
    }
    if (other.isSetParemeterName()) {
      this.paremeterName = other.paremeterName;
    }
    if (other.isSetParemeterVal()) {
      this.paremeterVal = other.paremeterVal;
    }
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
    if (other.isSetParemeterType()) {
      this.paremeterType = other.paremeterType;
    }
    this.versionNo = other.versionNo;
  }

  public SYS_PAREMETER deepCopy() {
    return new SYS_PAREMETER(this);
  }

  @Override
  public void clear() {
    this.paremeterId = null;
    this.paremeterName = null;
    this.paremeterVal = null;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
    this.paremeterType = null;
    setVersionNoIsSet(false);
    this.versionNo = 0;
  }

  /**
   * 销售参数ID
   */
  public java.lang.String getParemeterId() {
    return this.paremeterId;
  }

  /**
   * 销售参数ID
   */
  public SYS_PAREMETER setParemeterId(java.lang.String paremeterId) {
    this.paremeterId = paremeterId;
    return this;
  }

  public void unsetParemeterId() {
    this.paremeterId = null;
  }

  /** Returns true if field paremeterId is set (has been assigned a value) and false otherwise */
  public boolean isSetParemeterId() {
    return this.paremeterId != null;
  }

  public void setParemeterIdIsSet(boolean value) {
    if (!value) {
      this.paremeterId = null;
    }
  }

  /**
   * 参数名称
   */
  public java.lang.String getParemeterName() {
    return this.paremeterName;
  }

  /**
   * 参数名称
   */
  public SYS_PAREMETER setParemeterName(java.lang.String paremeterName) {
    this.paremeterName = paremeterName;
    return this;
  }

  public void unsetParemeterName() {
    this.paremeterName = null;
  }

  /** Returns true if field paremeterName is set (has been assigned a value) and false otherwise */
  public boolean isSetParemeterName() {
    return this.paremeterName != null;
  }

  public void setParemeterNameIsSet(boolean value) {
    if (!value) {
      this.paremeterName = null;
    }
  }

  /**
   * 参数值
   */
  public java.lang.String getParemeterVal() {
    return this.paremeterVal;
  }

  /**
   * 参数值
   */
  public SYS_PAREMETER setParemeterVal(java.lang.String paremeterVal) {
    this.paremeterVal = paremeterVal;
    return this;
  }

  public void unsetParemeterVal() {
    this.paremeterVal = null;
  }

  /** Returns true if field paremeterVal is set (has been assigned a value) and false otherwise */
  public boolean isSetParemeterVal() {
    return this.paremeterVal != null;
  }

  public void setParemeterValIsSet(boolean value) {
    if (!value) {
      this.paremeterVal = null;
    }
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SYS_PAREMETER setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SYS_PAREMETER setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  /**
   * 参数类型(0销售参数1非销售参数)
   */
  public java.lang.String getParemeterType() {
    return this.paremeterType;
  }

  /**
   * 参数类型(0销售参数1非销售参数)
   */
  public SYS_PAREMETER setParemeterType(java.lang.String paremeterType) {
    this.paremeterType = paremeterType;
    return this;
  }

  public void unsetParemeterType() {
    this.paremeterType = null;
  }

  /** Returns true if field paremeterType is set (has been assigned a value) and false otherwise */
  public boolean isSetParemeterType() {
    return this.paremeterType != null;
  }

  public void setParemeterTypeIsSet(boolean value) {
    if (!value) {
      this.paremeterType = null;
    }
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SYS_PAREMETER setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PAREMETER_ID:
      if (value == null) {
        unsetParemeterId();
      } else {
        setParemeterId((java.lang.String)value);
      }
      break;

    case PAREMETER_NAME:
      if (value == null) {
        unsetParemeterName();
      } else {
        setParemeterName((java.lang.String)value);
      }
      break;

    case PAREMETER_VAL:
      if (value == null) {
        unsetParemeterVal();
      } else {
        setParemeterVal((java.lang.String)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    case PAREMETER_TYPE:
      if (value == null) {
        unsetParemeterType();
      } else {
        setParemeterType((java.lang.String)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAREMETER_ID:
      return getParemeterId();

    case PAREMETER_NAME:
      return getParemeterName();

    case PAREMETER_VAL:
      return getParemeterVal();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    case PAREMETER_TYPE:
      return getParemeterType();

    case VERSION_NO:
      return getVersionNo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAREMETER_ID:
      return isSetParemeterId();
    case PAREMETER_NAME:
      return isSetParemeterName();
    case PAREMETER_VAL:
      return isSetParemeterVal();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    case PAREMETER_TYPE:
      return isSetParemeterType();
    case VERSION_NO:
      return isSetVersionNo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SYS_PAREMETER)
      return this.equals((SYS_PAREMETER)that);
    return false;
  }

  public boolean equals(SYS_PAREMETER that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_paremeterId = true && this.isSetParemeterId();
    boolean that_present_paremeterId = true && that.isSetParemeterId();
    if (this_present_paremeterId || that_present_paremeterId) {
      if (!(this_present_paremeterId && that_present_paremeterId))
        return false;
      if (!this.paremeterId.equals(that.paremeterId))
        return false;
    }

    boolean this_present_paremeterName = true && this.isSetParemeterName();
    boolean that_present_paremeterName = true && that.isSetParemeterName();
    if (this_present_paremeterName || that_present_paremeterName) {
      if (!(this_present_paremeterName && that_present_paremeterName))
        return false;
      if (!this.paremeterName.equals(that.paremeterName))
        return false;
    }

    boolean this_present_paremeterVal = true && this.isSetParemeterVal();
    boolean that_present_paremeterVal = true && that.isSetParemeterVal();
    if (this_present_paremeterVal || that_present_paremeterVal) {
      if (!(this_present_paremeterVal && that_present_paremeterVal))
        return false;
      if (!this.paremeterVal.equals(that.paremeterVal))
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true && this.isSetOpeTime();
    boolean that_present_opeTime = true && that.isSetOpeTime();
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    boolean this_present_paremeterType = true && this.isSetParemeterType();
    boolean that_present_paremeterType = true && that.isSetParemeterType();
    if (this_present_paremeterType || that_present_paremeterType) {
      if (!(this_present_paremeterType && that_present_paremeterType))
        return false;
      if (!this.paremeterType.equals(that.paremeterType))
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetParemeterId()) ? 131071 : 524287);
    if (isSetParemeterId())
      hashCode = hashCode * 8191 + paremeterId.hashCode();

    hashCode = hashCode * 8191 + ((isSetParemeterName()) ? 131071 : 524287);
    if (isSetParemeterName())
      hashCode = hashCode * 8191 + paremeterName.hashCode();

    hashCode = hashCode * 8191 + ((isSetParemeterVal()) ? 131071 : 524287);
    if (isSetParemeterVal())
      hashCode = hashCode * 8191 + paremeterVal.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeTime()) ? 131071 : 524287);
    if (isSetOpeTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    hashCode = hashCode * 8191 + ((isSetParemeterType()) ? 131071 : 524287);
    if (isSetParemeterType())
      hashCode = hashCode * 8191 + paremeterType.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    return hashCode;
  }

  @Override
  public int compareTo(SYS_PAREMETER other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetParemeterId()).compareTo(other.isSetParemeterId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParemeterId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paremeterId, other.paremeterId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParemeterName()).compareTo(other.isSetParemeterName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParemeterName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paremeterName, other.paremeterName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParemeterVal()).compareTo(other.isSetParemeterVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParemeterVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paremeterVal, other.paremeterVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetParemeterType()).compareTo(other.isSetParemeterType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetParemeterType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paremeterType, other.paremeterType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SYS_PAREMETER(");
    boolean first = true;

    sb.append("paremeterId:");
    if (this.paremeterId == null) {
      sb.append("null");
    } else {
      sb.append(this.paremeterId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paremeterName:");
    if (this.paremeterName == null) {
      sb.append("null");
    } else {
      sb.append(this.paremeterName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("paremeterVal:");
    if (this.paremeterVal == null) {
      sb.append("null");
    } else {
      sb.append(this.paremeterVal);
    }
    first = false;
    if (isSetOpeUserId()) {
      if (!first) sb.append(", ");
      sb.append("opeUserId:");
      if (this.opeUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.opeUserId);
      }
      first = false;
    }
    if (isSetOpeTime()) {
      if (!first) sb.append(", ");
      sb.append("opeTime:");
      sb.append(this.opeTime);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("paremeterType:");
    if (this.paremeterType == null) {
      sb.append("null");
    } else {
      sb.append(this.paremeterType);
    }
    first = false;
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (paremeterId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'paremeterId' was not present! Struct: " + toString());
    }
    if (paremeterName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'paremeterName' was not present! Struct: " + toString());
    }
    if (paremeterVal == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'paremeterVal' was not present! Struct: " + toString());
    }
    if (paremeterType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'paremeterType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SYS_PAREMETERStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_PAREMETERStandardScheme getScheme() {
      return new SYS_PAREMETERStandardScheme();
    }
  }

  private static class SYS_PAREMETERStandardScheme extends org.apache.thrift.scheme.StandardScheme<SYS_PAREMETER> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SYS_PAREMETER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAREMETER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paremeterId = iprot.readString();
              struct.setParemeterIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PAREMETER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paremeterName = iprot.readString();
              struct.setParemeterNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAREMETER_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paremeterVal = iprot.readString();
              struct.setParemeterValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAREMETER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paremeterType = iprot.readString();
              struct.setParemeterTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SYS_PAREMETER struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.paremeterId != null) {
        oprot.writeFieldBegin(PAREMETER_ID_FIELD_DESC);
        oprot.writeString(struct.paremeterId);
        oprot.writeFieldEnd();
      }
      if (struct.paremeterName != null) {
        oprot.writeFieldBegin(PAREMETER_NAME_FIELD_DESC);
        oprot.writeString(struct.paremeterName);
        oprot.writeFieldEnd();
      }
      if (struct.paremeterVal != null) {
        oprot.writeFieldBegin(PAREMETER_VAL_FIELD_DESC);
        oprot.writeString(struct.paremeterVal);
        oprot.writeFieldEnd();
      }
      if (struct.opeUserId != null) {
        if (struct.isSetOpeUserId()) {
          oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.opeUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpeTime()) {
        oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
        oprot.writeI64(struct.opeTime);
        oprot.writeFieldEnd();
      }
      if (struct.paremeterType != null) {
        oprot.writeFieldBegin(PAREMETER_TYPE_FIELD_DESC);
        oprot.writeString(struct.paremeterType);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SYS_PAREMETERTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_PAREMETERTupleScheme getScheme() {
      return new SYS_PAREMETERTupleScheme();
    }
  }

  private static class SYS_PAREMETERTupleScheme extends org.apache.thrift.scheme.TupleScheme<SYS_PAREMETER> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SYS_PAREMETER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.paremeterId);
      oprot.writeString(struct.paremeterName);
      oprot.writeString(struct.paremeterVal);
      oprot.writeString(struct.paremeterType);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOpeUserId()) {
        optionals.set(0);
      }
      if (struct.isSetOpeTime()) {
        optionals.set(1);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOpeUserId()) {
        oprot.writeString(struct.opeUserId);
      }
      if (struct.isSetOpeTime()) {
        oprot.writeI64(struct.opeTime);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SYS_PAREMETER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.paremeterId = iprot.readString();
      struct.setParemeterIdIsSet(true);
      struct.paremeterName = iprot.readString();
      struct.setParemeterNameIsSet(true);
      struct.paremeterVal = iprot.readString();
      struct.setParemeterValIsSet(true);
      struct.paremeterType = iprot.readString();
      struct.setParemeterTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.opeUserId = iprot.readString();
        struct.setOpeUserIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.opeTime = iprot.readI64();
        struct.setOpeTimeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

