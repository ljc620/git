/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 网点员工销售统计表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class RPT_SALE_DATA_USER implements org.apache.thrift.TBase<RPT_SALE_DATA_USER, RPT_SALE_DATA_USER._Fields>, java.io.Serializable, Cloneable, Comparable<RPT_SALE_DATA_USER> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RPT_SALE_DATA_USER");

  private static final org.apache.thrift.protocol.TField RTP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtpDate", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField PAY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("payName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeName", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField SALE_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("saleNum", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SALE_SUM_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("saleSumAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RPT_SALE_DATA_USERStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RPT_SALE_DATA_USERTupleSchemeFactory();

  /**
   * 交易日期
   */
  public long rtpDate; // optional
  /**
   * 网点编号
   */
  public long outletId; // optional
  /**
   * 网点名称
   */
  public java.lang.String outletName; // optional
  /**
   * 销售员号
   */
  public java.lang.String userId; // optional
  /**
   * 销售员名称
   */
  public java.lang.String userName; // optional
  /**
   * 支付方式编码
   */
  public java.lang.String payName; // optional
  /**
   * 支付方式名称
   */
  public java.lang.String payType; // optional
  /**
   * 票种名称
   */
  public java.lang.String ticketTypeId; // optional
  /**
   * 票种编码
   */
  public java.lang.String ticketTypeName; // optional
  /**
   * 销售数量
   */
  public long saleNum; // optional
  /**
   * 销售总金额
   */
  public double saleSumAmt; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 交易日期
     */
    RTP_DATE((short)1, "rtpDate"),
    /**
     * 网点编号
     */
    OUTLET_ID((short)2, "outletId"),
    /**
     * 网点名称
     */
    OUTLET_NAME((short)3, "outletName"),
    /**
     * 销售员号
     */
    USER_ID((short)4, "userId"),
    /**
     * 销售员名称
     */
    USER_NAME((short)5, "userName"),
    /**
     * 支付方式编码
     */
    PAY_NAME((short)6, "payName"),
    /**
     * 支付方式名称
     */
    PAY_TYPE((short)7, "payType"),
    /**
     * 票种名称
     */
    TICKET_TYPE_ID((short)8, "ticketTypeId"),
    /**
     * 票种编码
     */
    TICKET_TYPE_NAME((short)9, "ticketTypeName"),
    /**
     * 销售数量
     */
    SALE_NUM((short)10, "saleNum"),
    /**
     * 销售总金额
     */
    SALE_SUM_AMT((short)11, "saleSumAmt");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RTP_DATE
          return RTP_DATE;
        case 2: // OUTLET_ID
          return OUTLET_ID;
        case 3: // OUTLET_NAME
          return OUTLET_NAME;
        case 4: // USER_ID
          return USER_ID;
        case 5: // USER_NAME
          return USER_NAME;
        case 6: // PAY_NAME
          return PAY_NAME;
        case 7: // PAY_TYPE
          return PAY_TYPE;
        case 8: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 9: // TICKET_TYPE_NAME
          return TICKET_TYPE_NAME;
        case 10: // SALE_NUM
          return SALE_NUM;
        case 11: // SALE_SUM_AMT
          return SALE_SUM_AMT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RTPDATE_ISSET_ID = 0;
  private static final int __OUTLETID_ISSET_ID = 1;
  private static final int __SALENUM_ISSET_ID = 2;
  private static final int __SALESUMAMT_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RTP_DATE,_Fields.OUTLET_ID,_Fields.OUTLET_NAME,_Fields.USER_ID,_Fields.USER_NAME,_Fields.PAY_NAME,_Fields.PAY_TYPE,_Fields.TICKET_TYPE_ID,_Fields.TICKET_TYPE_NAME,_Fields.SALE_NUM,_Fields.SALE_SUM_AMT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RTP_DATE, new org.apache.thrift.meta_data.FieldMetaData("rtpDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_NAME, new org.apache.thrift.meta_data.FieldMetaData("payName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_NUM, new org.apache.thrift.meta_data.FieldMetaData("saleNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SALE_SUM_AMT, new org.apache.thrift.meta_data.FieldMetaData("saleSumAmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RPT_SALE_DATA_USER.class, metaDataMap);
  }

  public RPT_SALE_DATA_USER() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RPT_SALE_DATA_USER(RPT_SALE_DATA_USER other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rtpDate = other.rtpDate;
    this.outletId = other.outletId;
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetPayName()) {
      this.payName = other.payName;
    }
    if (other.isSetPayType()) {
      this.payType = other.payType;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetTicketTypeName()) {
      this.ticketTypeName = other.ticketTypeName;
    }
    this.saleNum = other.saleNum;
    this.saleSumAmt = other.saleSumAmt;
  }

  public RPT_SALE_DATA_USER deepCopy() {
    return new RPT_SALE_DATA_USER(this);
  }

  @Override
  public void clear() {
    setRtpDateIsSet(false);
    this.rtpDate = 0;
    setOutletIdIsSet(false);
    this.outletId = 0;
    this.outletName = null;
    this.userId = null;
    this.userName = null;
    this.payName = null;
    this.payType = null;
    this.ticketTypeId = null;
    this.ticketTypeName = null;
    setSaleNumIsSet(false);
    this.saleNum = 0;
    setSaleSumAmtIsSet(false);
    this.saleSumAmt = 0.0;
  }

  /**
   * 交易日期
   */
  public long getRtpDate() {
    return this.rtpDate;
  }

  /**
   * 交易日期
   */
  public RPT_SALE_DATA_USER setRtpDate(long rtpDate) {
    this.rtpDate = rtpDate;
    setRtpDateIsSet(true);
    return this;
  }

  public void unsetRtpDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RTPDATE_ISSET_ID);
  }

  /** Returns true if field rtpDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRtpDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RTPDATE_ISSET_ID);
  }

  public void setRtpDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RTPDATE_ISSET_ID, value);
  }

  /**
   * 网点编号
   */
  public long getOutletId() {
    return this.outletId;
  }

  /**
   * 网点编号
   */
  public RPT_SALE_DATA_USER setOutletId(long outletId) {
    this.outletId = outletId;
    setOutletIdIsSet(true);
    return this;
  }

  public void unsetOutletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  public void setOutletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLETID_ISSET_ID, value);
  }

  /**
   * 网点名称
   */
  public java.lang.String getOutletName() {
    return this.outletName;
  }

  /**
   * 网点名称
   */
  public RPT_SALE_DATA_USER setOutletName(java.lang.String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 销售员号
   */
  public java.lang.String getUserId() {
    return this.userId;
  }

  /**
   * 销售员号
   */
  public RPT_SALE_DATA_USER setUserId(java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  /**
   * 销售员名称
   */
  public java.lang.String getUserName() {
    return this.userName;
  }

  /**
   * 销售员名称
   */
  public RPT_SALE_DATA_USER setUserName(java.lang.String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  /**
   * 支付方式编码
   */
  public java.lang.String getPayName() {
    return this.payName;
  }

  /**
   * 支付方式编码
   */
  public RPT_SALE_DATA_USER setPayName(java.lang.String payName) {
    this.payName = payName;
    return this;
  }

  public void unsetPayName() {
    this.payName = null;
  }

  /** Returns true if field payName is set (has been assigned a value) and false otherwise */
  public boolean isSetPayName() {
    return this.payName != null;
  }

  public void setPayNameIsSet(boolean value) {
    if (!value) {
      this.payName = null;
    }
  }

  /**
   * 支付方式名称
   */
  public java.lang.String getPayType() {
    return this.payType;
  }

  /**
   * 支付方式名称
   */
  public RPT_SALE_DATA_USER setPayType(java.lang.String payType) {
    this.payType = payType;
    return this;
  }

  public void unsetPayType() {
    this.payType = null;
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return this.payType != null;
  }

  public void setPayTypeIsSet(boolean value) {
    if (!value) {
      this.payType = null;
    }
  }

  /**
   * 票种名称
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种名称
   */
  public RPT_SALE_DATA_USER setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 票种编码
   */
  public java.lang.String getTicketTypeName() {
    return this.ticketTypeName;
  }

  /**
   * 票种编码
   */
  public RPT_SALE_DATA_USER setTicketTypeName(java.lang.String ticketTypeName) {
    this.ticketTypeName = ticketTypeName;
    return this;
  }

  public void unsetTicketTypeName() {
    this.ticketTypeName = null;
  }

  /** Returns true if field ticketTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeName() {
    return this.ticketTypeName != null;
  }

  public void setTicketTypeNameIsSet(boolean value) {
    if (!value) {
      this.ticketTypeName = null;
    }
  }

  /**
   * 销售数量
   */
  public long getSaleNum() {
    return this.saleNum;
  }

  /**
   * 销售数量
   */
  public RPT_SALE_DATA_USER setSaleNum(long saleNum) {
    this.saleNum = saleNum;
    setSaleNumIsSet(true);
    return this;
  }

  public void unsetSaleNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALENUM_ISSET_ID);
  }

  /** Returns true if field saleNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALENUM_ISSET_ID);
  }

  public void setSaleNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALENUM_ISSET_ID, value);
  }

  /**
   * 销售总金额
   */
  public double getSaleSumAmt() {
    return this.saleSumAmt;
  }

  /**
   * 销售总金额
   */
  public RPT_SALE_DATA_USER setSaleSumAmt(double saleSumAmt) {
    this.saleSumAmt = saleSumAmt;
    setSaleSumAmtIsSet(true);
    return this;
  }

  public void unsetSaleSumAmt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALESUMAMT_ISSET_ID);
  }

  /** Returns true if field saleSumAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleSumAmt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALESUMAMT_ISSET_ID);
  }

  public void setSaleSumAmtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALESUMAMT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RTP_DATE:
      if (value == null) {
        unsetRtpDate();
      } else {
        setRtpDate((java.lang.Long)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((java.lang.Long)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((java.lang.String)value);
      }
      break;

    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((java.lang.String)value);
      }
      break;

    case PAY_NAME:
      if (value == null) {
        unsetPayName();
      } else {
        setPayName((java.lang.String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_NAME:
      if (value == null) {
        unsetTicketTypeName();
      } else {
        setTicketTypeName((java.lang.String)value);
      }
      break;

    case SALE_NUM:
      if (value == null) {
        unsetSaleNum();
      } else {
        setSaleNum((java.lang.Long)value);
      }
      break;

    case SALE_SUM_AMT:
      if (value == null) {
        unsetSaleSumAmt();
      } else {
        setSaleSumAmt((java.lang.Double)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RTP_DATE:
      return getRtpDate();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case USER_ID:
      return getUserId();

    case USER_NAME:
      return getUserName();

    case PAY_NAME:
      return getPayName();

    case PAY_TYPE:
      return getPayType();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_TYPE_NAME:
      return getTicketTypeName();

    case SALE_NUM:
      return getSaleNum();

    case SALE_SUM_AMT:
      return getSaleSumAmt();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RTP_DATE:
      return isSetRtpDate();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case PAY_NAME:
      return isSetPayName();
    case PAY_TYPE:
      return isSetPayType();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_TYPE_NAME:
      return isSetTicketTypeName();
    case SALE_NUM:
      return isSetSaleNum();
    case SALE_SUM_AMT:
      return isSetSaleSumAmt();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RPT_SALE_DATA_USER)
      return this.equals((RPT_SALE_DATA_USER)that);
    return false;
  }

  public boolean equals(RPT_SALE_DATA_USER that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rtpDate = true && this.isSetRtpDate();
    boolean that_present_rtpDate = true && that.isSetRtpDate();
    if (this_present_rtpDate || that_present_rtpDate) {
      if (!(this_present_rtpDate && that_present_rtpDate))
        return false;
      if (this.rtpDate != that.rtpDate)
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (this.outletId != that.outletId)
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_payName = true && this.isSetPayName();
    boolean that_present_payName = true && that.isSetPayName();
    if (this_present_payName || that_present_payName) {
      if (!(this_present_payName && that_present_payName))
        return false;
      if (!this.payName.equals(that.payName))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (!this.payType.equals(that.payType))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketTypeName = true && this.isSetTicketTypeName();
    boolean that_present_ticketTypeName = true && that.isSetTicketTypeName();
    if (this_present_ticketTypeName || that_present_ticketTypeName) {
      if (!(this_present_ticketTypeName && that_present_ticketTypeName))
        return false;
      if (!this.ticketTypeName.equals(that.ticketTypeName))
        return false;
    }

    boolean this_present_saleNum = true && this.isSetSaleNum();
    boolean that_present_saleNum = true && that.isSetSaleNum();
    if (this_present_saleNum || that_present_saleNum) {
      if (!(this_present_saleNum && that_present_saleNum))
        return false;
      if (this.saleNum != that.saleNum)
        return false;
    }

    boolean this_present_saleSumAmt = true && this.isSetSaleSumAmt();
    boolean that_present_saleSumAmt = true && that.isSetSaleSumAmt();
    if (this_present_saleSumAmt || that_present_saleSumAmt) {
      if (!(this_present_saleSumAmt && that_present_saleSumAmt))
        return false;
      if (this.saleSumAmt != that.saleSumAmt)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRtpDate()) ? 131071 : 524287);
    if (isSetRtpDate())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rtpDate);

    hashCode = hashCode * 8191 + ((isSetOutletId()) ? 131071 : 524287);
    if (isSetOutletId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outletId);

    hashCode = hashCode * 8191 + ((isSetOutletName()) ? 131071 : 524287);
    if (isSetOutletName())
      hashCode = hashCode * 8191 + outletName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
    if (isSetUserName())
      hashCode = hashCode * 8191 + userName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayName()) ? 131071 : 524287);
    if (isSetPayName())
      hashCode = hashCode * 8191 + payName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayType()) ? 131071 : 524287);
    if (isSetPayType())
      hashCode = hashCode * 8191 + payType.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeName()) ? 131071 : 524287);
    if (isSetTicketTypeName())
      hashCode = hashCode * 8191 + ticketTypeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSaleNum()) ? 131071 : 524287);
    if (isSetSaleNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(saleNum);

    hashCode = hashCode * 8191 + ((isSetSaleSumAmt()) ? 131071 : 524287);
    if (isSetSaleSumAmt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(saleSumAmt);

    return hashCode;
  }

  @Override
  public int compareTo(RPT_SALE_DATA_USER other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRtpDate()).compareTo(other.isSetRtpDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtpDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtpDate, other.rtpDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayName()).compareTo(other.isSetPayName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payName, other.payName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeName()).compareTo(other.isSetTicketTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeName, other.ticketTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleNum()).compareTo(other.isSetSaleNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleNum, other.saleNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleSumAmt()).compareTo(other.isSetSaleSumAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleSumAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleSumAmt, other.saleSumAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RPT_SALE_DATA_USER(");
    boolean first = true;

    if (isSetRtpDate()) {
      sb.append("rtpDate:");
      sb.append(this.rtpDate);
      first = false;
    }
    if (isSetOutletId()) {
      if (!first) sb.append(", ");
      sb.append("outletId:");
      sb.append(this.outletId);
      first = false;
    }
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetUserId()) {
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
    }
    if (isSetUserName()) {
      if (!first) sb.append(", ");
      sb.append("userName:");
      if (this.userName == null) {
        sb.append("null");
      } else {
        sb.append(this.userName);
      }
      first = false;
    }
    if (isSetPayName()) {
      if (!first) sb.append(", ");
      sb.append("payName:");
      if (this.payName == null) {
        sb.append("null");
      } else {
        sb.append(this.payName);
      }
      first = false;
    }
    if (isSetPayType()) {
      if (!first) sb.append(", ");
      sb.append("payType:");
      if (this.payType == null) {
        sb.append("null");
      } else {
        sb.append(this.payType);
      }
      first = false;
    }
    if (isSetTicketTypeId()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeId:");
      if (this.ticketTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeId);
      }
      first = false;
    }
    if (isSetTicketTypeName()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeName:");
      if (this.ticketTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeName);
      }
      first = false;
    }
    if (isSetSaleNum()) {
      if (!first) sb.append(", ");
      sb.append("saleNum:");
      sb.append(this.saleNum);
      first = false;
    }
    if (isSetSaleSumAmt()) {
      if (!first) sb.append(", ");
      sb.append("saleSumAmt:");
      sb.append(this.saleSumAmt);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RPT_SALE_DATA_USERStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RPT_SALE_DATA_USERStandardScheme getScheme() {
      return new RPT_SALE_DATA_USERStandardScheme();
    }
  }

  private static class RPT_SALE_DATA_USERStandardScheme extends org.apache.thrift.scheme.StandardScheme<RPT_SALE_DATA_USER> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RPT_SALE_DATA_USER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RTP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rtpDate = iprot.readI64();
              struct.setRtpDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outletId = iprot.readI64();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // PAY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payName = iprot.readString();
              struct.setPayNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payType = iprot.readString();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // TICKET_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeName = iprot.readString();
              struct.setTicketTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SALE_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.saleNum = iprot.readI64();
              struct.setSaleNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SALE_SUM_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.saleSumAmt = iprot.readDouble();
              struct.setSaleSumAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RPT_SALE_DATA_USER struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRtpDate()) {
        oprot.writeFieldBegin(RTP_DATE_FIELD_DESC);
        oprot.writeI64(struct.rtpDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutletId()) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userId != null) {
        if (struct.isSetUserId()) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.userName != null) {
        if (struct.isSetUserName()) {
          oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
          oprot.writeString(struct.userName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payName != null) {
        if (struct.isSetPayName()) {
          oprot.writeFieldBegin(PAY_NAME_FIELD_DESC);
          oprot.writeString(struct.payName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payType != null) {
        if (struct.isSetPayType()) {
          oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.payType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeId != null) {
        if (struct.isSetTicketTypeId()) {
          oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.ticketTypeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeName != null) {
        if (struct.isSetTicketTypeName()) {
          oprot.writeFieldBegin(TICKET_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.ticketTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetSaleNum()) {
        oprot.writeFieldBegin(SALE_NUM_FIELD_DESC);
        oprot.writeI64(struct.saleNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaleSumAmt()) {
        oprot.writeFieldBegin(SALE_SUM_AMT_FIELD_DESC);
        oprot.writeDouble(struct.saleSumAmt);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RPT_SALE_DATA_USERTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RPT_SALE_DATA_USERTupleScheme getScheme() {
      return new RPT_SALE_DATA_USERTupleScheme();
    }
  }

  private static class RPT_SALE_DATA_USERTupleScheme extends org.apache.thrift.scheme.TupleScheme<RPT_SALE_DATA_USER> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RPT_SALE_DATA_USER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRtpDate()) {
        optionals.set(0);
      }
      if (struct.isSetOutletId()) {
        optionals.set(1);
      }
      if (struct.isSetOutletName()) {
        optionals.set(2);
      }
      if (struct.isSetUserId()) {
        optionals.set(3);
      }
      if (struct.isSetUserName()) {
        optionals.set(4);
      }
      if (struct.isSetPayName()) {
        optionals.set(5);
      }
      if (struct.isSetPayType()) {
        optionals.set(6);
      }
      if (struct.isSetTicketTypeId()) {
        optionals.set(7);
      }
      if (struct.isSetTicketTypeName()) {
        optionals.set(8);
      }
      if (struct.isSetSaleNum()) {
        optionals.set(9);
      }
      if (struct.isSetSaleSumAmt()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRtpDate()) {
        oprot.writeI64(struct.rtpDate);
      }
      if (struct.isSetOutletId()) {
        oprot.writeI64(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetUserId()) {
        oprot.writeString(struct.userId);
      }
      if (struct.isSetUserName()) {
        oprot.writeString(struct.userName);
      }
      if (struct.isSetPayName()) {
        oprot.writeString(struct.payName);
      }
      if (struct.isSetPayType()) {
        oprot.writeString(struct.payType);
      }
      if (struct.isSetTicketTypeId()) {
        oprot.writeString(struct.ticketTypeId);
      }
      if (struct.isSetTicketTypeName()) {
        oprot.writeString(struct.ticketTypeName);
      }
      if (struct.isSetSaleNum()) {
        oprot.writeI64(struct.saleNum);
      }
      if (struct.isSetSaleSumAmt()) {
        oprot.writeDouble(struct.saleSumAmt);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RPT_SALE_DATA_USER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.rtpDate = iprot.readI64();
        struct.setRtpDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.outletId = iprot.readI64();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.userId = iprot.readString();
        struct.setUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.userName = iprot.readString();
        struct.setUserNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.payName = iprot.readString();
        struct.setPayNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.payType = iprot.readString();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.ticketTypeId = iprot.readString();
        struct.setTicketTypeIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.ticketTypeName = iprot.readString();
        struct.setTicketTypeNameIsSet(true);
      }
      if (incoming.get(9)) {
        struct.saleNum = iprot.readI64();
        struct.setSaleNumIsSet(true);
      }
      if (incoming.get(10)) {
        struct.saleSumAmt = iprot.readDouble();
        struct.setSaleSumAmtIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

