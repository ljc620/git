/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 废票明细表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class USELESS_TICKET_DETAIL implements org.apache.thrift.TBase<USELESS_TICKET_DETAIL, USELESS_TICKET_DETAIL._Fields>, java.io.Serializable, Cloneable, Comparable<USELESS_TICKET_DETAIL> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("USELESS_TICKET_DETAIL");

  private static final org.apache.thrift.protocol.TField USELESS_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("uselessTime", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField USELESS_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("uselessUserId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField USELESS_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("uselessUserName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField USELESS_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("uselessReason", org.apache.thrift.protocol.TType.STRING, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new USELESS_TICKET_DETAILStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new USELESS_TICKET_DETAILTupleSchemeFactory();

  /**
   * 作废时间
   */
  public long uselessTime; // optional
  /**
   * 票号
   */
  public long ticketId; // optional
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // optional
  /**
   * 票种名称
   */
  public java.lang.String ticketTypeName; // optional
  /**
   * 网点编号
   */
  public long outletId; // optional
  /**
   * 网点名称
   */
  public java.lang.String outletName; // optional
  /**
   * 作废人编号
   */
  public java.lang.String uselessUserId; // optional
  /**
   * 作废人名称
   */
  public java.lang.String uselessUserName; // optional
  /**
   * 作废原因
   */
  public java.lang.String uselessReason; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 作废时间
     */
    USELESS_TIME((short)1, "uselessTime"),
    /**
     * 票号
     */
    TICKET_ID((short)2, "ticketId"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)3, "ticketTypeId"),
    /**
     * 票种名称
     */
    TICKET_TYPE_NAME((short)4, "ticketTypeName"),
    /**
     * 网点编号
     */
    OUTLET_ID((short)5, "outletId"),
    /**
     * 网点名称
     */
    OUTLET_NAME((short)6, "outletName"),
    /**
     * 作废人编号
     */
    USELESS_USER_ID((short)7, "uselessUserId"),
    /**
     * 作废人名称
     */
    USELESS_USER_NAME((short)8, "uselessUserName"),
    /**
     * 作废原因
     */
    USELESS_REASON((short)9, "uselessReason");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USELESS_TIME
          return USELESS_TIME;
        case 2: // TICKET_ID
          return TICKET_ID;
        case 3: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 4: // TICKET_TYPE_NAME
          return TICKET_TYPE_NAME;
        case 5: // OUTLET_ID
          return OUTLET_ID;
        case 6: // OUTLET_NAME
          return OUTLET_NAME;
        case 7: // USELESS_USER_ID
          return USELESS_USER_ID;
        case 8: // USELESS_USER_NAME
          return USELESS_USER_NAME;
        case 9: // USELESS_REASON
          return USELESS_REASON;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __USELESSTIME_ISSET_ID = 0;
  private static final int __TICKETID_ISSET_ID = 1;
  private static final int __OUTLETID_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.USELESS_TIME,_Fields.TICKET_ID,_Fields.TICKET_TYPE_ID,_Fields.TICKET_TYPE_NAME,_Fields.OUTLET_ID,_Fields.OUTLET_NAME,_Fields.USELESS_USER_ID,_Fields.USELESS_USER_NAME,_Fields.USELESS_REASON};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USELESS_TIME, new org.apache.thrift.meta_data.FieldMetaData("uselessTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USELESS_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("uselessUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USELESS_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("uselessUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USELESS_REASON, new org.apache.thrift.meta_data.FieldMetaData("uselessReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(USELESS_TICKET_DETAIL.class, metaDataMap);
  }

  public USELESS_TICKET_DETAIL() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public USELESS_TICKET_DETAIL(USELESS_TICKET_DETAIL other) {
    __isset_bitfield = other.__isset_bitfield;
    this.uselessTime = other.uselessTime;
    this.ticketId = other.ticketId;
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetTicketTypeName()) {
      this.ticketTypeName = other.ticketTypeName;
    }
    this.outletId = other.outletId;
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetUselessUserId()) {
      this.uselessUserId = other.uselessUserId;
    }
    if (other.isSetUselessUserName()) {
      this.uselessUserName = other.uselessUserName;
    }
    if (other.isSetUselessReason()) {
      this.uselessReason = other.uselessReason;
    }
  }

  public USELESS_TICKET_DETAIL deepCopy() {
    return new USELESS_TICKET_DETAIL(this);
  }

  @Override
  public void clear() {
    setUselessTimeIsSet(false);
    this.uselessTime = 0;
    setTicketIdIsSet(false);
    this.ticketId = 0;
    this.ticketTypeId = null;
    this.ticketTypeName = null;
    setOutletIdIsSet(false);
    this.outletId = 0;
    this.outletName = null;
    this.uselessUserId = null;
    this.uselessUserName = null;
    this.uselessReason = null;
  }

  /**
   * 作废时间
   */
  public long getUselessTime() {
    return this.uselessTime;
  }

  /**
   * 作废时间
   */
  public USELESS_TICKET_DETAIL setUselessTime(long uselessTime) {
    this.uselessTime = uselessTime;
    setUselessTimeIsSet(true);
    return this;
  }

  public void unsetUselessTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USELESSTIME_ISSET_ID);
  }

  /** Returns true if field uselessTime is set (has been assigned a value) and false otherwise */
  public boolean isSetUselessTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USELESSTIME_ISSET_ID);
  }

  public void setUselessTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USELESSTIME_ISSET_ID, value);
  }

  /**
   * 票号
   */
  public long getTicketId() {
    return this.ticketId;
  }

  /**
   * 票号
   */
  public USELESS_TICKET_DETAIL setTicketId(long ticketId) {
    this.ticketId = ticketId;
    setTicketIdIsSet(true);
    return this;
  }

  public void unsetTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  public void setTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKETID_ISSET_ID, value);
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public USELESS_TICKET_DETAIL setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 票种名称
   */
  public java.lang.String getTicketTypeName() {
    return this.ticketTypeName;
  }

  /**
   * 票种名称
   */
  public USELESS_TICKET_DETAIL setTicketTypeName(java.lang.String ticketTypeName) {
    this.ticketTypeName = ticketTypeName;
    return this;
  }

  public void unsetTicketTypeName() {
    this.ticketTypeName = null;
  }

  /** Returns true if field ticketTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeName() {
    return this.ticketTypeName != null;
  }

  public void setTicketTypeNameIsSet(boolean value) {
    if (!value) {
      this.ticketTypeName = null;
    }
  }

  /**
   * 网点编号
   */
  public long getOutletId() {
    return this.outletId;
  }

  /**
   * 网点编号
   */
  public USELESS_TICKET_DETAIL setOutletId(long outletId) {
    this.outletId = outletId;
    setOutletIdIsSet(true);
    return this;
  }

  public void unsetOutletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  public void setOutletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLETID_ISSET_ID, value);
  }

  /**
   * 网点名称
   */
  public java.lang.String getOutletName() {
    return this.outletName;
  }

  /**
   * 网点名称
   */
  public USELESS_TICKET_DETAIL setOutletName(java.lang.String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 作废人编号
   */
  public java.lang.String getUselessUserId() {
    return this.uselessUserId;
  }

  /**
   * 作废人编号
   */
  public USELESS_TICKET_DETAIL setUselessUserId(java.lang.String uselessUserId) {
    this.uselessUserId = uselessUserId;
    return this;
  }

  public void unsetUselessUserId() {
    this.uselessUserId = null;
  }

  /** Returns true if field uselessUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetUselessUserId() {
    return this.uselessUserId != null;
  }

  public void setUselessUserIdIsSet(boolean value) {
    if (!value) {
      this.uselessUserId = null;
    }
  }

  /**
   * 作废人名称
   */
  public java.lang.String getUselessUserName() {
    return this.uselessUserName;
  }

  /**
   * 作废人名称
   */
  public USELESS_TICKET_DETAIL setUselessUserName(java.lang.String uselessUserName) {
    this.uselessUserName = uselessUserName;
    return this;
  }

  public void unsetUselessUserName() {
    this.uselessUserName = null;
  }

  /** Returns true if field uselessUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetUselessUserName() {
    return this.uselessUserName != null;
  }

  public void setUselessUserNameIsSet(boolean value) {
    if (!value) {
      this.uselessUserName = null;
    }
  }

  /**
   * 作废原因
   */
  public java.lang.String getUselessReason() {
    return this.uselessReason;
  }

  /**
   * 作废原因
   */
  public USELESS_TICKET_DETAIL setUselessReason(java.lang.String uselessReason) {
    this.uselessReason = uselessReason;
    return this;
  }

  public void unsetUselessReason() {
    this.uselessReason = null;
  }

  /** Returns true if field uselessReason is set (has been assigned a value) and false otherwise */
  public boolean isSetUselessReason() {
    return this.uselessReason != null;
  }

  public void setUselessReasonIsSet(boolean value) {
    if (!value) {
      this.uselessReason = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USELESS_TIME:
      if (value == null) {
        unsetUselessTime();
      } else {
        setUselessTime((java.lang.Long)value);
      }
      break;

    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((java.lang.Long)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_NAME:
      if (value == null) {
        unsetTicketTypeName();
      } else {
        setTicketTypeName((java.lang.String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((java.lang.Long)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((java.lang.String)value);
      }
      break;

    case USELESS_USER_ID:
      if (value == null) {
        unsetUselessUserId();
      } else {
        setUselessUserId((java.lang.String)value);
      }
      break;

    case USELESS_USER_NAME:
      if (value == null) {
        unsetUselessUserName();
      } else {
        setUselessUserName((java.lang.String)value);
      }
      break;

    case USELESS_REASON:
      if (value == null) {
        unsetUselessReason();
      } else {
        setUselessReason((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USELESS_TIME:
      return getUselessTime();

    case TICKET_ID:
      return getTicketId();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_TYPE_NAME:
      return getTicketTypeName();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case USELESS_USER_ID:
      return getUselessUserId();

    case USELESS_USER_NAME:
      return getUselessUserName();

    case USELESS_REASON:
      return getUselessReason();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USELESS_TIME:
      return isSetUselessTime();
    case TICKET_ID:
      return isSetTicketId();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_TYPE_NAME:
      return isSetTicketTypeName();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case USELESS_USER_ID:
      return isSetUselessUserId();
    case USELESS_USER_NAME:
      return isSetUselessUserName();
    case USELESS_REASON:
      return isSetUselessReason();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof USELESS_TICKET_DETAIL)
      return this.equals((USELESS_TICKET_DETAIL)that);
    return false;
  }

  public boolean equals(USELESS_TICKET_DETAIL that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_uselessTime = true && this.isSetUselessTime();
    boolean that_present_uselessTime = true && that.isSetUselessTime();
    if (this_present_uselessTime || that_present_uselessTime) {
      if (!(this_present_uselessTime && that_present_uselessTime))
        return false;
      if (this.uselessTime != that.uselessTime)
        return false;
    }

    boolean this_present_ticketId = true && this.isSetTicketId();
    boolean that_present_ticketId = true && that.isSetTicketId();
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (this.ticketId != that.ticketId)
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketTypeName = true && this.isSetTicketTypeName();
    boolean that_present_ticketTypeName = true && that.isSetTicketTypeName();
    if (this_present_ticketTypeName || that_present_ticketTypeName) {
      if (!(this_present_ticketTypeName && that_present_ticketTypeName))
        return false;
      if (!this.ticketTypeName.equals(that.ticketTypeName))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (this.outletId != that.outletId)
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_uselessUserId = true && this.isSetUselessUserId();
    boolean that_present_uselessUserId = true && that.isSetUselessUserId();
    if (this_present_uselessUserId || that_present_uselessUserId) {
      if (!(this_present_uselessUserId && that_present_uselessUserId))
        return false;
      if (!this.uselessUserId.equals(that.uselessUserId))
        return false;
    }

    boolean this_present_uselessUserName = true && this.isSetUselessUserName();
    boolean that_present_uselessUserName = true && that.isSetUselessUserName();
    if (this_present_uselessUserName || that_present_uselessUserName) {
      if (!(this_present_uselessUserName && that_present_uselessUserName))
        return false;
      if (!this.uselessUserName.equals(that.uselessUserName))
        return false;
    }

    boolean this_present_uselessReason = true && this.isSetUselessReason();
    boolean that_present_uselessReason = true && that.isSetUselessReason();
    if (this_present_uselessReason || that_present_uselessReason) {
      if (!(this_present_uselessReason && that_present_uselessReason))
        return false;
      if (!this.uselessReason.equals(that.uselessReason))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUselessTime()) ? 131071 : 524287);
    if (isSetUselessTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uselessTime);

    hashCode = hashCode * 8191 + ((isSetTicketId()) ? 131071 : 524287);
    if (isSetTicketId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticketId);

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeName()) ? 131071 : 524287);
    if (isSetTicketTypeName())
      hashCode = hashCode * 8191 + ticketTypeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutletId()) ? 131071 : 524287);
    if (isSetOutletId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outletId);

    hashCode = hashCode * 8191 + ((isSetOutletName()) ? 131071 : 524287);
    if (isSetOutletName())
      hashCode = hashCode * 8191 + outletName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUselessUserId()) ? 131071 : 524287);
    if (isSetUselessUserId())
      hashCode = hashCode * 8191 + uselessUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUselessUserName()) ? 131071 : 524287);
    if (isSetUselessUserName())
      hashCode = hashCode * 8191 + uselessUserName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUselessReason()) ? 131071 : 524287);
    if (isSetUselessReason())
      hashCode = hashCode * 8191 + uselessReason.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(USELESS_TICKET_DETAIL other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUselessTime()).compareTo(other.isSetUselessTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUselessTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uselessTime, other.uselessTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeName()).compareTo(other.isSetTicketTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeName, other.ticketTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUselessUserId()).compareTo(other.isSetUselessUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUselessUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uselessUserId, other.uselessUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUselessUserName()).compareTo(other.isSetUselessUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUselessUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uselessUserName, other.uselessUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUselessReason()).compareTo(other.isSetUselessReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUselessReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uselessReason, other.uselessReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("USELESS_TICKET_DETAIL(");
    boolean first = true;

    if (isSetUselessTime()) {
      sb.append("uselessTime:");
      sb.append(this.uselessTime);
      first = false;
    }
    if (isSetTicketId()) {
      if (!first) sb.append(", ");
      sb.append("ticketId:");
      sb.append(this.ticketId);
      first = false;
    }
    if (isSetTicketTypeId()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeId:");
      if (this.ticketTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeId);
      }
      first = false;
    }
    if (isSetTicketTypeName()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeName:");
      if (this.ticketTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeName);
      }
      first = false;
    }
    if (isSetOutletId()) {
      if (!first) sb.append(", ");
      sb.append("outletId:");
      sb.append(this.outletId);
      first = false;
    }
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetUselessUserId()) {
      if (!first) sb.append(", ");
      sb.append("uselessUserId:");
      if (this.uselessUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.uselessUserId);
      }
      first = false;
    }
    if (isSetUselessUserName()) {
      if (!first) sb.append(", ");
      sb.append("uselessUserName:");
      if (this.uselessUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.uselessUserName);
      }
      first = false;
    }
    if (isSetUselessReason()) {
      if (!first) sb.append(", ");
      sb.append("uselessReason:");
      if (this.uselessReason == null) {
        sb.append("null");
      } else {
        sb.append(this.uselessReason);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class USELESS_TICKET_DETAILStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public USELESS_TICKET_DETAILStandardScheme getScheme() {
      return new USELESS_TICKET_DETAILStandardScheme();
    }
  }

  private static class USELESS_TICKET_DETAILStandardScheme extends org.apache.thrift.scheme.StandardScheme<USELESS_TICKET_DETAIL> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, USELESS_TICKET_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USELESS_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uselessTime = iprot.readI64();
              struct.setUselessTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketId = iprot.readI64();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeName = iprot.readString();
              struct.setTicketTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outletId = iprot.readI64();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // USELESS_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uselessUserId = iprot.readString();
              struct.setUselessUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // USELESS_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uselessUserName = iprot.readString();
              struct.setUselessUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USELESS_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uselessReason = iprot.readString();
              struct.setUselessReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, USELESS_TICKET_DETAIL struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetUselessTime()) {
        oprot.writeFieldBegin(USELESS_TIME_FIELD_DESC);
        oprot.writeI64(struct.uselessTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTicketId()) {
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeI64(struct.ticketId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketTypeId != null) {
        if (struct.isSetTicketTypeId()) {
          oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.ticketTypeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeName != null) {
        if (struct.isSetTicketTypeName()) {
          oprot.writeFieldBegin(TICKET_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.ticketTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutletId()) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uselessUserId != null) {
        if (struct.isSetUselessUserId()) {
          oprot.writeFieldBegin(USELESS_USER_ID_FIELD_DESC);
          oprot.writeString(struct.uselessUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uselessUserName != null) {
        if (struct.isSetUselessUserName()) {
          oprot.writeFieldBegin(USELESS_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.uselessUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uselessReason != null) {
        if (struct.isSetUselessReason()) {
          oprot.writeFieldBegin(USELESS_REASON_FIELD_DESC);
          oprot.writeString(struct.uselessReason);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class USELESS_TICKET_DETAILTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public USELESS_TICKET_DETAILTupleScheme getScheme() {
      return new USELESS_TICKET_DETAILTupleScheme();
    }
  }

  private static class USELESS_TICKET_DETAILTupleScheme extends org.apache.thrift.scheme.TupleScheme<USELESS_TICKET_DETAIL> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, USELESS_TICKET_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetUselessTime()) {
        optionals.set(0);
      }
      if (struct.isSetTicketId()) {
        optionals.set(1);
      }
      if (struct.isSetTicketTypeId()) {
        optionals.set(2);
      }
      if (struct.isSetTicketTypeName()) {
        optionals.set(3);
      }
      if (struct.isSetOutletId()) {
        optionals.set(4);
      }
      if (struct.isSetOutletName()) {
        optionals.set(5);
      }
      if (struct.isSetUselessUserId()) {
        optionals.set(6);
      }
      if (struct.isSetUselessUserName()) {
        optionals.set(7);
      }
      if (struct.isSetUselessReason()) {
        optionals.set(8);
      }
      oprot.writeBitSet(optionals, 9);
      if (struct.isSetUselessTime()) {
        oprot.writeI64(struct.uselessTime);
      }
      if (struct.isSetTicketId()) {
        oprot.writeI64(struct.ticketId);
      }
      if (struct.isSetTicketTypeId()) {
        oprot.writeString(struct.ticketTypeId);
      }
      if (struct.isSetTicketTypeName()) {
        oprot.writeString(struct.ticketTypeName);
      }
      if (struct.isSetOutletId()) {
        oprot.writeI64(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetUselessUserId()) {
        oprot.writeString(struct.uselessUserId);
      }
      if (struct.isSetUselessUserName()) {
        oprot.writeString(struct.uselessUserName);
      }
      if (struct.isSetUselessReason()) {
        oprot.writeString(struct.uselessReason);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, USELESS_TICKET_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(9);
      if (incoming.get(0)) {
        struct.uselessTime = iprot.readI64();
        struct.setUselessTimeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ticketId = iprot.readI64();
        struct.setTicketIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ticketTypeId = iprot.readString();
        struct.setTicketTypeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ticketTypeName = iprot.readString();
        struct.setTicketTypeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outletId = iprot.readI64();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.uselessUserId = iprot.readString();
        struct.setUselessUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.uselessUserName = iprot.readString();
        struct.setUselessUserNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uselessReason = iprot.readString();
        struct.setUselessReasonIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

