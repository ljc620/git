/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 员工卡登记表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class SYS_EMP_REGISTER implements org.apache.thrift.TBase<SYS_EMP_REGISTER, SYS_EMP_REGISTER._Fields>, java.io.Serializable, Cloneable, Comparable<SYS_EMP_REGISTER> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SYS_EMP_REGISTER");

  private static final org.apache.thrift.protocol.TField EMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("empId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField EMP_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("empName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CHIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chipId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PHOTO_FIELD_DESC = new org.apache.thrift.protocol.TField("photo", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHIP_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("chipStat", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField MAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("mail", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField GENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("gender", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)15);
  private static final org.apache.thrift.protocol.TField SYS_EMP_VENUELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sysEmpVenuelist", org.apache.thrift.protocol.TType.LIST, (short)16);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SYS_EMP_REGISTERStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SYS_EMP_REGISTERTupleSchemeFactory();

  /**
   * 员工编号
   */
  public long empId; // optional
  /**
   * 员工名称
   */
  public java.lang.String empName; // optional
  /**
   * 芯片ID
   */
  public java.lang.String chipId; // optional
  /**
   * 部门
   */
  public java.lang.String department; // optional
  /**
   * 照片信息
   */
  public java.nio.ByteBuffer photo; // optional
  /**
   * 员工状态(Y启用N禁用)
   */
  public java.lang.String stat; // optional
  /**
   * 卡片状态(Y可用N作废)
   */
  public java.lang.String chipStat; // optional
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // optional
  /**
   * 操作时间
   */
  public long opeTime; // optional
  /**
   * 证件类型
   */
  public java.lang.String cardType; // optional
  /**
   * 证件号码
   */
  public java.lang.String cardId; // optional
  /**
   * 邮箱地址
   */
  public java.lang.String mail; // optional
  /**
   * 性别
   */
  public java.lang.String gender; // optional
  /**
   * 联系电话
   */
  public java.lang.String tel; // optional
  /**
   * 版本号
   */
  public long versionNo; // optional
  /**
   * 员工通行场馆
   */
  public java.util.List<SYS_EMP_VENUE> sysEmpVenuelist; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 员工编号
     */
    EMP_ID((short)1, "empId"),
    /**
     * 员工名称
     */
    EMP_NAME((short)2, "empName"),
    /**
     * 芯片ID
     */
    CHIP_ID((short)3, "chipId"),
    /**
     * 部门
     */
    DEPARTMENT((short)4, "department"),
    /**
     * 照片信息
     */
    PHOTO((short)5, "photo"),
    /**
     * 员工状态(Y启用N禁用)
     */
    STAT((short)6, "stat"),
    /**
     * 卡片状态(Y可用N作废)
     */
    CHIP_STAT((short)7, "chipStat"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)8, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)9, "opeTime"),
    /**
     * 证件类型
     */
    CARD_TYPE((short)10, "cardType"),
    /**
     * 证件号码
     */
    CARD_ID((short)11, "cardId"),
    /**
     * 邮箱地址
     */
    MAIL((short)12, "mail"),
    /**
     * 性别
     */
    GENDER((short)13, "gender"),
    /**
     * 联系电话
     */
    TEL((short)14, "tel"),
    /**
     * 版本号
     */
    VERSION_NO((short)15, "versionNo"),
    /**
     * 员工通行场馆
     */
    SYS_EMP_VENUELIST((short)16, "sysEmpVenuelist");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // EMP_ID
          return EMP_ID;
        case 2: // EMP_NAME
          return EMP_NAME;
        case 3: // CHIP_ID
          return CHIP_ID;
        case 4: // DEPARTMENT
          return DEPARTMENT;
        case 5: // PHOTO
          return PHOTO;
        case 6: // STAT
          return STAT;
        case 7: // CHIP_STAT
          return CHIP_STAT;
        case 8: // OPE_USER_ID
          return OPE_USER_ID;
        case 9: // OPE_TIME
          return OPE_TIME;
        case 10: // CARD_TYPE
          return CARD_TYPE;
        case 11: // CARD_ID
          return CARD_ID;
        case 12: // MAIL
          return MAIL;
        case 13: // GENDER
          return GENDER;
        case 14: // TEL
          return TEL;
        case 15: // VERSION_NO
          return VERSION_NO;
        case 16: // SYS_EMP_VENUELIST
          return SYS_EMP_VENUELIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __EMPID_ISSET_ID = 0;
  private static final int __OPETIME_ISSET_ID = 1;
  private static final int __VERSIONNO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EMP_ID,_Fields.EMP_NAME,_Fields.CHIP_ID,_Fields.DEPARTMENT,_Fields.PHOTO,_Fields.STAT,_Fields.CHIP_STAT,_Fields.OPE_USER_ID,_Fields.OPE_TIME,_Fields.CARD_TYPE,_Fields.CARD_ID,_Fields.MAIL,_Fields.GENDER,_Fields.TEL,_Fields.VERSION_NO,_Fields.SYS_EMP_VENUELIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.EMP_ID, new org.apache.thrift.meta_data.FieldMetaData("empId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EMP_NAME, new org.apache.thrift.meta_data.FieldMetaData("empName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHIP_ID, new org.apache.thrift.meta_data.FieldMetaData("chipId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PHOTO, new org.apache.thrift.meta_data.FieldMetaData("photo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHIP_STAT, new org.apache.thrift.meta_data.FieldMetaData("chipStat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("cardId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MAIL, new org.apache.thrift.meta_data.FieldMetaData("mail", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.GENDER, new org.apache.thrift.meta_data.FieldMetaData("gender", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYS_EMP_VENUELIST, new org.apache.thrift.meta_data.FieldMetaData("sysEmpVenuelist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SYS_EMP_VENUE"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SYS_EMP_REGISTER.class, metaDataMap);
  }

  public SYS_EMP_REGISTER() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SYS_EMP_REGISTER(SYS_EMP_REGISTER other) {
    __isset_bitfield = other.__isset_bitfield;
    this.empId = other.empId;
    if (other.isSetEmpName()) {
      this.empName = other.empName;
    }
    if (other.isSetChipId()) {
      this.chipId = other.chipId;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    if (other.isSetPhoto()) {
      this.photo = org.apache.thrift.TBaseHelper.copyBinary(other.photo);
    }
    if (other.isSetStat()) {
      this.stat = other.stat;
    }
    if (other.isSetChipStat()) {
      this.chipStat = other.chipStat;
    }
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetCardId()) {
      this.cardId = other.cardId;
    }
    if (other.isSetMail()) {
      this.mail = other.mail;
    }
    if (other.isSetGender()) {
      this.gender = other.gender;
    }
    if (other.isSetTel()) {
      this.tel = other.tel;
    }
    this.versionNo = other.versionNo;
    if (other.isSetSysEmpVenuelist()) {
      java.util.List<SYS_EMP_VENUE> __this__sysEmpVenuelist = new java.util.ArrayList<SYS_EMP_VENUE>(other.sysEmpVenuelist.size());
      for (SYS_EMP_VENUE other_element : other.sysEmpVenuelist) {
        __this__sysEmpVenuelist.add(other_element);
      }
      this.sysEmpVenuelist = __this__sysEmpVenuelist;
    }
  }

  public SYS_EMP_REGISTER deepCopy() {
    return new SYS_EMP_REGISTER(this);
  }

  @Override
  public void clear() {
    setEmpIdIsSet(false);
    this.empId = 0;
    this.empName = null;
    this.chipId = null;
    this.department = null;
    this.photo = null;
    this.stat = null;
    this.chipStat = null;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
    this.cardType = null;
    this.cardId = null;
    this.mail = null;
    this.gender = null;
    this.tel = null;
    setVersionNoIsSet(false);
    this.versionNo = 0;
    this.sysEmpVenuelist = null;
  }

  /**
   * 员工编号
   */
  public long getEmpId() {
    return this.empId;
  }

  /**
   * 员工编号
   */
  public SYS_EMP_REGISTER setEmpId(long empId) {
    this.empId = empId;
    setEmpIdIsSet(true);
    return this;
  }

  public void unsetEmpId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPID_ISSET_ID);
  }

  /** Returns true if field empId is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPID_ISSET_ID);
  }

  public void setEmpIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPID_ISSET_ID, value);
  }

  /**
   * 员工名称
   */
  public java.lang.String getEmpName() {
    return this.empName;
  }

  /**
   * 员工名称
   */
  public SYS_EMP_REGISTER setEmpName(java.lang.String empName) {
    this.empName = empName;
    return this;
  }

  public void unsetEmpName() {
    this.empName = null;
  }

  /** Returns true if field empName is set (has been assigned a value) and false otherwise */
  public boolean isSetEmpName() {
    return this.empName != null;
  }

  public void setEmpNameIsSet(boolean value) {
    if (!value) {
      this.empName = null;
    }
  }

  /**
   * 芯片ID
   */
  public java.lang.String getChipId() {
    return this.chipId;
  }

  /**
   * 芯片ID
   */
  public SYS_EMP_REGISTER setChipId(java.lang.String chipId) {
    this.chipId = chipId;
    return this;
  }

  public void unsetChipId() {
    this.chipId = null;
  }

  /** Returns true if field chipId is set (has been assigned a value) and false otherwise */
  public boolean isSetChipId() {
    return this.chipId != null;
  }

  public void setChipIdIsSet(boolean value) {
    if (!value) {
      this.chipId = null;
    }
  }

  /**
   * 部门
   */
  public java.lang.String getDepartment() {
    return this.department;
  }

  /**
   * 部门
   */
  public SYS_EMP_REGISTER setDepartment(java.lang.String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  /**
   * 照片信息
   */
  public byte[] getPhoto() {
    setPhoto(org.apache.thrift.TBaseHelper.rightSize(photo));
    return photo == null ? null : photo.array();
  }

  public java.nio.ByteBuffer bufferForPhoto() {
    return org.apache.thrift.TBaseHelper.copyBinary(photo);
  }

  /**
   * 照片信息
   */
  public SYS_EMP_REGISTER setPhoto(byte[] photo) {
    this.photo = photo == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(photo.clone());
    return this;
  }

  public SYS_EMP_REGISTER setPhoto(java.nio.ByteBuffer photo) {
    this.photo = org.apache.thrift.TBaseHelper.copyBinary(photo);
    return this;
  }

  public void unsetPhoto() {
    this.photo = null;
  }

  /** Returns true if field photo is set (has been assigned a value) and false otherwise */
  public boolean isSetPhoto() {
    return this.photo != null;
  }

  public void setPhotoIsSet(boolean value) {
    if (!value) {
      this.photo = null;
    }
  }

  /**
   * 员工状态(Y启用N禁用)
   */
  public java.lang.String getStat() {
    return this.stat;
  }

  /**
   * 员工状态(Y启用N禁用)
   */
  public SYS_EMP_REGISTER setStat(java.lang.String stat) {
    this.stat = stat;
    return this;
  }

  public void unsetStat() {
    this.stat = null;
  }

  /** Returns true if field stat is set (has been assigned a value) and false otherwise */
  public boolean isSetStat() {
    return this.stat != null;
  }

  public void setStatIsSet(boolean value) {
    if (!value) {
      this.stat = null;
    }
  }

  /**
   * 卡片状态(Y可用N作废)
   */
  public java.lang.String getChipStat() {
    return this.chipStat;
  }

  /**
   * 卡片状态(Y可用N作废)
   */
  public SYS_EMP_REGISTER setChipStat(java.lang.String chipStat) {
    this.chipStat = chipStat;
    return this;
  }

  public void unsetChipStat() {
    this.chipStat = null;
  }

  /** Returns true if field chipStat is set (has been assigned a value) and false otherwise */
  public boolean isSetChipStat() {
    return this.chipStat != null;
  }

  public void setChipStatIsSet(boolean value) {
    if (!value) {
      this.chipStat = null;
    }
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SYS_EMP_REGISTER setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SYS_EMP_REGISTER setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  /**
   * 证件类型
   */
  public java.lang.String getCardType() {
    return this.cardType;
  }

  /**
   * 证件类型
   */
  public SYS_EMP_REGISTER setCardType(java.lang.String cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  /**
   * 证件号码
   */
  public java.lang.String getCardId() {
    return this.cardId;
  }

  /**
   * 证件号码
   */
  public SYS_EMP_REGISTER setCardId(java.lang.String cardId) {
    this.cardId = cardId;
    return this;
  }

  public void unsetCardId() {
    this.cardId = null;
  }

  /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
  public boolean isSetCardId() {
    return this.cardId != null;
  }

  public void setCardIdIsSet(boolean value) {
    if (!value) {
      this.cardId = null;
    }
  }

  /**
   * 邮箱地址
   */
  public java.lang.String getMail() {
    return this.mail;
  }

  /**
   * 邮箱地址
   */
  public SYS_EMP_REGISTER setMail(java.lang.String mail) {
    this.mail = mail;
    return this;
  }

  public void unsetMail() {
    this.mail = null;
  }

  /** Returns true if field mail is set (has been assigned a value) and false otherwise */
  public boolean isSetMail() {
    return this.mail != null;
  }

  public void setMailIsSet(boolean value) {
    if (!value) {
      this.mail = null;
    }
  }

  /**
   * 性别
   */
  public java.lang.String getGender() {
    return this.gender;
  }

  /**
   * 性别
   */
  public SYS_EMP_REGISTER setGender(java.lang.String gender) {
    this.gender = gender;
    return this;
  }

  public void unsetGender() {
    this.gender = null;
  }

  /** Returns true if field gender is set (has been assigned a value) and false otherwise */
  public boolean isSetGender() {
    return this.gender != null;
  }

  public void setGenderIsSet(boolean value) {
    if (!value) {
      this.gender = null;
    }
  }

  /**
   * 联系电话
   */
  public java.lang.String getTel() {
    return this.tel;
  }

  /**
   * 联系电话
   */
  public SYS_EMP_REGISTER setTel(java.lang.String tel) {
    this.tel = tel;
    return this;
  }

  public void unsetTel() {
    this.tel = null;
  }

  /** Returns true if field tel is set (has been assigned a value) and false otherwise */
  public boolean isSetTel() {
    return this.tel != null;
  }

  public void setTelIsSet(boolean value) {
    if (!value) {
      this.tel = null;
    }
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SYS_EMP_REGISTER setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  public int getSysEmpVenuelistSize() {
    return (this.sysEmpVenuelist == null) ? 0 : this.sysEmpVenuelist.size();
  }

  public java.util.Iterator<SYS_EMP_VENUE> getSysEmpVenuelistIterator() {
    return (this.sysEmpVenuelist == null) ? null : this.sysEmpVenuelist.iterator();
  }

  public void addToSysEmpVenuelist(SYS_EMP_VENUE elem) {
    if (this.sysEmpVenuelist == null) {
      this.sysEmpVenuelist = new java.util.ArrayList<SYS_EMP_VENUE>();
    }
    this.sysEmpVenuelist.add(elem);
  }

  /**
   * 员工通行场馆
   */
  public java.util.List<SYS_EMP_VENUE> getSysEmpVenuelist() {
    return this.sysEmpVenuelist;
  }

  /**
   * 员工通行场馆
   */
  public SYS_EMP_REGISTER setSysEmpVenuelist(java.util.List<SYS_EMP_VENUE> sysEmpVenuelist) {
    this.sysEmpVenuelist = sysEmpVenuelist;
    return this;
  }

  public void unsetSysEmpVenuelist() {
    this.sysEmpVenuelist = null;
  }

  /** Returns true if field sysEmpVenuelist is set (has been assigned a value) and false otherwise */
  public boolean isSetSysEmpVenuelist() {
    return this.sysEmpVenuelist != null;
  }

  public void setSysEmpVenuelistIsSet(boolean value) {
    if (!value) {
      this.sysEmpVenuelist = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case EMP_ID:
      if (value == null) {
        unsetEmpId();
      } else {
        setEmpId((java.lang.Long)value);
      }
      break;

    case EMP_NAME:
      if (value == null) {
        unsetEmpName();
      } else {
        setEmpName((java.lang.String)value);
      }
      break;

    case CHIP_ID:
      if (value == null) {
        unsetChipId();
      } else {
        setChipId((java.lang.String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((java.lang.String)value);
      }
      break;

    case PHOTO:
      if (value == null) {
        unsetPhoto();
      } else {
        if (value instanceof byte[]) {
          setPhoto((byte[])value);
        } else {
          setPhoto((java.nio.ByteBuffer)value);
        }
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((java.lang.String)value);
      }
      break;

    case CHIP_STAT:
      if (value == null) {
        unsetChipStat();
      } else {
        setChipStat((java.lang.String)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((java.lang.String)value);
      }
      break;

    case CARD_ID:
      if (value == null) {
        unsetCardId();
      } else {
        setCardId((java.lang.String)value);
      }
      break;

    case MAIL:
      if (value == null) {
        unsetMail();
      } else {
        setMail((java.lang.String)value);
      }
      break;

    case GENDER:
      if (value == null) {
        unsetGender();
      } else {
        setGender((java.lang.String)value);
      }
      break;

    case TEL:
      if (value == null) {
        unsetTel();
      } else {
        setTel((java.lang.String)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    case SYS_EMP_VENUELIST:
      if (value == null) {
        unsetSysEmpVenuelist();
      } else {
        setSysEmpVenuelist((java.util.List<SYS_EMP_VENUE>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case EMP_ID:
      return getEmpId();

    case EMP_NAME:
      return getEmpName();

    case CHIP_ID:
      return getChipId();

    case DEPARTMENT:
      return getDepartment();

    case PHOTO:
      return getPhoto();

    case STAT:
      return getStat();

    case CHIP_STAT:
      return getChipStat();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    case CARD_TYPE:
      return getCardType();

    case CARD_ID:
      return getCardId();

    case MAIL:
      return getMail();

    case GENDER:
      return getGender();

    case TEL:
      return getTel();

    case VERSION_NO:
      return getVersionNo();

    case SYS_EMP_VENUELIST:
      return getSysEmpVenuelist();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case EMP_ID:
      return isSetEmpId();
    case EMP_NAME:
      return isSetEmpName();
    case CHIP_ID:
      return isSetChipId();
    case DEPARTMENT:
      return isSetDepartment();
    case PHOTO:
      return isSetPhoto();
    case STAT:
      return isSetStat();
    case CHIP_STAT:
      return isSetChipStat();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    case CARD_TYPE:
      return isSetCardType();
    case CARD_ID:
      return isSetCardId();
    case MAIL:
      return isSetMail();
    case GENDER:
      return isSetGender();
    case TEL:
      return isSetTel();
    case VERSION_NO:
      return isSetVersionNo();
    case SYS_EMP_VENUELIST:
      return isSetSysEmpVenuelist();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SYS_EMP_REGISTER)
      return this.equals((SYS_EMP_REGISTER)that);
    return false;
  }

  public boolean equals(SYS_EMP_REGISTER that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_empId = true && this.isSetEmpId();
    boolean that_present_empId = true && that.isSetEmpId();
    if (this_present_empId || that_present_empId) {
      if (!(this_present_empId && that_present_empId))
        return false;
      if (this.empId != that.empId)
        return false;
    }

    boolean this_present_empName = true && this.isSetEmpName();
    boolean that_present_empName = true && that.isSetEmpName();
    if (this_present_empName || that_present_empName) {
      if (!(this_present_empName && that_present_empName))
        return false;
      if (!this.empName.equals(that.empName))
        return false;
    }

    boolean this_present_chipId = true && this.isSetChipId();
    boolean that_present_chipId = true && that.isSetChipId();
    if (this_present_chipId || that_present_chipId) {
      if (!(this_present_chipId && that_present_chipId))
        return false;
      if (!this.chipId.equals(that.chipId))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_photo = true && this.isSetPhoto();
    boolean that_present_photo = true && that.isSetPhoto();
    if (this_present_photo || that_present_photo) {
      if (!(this_present_photo && that_present_photo))
        return false;
      if (!this.photo.equals(that.photo))
        return false;
    }

    boolean this_present_stat = true && this.isSetStat();
    boolean that_present_stat = true && that.isSetStat();
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!this.stat.equals(that.stat))
        return false;
    }

    boolean this_present_chipStat = true && this.isSetChipStat();
    boolean that_present_chipStat = true && that.isSetChipStat();
    if (this_present_chipStat || that_present_chipStat) {
      if (!(this_present_chipStat && that_present_chipStat))
        return false;
      if (!this.chipStat.equals(that.chipStat))
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true && this.isSetOpeTime();
    boolean that_present_opeTime = true && that.isSetOpeTime();
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_cardId = true && this.isSetCardId();
    boolean that_present_cardId = true && that.isSetCardId();
    if (this_present_cardId || that_present_cardId) {
      if (!(this_present_cardId && that_present_cardId))
        return false;
      if (!this.cardId.equals(that.cardId))
        return false;
    }

    boolean this_present_mail = true && this.isSetMail();
    boolean that_present_mail = true && that.isSetMail();
    if (this_present_mail || that_present_mail) {
      if (!(this_present_mail && that_present_mail))
        return false;
      if (!this.mail.equals(that.mail))
        return false;
    }

    boolean this_present_gender = true && this.isSetGender();
    boolean that_present_gender = true && that.isSetGender();
    if (this_present_gender || that_present_gender) {
      if (!(this_present_gender && that_present_gender))
        return false;
      if (!this.gender.equals(that.gender))
        return false;
    }

    boolean this_present_tel = true && this.isSetTel();
    boolean that_present_tel = true && that.isSetTel();
    if (this_present_tel || that_present_tel) {
      if (!(this_present_tel && that_present_tel))
        return false;
      if (!this.tel.equals(that.tel))
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    boolean this_present_sysEmpVenuelist = true && this.isSetSysEmpVenuelist();
    boolean that_present_sysEmpVenuelist = true && that.isSetSysEmpVenuelist();
    if (this_present_sysEmpVenuelist || that_present_sysEmpVenuelist) {
      if (!(this_present_sysEmpVenuelist && that_present_sysEmpVenuelist))
        return false;
      if (!this.sysEmpVenuelist.equals(that.sysEmpVenuelist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetEmpId()) ? 131071 : 524287);
    if (isSetEmpId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(empId);

    hashCode = hashCode * 8191 + ((isSetEmpName()) ? 131071 : 524287);
    if (isSetEmpName())
      hashCode = hashCode * 8191 + empName.hashCode();

    hashCode = hashCode * 8191 + ((isSetChipId()) ? 131071 : 524287);
    if (isSetChipId())
      hashCode = hashCode * 8191 + chipId.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
    if (isSetDepartment())
      hashCode = hashCode * 8191 + department.hashCode();

    hashCode = hashCode * 8191 + ((isSetPhoto()) ? 131071 : 524287);
    if (isSetPhoto())
      hashCode = hashCode * 8191 + photo.hashCode();

    hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
    if (isSetStat())
      hashCode = hashCode * 8191 + stat.hashCode();

    hashCode = hashCode * 8191 + ((isSetChipStat()) ? 131071 : 524287);
    if (isSetChipStat())
      hashCode = hashCode * 8191 + chipStat.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeTime()) ? 131071 : 524287);
    if (isSetOpeTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    hashCode = hashCode * 8191 + ((isSetCardType()) ? 131071 : 524287);
    if (isSetCardType())
      hashCode = hashCode * 8191 + cardType.hashCode();

    hashCode = hashCode * 8191 + ((isSetCardId()) ? 131071 : 524287);
    if (isSetCardId())
      hashCode = hashCode * 8191 + cardId.hashCode();

    hashCode = hashCode * 8191 + ((isSetMail()) ? 131071 : 524287);
    if (isSetMail())
      hashCode = hashCode * 8191 + mail.hashCode();

    hashCode = hashCode * 8191 + ((isSetGender()) ? 131071 : 524287);
    if (isSetGender())
      hashCode = hashCode * 8191 + gender.hashCode();

    hashCode = hashCode * 8191 + ((isSetTel()) ? 131071 : 524287);
    if (isSetTel())
      hashCode = hashCode * 8191 + tel.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    hashCode = hashCode * 8191 + ((isSetSysEmpVenuelist()) ? 131071 : 524287);
    if (isSetSysEmpVenuelist())
      hashCode = hashCode * 8191 + sysEmpVenuelist.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SYS_EMP_REGISTER other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetEmpId()).compareTo(other.isSetEmpId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empId, other.empId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEmpName()).compareTo(other.isSetEmpName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEmpName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empName, other.empName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChipId()).compareTo(other.isSetChipId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChipId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chipId, other.chipId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPhoto()).compareTo(other.isSetPhoto());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPhoto()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.photo, other.photo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChipStat()).compareTo(other.isSetChipStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChipStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chipStat, other.chipStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMail()).compareTo(other.isSetMail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mail, other.mail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGender()).compareTo(other.isSetGender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gender, other.gender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTel()).compareTo(other.isSetTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, other.tel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysEmpVenuelist()).compareTo(other.isSetSysEmpVenuelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysEmpVenuelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysEmpVenuelist, other.sysEmpVenuelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SYS_EMP_REGISTER(");
    boolean first = true;

    if (isSetEmpId()) {
      sb.append("empId:");
      sb.append(this.empId);
      first = false;
    }
    if (isSetEmpName()) {
      if (!first) sb.append(", ");
      sb.append("empName:");
      if (this.empName == null) {
        sb.append("null");
      } else {
        sb.append(this.empName);
      }
      first = false;
    }
    if (isSetChipId()) {
      if (!first) sb.append(", ");
      sb.append("chipId:");
      if (this.chipId == null) {
        sb.append("null");
      } else {
        sb.append(this.chipId);
      }
      first = false;
    }
    if (isSetDepartment()) {
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
    }
    if (isSetPhoto()) {
      if (!first) sb.append(", ");
      sb.append("photo:");
      if (this.photo == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.photo, sb);
      }
      first = false;
    }
    if (isSetStat()) {
      if (!first) sb.append(", ");
      sb.append("stat:");
      if (this.stat == null) {
        sb.append("null");
      } else {
        sb.append(this.stat);
      }
      first = false;
    }
    if (isSetChipStat()) {
      if (!first) sb.append(", ");
      sb.append("chipStat:");
      if (this.chipStat == null) {
        sb.append("null");
      } else {
        sb.append(this.chipStat);
      }
      first = false;
    }
    if (isSetOpeUserId()) {
      if (!first) sb.append(", ");
      sb.append("opeUserId:");
      if (this.opeUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.opeUserId);
      }
      first = false;
    }
    if (isSetOpeTime()) {
      if (!first) sb.append(", ");
      sb.append("opeTime:");
      sb.append(this.opeTime);
      first = false;
    }
    if (isSetCardType()) {
      if (!first) sb.append(", ");
      sb.append("cardType:");
      if (this.cardType == null) {
        sb.append("null");
      } else {
        sb.append(this.cardType);
      }
      first = false;
    }
    if (isSetCardId()) {
      if (!first) sb.append(", ");
      sb.append("cardId:");
      if (this.cardId == null) {
        sb.append("null");
      } else {
        sb.append(this.cardId);
      }
      first = false;
    }
    if (isSetMail()) {
      if (!first) sb.append(", ");
      sb.append("mail:");
      if (this.mail == null) {
        sb.append("null");
      } else {
        sb.append(this.mail);
      }
      first = false;
    }
    if (isSetGender()) {
      if (!first) sb.append(", ");
      sb.append("gender:");
      if (this.gender == null) {
        sb.append("null");
      } else {
        sb.append(this.gender);
      }
      first = false;
    }
    if (isSetTel()) {
      if (!first) sb.append(", ");
      sb.append("tel:");
      if (this.tel == null) {
        sb.append("null");
      } else {
        sb.append(this.tel);
      }
      first = false;
    }
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    if (isSetSysEmpVenuelist()) {
      if (!first) sb.append(", ");
      sb.append("sysEmpVenuelist:");
      if (this.sysEmpVenuelist == null) {
        sb.append("null");
      } else {
        sb.append(this.sysEmpVenuelist);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SYS_EMP_REGISTERStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_EMP_REGISTERStandardScheme getScheme() {
      return new SYS_EMP_REGISTERStandardScheme();
    }
  }

  private static class SYS_EMP_REGISTERStandardScheme extends org.apache.thrift.scheme.StandardScheme<SYS_EMP_REGISTER> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SYS_EMP_REGISTER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // EMP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.empId = iprot.readI64();
              struct.setEmpIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // EMP_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.empName = iprot.readString();
              struct.setEmpNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CHIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chipId = iprot.readString();
              struct.setChipIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PHOTO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.photo = iprot.readBinary();
              struct.setPhotoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stat = iprot.readString();
              struct.setStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHIP_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chipStat = iprot.readString();
              struct.setChipStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardType = iprot.readString();
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardId = iprot.readString();
              struct.setCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // MAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.mail = iprot.readString();
              struct.setMailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // GENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.gender = iprot.readString();
              struct.setGenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tel = iprot.readString();
              struct.setTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // SYS_EMP_VENUELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                struct.sysEmpVenuelist = new java.util.ArrayList<SYS_EMP_VENUE>(_list40.size);
                SYS_EMP_VENUE _elem41;
                for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                {
                  _elem41 = new SYS_EMP_VENUE();
                  _elem41.read(iprot);
                  struct.sysEmpVenuelist.add(_elem41);
                }
                iprot.readListEnd();
              }
              struct.setSysEmpVenuelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SYS_EMP_REGISTER struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetEmpId()) {
        oprot.writeFieldBegin(EMP_ID_FIELD_DESC);
        oprot.writeI64(struct.empId);
        oprot.writeFieldEnd();
      }
      if (struct.empName != null) {
        if (struct.isSetEmpName()) {
          oprot.writeFieldBegin(EMP_NAME_FIELD_DESC);
          oprot.writeString(struct.empName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chipId != null) {
        if (struct.isSetChipId()) {
          oprot.writeFieldBegin(CHIP_ID_FIELD_DESC);
          oprot.writeString(struct.chipId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.department != null) {
        if (struct.isSetDepartment()) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
      }
      if (struct.photo != null) {
        if (struct.isSetPhoto()) {
          oprot.writeFieldBegin(PHOTO_FIELD_DESC);
          oprot.writeBinary(struct.photo);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stat != null) {
        if (struct.isSetStat()) {
          oprot.writeFieldBegin(STAT_FIELD_DESC);
          oprot.writeString(struct.stat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.chipStat != null) {
        if (struct.isSetChipStat()) {
          oprot.writeFieldBegin(CHIP_STAT_FIELD_DESC);
          oprot.writeString(struct.chipStat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.opeUserId != null) {
        if (struct.isSetOpeUserId()) {
          oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.opeUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpeTime()) {
        oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
        oprot.writeI64(struct.opeTime);
        oprot.writeFieldEnd();
      }
      if (struct.cardType != null) {
        if (struct.isSetCardType()) {
          oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
          oprot.writeString(struct.cardType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardId != null) {
        if (struct.isSetCardId()) {
          oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
          oprot.writeString(struct.cardId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.mail != null) {
        if (struct.isSetMail()) {
          oprot.writeFieldBegin(MAIL_FIELD_DESC);
          oprot.writeString(struct.mail);
          oprot.writeFieldEnd();
        }
      }
      if (struct.gender != null) {
        if (struct.isSetGender()) {
          oprot.writeFieldBegin(GENDER_FIELD_DESC);
          oprot.writeString(struct.gender);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tel != null) {
        if (struct.isSetTel()) {
          oprot.writeFieldBegin(TEL_FIELD_DESC);
          oprot.writeString(struct.tel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      if (struct.sysEmpVenuelist != null) {
        if (struct.isSetSysEmpVenuelist()) {
          oprot.writeFieldBegin(SYS_EMP_VENUELIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sysEmpVenuelist.size()));
            for (SYS_EMP_VENUE _iter43 : struct.sysEmpVenuelist)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SYS_EMP_REGISTERTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_EMP_REGISTERTupleScheme getScheme() {
      return new SYS_EMP_REGISTERTupleScheme();
    }
  }

  private static class SYS_EMP_REGISTERTupleScheme extends org.apache.thrift.scheme.TupleScheme<SYS_EMP_REGISTER> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SYS_EMP_REGISTER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetEmpId()) {
        optionals.set(0);
      }
      if (struct.isSetEmpName()) {
        optionals.set(1);
      }
      if (struct.isSetChipId()) {
        optionals.set(2);
      }
      if (struct.isSetDepartment()) {
        optionals.set(3);
      }
      if (struct.isSetPhoto()) {
        optionals.set(4);
      }
      if (struct.isSetStat()) {
        optionals.set(5);
      }
      if (struct.isSetChipStat()) {
        optionals.set(6);
      }
      if (struct.isSetOpeUserId()) {
        optionals.set(7);
      }
      if (struct.isSetOpeTime()) {
        optionals.set(8);
      }
      if (struct.isSetCardType()) {
        optionals.set(9);
      }
      if (struct.isSetCardId()) {
        optionals.set(10);
      }
      if (struct.isSetMail()) {
        optionals.set(11);
      }
      if (struct.isSetGender()) {
        optionals.set(12);
      }
      if (struct.isSetTel()) {
        optionals.set(13);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(14);
      }
      if (struct.isSetSysEmpVenuelist()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetEmpId()) {
        oprot.writeI64(struct.empId);
      }
      if (struct.isSetEmpName()) {
        oprot.writeString(struct.empName);
      }
      if (struct.isSetChipId()) {
        oprot.writeString(struct.chipId);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetPhoto()) {
        oprot.writeBinary(struct.photo);
      }
      if (struct.isSetStat()) {
        oprot.writeString(struct.stat);
      }
      if (struct.isSetChipStat()) {
        oprot.writeString(struct.chipStat);
      }
      if (struct.isSetOpeUserId()) {
        oprot.writeString(struct.opeUserId);
      }
      if (struct.isSetOpeTime()) {
        oprot.writeI64(struct.opeTime);
      }
      if (struct.isSetCardType()) {
        oprot.writeString(struct.cardType);
      }
      if (struct.isSetCardId()) {
        oprot.writeString(struct.cardId);
      }
      if (struct.isSetMail()) {
        oprot.writeString(struct.mail);
      }
      if (struct.isSetGender()) {
        oprot.writeString(struct.gender);
      }
      if (struct.isSetTel()) {
        oprot.writeString(struct.tel);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
      if (struct.isSetSysEmpVenuelist()) {
        {
          oprot.writeI32(struct.sysEmpVenuelist.size());
          for (SYS_EMP_VENUE _iter44 : struct.sysEmpVenuelist)
          {
            _iter44.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SYS_EMP_REGISTER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.empId = iprot.readI64();
        struct.setEmpIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.empName = iprot.readString();
        struct.setEmpNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.chipId = iprot.readString();
        struct.setChipIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(4)) {
        struct.photo = iprot.readBinary();
        struct.setPhotoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stat = iprot.readString();
        struct.setStatIsSet(true);
      }
      if (incoming.get(6)) {
        struct.chipStat = iprot.readString();
        struct.setChipStatIsSet(true);
      }
      if (incoming.get(7)) {
        struct.opeUserId = iprot.readString();
        struct.setOpeUserIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.opeTime = iprot.readI64();
        struct.setOpeTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.cardType = iprot.readString();
        struct.setCardTypeIsSet(true);
      }
      if (incoming.get(10)) {
        struct.cardId = iprot.readString();
        struct.setCardIdIsSet(true);
      }
      if (incoming.get(11)) {
        struct.mail = iprot.readString();
        struct.setMailIsSet(true);
      }
      if (incoming.get(12)) {
        struct.gender = iprot.readString();
        struct.setGenderIsSet(true);
      }
      if (incoming.get(13)) {
        struct.tel = iprot.readString();
        struct.setTelIsSet(true);
      }
      if (incoming.get(14)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
      if (incoming.get(15)) {
        {
          org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sysEmpVenuelist = new java.util.ArrayList<SYS_EMP_VENUE>(_list45.size);
          SYS_EMP_VENUE _elem46;
          for (int _i47 = 0; _i47 < _list45.size; ++_i47)
          {
            _elem46 = new SYS_EMP_VENUE();
            _elem46.read(iprot);
            struct.sysEmpVenuelist.add(_elem46);
          }
        }
        struct.setSysEmpVenuelistIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

