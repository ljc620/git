/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 团队票预定表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class SL_TEAM_ORDER implements org.apache.thrift.TBase<SL_TEAM_ORDER, SL_TEAM_ORDER._Fields>, java.io.Serializable, Cloneable, Comparable<SL_TEAM_ORDER> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_TEAM_ORDER");

  private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLY_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("applyTime", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField APPLY_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyUserId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORG_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("orgName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField IN_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("inDt", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CHANGE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("changeUserId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField CHANGE_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("changeUserName", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField CHANGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("changeTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField EXAM_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("examUserId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EXAM_USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("examUserName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EXAM_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("examTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField APPLY_FROZEN_ADVANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("applyFrozenAdvanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)14);
  private static final org.apache.thrift.protocol.TField EXAM_FROZEN_ADVANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("examFrozenAdvanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)15);
  private static final org.apache.thrift.protocol.TField EXAM_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("examType", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField MINUS_ADVANCE_AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("minusAdvanceAmt", org.apache.thrift.protocol.TType.DOUBLE, (short)17);
  private static final org.apache.thrift.protocol.TField TEAM_ORDER_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("teamOrderDetail", org.apache.thrift.protocol.TType.LIST, (short)18);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.STRING, (short)19);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("cardTypeName", org.apache.thrift.protocol.TType.STRING, (short)20);
  private static final org.apache.thrift.protocol.TField CARD_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cardId", org.apache.thrift.protocol.TType.STRING, (short)21);
  private static final org.apache.thrift.protocol.TField TEL_FIELD_DESC = new org.apache.thrift.protocol.TField("tel", org.apache.thrift.protocol.TType.STRING, (short)22);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)23);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_TEAM_ORDERStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_TEAM_ORDERTupleSchemeFactory();

  /**
   * 申请编号
   */
  public java.lang.String applyId; // required
  /**
   * 申请时间
   */
  public long applyTime; // required
  /**
   * 申请人
   */
  public java.lang.String applyUserId; // required
  /**
   * 机构编号
   */
  public java.lang.String orgId; // optional
  /**
   * 机构名称
   */
  public java.lang.String orgName; // optional
  /**
   * 入园日期
   */
  public long inDt; // optional
  /**
   * 换票人编号
   */
  public java.lang.String changeUserId; // optional
  /**
   * 换票人姓名
   */
  public java.lang.String changeUserName; // optional
  /**
   * 换票时间
   */
  public long changeTime; // optional
  /**
   * 审核人
   */
  public java.lang.String examUserId; // optional
  /**
   * 审核人名称
   */
  public java.lang.String examUserName; // optional
  /**
   * 审核时间
   */
  public long examTime; // optional
  /**
   * 状态 (01-已保存,02-未审核,03-已审核)
   */
  public java.lang.String stat; // optional
  /**
   * 申请冻结预付款
   */
  public double applyFrozenAdvanceAmt; // optional
  /**
   * 审核冻结预付款
   */
  public double examFrozenAdvanceAmt; // optional
  /**
   * 审核类型 (01-自动审核,02-人工审核)
   */
  public java.lang.String examType; // optional
  /**
   * 扣减预付款
   */
  public double minusAdvanceAmt; // optional
  /**
   * 团队票预订明细
   */
  public java.util.List<SL_TEAM_ORDER_DETAIL> teamOrderDetail; // required
  /**
   * 换票人证件类型
   */
  public java.lang.String cardType; // optional
  /**
   * 换票人证件类型名称
   */
  public java.lang.String cardTypeName; // optional
  /**
   * 换票人证件号码
   */
  public java.lang.String cardId; // optional
  /**
   * 联系电话
   */
  public java.lang.String tel; // optional
  /**
   * 订单说明
   */
  public java.lang.String remark; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 申请编号
     */
    APPLY_ID((short)1, "applyId"),
    /**
     * 申请时间
     */
    APPLY_TIME((short)2, "applyTime"),
    /**
     * 申请人
     */
    APPLY_USER_ID((short)3, "applyUserId"),
    /**
     * 机构编号
     */
    ORG_ID((short)4, "orgId"),
    /**
     * 机构名称
     */
    ORG_NAME((short)5, "orgName"),
    /**
     * 入园日期
     */
    IN_DT((short)6, "inDt"),
    /**
     * 换票人编号
     */
    CHANGE_USER_ID((short)7, "changeUserId"),
    /**
     * 换票人姓名
     */
    CHANGE_USER_NAME((short)8, "changeUserName"),
    /**
     * 换票时间
     */
    CHANGE_TIME((short)9, "changeTime"),
    /**
     * 审核人
     */
    EXAM_USER_ID((short)10, "examUserId"),
    /**
     * 审核人名称
     */
    EXAM_USER_NAME((short)11, "examUserName"),
    /**
     * 审核时间
     */
    EXAM_TIME((short)12, "examTime"),
    /**
     * 状态 (01-已保存,02-未审核,03-已审核)
     */
    STAT((short)13, "stat"),
    /**
     * 申请冻结预付款
     */
    APPLY_FROZEN_ADVANCE_AMT((short)14, "applyFrozenAdvanceAmt"),
    /**
     * 审核冻结预付款
     */
    EXAM_FROZEN_ADVANCE_AMT((short)15, "examFrozenAdvanceAmt"),
    /**
     * 审核类型 (01-自动审核,02-人工审核)
     */
    EXAM_TYPE((short)16, "examType"),
    /**
     * 扣减预付款
     */
    MINUS_ADVANCE_AMT((short)17, "minusAdvanceAmt"),
    /**
     * 团队票预订明细
     */
    TEAM_ORDER_DETAIL((short)18, "teamOrderDetail"),
    /**
     * 换票人证件类型
     */
    CARD_TYPE((short)19, "cardType"),
    /**
     * 换票人证件类型名称
     */
    CARD_TYPE_NAME((short)20, "cardTypeName"),
    /**
     * 换票人证件号码
     */
    CARD_ID((short)21, "cardId"),
    /**
     * 联系电话
     */
    TEL((short)22, "tel"),
    /**
     * 订单说明
     */
    REMARK((short)23, "remark");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLY_ID
          return APPLY_ID;
        case 2: // APPLY_TIME
          return APPLY_TIME;
        case 3: // APPLY_USER_ID
          return APPLY_USER_ID;
        case 4: // ORG_ID
          return ORG_ID;
        case 5: // ORG_NAME
          return ORG_NAME;
        case 6: // IN_DT
          return IN_DT;
        case 7: // CHANGE_USER_ID
          return CHANGE_USER_ID;
        case 8: // CHANGE_USER_NAME
          return CHANGE_USER_NAME;
        case 9: // CHANGE_TIME
          return CHANGE_TIME;
        case 10: // EXAM_USER_ID
          return EXAM_USER_ID;
        case 11: // EXAM_USER_NAME
          return EXAM_USER_NAME;
        case 12: // EXAM_TIME
          return EXAM_TIME;
        case 13: // STAT
          return STAT;
        case 14: // APPLY_FROZEN_ADVANCE_AMT
          return APPLY_FROZEN_ADVANCE_AMT;
        case 15: // EXAM_FROZEN_ADVANCE_AMT
          return EXAM_FROZEN_ADVANCE_AMT;
        case 16: // EXAM_TYPE
          return EXAM_TYPE;
        case 17: // MINUS_ADVANCE_AMT
          return MINUS_ADVANCE_AMT;
        case 18: // TEAM_ORDER_DETAIL
          return TEAM_ORDER_DETAIL;
        case 19: // CARD_TYPE
          return CARD_TYPE;
        case 20: // CARD_TYPE_NAME
          return CARD_TYPE_NAME;
        case 21: // CARD_ID
          return CARD_ID;
        case 22: // TEL
          return TEL;
        case 23: // REMARK
          return REMARK;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPLYTIME_ISSET_ID = 0;
  private static final int __INDT_ISSET_ID = 1;
  private static final int __CHANGETIME_ISSET_ID = 2;
  private static final int __EXAMTIME_ISSET_ID = 3;
  private static final int __APPLYFROZENADVANCEAMT_ISSET_ID = 4;
  private static final int __EXAMFROZENADVANCEAMT_ISSET_ID = 5;
  private static final int __MINUSADVANCEAMT_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ORG_ID,_Fields.ORG_NAME,_Fields.IN_DT,_Fields.CHANGE_USER_ID,_Fields.CHANGE_USER_NAME,_Fields.CHANGE_TIME,_Fields.EXAM_USER_ID,_Fields.EXAM_USER_NAME,_Fields.EXAM_TIME,_Fields.STAT,_Fields.APPLY_FROZEN_ADVANCE_AMT,_Fields.EXAM_FROZEN_ADVANCE_AMT,_Fields.EXAM_TYPE,_Fields.MINUS_ADVANCE_AMT,_Fields.CARD_TYPE,_Fields.CARD_TYPE_NAME,_Fields.CARD_ID,_Fields.TEL,_Fields.REMARK};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_TIME, new org.apache.thrift.meta_data.FieldMetaData("applyTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.APPLY_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("applyUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_NAME, new org.apache.thrift.meta_data.FieldMetaData("orgName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IN_DT, new org.apache.thrift.meta_data.FieldMetaData("inDt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHANGE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("changeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANGE_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("changeUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHANGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("changeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXAM_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("examUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXAM_USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("examUserName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EXAM_TIME, new org.apache.thrift.meta_data.FieldMetaData("examTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_FROZEN_ADVANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("applyFrozenAdvanceAmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXAM_FROZEN_ADVANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("examFrozenAdvanceAmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.EXAM_TYPE, new org.apache.thrift.meta_data.FieldMetaData("examType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MINUS_ADVANCE_AMT, new org.apache.thrift.meta_data.FieldMetaData("minusAdvanceAmt", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.TEAM_ORDER_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("teamOrderDetail", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SL_TEAM_ORDER_DETAIL"))));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("cardTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_ID, new org.apache.thrift.meta_data.FieldMetaData("cardId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEL, new org.apache.thrift.meta_data.FieldMetaData("tel", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_TEAM_ORDER.class, metaDataMap);
  }

  public SL_TEAM_ORDER() {
  }

  public SL_TEAM_ORDER(
    java.lang.String applyId,
    long applyTime,
    java.lang.String applyUserId,
    java.util.List<SL_TEAM_ORDER_DETAIL> teamOrderDetail)
  {
    this();
    this.applyId = applyId;
    this.applyTime = applyTime;
    setApplyTimeIsSet(true);
    this.applyUserId = applyUserId;
    this.teamOrderDetail = teamOrderDetail;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_TEAM_ORDER(SL_TEAM_ORDER other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApplyId()) {
      this.applyId = other.applyId;
    }
    this.applyTime = other.applyTime;
    if (other.isSetApplyUserId()) {
      this.applyUserId = other.applyUserId;
    }
    if (other.isSetOrgId()) {
      this.orgId = other.orgId;
    }
    if (other.isSetOrgName()) {
      this.orgName = other.orgName;
    }
    this.inDt = other.inDt;
    if (other.isSetChangeUserId()) {
      this.changeUserId = other.changeUserId;
    }
    if (other.isSetChangeUserName()) {
      this.changeUserName = other.changeUserName;
    }
    this.changeTime = other.changeTime;
    if (other.isSetExamUserId()) {
      this.examUserId = other.examUserId;
    }
    if (other.isSetExamUserName()) {
      this.examUserName = other.examUserName;
    }
    this.examTime = other.examTime;
    if (other.isSetStat()) {
      this.stat = other.stat;
    }
    this.applyFrozenAdvanceAmt = other.applyFrozenAdvanceAmt;
    this.examFrozenAdvanceAmt = other.examFrozenAdvanceAmt;
    if (other.isSetExamType()) {
      this.examType = other.examType;
    }
    this.minusAdvanceAmt = other.minusAdvanceAmt;
    if (other.isSetTeamOrderDetail()) {
      java.util.List<SL_TEAM_ORDER_DETAIL> __this__teamOrderDetail = new java.util.ArrayList<SL_TEAM_ORDER_DETAIL>(other.teamOrderDetail.size());
      for (SL_TEAM_ORDER_DETAIL other_element : other.teamOrderDetail) {
        __this__teamOrderDetail.add(other_element);
      }
      this.teamOrderDetail = __this__teamOrderDetail;
    }
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetCardTypeName()) {
      this.cardTypeName = other.cardTypeName;
    }
    if (other.isSetCardId()) {
      this.cardId = other.cardId;
    }
    if (other.isSetTel()) {
      this.tel = other.tel;
    }
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
  }

  public SL_TEAM_ORDER deepCopy() {
    return new SL_TEAM_ORDER(this);
  }

  @Override
  public void clear() {
    this.applyId = null;
    setApplyTimeIsSet(false);
    this.applyTime = 0;
    this.applyUserId = null;
    this.orgId = null;
    this.orgName = null;
    setInDtIsSet(false);
    this.inDt = 0;
    this.changeUserId = null;
    this.changeUserName = null;
    setChangeTimeIsSet(false);
    this.changeTime = 0;
    this.examUserId = null;
    this.examUserName = null;
    setExamTimeIsSet(false);
    this.examTime = 0;
    this.stat = null;
    setApplyFrozenAdvanceAmtIsSet(false);
    this.applyFrozenAdvanceAmt = 0.0;
    setExamFrozenAdvanceAmtIsSet(false);
    this.examFrozenAdvanceAmt = 0.0;
    this.examType = null;
    setMinusAdvanceAmtIsSet(false);
    this.minusAdvanceAmt = 0.0;
    this.teamOrderDetail = null;
    this.cardType = null;
    this.cardTypeName = null;
    this.cardId = null;
    this.tel = null;
    this.remark = null;
  }

  /**
   * 申请编号
   */
  public java.lang.String getApplyId() {
    return this.applyId;
  }

  /**
   * 申请编号
   */
  public SL_TEAM_ORDER setApplyId(java.lang.String applyId) {
    this.applyId = applyId;
    return this;
  }

  public void unsetApplyId() {
    this.applyId = null;
  }

  /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyId() {
    return this.applyId != null;
  }

  public void setApplyIdIsSet(boolean value) {
    if (!value) {
      this.applyId = null;
    }
  }

  /**
   * 申请时间
   */
  public long getApplyTime() {
    return this.applyTime;
  }

  /**
   * 申请时间
   */
  public SL_TEAM_ORDER setApplyTime(long applyTime) {
    this.applyTime = applyTime;
    setApplyTimeIsSet(true);
    return this;
  }

  public void unsetApplyTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLYTIME_ISSET_ID);
  }

  /** Returns true if field applyTime is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLYTIME_ISSET_ID);
  }

  public void setApplyTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLYTIME_ISSET_ID, value);
  }

  /**
   * 申请人
   */
  public java.lang.String getApplyUserId() {
    return this.applyUserId;
  }

  /**
   * 申请人
   */
  public SL_TEAM_ORDER setApplyUserId(java.lang.String applyUserId) {
    this.applyUserId = applyUserId;
    return this;
  }

  public void unsetApplyUserId() {
    this.applyUserId = null;
  }

  /** Returns true if field applyUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyUserId() {
    return this.applyUserId != null;
  }

  public void setApplyUserIdIsSet(boolean value) {
    if (!value) {
      this.applyUserId = null;
    }
  }

  /**
   * 机构编号
   */
  public java.lang.String getOrgId() {
    return this.orgId;
  }

  /**
   * 机构编号
   */
  public SL_TEAM_ORDER setOrgId(java.lang.String orgId) {
    this.orgId = orgId;
    return this;
  }

  public void unsetOrgId() {
    this.orgId = null;
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return this.orgId != null;
  }

  public void setOrgIdIsSet(boolean value) {
    if (!value) {
      this.orgId = null;
    }
  }

  /**
   * 机构名称
   */
  public java.lang.String getOrgName() {
    return this.orgName;
  }

  /**
   * 机构名称
   */
  public SL_TEAM_ORDER setOrgName(java.lang.String orgName) {
    this.orgName = orgName;
    return this;
  }

  public void unsetOrgName() {
    this.orgName = null;
  }

  /** Returns true if field orgName is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgName() {
    return this.orgName != null;
  }

  public void setOrgNameIsSet(boolean value) {
    if (!value) {
      this.orgName = null;
    }
  }

  /**
   * 入园日期
   */
  public long getInDt() {
    return this.inDt;
  }

  /**
   * 入园日期
   */
  public SL_TEAM_ORDER setInDt(long inDt) {
    this.inDt = inDt;
    setInDtIsSet(true);
    return this;
  }

  public void unsetInDt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INDT_ISSET_ID);
  }

  /** Returns true if field inDt is set (has been assigned a value) and false otherwise */
  public boolean isSetInDt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INDT_ISSET_ID);
  }

  public void setInDtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INDT_ISSET_ID, value);
  }

  /**
   * 换票人编号
   */
  public java.lang.String getChangeUserId() {
    return this.changeUserId;
  }

  /**
   * 换票人编号
   */
  public SL_TEAM_ORDER setChangeUserId(java.lang.String changeUserId) {
    this.changeUserId = changeUserId;
    return this;
  }

  public void unsetChangeUserId() {
    this.changeUserId = null;
  }

  /** Returns true if field changeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeUserId() {
    return this.changeUserId != null;
  }

  public void setChangeUserIdIsSet(boolean value) {
    if (!value) {
      this.changeUserId = null;
    }
  }

  /**
   * 换票人姓名
   */
  public java.lang.String getChangeUserName() {
    return this.changeUserName;
  }

  /**
   * 换票人姓名
   */
  public SL_TEAM_ORDER setChangeUserName(java.lang.String changeUserName) {
    this.changeUserName = changeUserName;
    return this;
  }

  public void unsetChangeUserName() {
    this.changeUserName = null;
  }

  /** Returns true if field changeUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeUserName() {
    return this.changeUserName != null;
  }

  public void setChangeUserNameIsSet(boolean value) {
    if (!value) {
      this.changeUserName = null;
    }
  }

  /**
   * 换票时间
   */
  public long getChangeTime() {
    return this.changeTime;
  }

  /**
   * 换票时间
   */
  public SL_TEAM_ORDER setChangeTime(long changeTime) {
    this.changeTime = changeTime;
    setChangeTimeIsSet(true);
    return this;
  }

  public void unsetChangeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANGETIME_ISSET_ID);
  }

  /** Returns true if field changeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetChangeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANGETIME_ISSET_ID);
  }

  public void setChangeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANGETIME_ISSET_ID, value);
  }

  /**
   * 审核人
   */
  public java.lang.String getExamUserId() {
    return this.examUserId;
  }

  /**
   * 审核人
   */
  public SL_TEAM_ORDER setExamUserId(java.lang.String examUserId) {
    this.examUserId = examUserId;
    return this;
  }

  public void unsetExamUserId() {
    this.examUserId = null;
  }

  /** Returns true if field examUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetExamUserId() {
    return this.examUserId != null;
  }

  public void setExamUserIdIsSet(boolean value) {
    if (!value) {
      this.examUserId = null;
    }
  }

  /**
   * 审核人名称
   */
  public java.lang.String getExamUserName() {
    return this.examUserName;
  }

  /**
   * 审核人名称
   */
  public SL_TEAM_ORDER setExamUserName(java.lang.String examUserName) {
    this.examUserName = examUserName;
    return this;
  }

  public void unsetExamUserName() {
    this.examUserName = null;
  }

  /** Returns true if field examUserName is set (has been assigned a value) and false otherwise */
  public boolean isSetExamUserName() {
    return this.examUserName != null;
  }

  public void setExamUserNameIsSet(boolean value) {
    if (!value) {
      this.examUserName = null;
    }
  }

  /**
   * 审核时间
   */
  public long getExamTime() {
    return this.examTime;
  }

  /**
   * 审核时间
   */
  public SL_TEAM_ORDER setExamTime(long examTime) {
    this.examTime = examTime;
    setExamTimeIsSet(true);
    return this;
  }

  public void unsetExamTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXAMTIME_ISSET_ID);
  }

  /** Returns true if field examTime is set (has been assigned a value) and false otherwise */
  public boolean isSetExamTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXAMTIME_ISSET_ID);
  }

  public void setExamTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXAMTIME_ISSET_ID, value);
  }

  /**
   * 状态 (01-已保存,02-未审核,03-已审核)
   */
  public java.lang.String getStat() {
    return this.stat;
  }

  /**
   * 状态 (01-已保存,02-未审核,03-已审核)
   */
  public SL_TEAM_ORDER setStat(java.lang.String stat) {
    this.stat = stat;
    return this;
  }

  public void unsetStat() {
    this.stat = null;
  }

  /** Returns true if field stat is set (has been assigned a value) and false otherwise */
  public boolean isSetStat() {
    return this.stat != null;
  }

  public void setStatIsSet(boolean value) {
    if (!value) {
      this.stat = null;
    }
  }

  /**
   * 申请冻结预付款
   */
  public double getApplyFrozenAdvanceAmt() {
    return this.applyFrozenAdvanceAmt;
  }

  /**
   * 申请冻结预付款
   */
  public SL_TEAM_ORDER setApplyFrozenAdvanceAmt(double applyFrozenAdvanceAmt) {
    this.applyFrozenAdvanceAmt = applyFrozenAdvanceAmt;
    setApplyFrozenAdvanceAmtIsSet(true);
    return this;
  }

  public void unsetApplyFrozenAdvanceAmt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLYFROZENADVANCEAMT_ISSET_ID);
  }

  /** Returns true if field applyFrozenAdvanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyFrozenAdvanceAmt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLYFROZENADVANCEAMT_ISSET_ID);
  }

  public void setApplyFrozenAdvanceAmtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLYFROZENADVANCEAMT_ISSET_ID, value);
  }

  /**
   * 审核冻结预付款
   */
  public double getExamFrozenAdvanceAmt() {
    return this.examFrozenAdvanceAmt;
  }

  /**
   * 审核冻结预付款
   */
  public SL_TEAM_ORDER setExamFrozenAdvanceAmt(double examFrozenAdvanceAmt) {
    this.examFrozenAdvanceAmt = examFrozenAdvanceAmt;
    setExamFrozenAdvanceAmtIsSet(true);
    return this;
  }

  public void unsetExamFrozenAdvanceAmt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXAMFROZENADVANCEAMT_ISSET_ID);
  }

  /** Returns true if field examFrozenAdvanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetExamFrozenAdvanceAmt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXAMFROZENADVANCEAMT_ISSET_ID);
  }

  public void setExamFrozenAdvanceAmtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXAMFROZENADVANCEAMT_ISSET_ID, value);
  }

  /**
   * 审核类型 (01-自动审核,02-人工审核)
   */
  public java.lang.String getExamType() {
    return this.examType;
  }

  /**
   * 审核类型 (01-自动审核,02-人工审核)
   */
  public SL_TEAM_ORDER setExamType(java.lang.String examType) {
    this.examType = examType;
    return this;
  }

  public void unsetExamType() {
    this.examType = null;
  }

  /** Returns true if field examType is set (has been assigned a value) and false otherwise */
  public boolean isSetExamType() {
    return this.examType != null;
  }

  public void setExamTypeIsSet(boolean value) {
    if (!value) {
      this.examType = null;
    }
  }

  /**
   * 扣减预付款
   */
  public double getMinusAdvanceAmt() {
    return this.minusAdvanceAmt;
  }

  /**
   * 扣减预付款
   */
  public SL_TEAM_ORDER setMinusAdvanceAmt(double minusAdvanceAmt) {
    this.minusAdvanceAmt = minusAdvanceAmt;
    setMinusAdvanceAmtIsSet(true);
    return this;
  }

  public void unsetMinusAdvanceAmt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MINUSADVANCEAMT_ISSET_ID);
  }

  /** Returns true if field minusAdvanceAmt is set (has been assigned a value) and false otherwise */
  public boolean isSetMinusAdvanceAmt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MINUSADVANCEAMT_ISSET_ID);
  }

  public void setMinusAdvanceAmtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MINUSADVANCEAMT_ISSET_ID, value);
  }

  public int getTeamOrderDetailSize() {
    return (this.teamOrderDetail == null) ? 0 : this.teamOrderDetail.size();
  }

  public java.util.Iterator<SL_TEAM_ORDER_DETAIL> getTeamOrderDetailIterator() {
    return (this.teamOrderDetail == null) ? null : this.teamOrderDetail.iterator();
  }

  public void addToTeamOrderDetail(SL_TEAM_ORDER_DETAIL elem) {
    if (this.teamOrderDetail == null) {
      this.teamOrderDetail = new java.util.ArrayList<SL_TEAM_ORDER_DETAIL>();
    }
    this.teamOrderDetail.add(elem);
  }

  /**
   * 团队票预订明细
   */
  public java.util.List<SL_TEAM_ORDER_DETAIL> getTeamOrderDetail() {
    return this.teamOrderDetail;
  }

  /**
   * 团队票预订明细
   */
  public SL_TEAM_ORDER setTeamOrderDetail(java.util.List<SL_TEAM_ORDER_DETAIL> teamOrderDetail) {
    this.teamOrderDetail = teamOrderDetail;
    return this;
  }

  public void unsetTeamOrderDetail() {
    this.teamOrderDetail = null;
  }

  /** Returns true if field teamOrderDetail is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamOrderDetail() {
    return this.teamOrderDetail != null;
  }

  public void setTeamOrderDetailIsSet(boolean value) {
    if (!value) {
      this.teamOrderDetail = null;
    }
  }

  /**
   * 换票人证件类型
   */
  public java.lang.String getCardType() {
    return this.cardType;
  }

  /**
   * 换票人证件类型
   */
  public SL_TEAM_ORDER setCardType(java.lang.String cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  /**
   * 换票人证件类型名称
   */
  public java.lang.String getCardTypeName() {
    return this.cardTypeName;
  }

  /**
   * 换票人证件类型名称
   */
  public SL_TEAM_ORDER setCardTypeName(java.lang.String cardTypeName) {
    this.cardTypeName = cardTypeName;
    return this;
  }

  public void unsetCardTypeName() {
    this.cardTypeName = null;
  }

  /** Returns true if field cardTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetCardTypeName() {
    return this.cardTypeName != null;
  }

  public void setCardTypeNameIsSet(boolean value) {
    if (!value) {
      this.cardTypeName = null;
    }
  }

  /**
   * 换票人证件号码
   */
  public java.lang.String getCardId() {
    return this.cardId;
  }

  /**
   * 换票人证件号码
   */
  public SL_TEAM_ORDER setCardId(java.lang.String cardId) {
    this.cardId = cardId;
    return this;
  }

  public void unsetCardId() {
    this.cardId = null;
  }

  /** Returns true if field cardId is set (has been assigned a value) and false otherwise */
  public boolean isSetCardId() {
    return this.cardId != null;
  }

  public void setCardIdIsSet(boolean value) {
    if (!value) {
      this.cardId = null;
    }
  }

  /**
   * 联系电话
   */
  public java.lang.String getTel() {
    return this.tel;
  }

  /**
   * 联系电话
   */
  public SL_TEAM_ORDER setTel(java.lang.String tel) {
    this.tel = tel;
    return this;
  }

  public void unsetTel() {
    this.tel = null;
  }

  /** Returns true if field tel is set (has been assigned a value) and false otherwise */
  public boolean isSetTel() {
    return this.tel != null;
  }

  public void setTelIsSet(boolean value) {
    if (!value) {
      this.tel = null;
    }
  }

  /**
   * 订单说明
   */
  public java.lang.String getRemark() {
    return this.remark;
  }

  /**
   * 订单说明
   */
  public SL_TEAM_ORDER setRemark(java.lang.String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case APPLY_ID:
      if (value == null) {
        unsetApplyId();
      } else {
        setApplyId((java.lang.String)value);
      }
      break;

    case APPLY_TIME:
      if (value == null) {
        unsetApplyTime();
      } else {
        setApplyTime((java.lang.Long)value);
      }
      break;

    case APPLY_USER_ID:
      if (value == null) {
        unsetApplyUserId();
      } else {
        setApplyUserId((java.lang.String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((java.lang.String)value);
      }
      break;

    case ORG_NAME:
      if (value == null) {
        unsetOrgName();
      } else {
        setOrgName((java.lang.String)value);
      }
      break;

    case IN_DT:
      if (value == null) {
        unsetInDt();
      } else {
        setInDt((java.lang.Long)value);
      }
      break;

    case CHANGE_USER_ID:
      if (value == null) {
        unsetChangeUserId();
      } else {
        setChangeUserId((java.lang.String)value);
      }
      break;

    case CHANGE_USER_NAME:
      if (value == null) {
        unsetChangeUserName();
      } else {
        setChangeUserName((java.lang.String)value);
      }
      break;

    case CHANGE_TIME:
      if (value == null) {
        unsetChangeTime();
      } else {
        setChangeTime((java.lang.Long)value);
      }
      break;

    case EXAM_USER_ID:
      if (value == null) {
        unsetExamUserId();
      } else {
        setExamUserId((java.lang.String)value);
      }
      break;

    case EXAM_USER_NAME:
      if (value == null) {
        unsetExamUserName();
      } else {
        setExamUserName((java.lang.String)value);
      }
      break;

    case EXAM_TIME:
      if (value == null) {
        unsetExamTime();
      } else {
        setExamTime((java.lang.Long)value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((java.lang.String)value);
      }
      break;

    case APPLY_FROZEN_ADVANCE_AMT:
      if (value == null) {
        unsetApplyFrozenAdvanceAmt();
      } else {
        setApplyFrozenAdvanceAmt((java.lang.Double)value);
      }
      break;

    case EXAM_FROZEN_ADVANCE_AMT:
      if (value == null) {
        unsetExamFrozenAdvanceAmt();
      } else {
        setExamFrozenAdvanceAmt((java.lang.Double)value);
      }
      break;

    case EXAM_TYPE:
      if (value == null) {
        unsetExamType();
      } else {
        setExamType((java.lang.String)value);
      }
      break;

    case MINUS_ADVANCE_AMT:
      if (value == null) {
        unsetMinusAdvanceAmt();
      } else {
        setMinusAdvanceAmt((java.lang.Double)value);
      }
      break;

    case TEAM_ORDER_DETAIL:
      if (value == null) {
        unsetTeamOrderDetail();
      } else {
        setTeamOrderDetail((java.util.List<SL_TEAM_ORDER_DETAIL>)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((java.lang.String)value);
      }
      break;

    case CARD_TYPE_NAME:
      if (value == null) {
        unsetCardTypeName();
      } else {
        setCardTypeName((java.lang.String)value);
      }
      break;

    case CARD_ID:
      if (value == null) {
        unsetCardId();
      } else {
        setCardId((java.lang.String)value);
      }
      break;

    case TEL:
      if (value == null) {
        unsetTel();
      } else {
        setTel((java.lang.String)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLY_ID:
      return getApplyId();

    case APPLY_TIME:
      return getApplyTime();

    case APPLY_USER_ID:
      return getApplyUserId();

    case ORG_ID:
      return getOrgId();

    case ORG_NAME:
      return getOrgName();

    case IN_DT:
      return getInDt();

    case CHANGE_USER_ID:
      return getChangeUserId();

    case CHANGE_USER_NAME:
      return getChangeUserName();

    case CHANGE_TIME:
      return getChangeTime();

    case EXAM_USER_ID:
      return getExamUserId();

    case EXAM_USER_NAME:
      return getExamUserName();

    case EXAM_TIME:
      return getExamTime();

    case STAT:
      return getStat();

    case APPLY_FROZEN_ADVANCE_AMT:
      return getApplyFrozenAdvanceAmt();

    case EXAM_FROZEN_ADVANCE_AMT:
      return getExamFrozenAdvanceAmt();

    case EXAM_TYPE:
      return getExamType();

    case MINUS_ADVANCE_AMT:
      return getMinusAdvanceAmt();

    case TEAM_ORDER_DETAIL:
      return getTeamOrderDetail();

    case CARD_TYPE:
      return getCardType();

    case CARD_TYPE_NAME:
      return getCardTypeName();

    case CARD_ID:
      return getCardId();

    case TEL:
      return getTel();

    case REMARK:
      return getRemark();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APPLY_ID:
      return isSetApplyId();
    case APPLY_TIME:
      return isSetApplyTime();
    case APPLY_USER_ID:
      return isSetApplyUserId();
    case ORG_ID:
      return isSetOrgId();
    case ORG_NAME:
      return isSetOrgName();
    case IN_DT:
      return isSetInDt();
    case CHANGE_USER_ID:
      return isSetChangeUserId();
    case CHANGE_USER_NAME:
      return isSetChangeUserName();
    case CHANGE_TIME:
      return isSetChangeTime();
    case EXAM_USER_ID:
      return isSetExamUserId();
    case EXAM_USER_NAME:
      return isSetExamUserName();
    case EXAM_TIME:
      return isSetExamTime();
    case STAT:
      return isSetStat();
    case APPLY_FROZEN_ADVANCE_AMT:
      return isSetApplyFrozenAdvanceAmt();
    case EXAM_FROZEN_ADVANCE_AMT:
      return isSetExamFrozenAdvanceAmt();
    case EXAM_TYPE:
      return isSetExamType();
    case MINUS_ADVANCE_AMT:
      return isSetMinusAdvanceAmt();
    case TEAM_ORDER_DETAIL:
      return isSetTeamOrderDetail();
    case CARD_TYPE:
      return isSetCardType();
    case CARD_TYPE_NAME:
      return isSetCardTypeName();
    case CARD_ID:
      return isSetCardId();
    case TEL:
      return isSetTel();
    case REMARK:
      return isSetRemark();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_TEAM_ORDER)
      return this.equals((SL_TEAM_ORDER)that);
    return false;
  }

  public boolean equals(SL_TEAM_ORDER that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_applyId = true && this.isSetApplyId();
    boolean that_present_applyId = true && that.isSetApplyId();
    if (this_present_applyId || that_present_applyId) {
      if (!(this_present_applyId && that_present_applyId))
        return false;
      if (!this.applyId.equals(that.applyId))
        return false;
    }

    boolean this_present_applyTime = true;
    boolean that_present_applyTime = true;
    if (this_present_applyTime || that_present_applyTime) {
      if (!(this_present_applyTime && that_present_applyTime))
        return false;
      if (this.applyTime != that.applyTime)
        return false;
    }

    boolean this_present_applyUserId = true && this.isSetApplyUserId();
    boolean that_present_applyUserId = true && that.isSetApplyUserId();
    if (this_present_applyUserId || that_present_applyUserId) {
      if (!(this_present_applyUserId && that_present_applyUserId))
        return false;
      if (!this.applyUserId.equals(that.applyUserId))
        return false;
    }

    boolean this_present_orgId = true && this.isSetOrgId();
    boolean that_present_orgId = true && that.isSetOrgId();
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (!this.orgId.equals(that.orgId))
        return false;
    }

    boolean this_present_orgName = true && this.isSetOrgName();
    boolean that_present_orgName = true && that.isSetOrgName();
    if (this_present_orgName || that_present_orgName) {
      if (!(this_present_orgName && that_present_orgName))
        return false;
      if (!this.orgName.equals(that.orgName))
        return false;
    }

    boolean this_present_inDt = true && this.isSetInDt();
    boolean that_present_inDt = true && that.isSetInDt();
    if (this_present_inDt || that_present_inDt) {
      if (!(this_present_inDt && that_present_inDt))
        return false;
      if (this.inDt != that.inDt)
        return false;
    }

    boolean this_present_changeUserId = true && this.isSetChangeUserId();
    boolean that_present_changeUserId = true && that.isSetChangeUserId();
    if (this_present_changeUserId || that_present_changeUserId) {
      if (!(this_present_changeUserId && that_present_changeUserId))
        return false;
      if (!this.changeUserId.equals(that.changeUserId))
        return false;
    }

    boolean this_present_changeUserName = true && this.isSetChangeUserName();
    boolean that_present_changeUserName = true && that.isSetChangeUserName();
    if (this_present_changeUserName || that_present_changeUserName) {
      if (!(this_present_changeUserName && that_present_changeUserName))
        return false;
      if (!this.changeUserName.equals(that.changeUserName))
        return false;
    }

    boolean this_present_changeTime = true && this.isSetChangeTime();
    boolean that_present_changeTime = true && that.isSetChangeTime();
    if (this_present_changeTime || that_present_changeTime) {
      if (!(this_present_changeTime && that_present_changeTime))
        return false;
      if (this.changeTime != that.changeTime)
        return false;
    }

    boolean this_present_examUserId = true && this.isSetExamUserId();
    boolean that_present_examUserId = true && that.isSetExamUserId();
    if (this_present_examUserId || that_present_examUserId) {
      if (!(this_present_examUserId && that_present_examUserId))
        return false;
      if (!this.examUserId.equals(that.examUserId))
        return false;
    }

    boolean this_present_examUserName = true && this.isSetExamUserName();
    boolean that_present_examUserName = true && that.isSetExamUserName();
    if (this_present_examUserName || that_present_examUserName) {
      if (!(this_present_examUserName && that_present_examUserName))
        return false;
      if (!this.examUserName.equals(that.examUserName))
        return false;
    }

    boolean this_present_examTime = true && this.isSetExamTime();
    boolean that_present_examTime = true && that.isSetExamTime();
    if (this_present_examTime || that_present_examTime) {
      if (!(this_present_examTime && that_present_examTime))
        return false;
      if (this.examTime != that.examTime)
        return false;
    }

    boolean this_present_stat = true && this.isSetStat();
    boolean that_present_stat = true && that.isSetStat();
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!this.stat.equals(that.stat))
        return false;
    }

    boolean this_present_applyFrozenAdvanceAmt = true && this.isSetApplyFrozenAdvanceAmt();
    boolean that_present_applyFrozenAdvanceAmt = true && that.isSetApplyFrozenAdvanceAmt();
    if (this_present_applyFrozenAdvanceAmt || that_present_applyFrozenAdvanceAmt) {
      if (!(this_present_applyFrozenAdvanceAmt && that_present_applyFrozenAdvanceAmt))
        return false;
      if (this.applyFrozenAdvanceAmt != that.applyFrozenAdvanceAmt)
        return false;
    }

    boolean this_present_examFrozenAdvanceAmt = true && this.isSetExamFrozenAdvanceAmt();
    boolean that_present_examFrozenAdvanceAmt = true && that.isSetExamFrozenAdvanceAmt();
    if (this_present_examFrozenAdvanceAmt || that_present_examFrozenAdvanceAmt) {
      if (!(this_present_examFrozenAdvanceAmt && that_present_examFrozenAdvanceAmt))
        return false;
      if (this.examFrozenAdvanceAmt != that.examFrozenAdvanceAmt)
        return false;
    }

    boolean this_present_examType = true && this.isSetExamType();
    boolean that_present_examType = true && that.isSetExamType();
    if (this_present_examType || that_present_examType) {
      if (!(this_present_examType && that_present_examType))
        return false;
      if (!this.examType.equals(that.examType))
        return false;
    }

    boolean this_present_minusAdvanceAmt = true && this.isSetMinusAdvanceAmt();
    boolean that_present_minusAdvanceAmt = true && that.isSetMinusAdvanceAmt();
    if (this_present_minusAdvanceAmt || that_present_minusAdvanceAmt) {
      if (!(this_present_minusAdvanceAmt && that_present_minusAdvanceAmt))
        return false;
      if (this.minusAdvanceAmt != that.minusAdvanceAmt)
        return false;
    }

    boolean this_present_teamOrderDetail = true && this.isSetTeamOrderDetail();
    boolean that_present_teamOrderDetail = true && that.isSetTeamOrderDetail();
    if (this_present_teamOrderDetail || that_present_teamOrderDetail) {
      if (!(this_present_teamOrderDetail && that_present_teamOrderDetail))
        return false;
      if (!this.teamOrderDetail.equals(that.teamOrderDetail))
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_cardTypeName = true && this.isSetCardTypeName();
    boolean that_present_cardTypeName = true && that.isSetCardTypeName();
    if (this_present_cardTypeName || that_present_cardTypeName) {
      if (!(this_present_cardTypeName && that_present_cardTypeName))
        return false;
      if (!this.cardTypeName.equals(that.cardTypeName))
        return false;
    }

    boolean this_present_cardId = true && this.isSetCardId();
    boolean that_present_cardId = true && that.isSetCardId();
    if (this_present_cardId || that_present_cardId) {
      if (!(this_present_cardId && that_present_cardId))
        return false;
      if (!this.cardId.equals(that.cardId))
        return false;
    }

    boolean this_present_tel = true && this.isSetTel();
    boolean that_present_tel = true && that.isSetTel();
    if (this_present_tel || that_present_tel) {
      if (!(this_present_tel && that_present_tel))
        return false;
      if (!this.tel.equals(that.tel))
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetApplyId()) ? 131071 : 524287);
    if (isSetApplyId())
      hashCode = hashCode * 8191 + applyId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(applyTime);

    hashCode = hashCode * 8191 + ((isSetApplyUserId()) ? 131071 : 524287);
    if (isSetApplyUserId())
      hashCode = hashCode * 8191 + applyUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrgId()) ? 131071 : 524287);
    if (isSetOrgId())
      hashCode = hashCode * 8191 + orgId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrgName()) ? 131071 : 524287);
    if (isSetOrgName())
      hashCode = hashCode * 8191 + orgName.hashCode();

    hashCode = hashCode * 8191 + ((isSetInDt()) ? 131071 : 524287);
    if (isSetInDt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(inDt);

    hashCode = hashCode * 8191 + ((isSetChangeUserId()) ? 131071 : 524287);
    if (isSetChangeUserId())
      hashCode = hashCode * 8191 + changeUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChangeUserName()) ? 131071 : 524287);
    if (isSetChangeUserName())
      hashCode = hashCode * 8191 + changeUserName.hashCode();

    hashCode = hashCode * 8191 + ((isSetChangeTime()) ? 131071 : 524287);
    if (isSetChangeTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(changeTime);

    hashCode = hashCode * 8191 + ((isSetExamUserId()) ? 131071 : 524287);
    if (isSetExamUserId())
      hashCode = hashCode * 8191 + examUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetExamUserName()) ? 131071 : 524287);
    if (isSetExamUserName())
      hashCode = hashCode * 8191 + examUserName.hashCode();

    hashCode = hashCode * 8191 + ((isSetExamTime()) ? 131071 : 524287);
    if (isSetExamTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(examTime);

    hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
    if (isSetStat())
      hashCode = hashCode * 8191 + stat.hashCode();

    hashCode = hashCode * 8191 + ((isSetApplyFrozenAdvanceAmt()) ? 131071 : 524287);
    if (isSetApplyFrozenAdvanceAmt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(applyFrozenAdvanceAmt);

    hashCode = hashCode * 8191 + ((isSetExamFrozenAdvanceAmt()) ? 131071 : 524287);
    if (isSetExamFrozenAdvanceAmt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(examFrozenAdvanceAmt);

    hashCode = hashCode * 8191 + ((isSetExamType()) ? 131071 : 524287);
    if (isSetExamType())
      hashCode = hashCode * 8191 + examType.hashCode();

    hashCode = hashCode * 8191 + ((isSetMinusAdvanceAmt()) ? 131071 : 524287);
    if (isSetMinusAdvanceAmt())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(minusAdvanceAmt);

    hashCode = hashCode * 8191 + ((isSetTeamOrderDetail()) ? 131071 : 524287);
    if (isSetTeamOrderDetail())
      hashCode = hashCode * 8191 + teamOrderDetail.hashCode();

    hashCode = hashCode * 8191 + ((isSetCardType()) ? 131071 : 524287);
    if (isSetCardType())
      hashCode = hashCode * 8191 + cardType.hashCode();

    hashCode = hashCode * 8191 + ((isSetCardTypeName()) ? 131071 : 524287);
    if (isSetCardTypeName())
      hashCode = hashCode * 8191 + cardTypeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetCardId()) ? 131071 : 524287);
    if (isSetCardId())
      hashCode = hashCode * 8191 + cardId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTel()) ? 131071 : 524287);
    if (isSetTel())
      hashCode = hashCode * 8191 + tel.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SL_TEAM_ORDER other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplyTime()).compareTo(other.isSetApplyTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyTime, other.applyTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplyUserId()).compareTo(other.isSetApplyUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyUserId, other.applyUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgName()).compareTo(other.isSetOrgName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgName, other.orgName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInDt()).compareTo(other.isSetInDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inDt, other.inDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChangeUserId()).compareTo(other.isSetChangeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeUserId, other.changeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChangeUserName()).compareTo(other.isSetChangeUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeUserName, other.changeUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChangeTime()).compareTo(other.isSetChangeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChangeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.changeTime, other.changeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExamUserId()).compareTo(other.isSetExamUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examUserId, other.examUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExamUserName()).compareTo(other.isSetExamUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examUserName, other.examUserName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExamTime()).compareTo(other.isSetExamTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examTime, other.examTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplyFrozenAdvanceAmt()).compareTo(other.isSetApplyFrozenAdvanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyFrozenAdvanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyFrozenAdvanceAmt, other.applyFrozenAdvanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExamFrozenAdvanceAmt()).compareTo(other.isSetExamFrozenAdvanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamFrozenAdvanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examFrozenAdvanceAmt, other.examFrozenAdvanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExamType()).compareTo(other.isSetExamType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examType, other.examType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMinusAdvanceAmt()).compareTo(other.isSetMinusAdvanceAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMinusAdvanceAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minusAdvanceAmt, other.minusAdvanceAmt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeamOrderDetail()).compareTo(other.isSetTeamOrderDetail());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamOrderDetail()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamOrderDetail, other.teamOrderDetail);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardTypeName()).compareTo(other.isSetCardTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardTypeName, other.cardTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardId()).compareTo(other.isSetCardId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardId, other.cardId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTel()).compareTo(other.isSetTel());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTel()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tel, other.tel);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_TEAM_ORDER(");
    boolean first = true;

    sb.append("applyId:");
    if (this.applyId == null) {
      sb.append("null");
    } else {
      sb.append(this.applyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyTime:");
    sb.append(this.applyTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyUserId:");
    if (this.applyUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.applyUserId);
    }
    first = false;
    if (isSetOrgId()) {
      if (!first) sb.append(", ");
      sb.append("orgId:");
      if (this.orgId == null) {
        sb.append("null");
      } else {
        sb.append(this.orgId);
      }
      first = false;
    }
    if (isSetOrgName()) {
      if (!first) sb.append(", ");
      sb.append("orgName:");
      if (this.orgName == null) {
        sb.append("null");
      } else {
        sb.append(this.orgName);
      }
      first = false;
    }
    if (isSetInDt()) {
      if (!first) sb.append(", ");
      sb.append("inDt:");
      sb.append(this.inDt);
      first = false;
    }
    if (isSetChangeUserId()) {
      if (!first) sb.append(", ");
      sb.append("changeUserId:");
      if (this.changeUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.changeUserId);
      }
      first = false;
    }
    if (isSetChangeUserName()) {
      if (!first) sb.append(", ");
      sb.append("changeUserName:");
      if (this.changeUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.changeUserName);
      }
      first = false;
    }
    if (isSetChangeTime()) {
      if (!first) sb.append(", ");
      sb.append("changeTime:");
      sb.append(this.changeTime);
      first = false;
    }
    if (isSetExamUserId()) {
      if (!first) sb.append(", ");
      sb.append("examUserId:");
      if (this.examUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.examUserId);
      }
      first = false;
    }
    if (isSetExamUserName()) {
      if (!first) sb.append(", ");
      sb.append("examUserName:");
      if (this.examUserName == null) {
        sb.append("null");
      } else {
        sb.append(this.examUserName);
      }
      first = false;
    }
    if (isSetExamTime()) {
      if (!first) sb.append(", ");
      sb.append("examTime:");
      sb.append(this.examTime);
      first = false;
    }
    if (isSetStat()) {
      if (!first) sb.append(", ");
      sb.append("stat:");
      if (this.stat == null) {
        sb.append("null");
      } else {
        sb.append(this.stat);
      }
      first = false;
    }
    if (isSetApplyFrozenAdvanceAmt()) {
      if (!first) sb.append(", ");
      sb.append("applyFrozenAdvanceAmt:");
      sb.append(this.applyFrozenAdvanceAmt);
      first = false;
    }
    if (isSetExamFrozenAdvanceAmt()) {
      if (!first) sb.append(", ");
      sb.append("examFrozenAdvanceAmt:");
      sb.append(this.examFrozenAdvanceAmt);
      first = false;
    }
    if (isSetExamType()) {
      if (!first) sb.append(", ");
      sb.append("examType:");
      if (this.examType == null) {
        sb.append("null");
      } else {
        sb.append(this.examType);
      }
      first = false;
    }
    if (isSetMinusAdvanceAmt()) {
      if (!first) sb.append(", ");
      sb.append("minusAdvanceAmt:");
      sb.append(this.minusAdvanceAmt);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("teamOrderDetail:");
    if (this.teamOrderDetail == null) {
      sb.append("null");
    } else {
      sb.append(this.teamOrderDetail);
    }
    first = false;
    if (isSetCardType()) {
      if (!first) sb.append(", ");
      sb.append("cardType:");
      if (this.cardType == null) {
        sb.append("null");
      } else {
        sb.append(this.cardType);
      }
      first = false;
    }
    if (isSetCardTypeName()) {
      if (!first) sb.append(", ");
      sb.append("cardTypeName:");
      if (this.cardTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.cardTypeName);
      }
      first = false;
    }
    if (isSetCardId()) {
      if (!first) sb.append(", ");
      sb.append("cardId:");
      if (this.cardId == null) {
        sb.append("null");
      } else {
        sb.append(this.cardId);
      }
      first = false;
    }
    if (isSetTel()) {
      if (!first) sb.append(", ");
      sb.append("tel:");
      if (this.tel == null) {
        sb.append("null");
      } else {
        sb.append(this.tel);
      }
      first = false;
    }
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (applyId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applyId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'applyTime' because it's a primitive and you chose the non-beans generator.
    if (applyUserId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applyUserId' was not present! Struct: " + toString());
    }
    if (teamOrderDetail == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'teamOrderDetail' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_TEAM_ORDERStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_TEAM_ORDERStandardScheme getScheme() {
      return new SL_TEAM_ORDERStandardScheme();
    }
  }

  private static class SL_TEAM_ORDERStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_TEAM_ORDER> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_TEAM_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyId = iprot.readString();
              struct.setApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLY_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.applyTime = iprot.readI64();
              struct.setApplyTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // APPLY_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyUserId = iprot.readString();
              struct.setApplyUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgId = iprot.readString();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORG_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgName = iprot.readString();
              struct.setOrgNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // IN_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.inDt = iprot.readI64();
              struct.setInDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHANGE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.changeUserId = iprot.readString();
              struct.setChangeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // CHANGE_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.changeUserName = iprot.readString();
              struct.setChangeUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // CHANGE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.changeTime = iprot.readI64();
              struct.setChangeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // EXAM_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examUserId = iprot.readString();
              struct.setExamUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EXAM_USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examUserName = iprot.readString();
              struct.setExamUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EXAM_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.examTime = iprot.readI64();
              struct.setExamTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stat = iprot.readString();
              struct.setStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // APPLY_FROZEN_ADVANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.applyFrozenAdvanceAmt = iprot.readDouble();
              struct.setApplyFrozenAdvanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EXAM_FROZEN_ADVANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.examFrozenAdvanceAmt = iprot.readDouble();
              struct.setExamFrozenAdvanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EXAM_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.examType = iprot.readString();
              struct.setExamTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // MINUS_ADVANCE_AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.minusAdvanceAmt = iprot.readDouble();
              struct.setMinusAdvanceAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // TEAM_ORDER_DETAIL
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                struct.teamOrderDetail = new java.util.ArrayList<SL_TEAM_ORDER_DETAIL>(_list16.size);
                SL_TEAM_ORDER_DETAIL _elem17;
                for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                {
                  _elem17 = new SL_TEAM_ORDER_DETAIL();
                  _elem17.read(iprot);
                  struct.teamOrderDetail.add(_elem17);
                }
                iprot.readListEnd();
              }
              struct.setTeamOrderDetailIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 19: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardType = iprot.readString();
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 20: // CARD_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardTypeName = iprot.readString();
              struct.setCardTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 21: // CARD_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardId = iprot.readString();
              struct.setCardIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 22: // TEL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.tel = iprot.readString();
              struct.setTelIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 23: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetApplyTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applyTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_TEAM_ORDER struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applyId != null) {
        oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
        oprot.writeString(struct.applyId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_TIME_FIELD_DESC);
      oprot.writeI64(struct.applyTime);
      oprot.writeFieldEnd();
      if (struct.applyUserId != null) {
        oprot.writeFieldBegin(APPLY_USER_ID_FIELD_DESC);
        oprot.writeString(struct.applyUserId);
        oprot.writeFieldEnd();
      }
      if (struct.orgId != null) {
        if (struct.isSetOrgId()) {
          oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
          oprot.writeString(struct.orgId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.orgName != null) {
        if (struct.isSetOrgName()) {
          oprot.writeFieldBegin(ORG_NAME_FIELD_DESC);
          oprot.writeString(struct.orgName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetInDt()) {
        oprot.writeFieldBegin(IN_DT_FIELD_DESC);
        oprot.writeI64(struct.inDt);
        oprot.writeFieldEnd();
      }
      if (struct.changeUserId != null) {
        if (struct.isSetChangeUserId()) {
          oprot.writeFieldBegin(CHANGE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.changeUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.changeUserName != null) {
        if (struct.isSetChangeUserName()) {
          oprot.writeFieldBegin(CHANGE_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.changeUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetChangeTime()) {
        oprot.writeFieldBegin(CHANGE_TIME_FIELD_DESC);
        oprot.writeI64(struct.changeTime);
        oprot.writeFieldEnd();
      }
      if (struct.examUserId != null) {
        if (struct.isSetExamUserId()) {
          oprot.writeFieldBegin(EXAM_USER_ID_FIELD_DESC);
          oprot.writeString(struct.examUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.examUserName != null) {
        if (struct.isSetExamUserName()) {
          oprot.writeFieldBegin(EXAM_USER_NAME_FIELD_DESC);
          oprot.writeString(struct.examUserName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetExamTime()) {
        oprot.writeFieldBegin(EXAM_TIME_FIELD_DESC);
        oprot.writeI64(struct.examTime);
        oprot.writeFieldEnd();
      }
      if (struct.stat != null) {
        if (struct.isSetStat()) {
          oprot.writeFieldBegin(STAT_FIELD_DESC);
          oprot.writeString(struct.stat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetApplyFrozenAdvanceAmt()) {
        oprot.writeFieldBegin(APPLY_FROZEN_ADVANCE_AMT_FIELD_DESC);
        oprot.writeDouble(struct.applyFrozenAdvanceAmt);
        oprot.writeFieldEnd();
      }
      if (struct.isSetExamFrozenAdvanceAmt()) {
        oprot.writeFieldBegin(EXAM_FROZEN_ADVANCE_AMT_FIELD_DESC);
        oprot.writeDouble(struct.examFrozenAdvanceAmt);
        oprot.writeFieldEnd();
      }
      if (struct.examType != null) {
        if (struct.isSetExamType()) {
          oprot.writeFieldBegin(EXAM_TYPE_FIELD_DESC);
          oprot.writeString(struct.examType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetMinusAdvanceAmt()) {
        oprot.writeFieldBegin(MINUS_ADVANCE_AMT_FIELD_DESC);
        oprot.writeDouble(struct.minusAdvanceAmt);
        oprot.writeFieldEnd();
      }
      if (struct.teamOrderDetail != null) {
        oprot.writeFieldBegin(TEAM_ORDER_DETAIL_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.teamOrderDetail.size()));
          for (SL_TEAM_ORDER_DETAIL _iter19 : struct.teamOrderDetail)
          {
            _iter19.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.cardType != null) {
        if (struct.isSetCardType()) {
          oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
          oprot.writeString(struct.cardType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardTypeName != null) {
        if (struct.isSetCardTypeName()) {
          oprot.writeFieldBegin(CARD_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.cardTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardId != null) {
        if (struct.isSetCardId()) {
          oprot.writeFieldBegin(CARD_ID_FIELD_DESC);
          oprot.writeString(struct.cardId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.tel != null) {
        if (struct.isSetTel()) {
          oprot.writeFieldBegin(TEL_FIELD_DESC);
          oprot.writeString(struct.tel);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_TEAM_ORDERTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_TEAM_ORDERTupleScheme getScheme() {
      return new SL_TEAM_ORDERTupleScheme();
    }
  }

  private static class SL_TEAM_ORDERTupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_TEAM_ORDER> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_TEAM_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.applyId);
      oprot.writeI64(struct.applyTime);
      oprot.writeString(struct.applyUserId);
      {
        oprot.writeI32(struct.teamOrderDetail.size());
        for (SL_TEAM_ORDER_DETAIL _iter20 : struct.teamOrderDetail)
        {
          _iter20.write(oprot);
        }
      }
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrgId()) {
        optionals.set(0);
      }
      if (struct.isSetOrgName()) {
        optionals.set(1);
      }
      if (struct.isSetInDt()) {
        optionals.set(2);
      }
      if (struct.isSetChangeUserId()) {
        optionals.set(3);
      }
      if (struct.isSetChangeUserName()) {
        optionals.set(4);
      }
      if (struct.isSetChangeTime()) {
        optionals.set(5);
      }
      if (struct.isSetExamUserId()) {
        optionals.set(6);
      }
      if (struct.isSetExamUserName()) {
        optionals.set(7);
      }
      if (struct.isSetExamTime()) {
        optionals.set(8);
      }
      if (struct.isSetStat()) {
        optionals.set(9);
      }
      if (struct.isSetApplyFrozenAdvanceAmt()) {
        optionals.set(10);
      }
      if (struct.isSetExamFrozenAdvanceAmt()) {
        optionals.set(11);
      }
      if (struct.isSetExamType()) {
        optionals.set(12);
      }
      if (struct.isSetMinusAdvanceAmt()) {
        optionals.set(13);
      }
      if (struct.isSetCardType()) {
        optionals.set(14);
      }
      if (struct.isSetCardTypeName()) {
        optionals.set(15);
      }
      if (struct.isSetCardId()) {
        optionals.set(16);
      }
      if (struct.isSetTel()) {
        optionals.set(17);
      }
      if (struct.isSetRemark()) {
        optionals.set(18);
      }
      oprot.writeBitSet(optionals, 19);
      if (struct.isSetOrgId()) {
        oprot.writeString(struct.orgId);
      }
      if (struct.isSetOrgName()) {
        oprot.writeString(struct.orgName);
      }
      if (struct.isSetInDt()) {
        oprot.writeI64(struct.inDt);
      }
      if (struct.isSetChangeUserId()) {
        oprot.writeString(struct.changeUserId);
      }
      if (struct.isSetChangeUserName()) {
        oprot.writeString(struct.changeUserName);
      }
      if (struct.isSetChangeTime()) {
        oprot.writeI64(struct.changeTime);
      }
      if (struct.isSetExamUserId()) {
        oprot.writeString(struct.examUserId);
      }
      if (struct.isSetExamUserName()) {
        oprot.writeString(struct.examUserName);
      }
      if (struct.isSetExamTime()) {
        oprot.writeI64(struct.examTime);
      }
      if (struct.isSetStat()) {
        oprot.writeString(struct.stat);
      }
      if (struct.isSetApplyFrozenAdvanceAmt()) {
        oprot.writeDouble(struct.applyFrozenAdvanceAmt);
      }
      if (struct.isSetExamFrozenAdvanceAmt()) {
        oprot.writeDouble(struct.examFrozenAdvanceAmt);
      }
      if (struct.isSetExamType()) {
        oprot.writeString(struct.examType);
      }
      if (struct.isSetMinusAdvanceAmt()) {
        oprot.writeDouble(struct.minusAdvanceAmt);
      }
      if (struct.isSetCardType()) {
        oprot.writeString(struct.cardType);
      }
      if (struct.isSetCardTypeName()) {
        oprot.writeString(struct.cardTypeName);
      }
      if (struct.isSetCardId()) {
        oprot.writeString(struct.cardId);
      }
      if (struct.isSetTel()) {
        oprot.writeString(struct.tel);
      }
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_TEAM_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.applyId = iprot.readString();
      struct.setApplyIdIsSet(true);
      struct.applyTime = iprot.readI64();
      struct.setApplyTimeIsSet(true);
      struct.applyUserId = iprot.readString();
      struct.setApplyUserIdIsSet(true);
      {
        org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.teamOrderDetail = new java.util.ArrayList<SL_TEAM_ORDER_DETAIL>(_list21.size);
        SL_TEAM_ORDER_DETAIL _elem22;
        for (int _i23 = 0; _i23 < _list21.size; ++_i23)
        {
          _elem22 = new SL_TEAM_ORDER_DETAIL();
          _elem22.read(iprot);
          struct.teamOrderDetail.add(_elem22);
        }
      }
      struct.setTeamOrderDetailIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(19);
      if (incoming.get(0)) {
        struct.orgId = iprot.readString();
        struct.setOrgIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.orgName = iprot.readString();
        struct.setOrgNameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.inDt = iprot.readI64();
        struct.setInDtIsSet(true);
      }
      if (incoming.get(3)) {
        struct.changeUserId = iprot.readString();
        struct.setChangeUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.changeUserName = iprot.readString();
        struct.setChangeUserNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.changeTime = iprot.readI64();
        struct.setChangeTimeIsSet(true);
      }
      if (incoming.get(6)) {
        struct.examUserId = iprot.readString();
        struct.setExamUserIdIsSet(true);
      }
      if (incoming.get(7)) {
        struct.examUserName = iprot.readString();
        struct.setExamUserNameIsSet(true);
      }
      if (incoming.get(8)) {
        struct.examTime = iprot.readI64();
        struct.setExamTimeIsSet(true);
      }
      if (incoming.get(9)) {
        struct.stat = iprot.readString();
        struct.setStatIsSet(true);
      }
      if (incoming.get(10)) {
        struct.applyFrozenAdvanceAmt = iprot.readDouble();
        struct.setApplyFrozenAdvanceAmtIsSet(true);
      }
      if (incoming.get(11)) {
        struct.examFrozenAdvanceAmt = iprot.readDouble();
        struct.setExamFrozenAdvanceAmtIsSet(true);
      }
      if (incoming.get(12)) {
        struct.examType = iprot.readString();
        struct.setExamTypeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.minusAdvanceAmt = iprot.readDouble();
        struct.setMinusAdvanceAmtIsSet(true);
      }
      if (incoming.get(14)) {
        struct.cardType = iprot.readString();
        struct.setCardTypeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.cardTypeName = iprot.readString();
        struct.setCardTypeNameIsSet(true);
      }
      if (incoming.get(16)) {
        struct.cardId = iprot.readString();
        struct.setCardIdIsSet(true);
      }
      if (incoming.get(17)) {
        struct.tel = iprot.readString();
        struct.setTelIsSet(true);
      }
      if (incoming.get(18)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

