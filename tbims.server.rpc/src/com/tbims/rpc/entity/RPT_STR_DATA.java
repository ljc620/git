/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 网点库存统计表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class RPT_STR_DATA implements org.apache.thrift.TBase<RPT_STR_DATA, RPT_STR_DATA._Fields>, java.io.Serializable, Cloneable, Comparable<RPT_STR_DATA> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RPT_STR_DATA");

  private static final org.apache.thrift.protocol.TField RTP_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rtpDate", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField STR_LAST_TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("strLastTicketNum", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField DELIVERY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("deliveryNum", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField STR_TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("strTicketNum", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField USELESS_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("uselessNum", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SUPPLY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("supplyNum", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SALE_TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("saleTicketNum", org.apache.thrift.protocol.TType.I64, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RPT_STR_DATAStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RPT_STR_DATATupleSchemeFactory();

  /**
   * 交易日期
   */
  public long rtpDate; // optional
  /**
   * 网点编号
   */
  public long outletId; // optional
  /**
   * 网点名称
   */
  public java.lang.String outletName; // optional
  /**
   * 票种名称
   */
  public java.lang.String ticketTypeId; // optional
  /**
   * 票种编码
   */
  public java.lang.String ticketTypeName; // optional
  /**
   * 上日结余数量
   */
  public long strLastTicketNum; // optional
  /**
   * 配送数量
   */
  public long deliveryNum; // optional
  /**
   * 当日结余数量
   */
  public long strTicketNum; // optional
  /**
   * 坏票废票数量
   */
  public long uselessNum; // optional
  /**
   * 补票废票数量
   */
  public long supplyNum; // optional
  /**
   * 销售数量
   */
  public long saleTicketNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 交易日期
     */
    RTP_DATE((short)1, "rtpDate"),
    /**
     * 网点编号
     */
    OUTLET_ID((short)2, "outletId"),
    /**
     * 网点名称
     */
    OUTLET_NAME((short)3, "outletName"),
    /**
     * 票种名称
     */
    TICKET_TYPE_ID((short)4, "ticketTypeId"),
    /**
     * 票种编码
     */
    TICKET_TYPE_NAME((short)5, "ticketTypeName"),
    /**
     * 上日结余数量
     */
    STR_LAST_TICKET_NUM((short)6, "strLastTicketNum"),
    /**
     * 配送数量
     */
    DELIVERY_NUM((short)7, "deliveryNum"),
    /**
     * 当日结余数量
     */
    STR_TICKET_NUM((short)8, "strTicketNum"),
    /**
     * 坏票废票数量
     */
    USELESS_NUM((short)9, "uselessNum"),
    /**
     * 补票废票数量
     */
    SUPPLY_NUM((short)10, "supplyNum"),
    /**
     * 销售数量
     */
    SALE_TICKET_NUM((short)11, "saleTicketNum");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RTP_DATE
          return RTP_DATE;
        case 2: // OUTLET_ID
          return OUTLET_ID;
        case 3: // OUTLET_NAME
          return OUTLET_NAME;
        case 4: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 5: // TICKET_TYPE_NAME
          return TICKET_TYPE_NAME;
        case 6: // STR_LAST_TICKET_NUM
          return STR_LAST_TICKET_NUM;
        case 7: // DELIVERY_NUM
          return DELIVERY_NUM;
        case 8: // STR_TICKET_NUM
          return STR_TICKET_NUM;
        case 9: // USELESS_NUM
          return USELESS_NUM;
        case 10: // SUPPLY_NUM
          return SUPPLY_NUM;
        case 11: // SALE_TICKET_NUM
          return SALE_TICKET_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RTPDATE_ISSET_ID = 0;
  private static final int __OUTLETID_ISSET_ID = 1;
  private static final int __STRLASTTICKETNUM_ISSET_ID = 2;
  private static final int __DELIVERYNUM_ISSET_ID = 3;
  private static final int __STRTICKETNUM_ISSET_ID = 4;
  private static final int __USELESSNUM_ISSET_ID = 5;
  private static final int __SUPPLYNUM_ISSET_ID = 6;
  private static final int __SALETICKETNUM_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.RTP_DATE,_Fields.OUTLET_ID,_Fields.OUTLET_NAME,_Fields.TICKET_TYPE_ID,_Fields.TICKET_TYPE_NAME,_Fields.STR_LAST_TICKET_NUM,_Fields.DELIVERY_NUM,_Fields.STR_TICKET_NUM,_Fields.USELESS_NUM,_Fields.SUPPLY_NUM,_Fields.SALE_TICKET_NUM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RTP_DATE, new org.apache.thrift.meta_data.FieldMetaData("rtpDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STR_LAST_TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("strLastTicketNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DELIVERY_NUM, new org.apache.thrift.meta_data.FieldMetaData("deliveryNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STR_TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("strTicketNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.USELESS_NUM, new org.apache.thrift.meta_data.FieldMetaData("uselessNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SUPPLY_NUM, new org.apache.thrift.meta_data.FieldMetaData("supplyNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SALE_TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("saleTicketNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RPT_STR_DATA.class, metaDataMap);
  }

  public RPT_STR_DATA() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RPT_STR_DATA(RPT_STR_DATA other) {
    __isset_bitfield = other.__isset_bitfield;
    this.rtpDate = other.rtpDate;
    this.outletId = other.outletId;
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetTicketTypeName()) {
      this.ticketTypeName = other.ticketTypeName;
    }
    this.strLastTicketNum = other.strLastTicketNum;
    this.deliveryNum = other.deliveryNum;
    this.strTicketNum = other.strTicketNum;
    this.uselessNum = other.uselessNum;
    this.supplyNum = other.supplyNum;
    this.saleTicketNum = other.saleTicketNum;
  }

  public RPT_STR_DATA deepCopy() {
    return new RPT_STR_DATA(this);
  }

  @Override
  public void clear() {
    setRtpDateIsSet(false);
    this.rtpDate = 0;
    setOutletIdIsSet(false);
    this.outletId = 0;
    this.outletName = null;
    this.ticketTypeId = null;
    this.ticketTypeName = null;
    setStrLastTicketNumIsSet(false);
    this.strLastTicketNum = 0;
    setDeliveryNumIsSet(false);
    this.deliveryNum = 0;
    setStrTicketNumIsSet(false);
    this.strTicketNum = 0;
    setUselessNumIsSet(false);
    this.uselessNum = 0;
    setSupplyNumIsSet(false);
    this.supplyNum = 0;
    setSaleTicketNumIsSet(false);
    this.saleTicketNum = 0;
  }

  /**
   * 交易日期
   */
  public long getRtpDate() {
    return this.rtpDate;
  }

  /**
   * 交易日期
   */
  public RPT_STR_DATA setRtpDate(long rtpDate) {
    this.rtpDate = rtpDate;
    setRtpDateIsSet(true);
    return this;
  }

  public void unsetRtpDate() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RTPDATE_ISSET_ID);
  }

  /** Returns true if field rtpDate is set (has been assigned a value) and false otherwise */
  public boolean isSetRtpDate() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RTPDATE_ISSET_ID);
  }

  public void setRtpDateIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RTPDATE_ISSET_ID, value);
  }

  /**
   * 网点编号
   */
  public long getOutletId() {
    return this.outletId;
  }

  /**
   * 网点编号
   */
  public RPT_STR_DATA setOutletId(long outletId) {
    this.outletId = outletId;
    setOutletIdIsSet(true);
    return this;
  }

  public void unsetOutletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  public void setOutletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLETID_ISSET_ID, value);
  }

  /**
   * 网点名称
   */
  public java.lang.String getOutletName() {
    return this.outletName;
  }

  /**
   * 网点名称
   */
  public RPT_STR_DATA setOutletName(java.lang.String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 票种名称
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种名称
   */
  public RPT_STR_DATA setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 票种编码
   */
  public java.lang.String getTicketTypeName() {
    return this.ticketTypeName;
  }

  /**
   * 票种编码
   */
  public RPT_STR_DATA setTicketTypeName(java.lang.String ticketTypeName) {
    this.ticketTypeName = ticketTypeName;
    return this;
  }

  public void unsetTicketTypeName() {
    this.ticketTypeName = null;
  }

  /** Returns true if field ticketTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeName() {
    return this.ticketTypeName != null;
  }

  public void setTicketTypeNameIsSet(boolean value) {
    if (!value) {
      this.ticketTypeName = null;
    }
  }

  /**
   * 上日结余数量
   */
  public long getStrLastTicketNum() {
    return this.strLastTicketNum;
  }

  /**
   * 上日结余数量
   */
  public RPT_STR_DATA setStrLastTicketNum(long strLastTicketNum) {
    this.strLastTicketNum = strLastTicketNum;
    setStrLastTicketNumIsSet(true);
    return this;
  }

  public void unsetStrLastTicketNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRLASTTICKETNUM_ISSET_ID);
  }

  /** Returns true if field strLastTicketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStrLastTicketNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRLASTTICKETNUM_ISSET_ID);
  }

  public void setStrLastTicketNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRLASTTICKETNUM_ISSET_ID, value);
  }

  /**
   * 配送数量
   */
  public long getDeliveryNum() {
    return this.deliveryNum;
  }

  /**
   * 配送数量
   */
  public RPT_STR_DATA setDeliveryNum(long deliveryNum) {
    this.deliveryNum = deliveryNum;
    setDeliveryNumIsSet(true);
    return this;
  }

  public void unsetDeliveryNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DELIVERYNUM_ISSET_ID);
  }

  /** Returns true if field deliveryNum is set (has been assigned a value) and false otherwise */
  public boolean isSetDeliveryNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DELIVERYNUM_ISSET_ID);
  }

  public void setDeliveryNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DELIVERYNUM_ISSET_ID, value);
  }

  /**
   * 当日结余数量
   */
  public long getStrTicketNum() {
    return this.strTicketNum;
  }

  /**
   * 当日结余数量
   */
  public RPT_STR_DATA setStrTicketNum(long strTicketNum) {
    this.strTicketNum = strTicketNum;
    setStrTicketNumIsSet(true);
    return this;
  }

  public void unsetStrTicketNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STRTICKETNUM_ISSET_ID);
  }

  /** Returns true if field strTicketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetStrTicketNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STRTICKETNUM_ISSET_ID);
  }

  public void setStrTicketNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STRTICKETNUM_ISSET_ID, value);
  }

  /**
   * 坏票废票数量
   */
  public long getUselessNum() {
    return this.uselessNum;
  }

  /**
   * 坏票废票数量
   */
  public RPT_STR_DATA setUselessNum(long uselessNum) {
    this.uselessNum = uselessNum;
    setUselessNumIsSet(true);
    return this;
  }

  public void unsetUselessNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __USELESSNUM_ISSET_ID);
  }

  /** Returns true if field uselessNum is set (has been assigned a value) and false otherwise */
  public boolean isSetUselessNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __USELESSNUM_ISSET_ID);
  }

  public void setUselessNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __USELESSNUM_ISSET_ID, value);
  }

  /**
   * 补票废票数量
   */
  public long getSupplyNum() {
    return this.supplyNum;
  }

  /**
   * 补票废票数量
   */
  public RPT_STR_DATA setSupplyNum(long supplyNum) {
    this.supplyNum = supplyNum;
    setSupplyNumIsSet(true);
    return this;
  }

  public void unsetSupplyNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUPPLYNUM_ISSET_ID);
  }

  /** Returns true if field supplyNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSupplyNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUPPLYNUM_ISSET_ID);
  }

  public void setSupplyNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUPPLYNUM_ISSET_ID, value);
  }

  /**
   * 销售数量
   */
  public long getSaleTicketNum() {
    return this.saleTicketNum;
  }

  /**
   * 销售数量
   */
  public RPT_STR_DATA setSaleTicketNum(long saleTicketNum) {
    this.saleTicketNum = saleTicketNum;
    setSaleTicketNumIsSet(true);
    return this;
  }

  public void unsetSaleTicketNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALETICKETNUM_ISSET_ID);
  }

  /** Returns true if field saleTicketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleTicketNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALETICKETNUM_ISSET_ID);
  }

  public void setSaleTicketNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALETICKETNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case RTP_DATE:
      if (value == null) {
        unsetRtpDate();
      } else {
        setRtpDate((java.lang.Long)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((java.lang.Long)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_NAME:
      if (value == null) {
        unsetTicketTypeName();
      } else {
        setTicketTypeName((java.lang.String)value);
      }
      break;

    case STR_LAST_TICKET_NUM:
      if (value == null) {
        unsetStrLastTicketNum();
      } else {
        setStrLastTicketNum((java.lang.Long)value);
      }
      break;

    case DELIVERY_NUM:
      if (value == null) {
        unsetDeliveryNum();
      } else {
        setDeliveryNum((java.lang.Long)value);
      }
      break;

    case STR_TICKET_NUM:
      if (value == null) {
        unsetStrTicketNum();
      } else {
        setStrTicketNum((java.lang.Long)value);
      }
      break;

    case USELESS_NUM:
      if (value == null) {
        unsetUselessNum();
      } else {
        setUselessNum((java.lang.Long)value);
      }
      break;

    case SUPPLY_NUM:
      if (value == null) {
        unsetSupplyNum();
      } else {
        setSupplyNum((java.lang.Long)value);
      }
      break;

    case SALE_TICKET_NUM:
      if (value == null) {
        unsetSaleTicketNum();
      } else {
        setSaleTicketNum((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case RTP_DATE:
      return getRtpDate();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_TYPE_NAME:
      return getTicketTypeName();

    case STR_LAST_TICKET_NUM:
      return getStrLastTicketNum();

    case DELIVERY_NUM:
      return getDeliveryNum();

    case STR_TICKET_NUM:
      return getStrTicketNum();

    case USELESS_NUM:
      return getUselessNum();

    case SUPPLY_NUM:
      return getSupplyNum();

    case SALE_TICKET_NUM:
      return getSaleTicketNum();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case RTP_DATE:
      return isSetRtpDate();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_TYPE_NAME:
      return isSetTicketTypeName();
    case STR_LAST_TICKET_NUM:
      return isSetStrLastTicketNum();
    case DELIVERY_NUM:
      return isSetDeliveryNum();
    case STR_TICKET_NUM:
      return isSetStrTicketNum();
    case USELESS_NUM:
      return isSetUselessNum();
    case SUPPLY_NUM:
      return isSetSupplyNum();
    case SALE_TICKET_NUM:
      return isSetSaleTicketNum();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RPT_STR_DATA)
      return this.equals((RPT_STR_DATA)that);
    return false;
  }

  public boolean equals(RPT_STR_DATA that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_rtpDate = true && this.isSetRtpDate();
    boolean that_present_rtpDate = true && that.isSetRtpDate();
    if (this_present_rtpDate || that_present_rtpDate) {
      if (!(this_present_rtpDate && that_present_rtpDate))
        return false;
      if (this.rtpDate != that.rtpDate)
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (this.outletId != that.outletId)
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketTypeName = true && this.isSetTicketTypeName();
    boolean that_present_ticketTypeName = true && that.isSetTicketTypeName();
    if (this_present_ticketTypeName || that_present_ticketTypeName) {
      if (!(this_present_ticketTypeName && that_present_ticketTypeName))
        return false;
      if (!this.ticketTypeName.equals(that.ticketTypeName))
        return false;
    }

    boolean this_present_strLastTicketNum = true && this.isSetStrLastTicketNum();
    boolean that_present_strLastTicketNum = true && that.isSetStrLastTicketNum();
    if (this_present_strLastTicketNum || that_present_strLastTicketNum) {
      if (!(this_present_strLastTicketNum && that_present_strLastTicketNum))
        return false;
      if (this.strLastTicketNum != that.strLastTicketNum)
        return false;
    }

    boolean this_present_deliveryNum = true && this.isSetDeliveryNum();
    boolean that_present_deliveryNum = true && that.isSetDeliveryNum();
    if (this_present_deliveryNum || that_present_deliveryNum) {
      if (!(this_present_deliveryNum && that_present_deliveryNum))
        return false;
      if (this.deliveryNum != that.deliveryNum)
        return false;
    }

    boolean this_present_strTicketNum = true && this.isSetStrTicketNum();
    boolean that_present_strTicketNum = true && that.isSetStrTicketNum();
    if (this_present_strTicketNum || that_present_strTicketNum) {
      if (!(this_present_strTicketNum && that_present_strTicketNum))
        return false;
      if (this.strTicketNum != that.strTicketNum)
        return false;
    }

    boolean this_present_uselessNum = true && this.isSetUselessNum();
    boolean that_present_uselessNum = true && that.isSetUselessNum();
    if (this_present_uselessNum || that_present_uselessNum) {
      if (!(this_present_uselessNum && that_present_uselessNum))
        return false;
      if (this.uselessNum != that.uselessNum)
        return false;
    }

    boolean this_present_supplyNum = true && this.isSetSupplyNum();
    boolean that_present_supplyNum = true && that.isSetSupplyNum();
    if (this_present_supplyNum || that_present_supplyNum) {
      if (!(this_present_supplyNum && that_present_supplyNum))
        return false;
      if (this.supplyNum != that.supplyNum)
        return false;
    }

    boolean this_present_saleTicketNum = true && this.isSetSaleTicketNum();
    boolean that_present_saleTicketNum = true && that.isSetSaleTicketNum();
    if (this_present_saleTicketNum || that_present_saleTicketNum) {
      if (!(this_present_saleTicketNum && that_present_saleTicketNum))
        return false;
      if (this.saleTicketNum != that.saleTicketNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRtpDate()) ? 131071 : 524287);
    if (isSetRtpDate())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rtpDate);

    hashCode = hashCode * 8191 + ((isSetOutletId()) ? 131071 : 524287);
    if (isSetOutletId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outletId);

    hashCode = hashCode * 8191 + ((isSetOutletName()) ? 131071 : 524287);
    if (isSetOutletName())
      hashCode = hashCode * 8191 + outletName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeName()) ? 131071 : 524287);
    if (isSetTicketTypeName())
      hashCode = hashCode * 8191 + ticketTypeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetStrLastTicketNum()) ? 131071 : 524287);
    if (isSetStrLastTicketNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(strLastTicketNum);

    hashCode = hashCode * 8191 + ((isSetDeliveryNum()) ? 131071 : 524287);
    if (isSetDeliveryNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(deliveryNum);

    hashCode = hashCode * 8191 + ((isSetStrTicketNum()) ? 131071 : 524287);
    if (isSetStrTicketNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(strTicketNum);

    hashCode = hashCode * 8191 + ((isSetUselessNum()) ? 131071 : 524287);
    if (isSetUselessNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(uselessNum);

    hashCode = hashCode * 8191 + ((isSetSupplyNum()) ? 131071 : 524287);
    if (isSetSupplyNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(supplyNum);

    hashCode = hashCode * 8191 + ((isSetSaleTicketNum()) ? 131071 : 524287);
    if (isSetSaleTicketNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(saleTicketNum);

    return hashCode;
  }

  @Override
  public int compareTo(RPT_STR_DATA other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRtpDate()).compareTo(other.isSetRtpDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRtpDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rtpDate, other.rtpDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeName()).compareTo(other.isSetTicketTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeName, other.ticketTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStrLastTicketNum()).compareTo(other.isSetStrLastTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrLastTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strLastTicketNum, other.strLastTicketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDeliveryNum()).compareTo(other.isSetDeliveryNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDeliveryNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.deliveryNum, other.deliveryNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStrTicketNum()).compareTo(other.isSetStrTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strTicketNum, other.strTicketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUselessNum()).compareTo(other.isSetUselessNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUselessNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uselessNum, other.uselessNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSupplyNum()).compareTo(other.isSetSupplyNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupplyNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supplyNum, other.supplyNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleTicketNum()).compareTo(other.isSetSaleTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleTicketNum, other.saleTicketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RPT_STR_DATA(");
    boolean first = true;

    if (isSetRtpDate()) {
      sb.append("rtpDate:");
      sb.append(this.rtpDate);
      first = false;
    }
    if (isSetOutletId()) {
      if (!first) sb.append(", ");
      sb.append("outletId:");
      sb.append(this.outletId);
      first = false;
    }
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetTicketTypeId()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeId:");
      if (this.ticketTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeId);
      }
      first = false;
    }
    if (isSetTicketTypeName()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeName:");
      if (this.ticketTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeName);
      }
      first = false;
    }
    if (isSetStrLastTicketNum()) {
      if (!first) sb.append(", ");
      sb.append("strLastTicketNum:");
      sb.append(this.strLastTicketNum);
      first = false;
    }
    if (isSetDeliveryNum()) {
      if (!first) sb.append(", ");
      sb.append("deliveryNum:");
      sb.append(this.deliveryNum);
      first = false;
    }
    if (isSetStrTicketNum()) {
      if (!first) sb.append(", ");
      sb.append("strTicketNum:");
      sb.append(this.strTicketNum);
      first = false;
    }
    if (isSetUselessNum()) {
      if (!first) sb.append(", ");
      sb.append("uselessNum:");
      sb.append(this.uselessNum);
      first = false;
    }
    if (isSetSupplyNum()) {
      if (!first) sb.append(", ");
      sb.append("supplyNum:");
      sb.append(this.supplyNum);
      first = false;
    }
    if (isSetSaleTicketNum()) {
      if (!first) sb.append(", ");
      sb.append("saleTicketNum:");
      sb.append(this.saleTicketNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RPT_STR_DATAStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RPT_STR_DATAStandardScheme getScheme() {
      return new RPT_STR_DATAStandardScheme();
    }
  }

  private static class RPT_STR_DATAStandardScheme extends org.apache.thrift.scheme.StandardScheme<RPT_STR_DATA> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RPT_STR_DATA struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RTP_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.rtpDate = iprot.readI64();
              struct.setRtpDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outletId = iprot.readI64();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TICKET_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeName = iprot.readString();
              struct.setTicketTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // STR_LAST_TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.strLastTicketNum = iprot.readI64();
              struct.setStrLastTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DELIVERY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.deliveryNum = iprot.readI64();
              struct.setDeliveryNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STR_TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.strTicketNum = iprot.readI64();
              struct.setStrTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // USELESS_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.uselessNum = iprot.readI64();
              struct.setUselessNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SUPPLY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.supplyNum = iprot.readI64();
              struct.setSupplyNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SALE_TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.saleTicketNum = iprot.readI64();
              struct.setSaleTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RPT_STR_DATA struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.isSetRtpDate()) {
        oprot.writeFieldBegin(RTP_DATE_FIELD_DESC);
        oprot.writeI64(struct.rtpDate);
        oprot.writeFieldEnd();
      }
      if (struct.isSetOutletId()) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeId != null) {
        if (struct.isSetTicketTypeId()) {
          oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.ticketTypeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeName != null) {
        if (struct.isSetTicketTypeName()) {
          oprot.writeFieldBegin(TICKET_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.ticketTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetStrLastTicketNum()) {
        oprot.writeFieldBegin(STR_LAST_TICKET_NUM_FIELD_DESC);
        oprot.writeI64(struct.strLastTicketNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetDeliveryNum()) {
        oprot.writeFieldBegin(DELIVERY_NUM_FIELD_DESC);
        oprot.writeI64(struct.deliveryNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetStrTicketNum()) {
        oprot.writeFieldBegin(STR_TICKET_NUM_FIELD_DESC);
        oprot.writeI64(struct.strTicketNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetUselessNum()) {
        oprot.writeFieldBegin(USELESS_NUM_FIELD_DESC);
        oprot.writeI64(struct.uselessNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSupplyNum()) {
        oprot.writeFieldBegin(SUPPLY_NUM_FIELD_DESC);
        oprot.writeI64(struct.supplyNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSaleTicketNum()) {
        oprot.writeFieldBegin(SALE_TICKET_NUM_FIELD_DESC);
        oprot.writeI64(struct.saleTicketNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RPT_STR_DATATupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RPT_STR_DATATupleScheme getScheme() {
      return new RPT_STR_DATATupleScheme();
    }
  }

  private static class RPT_STR_DATATupleScheme extends org.apache.thrift.scheme.TupleScheme<RPT_STR_DATA> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RPT_STR_DATA struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRtpDate()) {
        optionals.set(0);
      }
      if (struct.isSetOutletId()) {
        optionals.set(1);
      }
      if (struct.isSetOutletName()) {
        optionals.set(2);
      }
      if (struct.isSetTicketTypeId()) {
        optionals.set(3);
      }
      if (struct.isSetTicketTypeName()) {
        optionals.set(4);
      }
      if (struct.isSetStrLastTicketNum()) {
        optionals.set(5);
      }
      if (struct.isSetDeliveryNum()) {
        optionals.set(6);
      }
      if (struct.isSetStrTicketNum()) {
        optionals.set(7);
      }
      if (struct.isSetUselessNum()) {
        optionals.set(8);
      }
      if (struct.isSetSupplyNum()) {
        optionals.set(9);
      }
      if (struct.isSetSaleTicketNum()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetRtpDate()) {
        oprot.writeI64(struct.rtpDate);
      }
      if (struct.isSetOutletId()) {
        oprot.writeI64(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetTicketTypeId()) {
        oprot.writeString(struct.ticketTypeId);
      }
      if (struct.isSetTicketTypeName()) {
        oprot.writeString(struct.ticketTypeName);
      }
      if (struct.isSetStrLastTicketNum()) {
        oprot.writeI64(struct.strLastTicketNum);
      }
      if (struct.isSetDeliveryNum()) {
        oprot.writeI64(struct.deliveryNum);
      }
      if (struct.isSetStrTicketNum()) {
        oprot.writeI64(struct.strTicketNum);
      }
      if (struct.isSetUselessNum()) {
        oprot.writeI64(struct.uselessNum);
      }
      if (struct.isSetSupplyNum()) {
        oprot.writeI64(struct.supplyNum);
      }
      if (struct.isSetSaleTicketNum()) {
        oprot.writeI64(struct.saleTicketNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RPT_STR_DATA struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.rtpDate = iprot.readI64();
        struct.setRtpDateIsSet(true);
      }
      if (incoming.get(1)) {
        struct.outletId = iprot.readI64();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ticketTypeId = iprot.readString();
        struct.setTicketTypeIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.ticketTypeName = iprot.readString();
        struct.setTicketTypeNameIsSet(true);
      }
      if (incoming.get(5)) {
        struct.strLastTicketNum = iprot.readI64();
        struct.setStrLastTicketNumIsSet(true);
      }
      if (incoming.get(6)) {
        struct.deliveryNum = iprot.readI64();
        struct.setDeliveryNumIsSet(true);
      }
      if (incoming.get(7)) {
        struct.strTicketNum = iprot.readI64();
        struct.setStrTicketNumIsSet(true);
      }
      if (incoming.get(8)) {
        struct.uselessNum = iprot.readI64();
        struct.setUselessNumIsSet(true);
      }
      if (incoming.get(9)) {
        struct.supplyNum = iprot.readI64();
        struct.setSupplyNumIsSet(true);
      }
      if (incoming.get(10)) {
        struct.saleTicketNum = iprot.readI64();
        struct.setSaleTicketNumIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

