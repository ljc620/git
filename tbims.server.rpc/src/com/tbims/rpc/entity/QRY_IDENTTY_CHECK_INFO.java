/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 身份证检票记录列表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class QRY_IDENTTY_CHECK_INFO implements org.apache.thrift.TBase<QRY_IDENTTY_CHECK_INFO, QRY_IDENTTY_CHECK_INFO._Fields>, java.io.Serializable, Cloneable, Comparable<QRY_IDENTTY_CHECK_INFO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QRY_IDENTTY_CHECK_INFO");

  private static final org.apache.thrift.protocol.TField CHECK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("checkId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketUid", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField VENUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("venueId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VENUE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("venueName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PASS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("passFlag", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField NOPASS_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("nopassReason", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField REMAIN_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("remainTimes", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeName", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QRY_IDENTTY_CHECK_INFOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QRY_IDENTTY_CHECK_INFOTupleSchemeFactory();

  /**
   * 检票表id
   */
  public java.lang.String checkId; // optional
  /**
   * 身份证号
   */
  public java.lang.String ticketUid; // optional
  /**
   * 场馆编号
   */
  public java.lang.String venueId; // optional
  /**
   * 场馆名称
   */
  public java.lang.String venueName; // optional
  /**
   * 终端编号
   */
  public java.lang.String clientId; // optional
  /**
   * 终端名称
   */
  public java.lang.String clientName; // optional
  /**
   * 是否通过(Y是N否)
   */
  public java.lang.String passFlag; // optional
  /**
   * 未通过原因
   */
  public java.lang.String nopassReason; // optional
  /**
   * 剩余次数
   */
  public java.lang.String remainTimes; // optional
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // optional
  /**
   * 票种名称
   */
  public java.lang.String ticketTypeName; // optional
  /**
   * 检票时间
   */
  public java.lang.String opeTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 检票表id
     */
    CHECK_ID((short)1, "checkId"),
    /**
     * 身份证号
     */
    TICKET_UID((short)2, "ticketUid"),
    /**
     * 场馆编号
     */
    VENUE_ID((short)3, "venueId"),
    /**
     * 场馆名称
     */
    VENUE_NAME((short)4, "venueName"),
    /**
     * 终端编号
     */
    CLIENT_ID((short)5, "clientId"),
    /**
     * 终端名称
     */
    CLIENT_NAME((short)6, "clientName"),
    /**
     * 是否通过(Y是N否)
     */
    PASS_FLAG((short)7, "passFlag"),
    /**
     * 未通过原因
     */
    NOPASS_REASON((short)8, "nopassReason"),
    /**
     * 剩余次数
     */
    REMAIN_TIMES((short)9, "remainTimes"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)10, "ticketTypeId"),
    /**
     * 票种名称
     */
    TICKET_TYPE_NAME((short)11, "ticketTypeName"),
    /**
     * 检票时间
     */
    OPE_TIME((short)12, "opeTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHECK_ID
          return CHECK_ID;
        case 2: // TICKET_UID
          return TICKET_UID;
        case 3: // VENUE_ID
          return VENUE_ID;
        case 4: // VENUE_NAME
          return VENUE_NAME;
        case 5: // CLIENT_ID
          return CLIENT_ID;
        case 6: // CLIENT_NAME
          return CLIENT_NAME;
        case 7: // PASS_FLAG
          return PASS_FLAG;
        case 8: // NOPASS_REASON
          return NOPASS_REASON;
        case 9: // REMAIN_TIMES
          return REMAIN_TIMES;
        case 10: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 11: // TICKET_TYPE_NAME
          return TICKET_TYPE_NAME;
        case 12: // OPE_TIME
          return OPE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.CHECK_ID,_Fields.TICKET_UID,_Fields.VENUE_ID,_Fields.VENUE_NAME,_Fields.CLIENT_ID,_Fields.CLIENT_NAME,_Fields.PASS_FLAG,_Fields.NOPASS_REASON,_Fields.REMAIN_TIMES,_Fields.TICKET_TYPE_ID,_Fields.TICKET_TYPE_NAME,_Fields.OPE_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHECK_ID, new org.apache.thrift.meta_data.FieldMetaData("checkId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_UID, new org.apache.thrift.meta_data.FieldMetaData("ticketUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENUE_ID, new org.apache.thrift.meta_data.FieldMetaData("venueId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENUE_NAME, new org.apache.thrift.meta_data.FieldMetaData("venueName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PASS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("passFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOPASS_REASON, new org.apache.thrift.meta_data.FieldMetaData("nopassReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMAIN_TIMES, new org.apache.thrift.meta_data.FieldMetaData("remainTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QRY_IDENTTY_CHECK_INFO.class, metaDataMap);
  }

  public QRY_IDENTTY_CHECK_INFO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QRY_IDENTTY_CHECK_INFO(QRY_IDENTTY_CHECK_INFO other) {
    if (other.isSetCheckId()) {
      this.checkId = other.checkId;
    }
    if (other.isSetTicketUid()) {
      this.ticketUid = other.ticketUid;
    }
    if (other.isSetVenueId()) {
      this.venueId = other.venueId;
    }
    if (other.isSetVenueName()) {
      this.venueName = other.venueName;
    }
    if (other.isSetClientId()) {
      this.clientId = other.clientId;
    }
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetPassFlag()) {
      this.passFlag = other.passFlag;
    }
    if (other.isSetNopassReason()) {
      this.nopassReason = other.nopassReason;
    }
    if (other.isSetRemainTimes()) {
      this.remainTimes = other.remainTimes;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetTicketTypeName()) {
      this.ticketTypeName = other.ticketTypeName;
    }
    if (other.isSetOpeTime()) {
      this.opeTime = other.opeTime;
    }
  }

  public QRY_IDENTTY_CHECK_INFO deepCopy() {
    return new QRY_IDENTTY_CHECK_INFO(this);
  }

  @Override
  public void clear() {
    this.checkId = null;
    this.ticketUid = null;
    this.venueId = null;
    this.venueName = null;
    this.clientId = null;
    this.clientName = null;
    this.passFlag = null;
    this.nopassReason = null;
    this.remainTimes = null;
    this.ticketTypeId = null;
    this.ticketTypeName = null;
    this.opeTime = null;
  }

  /**
   * 检票表id
   */
  public java.lang.String getCheckId() {
    return this.checkId;
  }

  /**
   * 检票表id
   */
  public QRY_IDENTTY_CHECK_INFO setCheckId(java.lang.String checkId) {
    this.checkId = checkId;
    return this;
  }

  public void unsetCheckId() {
    this.checkId = null;
  }

  /** Returns true if field checkId is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckId() {
    return this.checkId != null;
  }

  public void setCheckIdIsSet(boolean value) {
    if (!value) {
      this.checkId = null;
    }
  }

  /**
   * 身份证号
   */
  public java.lang.String getTicketUid() {
    return this.ticketUid;
  }

  /**
   * 身份证号
   */
  public QRY_IDENTTY_CHECK_INFO setTicketUid(java.lang.String ticketUid) {
    this.ticketUid = ticketUid;
    return this;
  }

  public void unsetTicketUid() {
    this.ticketUid = null;
  }

  /** Returns true if field ticketUid is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketUid() {
    return this.ticketUid != null;
  }

  public void setTicketUidIsSet(boolean value) {
    if (!value) {
      this.ticketUid = null;
    }
  }

  /**
   * 场馆编号
   */
  public java.lang.String getVenueId() {
    return this.venueId;
  }

  /**
   * 场馆编号
   */
  public QRY_IDENTTY_CHECK_INFO setVenueId(java.lang.String venueId) {
    this.venueId = venueId;
    return this;
  }

  public void unsetVenueId() {
    this.venueId = null;
  }

  /** Returns true if field venueId is set (has been assigned a value) and false otherwise */
  public boolean isSetVenueId() {
    return this.venueId != null;
  }

  public void setVenueIdIsSet(boolean value) {
    if (!value) {
      this.venueId = null;
    }
  }

  /**
   * 场馆名称
   */
  public java.lang.String getVenueName() {
    return this.venueName;
  }

  /**
   * 场馆名称
   */
  public QRY_IDENTTY_CHECK_INFO setVenueName(java.lang.String venueName) {
    this.venueName = venueName;
    return this;
  }

  public void unsetVenueName() {
    this.venueName = null;
  }

  /** Returns true if field venueName is set (has been assigned a value) and false otherwise */
  public boolean isSetVenueName() {
    return this.venueName != null;
  }

  public void setVenueNameIsSet(boolean value) {
    if (!value) {
      this.venueName = null;
    }
  }

  /**
   * 终端编号
   */
  public java.lang.String getClientId() {
    return this.clientId;
  }

  /**
   * 终端编号
   */
  public QRY_IDENTTY_CHECK_INFO setClientId(java.lang.String clientId) {
    this.clientId = clientId;
    return this;
  }

  public void unsetClientId() {
    this.clientId = null;
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return this.clientId != null;
  }

  public void setClientIdIsSet(boolean value) {
    if (!value) {
      this.clientId = null;
    }
  }

  /**
   * 终端名称
   */
  public java.lang.String getClientName() {
    return this.clientName;
  }

  /**
   * 终端名称
   */
  public QRY_IDENTTY_CHECK_INFO setClientName(java.lang.String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  /**
   * 是否通过(Y是N否)
   */
  public java.lang.String getPassFlag() {
    return this.passFlag;
  }

  /**
   * 是否通过(Y是N否)
   */
  public QRY_IDENTTY_CHECK_INFO setPassFlag(java.lang.String passFlag) {
    this.passFlag = passFlag;
    return this;
  }

  public void unsetPassFlag() {
    this.passFlag = null;
  }

  /** Returns true if field passFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetPassFlag() {
    return this.passFlag != null;
  }

  public void setPassFlagIsSet(boolean value) {
    if (!value) {
      this.passFlag = null;
    }
  }

  /**
   * 未通过原因
   */
  public java.lang.String getNopassReason() {
    return this.nopassReason;
  }

  /**
   * 未通过原因
   */
  public QRY_IDENTTY_CHECK_INFO setNopassReason(java.lang.String nopassReason) {
    this.nopassReason = nopassReason;
    return this;
  }

  public void unsetNopassReason() {
    this.nopassReason = null;
  }

  /** Returns true if field nopassReason is set (has been assigned a value) and false otherwise */
  public boolean isSetNopassReason() {
    return this.nopassReason != null;
  }

  public void setNopassReasonIsSet(boolean value) {
    if (!value) {
      this.nopassReason = null;
    }
  }

  /**
   * 剩余次数
   */
  public java.lang.String getRemainTimes() {
    return this.remainTimes;
  }

  /**
   * 剩余次数
   */
  public QRY_IDENTTY_CHECK_INFO setRemainTimes(java.lang.String remainTimes) {
    this.remainTimes = remainTimes;
    return this;
  }

  public void unsetRemainTimes() {
    this.remainTimes = null;
  }

  /** Returns true if field remainTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainTimes() {
    return this.remainTimes != null;
  }

  public void setRemainTimesIsSet(boolean value) {
    if (!value) {
      this.remainTimes = null;
    }
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public QRY_IDENTTY_CHECK_INFO setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 票种名称
   */
  public java.lang.String getTicketTypeName() {
    return this.ticketTypeName;
  }

  /**
   * 票种名称
   */
  public QRY_IDENTTY_CHECK_INFO setTicketTypeName(java.lang.String ticketTypeName) {
    this.ticketTypeName = ticketTypeName;
    return this;
  }

  public void unsetTicketTypeName() {
    this.ticketTypeName = null;
  }

  /** Returns true if field ticketTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeName() {
    return this.ticketTypeName != null;
  }

  public void setTicketTypeNameIsSet(boolean value) {
    if (!value) {
      this.ticketTypeName = null;
    }
  }

  /**
   * 检票时间
   */
  public java.lang.String getOpeTime() {
    return this.opeTime;
  }

  /**
   * 检票时间
   */
  public QRY_IDENTTY_CHECK_INFO setOpeTime(java.lang.String opeTime) {
    this.opeTime = opeTime;
    return this;
  }

  public void unsetOpeTime() {
    this.opeTime = null;
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return this.opeTime != null;
  }

  public void setOpeTimeIsSet(boolean value) {
    if (!value) {
      this.opeTime = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CHECK_ID:
      if (value == null) {
        unsetCheckId();
      } else {
        setCheckId((java.lang.String)value);
      }
      break;

    case TICKET_UID:
      if (value == null) {
        unsetTicketUid();
      } else {
        setTicketUid((java.lang.String)value);
      }
      break;

    case VENUE_ID:
      if (value == null) {
        unsetVenueId();
      } else {
        setVenueId((java.lang.String)value);
      }
      break;

    case VENUE_NAME:
      if (value == null) {
        unsetVenueName();
      } else {
        setVenueName((java.lang.String)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((java.lang.String)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((java.lang.String)value);
      }
      break;

    case PASS_FLAG:
      if (value == null) {
        unsetPassFlag();
      } else {
        setPassFlag((java.lang.String)value);
      }
      break;

    case NOPASS_REASON:
      if (value == null) {
        unsetNopassReason();
      } else {
        setNopassReason((java.lang.String)value);
      }
      break;

    case REMAIN_TIMES:
      if (value == null) {
        unsetRemainTimes();
      } else {
        setRemainTimes((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_NAME:
      if (value == null) {
        unsetTicketTypeName();
      } else {
        setTicketTypeName((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHECK_ID:
      return getCheckId();

    case TICKET_UID:
      return getTicketUid();

    case VENUE_ID:
      return getVenueId();

    case VENUE_NAME:
      return getVenueName();

    case CLIENT_ID:
      return getClientId();

    case CLIENT_NAME:
      return getClientName();

    case PASS_FLAG:
      return getPassFlag();

    case NOPASS_REASON:
      return getNopassReason();

    case REMAIN_TIMES:
      return getRemainTimes();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_TYPE_NAME:
      return getTicketTypeName();

    case OPE_TIME:
      return getOpeTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHECK_ID:
      return isSetCheckId();
    case TICKET_UID:
      return isSetTicketUid();
    case VENUE_ID:
      return isSetVenueId();
    case VENUE_NAME:
      return isSetVenueName();
    case CLIENT_ID:
      return isSetClientId();
    case CLIENT_NAME:
      return isSetClientName();
    case PASS_FLAG:
      return isSetPassFlag();
    case NOPASS_REASON:
      return isSetNopassReason();
    case REMAIN_TIMES:
      return isSetRemainTimes();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_TYPE_NAME:
      return isSetTicketTypeName();
    case OPE_TIME:
      return isSetOpeTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof QRY_IDENTTY_CHECK_INFO)
      return this.equals((QRY_IDENTTY_CHECK_INFO)that);
    return false;
  }

  public boolean equals(QRY_IDENTTY_CHECK_INFO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_checkId = true && this.isSetCheckId();
    boolean that_present_checkId = true && that.isSetCheckId();
    if (this_present_checkId || that_present_checkId) {
      if (!(this_present_checkId && that_present_checkId))
        return false;
      if (!this.checkId.equals(that.checkId))
        return false;
    }

    boolean this_present_ticketUid = true && this.isSetTicketUid();
    boolean that_present_ticketUid = true && that.isSetTicketUid();
    if (this_present_ticketUid || that_present_ticketUid) {
      if (!(this_present_ticketUid && that_present_ticketUid))
        return false;
      if (!this.ticketUid.equals(that.ticketUid))
        return false;
    }

    boolean this_present_venueId = true && this.isSetVenueId();
    boolean that_present_venueId = true && that.isSetVenueId();
    if (this_present_venueId || that_present_venueId) {
      if (!(this_present_venueId && that_present_venueId))
        return false;
      if (!this.venueId.equals(that.venueId))
        return false;
    }

    boolean this_present_venueName = true && this.isSetVenueName();
    boolean that_present_venueName = true && that.isSetVenueName();
    if (this_present_venueName || that_present_venueName) {
      if (!(this_present_venueName && that_present_venueName))
        return false;
      if (!this.venueName.equals(that.venueName))
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (!this.clientId.equals(that.clientId))
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_passFlag = true && this.isSetPassFlag();
    boolean that_present_passFlag = true && that.isSetPassFlag();
    if (this_present_passFlag || that_present_passFlag) {
      if (!(this_present_passFlag && that_present_passFlag))
        return false;
      if (!this.passFlag.equals(that.passFlag))
        return false;
    }

    boolean this_present_nopassReason = true && this.isSetNopassReason();
    boolean that_present_nopassReason = true && that.isSetNopassReason();
    if (this_present_nopassReason || that_present_nopassReason) {
      if (!(this_present_nopassReason && that_present_nopassReason))
        return false;
      if (!this.nopassReason.equals(that.nopassReason))
        return false;
    }

    boolean this_present_remainTimes = true && this.isSetRemainTimes();
    boolean that_present_remainTimes = true && that.isSetRemainTimes();
    if (this_present_remainTimes || that_present_remainTimes) {
      if (!(this_present_remainTimes && that_present_remainTimes))
        return false;
      if (!this.remainTimes.equals(that.remainTimes))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketTypeName = true && this.isSetTicketTypeName();
    boolean that_present_ticketTypeName = true && that.isSetTicketTypeName();
    if (this_present_ticketTypeName || that_present_ticketTypeName) {
      if (!(this_present_ticketTypeName && that_present_ticketTypeName))
        return false;
      if (!this.ticketTypeName.equals(that.ticketTypeName))
        return false;
    }

    boolean this_present_opeTime = true && this.isSetOpeTime();
    boolean that_present_opeTime = true && that.isSetOpeTime();
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (!this.opeTime.equals(that.opeTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCheckId()) ? 131071 : 524287);
    if (isSetCheckId())
      hashCode = hashCode * 8191 + checkId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketUid()) ? 131071 : 524287);
    if (isSetTicketUid())
      hashCode = hashCode * 8191 + ticketUid.hashCode();

    hashCode = hashCode * 8191 + ((isSetVenueId()) ? 131071 : 524287);
    if (isSetVenueId())
      hashCode = hashCode * 8191 + venueId.hashCode();

    hashCode = hashCode * 8191 + ((isSetVenueName()) ? 131071 : 524287);
    if (isSetVenueName())
      hashCode = hashCode * 8191 + venueName.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + clientId.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientName()) ? 131071 : 524287);
    if (isSetClientName())
      hashCode = hashCode * 8191 + clientName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPassFlag()) ? 131071 : 524287);
    if (isSetPassFlag())
      hashCode = hashCode * 8191 + passFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetNopassReason()) ? 131071 : 524287);
    if (isSetNopassReason())
      hashCode = hashCode * 8191 + nopassReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemainTimes()) ? 131071 : 524287);
    if (isSetRemainTimes())
      hashCode = hashCode * 8191 + remainTimes.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeName()) ? 131071 : 524287);
    if (isSetTicketTypeName())
      hashCode = hashCode * 8191 + ticketTypeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeTime()) ? 131071 : 524287);
    if (isSetOpeTime())
      hashCode = hashCode * 8191 + opeTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QRY_IDENTTY_CHECK_INFO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCheckId()).compareTo(other.isSetCheckId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkId, other.checkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketUid()).compareTo(other.isSetTicketUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketUid, other.ticketUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVenueId()).compareTo(other.isSetVenueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVenueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.venueId, other.venueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVenueName()).compareTo(other.isSetVenueName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVenueName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.venueName, other.venueName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassFlag()).compareTo(other.isSetPassFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passFlag, other.passFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNopassReason()).compareTo(other.isSetNopassReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNopassReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nopassReason, other.nopassReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemainTimes()).compareTo(other.isSetRemainTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainTimes, other.remainTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeName()).compareTo(other.isSetTicketTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeName, other.ticketTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("QRY_IDENTTY_CHECK_INFO(");
    boolean first = true;

    if (isSetCheckId()) {
      sb.append("checkId:");
      if (this.checkId == null) {
        sb.append("null");
      } else {
        sb.append(this.checkId);
      }
      first = false;
    }
    if (isSetTicketUid()) {
      if (!first) sb.append(", ");
      sb.append("ticketUid:");
      if (this.ticketUid == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketUid);
      }
      first = false;
    }
    if (isSetVenueId()) {
      if (!first) sb.append(", ");
      sb.append("venueId:");
      if (this.venueId == null) {
        sb.append("null");
      } else {
        sb.append(this.venueId);
      }
      first = false;
    }
    if (isSetVenueName()) {
      if (!first) sb.append(", ");
      sb.append("venueName:");
      if (this.venueName == null) {
        sb.append("null");
      } else {
        sb.append(this.venueName);
      }
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
    }
    if (isSetClientName()) {
      if (!first) sb.append(", ");
      sb.append("clientName:");
      if (this.clientName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientName);
      }
      first = false;
    }
    if (isSetPassFlag()) {
      if (!first) sb.append(", ");
      sb.append("passFlag:");
      if (this.passFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.passFlag);
      }
      first = false;
    }
    if (isSetNopassReason()) {
      if (!first) sb.append(", ");
      sb.append("nopassReason:");
      if (this.nopassReason == null) {
        sb.append("null");
      } else {
        sb.append(this.nopassReason);
      }
      first = false;
    }
    if (isSetRemainTimes()) {
      if (!first) sb.append(", ");
      sb.append("remainTimes:");
      if (this.remainTimes == null) {
        sb.append("null");
      } else {
        sb.append(this.remainTimes);
      }
      first = false;
    }
    if (isSetTicketTypeId()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeId:");
      if (this.ticketTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeId);
      }
      first = false;
    }
    if (isSetTicketTypeName()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeName:");
      if (this.ticketTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeName);
      }
      first = false;
    }
    if (isSetOpeTime()) {
      if (!first) sb.append(", ");
      sb.append("opeTime:");
      if (this.opeTime == null) {
        sb.append("null");
      } else {
        sb.append(this.opeTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QRY_IDENTTY_CHECK_INFOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QRY_IDENTTY_CHECK_INFOStandardScheme getScheme() {
      return new QRY_IDENTTY_CHECK_INFOStandardScheme();
    }
  }

  private static class QRY_IDENTTY_CHECK_INFOStandardScheme extends org.apache.thrift.scheme.StandardScheme<QRY_IDENTTY_CHECK_INFO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QRY_IDENTTY_CHECK_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHECK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkId = iprot.readString();
              struct.setCheckIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketUid = iprot.readString();
              struct.setTicketUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // VENUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.venueId = iprot.readString();
              struct.setVenueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VENUE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.venueName = iprot.readString();
              struct.setVenueNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientId = iprot.readString();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PASS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passFlag = iprot.readString();
              struct.setPassFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // NOPASS_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nopassReason = iprot.readString();
              struct.setNopassReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // REMAIN_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remainTimes = iprot.readString();
              struct.setRemainTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // TICKET_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeName = iprot.readString();
              struct.setTicketTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeTime = iprot.readString();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QRY_IDENTTY_CHECK_INFO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.checkId != null) {
        if (struct.isSetCheckId()) {
          oprot.writeFieldBegin(CHECK_ID_FIELD_DESC);
          oprot.writeString(struct.checkId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketUid != null) {
        if (struct.isSetTicketUid()) {
          oprot.writeFieldBegin(TICKET_UID_FIELD_DESC);
          oprot.writeString(struct.ticketUid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.venueId != null) {
        if (struct.isSetVenueId()) {
          oprot.writeFieldBegin(VENUE_ID_FIELD_DESC);
          oprot.writeString(struct.venueId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.venueName != null) {
        if (struct.isSetVenueName()) {
          oprot.writeFieldBegin(VENUE_NAME_FIELD_DESC);
          oprot.writeString(struct.venueName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientId != null) {
        if (struct.isSetClientId()) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientName != null) {
        if (struct.isSetClientName()) {
          oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
          oprot.writeString(struct.clientName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.passFlag != null) {
        if (struct.isSetPassFlag()) {
          oprot.writeFieldBegin(PASS_FLAG_FIELD_DESC);
          oprot.writeString(struct.passFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nopassReason != null) {
        if (struct.isSetNopassReason()) {
          oprot.writeFieldBegin(NOPASS_REASON_FIELD_DESC);
          oprot.writeString(struct.nopassReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.remainTimes != null) {
        if (struct.isSetRemainTimes()) {
          oprot.writeFieldBegin(REMAIN_TIMES_FIELD_DESC);
          oprot.writeString(struct.remainTimes);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeId != null) {
        if (struct.isSetTicketTypeId()) {
          oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.ticketTypeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeName != null) {
        if (struct.isSetTicketTypeName()) {
          oprot.writeFieldBegin(TICKET_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.ticketTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.opeTime != null) {
        if (struct.isSetOpeTime()) {
          oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
          oprot.writeString(struct.opeTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QRY_IDENTTY_CHECK_INFOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QRY_IDENTTY_CHECK_INFOTupleScheme getScheme() {
      return new QRY_IDENTTY_CHECK_INFOTupleScheme();
    }
  }

  private static class QRY_IDENTTY_CHECK_INFOTupleScheme extends org.apache.thrift.scheme.TupleScheme<QRY_IDENTTY_CHECK_INFO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QRY_IDENTTY_CHECK_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetCheckId()) {
        optionals.set(0);
      }
      if (struct.isSetTicketUid()) {
        optionals.set(1);
      }
      if (struct.isSetVenueId()) {
        optionals.set(2);
      }
      if (struct.isSetVenueName()) {
        optionals.set(3);
      }
      if (struct.isSetClientId()) {
        optionals.set(4);
      }
      if (struct.isSetClientName()) {
        optionals.set(5);
      }
      if (struct.isSetPassFlag()) {
        optionals.set(6);
      }
      if (struct.isSetNopassReason()) {
        optionals.set(7);
      }
      if (struct.isSetRemainTimes()) {
        optionals.set(8);
      }
      if (struct.isSetTicketTypeId()) {
        optionals.set(9);
      }
      if (struct.isSetTicketTypeName()) {
        optionals.set(10);
      }
      if (struct.isSetOpeTime()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetCheckId()) {
        oprot.writeString(struct.checkId);
      }
      if (struct.isSetTicketUid()) {
        oprot.writeString(struct.ticketUid);
      }
      if (struct.isSetVenueId()) {
        oprot.writeString(struct.venueId);
      }
      if (struct.isSetVenueName()) {
        oprot.writeString(struct.venueName);
      }
      if (struct.isSetClientId()) {
        oprot.writeString(struct.clientId);
      }
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetPassFlag()) {
        oprot.writeString(struct.passFlag);
      }
      if (struct.isSetNopassReason()) {
        oprot.writeString(struct.nopassReason);
      }
      if (struct.isSetRemainTimes()) {
        oprot.writeString(struct.remainTimes);
      }
      if (struct.isSetTicketTypeId()) {
        oprot.writeString(struct.ticketTypeId);
      }
      if (struct.isSetTicketTypeName()) {
        oprot.writeString(struct.ticketTypeName);
      }
      if (struct.isSetOpeTime()) {
        oprot.writeString(struct.opeTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QRY_IDENTTY_CHECK_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.checkId = iprot.readString();
        struct.setCheckIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ticketUid = iprot.readString();
        struct.setTicketUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.venueId = iprot.readString();
        struct.setVenueIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.venueName = iprot.readString();
        struct.setVenueNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.clientId = iprot.readString();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.passFlag = iprot.readString();
        struct.setPassFlagIsSet(true);
      }
      if (incoming.get(7)) {
        struct.nopassReason = iprot.readString();
        struct.setNopassReasonIsSet(true);
      }
      if (incoming.get(8)) {
        struct.remainTimes = iprot.readString();
        struct.setRemainTimesIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ticketTypeId = iprot.readString();
        struct.setTicketTypeIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ticketTypeName = iprot.readString();
        struct.setTicketTypeNameIsSet(true);
      }
      if (incoming.get(11)) {
        struct.opeTime = iprot.readString();
        struct.setOpeTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

