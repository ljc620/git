/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 自营销售
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class SALE_DETAIL_ZY implements org.apache.thrift.TBase<SALE_DETAIL_ZY, SALE_DETAIL_ZY._Fields>, java.io.Serializable, Cloneable, Comparable<SALE_DETAIL_ZY> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SALE_DETAIL_ZY");

  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField BEGIN_TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("beginTicketId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField END_TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("endTicketId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketNum", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("salePrice", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SALE_DETAIL_ZYStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SALE_DETAIL_ZYTupleSchemeFactory();

  /**
   * 票种
   */
  public java.lang.String ticketTypeId; // optional
  /**
   * 起始票号
   */
  public long beginTicketId; // optional
  /**
   * 终止票号
   */
  public long endTicketId; // optional
  /**
   * 门票数量
   */
  public long ticketNum; // optional
  /**
   * 销售单价
   */
  public long salePrice; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 票种
     */
    TICKET_TYPE_ID((short)1, "ticketTypeId"),
    /**
     * 起始票号
     */
    BEGIN_TICKET_ID((short)2, "beginTicketId"),
    /**
     * 终止票号
     */
    END_TICKET_ID((short)3, "endTicketId"),
    /**
     * 门票数量
     */
    TICKET_NUM((short)4, "ticketNum"),
    /**
     * 销售单价
     */
    SALE_PRICE((short)5, "salePrice");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 2: // BEGIN_TICKET_ID
          return BEGIN_TICKET_ID;
        case 3: // END_TICKET_ID
          return END_TICKET_ID;
        case 4: // TICKET_NUM
          return TICKET_NUM;
        case 5: // SALE_PRICE
          return SALE_PRICE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __BEGINTICKETID_ISSET_ID = 0;
  private static final int __ENDTICKETID_ISSET_ID = 1;
  private static final int __TICKETNUM_ISSET_ID = 2;
  private static final int __SALEPRICE_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TICKET_TYPE_ID,_Fields.BEGIN_TICKET_ID,_Fields.END_TICKET_ID,_Fields.TICKET_NUM,_Fields.SALE_PRICE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.BEGIN_TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("beginTicketId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.END_TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("endTicketId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("ticketNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SALE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("salePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SALE_DETAIL_ZY.class, metaDataMap);
  }

  public SALE_DETAIL_ZY() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SALE_DETAIL_ZY(SALE_DETAIL_ZY other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    this.beginTicketId = other.beginTicketId;
    this.endTicketId = other.endTicketId;
    this.ticketNum = other.ticketNum;
    this.salePrice = other.salePrice;
  }

  public SALE_DETAIL_ZY deepCopy() {
    return new SALE_DETAIL_ZY(this);
  }

  @Override
  public void clear() {
    this.ticketTypeId = null;
    setBeginTicketIdIsSet(false);
    this.beginTicketId = 0;
    setEndTicketIdIsSet(false);
    this.endTicketId = 0;
    setTicketNumIsSet(false);
    this.ticketNum = 0;
    setSalePriceIsSet(false);
    this.salePrice = 0;
  }

  /**
   * 票种
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种
   */
  public SALE_DETAIL_ZY setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 起始票号
   */
  public long getBeginTicketId() {
    return this.beginTicketId;
  }

  /**
   * 起始票号
   */
  public SALE_DETAIL_ZY setBeginTicketId(long beginTicketId) {
    this.beginTicketId = beginTicketId;
    setBeginTicketIdIsSet(true);
    return this;
  }

  public void unsetBeginTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BEGINTICKETID_ISSET_ID);
  }

  /** Returns true if field beginTicketId is set (has been assigned a value) and false otherwise */
  public boolean isSetBeginTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BEGINTICKETID_ISSET_ID);
  }

  public void setBeginTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BEGINTICKETID_ISSET_ID, value);
  }

  /**
   * 终止票号
   */
  public long getEndTicketId() {
    return this.endTicketId;
  }

  /**
   * 终止票号
   */
  public SALE_DETAIL_ZY setEndTicketId(long endTicketId) {
    this.endTicketId = endTicketId;
    setEndTicketIdIsSet(true);
    return this;
  }

  public void unsetEndTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ENDTICKETID_ISSET_ID);
  }

  /** Returns true if field endTicketId is set (has been assigned a value) and false otherwise */
  public boolean isSetEndTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ENDTICKETID_ISSET_ID);
  }

  public void setEndTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ENDTICKETID_ISSET_ID, value);
  }

  /**
   * 门票数量
   */
  public long getTicketNum() {
    return this.ticketNum;
  }

  /**
   * 门票数量
   */
  public SALE_DETAIL_ZY setTicketNum(long ticketNum) {
    this.ticketNum = ticketNum;
    setTicketNumIsSet(true);
    return this;
  }

  public void unsetTicketNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKETNUM_ISSET_ID);
  }

  /** Returns true if field ticketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKETNUM_ISSET_ID);
  }

  public void setTicketNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKETNUM_ISSET_ID, value);
  }

  /**
   * 销售单价
   */
  public long getSalePrice() {
    return this.salePrice;
  }

  /**
   * 销售单价
   */
  public SALE_DETAIL_ZY setSalePrice(long salePrice) {
    this.salePrice = salePrice;
    setSalePriceIsSet(true);
    return this;
  }

  public void unsetSalePrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  /** Returns true if field salePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSalePrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  public void setSalePriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALEPRICE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case BEGIN_TICKET_ID:
      if (value == null) {
        unsetBeginTicketId();
      } else {
        setBeginTicketId((java.lang.Long)value);
      }
      break;

    case END_TICKET_ID:
      if (value == null) {
        unsetEndTicketId();
      } else {
        setEndTicketId((java.lang.Long)value);
      }
      break;

    case TICKET_NUM:
      if (value == null) {
        unsetTicketNum();
      } else {
        setTicketNum((java.lang.Long)value);
      }
      break;

    case SALE_PRICE:
      if (value == null) {
        unsetSalePrice();
      } else {
        setSalePrice((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case BEGIN_TICKET_ID:
      return getBeginTicketId();

    case END_TICKET_ID:
      return getEndTicketId();

    case TICKET_NUM:
      return getTicketNum();

    case SALE_PRICE:
      return getSalePrice();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case BEGIN_TICKET_ID:
      return isSetBeginTicketId();
    case END_TICKET_ID:
      return isSetEndTicketId();
    case TICKET_NUM:
      return isSetTicketNum();
    case SALE_PRICE:
      return isSetSalePrice();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SALE_DETAIL_ZY)
      return this.equals((SALE_DETAIL_ZY)that);
    return false;
  }

  public boolean equals(SALE_DETAIL_ZY that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_beginTicketId = true && this.isSetBeginTicketId();
    boolean that_present_beginTicketId = true && that.isSetBeginTicketId();
    if (this_present_beginTicketId || that_present_beginTicketId) {
      if (!(this_present_beginTicketId && that_present_beginTicketId))
        return false;
      if (this.beginTicketId != that.beginTicketId)
        return false;
    }

    boolean this_present_endTicketId = true && this.isSetEndTicketId();
    boolean that_present_endTicketId = true && that.isSetEndTicketId();
    if (this_present_endTicketId || that_present_endTicketId) {
      if (!(this_present_endTicketId && that_present_endTicketId))
        return false;
      if (this.endTicketId != that.endTicketId)
        return false;
    }

    boolean this_present_ticketNum = true && this.isSetTicketNum();
    boolean that_present_ticketNum = true && that.isSetTicketNum();
    if (this_present_ticketNum || that_present_ticketNum) {
      if (!(this_present_ticketNum && that_present_ticketNum))
        return false;
      if (this.ticketNum != that.ticketNum)
        return false;
    }

    boolean this_present_salePrice = true && this.isSetSalePrice();
    boolean that_present_salePrice = true && that.isSetSalePrice();
    if (this_present_salePrice || that_present_salePrice) {
      if (!(this_present_salePrice && that_present_salePrice))
        return false;
      if (this.salePrice != that.salePrice)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetBeginTicketId()) ? 131071 : 524287);
    if (isSetBeginTicketId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(beginTicketId);

    hashCode = hashCode * 8191 + ((isSetEndTicketId()) ? 131071 : 524287);
    if (isSetEndTicketId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(endTicketId);

    hashCode = hashCode * 8191 + ((isSetTicketNum()) ? 131071 : 524287);
    if (isSetTicketNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticketNum);

    hashCode = hashCode * 8191 + ((isSetSalePrice()) ? 131071 : 524287);
    if (isSetSalePrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(salePrice);

    return hashCode;
  }

  @Override
  public int compareTo(SALE_DETAIL_ZY other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetBeginTicketId()).compareTo(other.isSetBeginTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBeginTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.beginTicketId, other.beginTicketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEndTicketId()).compareTo(other.isSetEndTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEndTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endTicketId, other.endTicketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketNum()).compareTo(other.isSetTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketNum, other.ticketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSalePrice()).compareTo(other.isSetSalePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salePrice, other.salePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SALE_DETAIL_ZY(");
    boolean first = true;

    if (isSetTicketTypeId()) {
      sb.append("ticketTypeId:");
      if (this.ticketTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeId);
      }
      first = false;
    }
    if (isSetBeginTicketId()) {
      if (!first) sb.append(", ");
      sb.append("beginTicketId:");
      sb.append(this.beginTicketId);
      first = false;
    }
    if (isSetEndTicketId()) {
      if (!first) sb.append(", ");
      sb.append("endTicketId:");
      sb.append(this.endTicketId);
      first = false;
    }
    if (isSetTicketNum()) {
      if (!first) sb.append(", ");
      sb.append("ticketNum:");
      sb.append(this.ticketNum);
      first = false;
    }
    if (isSetSalePrice()) {
      if (!first) sb.append(", ");
      sb.append("salePrice:");
      sb.append(this.salePrice);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SALE_DETAIL_ZYStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SALE_DETAIL_ZYStandardScheme getScheme() {
      return new SALE_DETAIL_ZYStandardScheme();
    }
  }

  private static class SALE_DETAIL_ZYStandardScheme extends org.apache.thrift.scheme.StandardScheme<SALE_DETAIL_ZY> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SALE_DETAIL_ZY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // BEGIN_TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.beginTicketId = iprot.readI64();
              struct.setBeginTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // END_TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.endTicketId = iprot.readI64();
              struct.setEndTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketNum = iprot.readI64();
              struct.setTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.salePrice = iprot.readI64();
              struct.setSalePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SALE_DETAIL_ZY struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ticketTypeId != null) {
        if (struct.isSetTicketTypeId()) {
          oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.ticketTypeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetBeginTicketId()) {
        oprot.writeFieldBegin(BEGIN_TICKET_ID_FIELD_DESC);
        oprot.writeI64(struct.beginTicketId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetEndTicketId()) {
        oprot.writeFieldBegin(END_TICKET_ID_FIELD_DESC);
        oprot.writeI64(struct.endTicketId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetTicketNum()) {
        oprot.writeFieldBegin(TICKET_NUM_FIELD_DESC);
        oprot.writeI64(struct.ticketNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalePrice()) {
        oprot.writeFieldBegin(SALE_PRICE_FIELD_DESC);
        oprot.writeI64(struct.salePrice);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SALE_DETAIL_ZYTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SALE_DETAIL_ZYTupleScheme getScheme() {
      return new SALE_DETAIL_ZYTupleScheme();
    }
  }

  private static class SALE_DETAIL_ZYTupleScheme extends org.apache.thrift.scheme.TupleScheme<SALE_DETAIL_ZY> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SALE_DETAIL_ZY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTicketTypeId()) {
        optionals.set(0);
      }
      if (struct.isSetBeginTicketId()) {
        optionals.set(1);
      }
      if (struct.isSetEndTicketId()) {
        optionals.set(2);
      }
      if (struct.isSetTicketNum()) {
        optionals.set(3);
      }
      if (struct.isSetSalePrice()) {
        optionals.set(4);
      }
      oprot.writeBitSet(optionals, 5);
      if (struct.isSetTicketTypeId()) {
        oprot.writeString(struct.ticketTypeId);
      }
      if (struct.isSetBeginTicketId()) {
        oprot.writeI64(struct.beginTicketId);
      }
      if (struct.isSetEndTicketId()) {
        oprot.writeI64(struct.endTicketId);
      }
      if (struct.isSetTicketNum()) {
        oprot.writeI64(struct.ticketNum);
      }
      if (struct.isSetSalePrice()) {
        oprot.writeI64(struct.salePrice);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SALE_DETAIL_ZY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(5);
      if (incoming.get(0)) {
        struct.ticketTypeId = iprot.readString();
        struct.setTicketTypeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.beginTicketId = iprot.readI64();
        struct.setBeginTicketIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.endTicketId = iprot.readI64();
        struct.setEndTicketIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ticketNum = iprot.readI64();
        struct.setTicketNumIsSet(true);
      }
      if (incoming.get(4)) {
        struct.salePrice = iprot.readI64();
        struct.setSalePriceIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

