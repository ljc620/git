/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 身份证售票记录列表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-10-15")
public class QRY_IDENTTY_SALE_INFO implements org.apache.thrift.TBase<QRY_IDENTTY_SALE_INFO, QRY_IDENTTY_SALE_INFO._Fields>, java.io.Serializable, Cloneable, Comparable<QRY_IDENTTY_SALE_INFO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QRY_IDENTTY_SALE_INFO");

  private static final org.apache.thrift.protocol.TField ORDER_DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDetailId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IDENTTY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("identtyId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeName", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField SALE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("saleTime", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField CHECK_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("checkFlag", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField CHECK_TICKET_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("checkTicketTime", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VALID_START_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("validStartDate", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField VALID_END_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("validEndDate", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField EJECT_TICKET_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("ejectTicketStat", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField EJECT_TICKET_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ejectTicketTime", org.apache.thrift.protocol.TType.STRING, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QRY_IDENTTY_SALE_INFOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QRY_IDENTTY_SALE_INFOTupleSchemeFactory();

  /**
   * 销售明细表ID
   */
  public java.lang.String orderDetailId; // optional
  /**
   * 身份证号
   */
  public java.lang.String identtyId; // optional
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // optional
  /**
   * 票种名称
   */
  public java.lang.String ticketTypeName; // optional
  /**
   * 售票时间
   */
  public java.lang.String saleTime; // optional
  /**
   * 是否检票(Y是N否)
   */
  public java.lang.String checkFlag; // optional
  /**
   * 检票时间
   */
  public java.lang.String checkTicketTime; // optional
  /**
   * 支付方式
   */
  public java.lang.String payType; // optional
  /**
   * 有效开始日期
   */
  public java.lang.String validStartDate; // optional
  /**
   * 有效结束日期
   */
  public java.lang.String validEndDate; // optional
  /**
   * 取票状态(1-未取票 2-已取票)
   */
  public java.lang.String ejectTicketStat; // optional
  /**
   * 取票时间
   */
  public java.lang.String ejectTicketTime; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 销售明细表ID
     */
    ORDER_DETAIL_ID((short)1, "orderDetailId"),
    /**
     * 身份证号
     */
    IDENTTY_ID((short)2, "identtyId"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)3, "ticketTypeId"),
    /**
     * 票种名称
     */
    TICKET_TYPE_NAME((short)4, "ticketTypeName"),
    /**
     * 售票时间
     */
    SALE_TIME((short)5, "saleTime"),
    /**
     * 是否检票(Y是N否)
     */
    CHECK_FLAG((short)6, "checkFlag"),
    /**
     * 检票时间
     */
    CHECK_TICKET_TIME((short)7, "checkTicketTime"),
    /**
     * 支付方式
     */
    PAY_TYPE((short)8, "payType"),
    /**
     * 有效开始日期
     */
    VALID_START_DATE((short)9, "validStartDate"),
    /**
     * 有效结束日期
     */
    VALID_END_DATE((short)10, "validEndDate"),
    /**
     * 取票状态(1-未取票 2-已取票)
     */
    EJECT_TICKET_STAT((short)11, "ejectTicketStat"),
    /**
     * 取票时间
     */
    EJECT_TICKET_TIME((short)12, "ejectTicketTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_DETAIL_ID
          return ORDER_DETAIL_ID;
        case 2: // IDENTTY_ID
          return IDENTTY_ID;
        case 3: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 4: // TICKET_TYPE_NAME
          return TICKET_TYPE_NAME;
        case 5: // SALE_TIME
          return SALE_TIME;
        case 6: // CHECK_FLAG
          return CHECK_FLAG;
        case 7: // CHECK_TICKET_TIME
          return CHECK_TICKET_TIME;
        case 8: // PAY_TYPE
          return PAY_TYPE;
        case 9: // VALID_START_DATE
          return VALID_START_DATE;
        case 10: // VALID_END_DATE
          return VALID_END_DATE;
        case 11: // EJECT_TICKET_STAT
          return EJECT_TICKET_STAT;
        case 12: // EJECT_TICKET_TIME
          return EJECT_TICKET_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final _Fields optionals[] = {_Fields.ORDER_DETAIL_ID,_Fields.IDENTTY_ID,_Fields.TICKET_TYPE_ID,_Fields.TICKET_TYPE_NAME,_Fields.SALE_TIME,_Fields.CHECK_FLAG,_Fields.CHECK_TICKET_TIME,_Fields.PAY_TYPE,_Fields.VALID_START_DATE,_Fields.VALID_END_DATE,_Fields.EJECT_TICKET_STAT,_Fields.EJECT_TICKET_TIME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("orderDetailId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IDENTTY_ID, new org.apache.thrift.meta_data.FieldMetaData("identtyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_TIME, new org.apache.thrift.meta_data.FieldMetaData("saleTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_FLAG, new org.apache.thrift.meta_data.FieldMetaData("checkFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHECK_TICKET_TIME, new org.apache.thrift.meta_data.FieldMetaData("checkTicketTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_START_DATE, new org.apache.thrift.meta_data.FieldMetaData("validStartDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALID_END_DATE, new org.apache.thrift.meta_data.FieldMetaData("validEndDate", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EJECT_TICKET_STAT, new org.apache.thrift.meta_data.FieldMetaData("ejectTicketStat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EJECT_TICKET_TIME, new org.apache.thrift.meta_data.FieldMetaData("ejectTicketTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QRY_IDENTTY_SALE_INFO.class, metaDataMap);
  }

  public QRY_IDENTTY_SALE_INFO() {
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QRY_IDENTTY_SALE_INFO(QRY_IDENTTY_SALE_INFO other) {
    if (other.isSetOrderDetailId()) {
      this.orderDetailId = other.orderDetailId;
    }
    if (other.isSetIdenttyId()) {
      this.identtyId = other.identtyId;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetTicketTypeName()) {
      this.ticketTypeName = other.ticketTypeName;
    }
    if (other.isSetSaleTime()) {
      this.saleTime = other.saleTime;
    }
    if (other.isSetCheckFlag()) {
      this.checkFlag = other.checkFlag;
    }
    if (other.isSetCheckTicketTime()) {
      this.checkTicketTime = other.checkTicketTime;
    }
    if (other.isSetPayType()) {
      this.payType = other.payType;
    }
    if (other.isSetValidStartDate()) {
      this.validStartDate = other.validStartDate;
    }
    if (other.isSetValidEndDate()) {
      this.validEndDate = other.validEndDate;
    }
    if (other.isSetEjectTicketStat()) {
      this.ejectTicketStat = other.ejectTicketStat;
    }
    if (other.isSetEjectTicketTime()) {
      this.ejectTicketTime = other.ejectTicketTime;
    }
  }

  public QRY_IDENTTY_SALE_INFO deepCopy() {
    return new QRY_IDENTTY_SALE_INFO(this);
  }

  @Override
  public void clear() {
    this.orderDetailId = null;
    this.identtyId = null;
    this.ticketTypeId = null;
    this.ticketTypeName = null;
    this.saleTime = null;
    this.checkFlag = null;
    this.checkTicketTime = null;
    this.payType = null;
    this.validStartDate = null;
    this.validEndDate = null;
    this.ejectTicketStat = null;
    this.ejectTicketTime = null;
  }

  /**
   * 销售明细表ID
   */
  public java.lang.String getOrderDetailId() {
    return this.orderDetailId;
  }

  /**
   * 销售明细表ID
   */
  public QRY_IDENTTY_SALE_INFO setOrderDetailId(java.lang.String orderDetailId) {
    this.orderDetailId = orderDetailId;
    return this;
  }

  public void unsetOrderDetailId() {
    this.orderDetailId = null;
  }

  /** Returns true if field orderDetailId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderDetailId() {
    return this.orderDetailId != null;
  }

  public void setOrderDetailIdIsSet(boolean value) {
    if (!value) {
      this.orderDetailId = null;
    }
  }

  /**
   * 身份证号
   */
  public java.lang.String getIdenttyId() {
    return this.identtyId;
  }

  /**
   * 身份证号
   */
  public QRY_IDENTTY_SALE_INFO setIdenttyId(java.lang.String identtyId) {
    this.identtyId = identtyId;
    return this;
  }

  public void unsetIdenttyId() {
    this.identtyId = null;
  }

  /** Returns true if field identtyId is set (has been assigned a value) and false otherwise */
  public boolean isSetIdenttyId() {
    return this.identtyId != null;
  }

  public void setIdenttyIdIsSet(boolean value) {
    if (!value) {
      this.identtyId = null;
    }
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public QRY_IDENTTY_SALE_INFO setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 票种名称
   */
  public java.lang.String getTicketTypeName() {
    return this.ticketTypeName;
  }

  /**
   * 票种名称
   */
  public QRY_IDENTTY_SALE_INFO setTicketTypeName(java.lang.String ticketTypeName) {
    this.ticketTypeName = ticketTypeName;
    return this;
  }

  public void unsetTicketTypeName() {
    this.ticketTypeName = null;
  }

  /** Returns true if field ticketTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeName() {
    return this.ticketTypeName != null;
  }

  public void setTicketTypeNameIsSet(boolean value) {
    if (!value) {
      this.ticketTypeName = null;
    }
  }

  /**
   * 售票时间
   */
  public java.lang.String getSaleTime() {
    return this.saleTime;
  }

  /**
   * 售票时间
   */
  public QRY_IDENTTY_SALE_INFO setSaleTime(java.lang.String saleTime) {
    this.saleTime = saleTime;
    return this;
  }

  public void unsetSaleTime() {
    this.saleTime = null;
  }

  /** Returns true if field saleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleTime() {
    return this.saleTime != null;
  }

  public void setSaleTimeIsSet(boolean value) {
    if (!value) {
      this.saleTime = null;
    }
  }

  /**
   * 是否检票(Y是N否)
   */
  public java.lang.String getCheckFlag() {
    return this.checkFlag;
  }

  /**
   * 是否检票(Y是N否)
   */
  public QRY_IDENTTY_SALE_INFO setCheckFlag(java.lang.String checkFlag) {
    this.checkFlag = checkFlag;
    return this;
  }

  public void unsetCheckFlag() {
    this.checkFlag = null;
  }

  /** Returns true if field checkFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckFlag() {
    return this.checkFlag != null;
  }

  public void setCheckFlagIsSet(boolean value) {
    if (!value) {
      this.checkFlag = null;
    }
  }

  /**
   * 检票时间
   */
  public java.lang.String getCheckTicketTime() {
    return this.checkTicketTime;
  }

  /**
   * 检票时间
   */
  public QRY_IDENTTY_SALE_INFO setCheckTicketTime(java.lang.String checkTicketTime) {
    this.checkTicketTime = checkTicketTime;
    return this;
  }

  public void unsetCheckTicketTime() {
    this.checkTicketTime = null;
  }

  /** Returns true if field checkTicketTime is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckTicketTime() {
    return this.checkTicketTime != null;
  }

  public void setCheckTicketTimeIsSet(boolean value) {
    if (!value) {
      this.checkTicketTime = null;
    }
  }

  /**
   * 支付方式
   */
  public java.lang.String getPayType() {
    return this.payType;
  }

  /**
   * 支付方式
   */
  public QRY_IDENTTY_SALE_INFO setPayType(java.lang.String payType) {
    this.payType = payType;
    return this;
  }

  public void unsetPayType() {
    this.payType = null;
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return this.payType != null;
  }

  public void setPayTypeIsSet(boolean value) {
    if (!value) {
      this.payType = null;
    }
  }

  /**
   * 有效开始日期
   */
  public java.lang.String getValidStartDate() {
    return this.validStartDate;
  }

  /**
   * 有效开始日期
   */
  public QRY_IDENTTY_SALE_INFO setValidStartDate(java.lang.String validStartDate) {
    this.validStartDate = validStartDate;
    return this;
  }

  public void unsetValidStartDate() {
    this.validStartDate = null;
  }

  /** Returns true if field validStartDate is set (has been assigned a value) and false otherwise */
  public boolean isSetValidStartDate() {
    return this.validStartDate != null;
  }

  public void setValidStartDateIsSet(boolean value) {
    if (!value) {
      this.validStartDate = null;
    }
  }

  /**
   * 有效结束日期
   */
  public java.lang.String getValidEndDate() {
    return this.validEndDate;
  }

  /**
   * 有效结束日期
   */
  public QRY_IDENTTY_SALE_INFO setValidEndDate(java.lang.String validEndDate) {
    this.validEndDate = validEndDate;
    return this;
  }

  public void unsetValidEndDate() {
    this.validEndDate = null;
  }

  /** Returns true if field validEndDate is set (has been assigned a value) and false otherwise */
  public boolean isSetValidEndDate() {
    return this.validEndDate != null;
  }

  public void setValidEndDateIsSet(boolean value) {
    if (!value) {
      this.validEndDate = null;
    }
  }

  /**
   * 取票状态(1-未取票 2-已取票)
   */
  public java.lang.String getEjectTicketStat() {
    return this.ejectTicketStat;
  }

  /**
   * 取票状态(1-未取票 2-已取票)
   */
  public QRY_IDENTTY_SALE_INFO setEjectTicketStat(java.lang.String ejectTicketStat) {
    this.ejectTicketStat = ejectTicketStat;
    return this;
  }

  public void unsetEjectTicketStat() {
    this.ejectTicketStat = null;
  }

  /** Returns true if field ejectTicketStat is set (has been assigned a value) and false otherwise */
  public boolean isSetEjectTicketStat() {
    return this.ejectTicketStat != null;
  }

  public void setEjectTicketStatIsSet(boolean value) {
    if (!value) {
      this.ejectTicketStat = null;
    }
  }

  /**
   * 取票时间
   */
  public java.lang.String getEjectTicketTime() {
    return this.ejectTicketTime;
  }

  /**
   * 取票时间
   */
  public QRY_IDENTTY_SALE_INFO setEjectTicketTime(java.lang.String ejectTicketTime) {
    this.ejectTicketTime = ejectTicketTime;
    return this;
  }

  public void unsetEjectTicketTime() {
    this.ejectTicketTime = null;
  }

  /** Returns true if field ejectTicketTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEjectTicketTime() {
    return this.ejectTicketTime != null;
  }

  public void setEjectTicketTimeIsSet(boolean value) {
    if (!value) {
      this.ejectTicketTime = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORDER_DETAIL_ID:
      if (value == null) {
        unsetOrderDetailId();
      } else {
        setOrderDetailId((java.lang.String)value);
      }
      break;

    case IDENTTY_ID:
      if (value == null) {
        unsetIdenttyId();
      } else {
        setIdenttyId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_NAME:
      if (value == null) {
        unsetTicketTypeName();
      } else {
        setTicketTypeName((java.lang.String)value);
      }
      break;

    case SALE_TIME:
      if (value == null) {
        unsetSaleTime();
      } else {
        setSaleTime((java.lang.String)value);
      }
      break;

    case CHECK_FLAG:
      if (value == null) {
        unsetCheckFlag();
      } else {
        setCheckFlag((java.lang.String)value);
      }
      break;

    case CHECK_TICKET_TIME:
      if (value == null) {
        unsetCheckTicketTime();
      } else {
        setCheckTicketTime((java.lang.String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((java.lang.String)value);
      }
      break;

    case VALID_START_DATE:
      if (value == null) {
        unsetValidStartDate();
      } else {
        setValidStartDate((java.lang.String)value);
      }
      break;

    case VALID_END_DATE:
      if (value == null) {
        unsetValidEndDate();
      } else {
        setValidEndDate((java.lang.String)value);
      }
      break;

    case EJECT_TICKET_STAT:
      if (value == null) {
        unsetEjectTicketStat();
      } else {
        setEjectTicketStat((java.lang.String)value);
      }
      break;

    case EJECT_TICKET_TIME:
      if (value == null) {
        unsetEjectTicketTime();
      } else {
        setEjectTicketTime((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_DETAIL_ID:
      return getOrderDetailId();

    case IDENTTY_ID:
      return getIdenttyId();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_TYPE_NAME:
      return getTicketTypeName();

    case SALE_TIME:
      return getSaleTime();

    case CHECK_FLAG:
      return getCheckFlag();

    case CHECK_TICKET_TIME:
      return getCheckTicketTime();

    case PAY_TYPE:
      return getPayType();

    case VALID_START_DATE:
      return getValidStartDate();

    case VALID_END_DATE:
      return getValidEndDate();

    case EJECT_TICKET_STAT:
      return getEjectTicketStat();

    case EJECT_TICKET_TIME:
      return getEjectTicketTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORDER_DETAIL_ID:
      return isSetOrderDetailId();
    case IDENTTY_ID:
      return isSetIdenttyId();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_TYPE_NAME:
      return isSetTicketTypeName();
    case SALE_TIME:
      return isSetSaleTime();
    case CHECK_FLAG:
      return isSetCheckFlag();
    case CHECK_TICKET_TIME:
      return isSetCheckTicketTime();
    case PAY_TYPE:
      return isSetPayType();
    case VALID_START_DATE:
      return isSetValidStartDate();
    case VALID_END_DATE:
      return isSetValidEndDate();
    case EJECT_TICKET_STAT:
      return isSetEjectTicketStat();
    case EJECT_TICKET_TIME:
      return isSetEjectTicketTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof QRY_IDENTTY_SALE_INFO)
      return this.equals((QRY_IDENTTY_SALE_INFO)that);
    return false;
  }

  public boolean equals(QRY_IDENTTY_SALE_INFO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderDetailId = true && this.isSetOrderDetailId();
    boolean that_present_orderDetailId = true && that.isSetOrderDetailId();
    if (this_present_orderDetailId || that_present_orderDetailId) {
      if (!(this_present_orderDetailId && that_present_orderDetailId))
        return false;
      if (!this.orderDetailId.equals(that.orderDetailId))
        return false;
    }

    boolean this_present_identtyId = true && this.isSetIdenttyId();
    boolean that_present_identtyId = true && that.isSetIdenttyId();
    if (this_present_identtyId || that_present_identtyId) {
      if (!(this_present_identtyId && that_present_identtyId))
        return false;
      if (!this.identtyId.equals(that.identtyId))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketTypeName = true && this.isSetTicketTypeName();
    boolean that_present_ticketTypeName = true && that.isSetTicketTypeName();
    if (this_present_ticketTypeName || that_present_ticketTypeName) {
      if (!(this_present_ticketTypeName && that_present_ticketTypeName))
        return false;
      if (!this.ticketTypeName.equals(that.ticketTypeName))
        return false;
    }

    boolean this_present_saleTime = true && this.isSetSaleTime();
    boolean that_present_saleTime = true && that.isSetSaleTime();
    if (this_present_saleTime || that_present_saleTime) {
      if (!(this_present_saleTime && that_present_saleTime))
        return false;
      if (!this.saleTime.equals(that.saleTime))
        return false;
    }

    boolean this_present_checkFlag = true && this.isSetCheckFlag();
    boolean that_present_checkFlag = true && that.isSetCheckFlag();
    if (this_present_checkFlag || that_present_checkFlag) {
      if (!(this_present_checkFlag && that_present_checkFlag))
        return false;
      if (!this.checkFlag.equals(that.checkFlag))
        return false;
    }

    boolean this_present_checkTicketTime = true && this.isSetCheckTicketTime();
    boolean that_present_checkTicketTime = true && that.isSetCheckTicketTime();
    if (this_present_checkTicketTime || that_present_checkTicketTime) {
      if (!(this_present_checkTicketTime && that_present_checkTicketTime))
        return false;
      if (!this.checkTicketTime.equals(that.checkTicketTime))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (!this.payType.equals(that.payType))
        return false;
    }

    boolean this_present_validStartDate = true && this.isSetValidStartDate();
    boolean that_present_validStartDate = true && that.isSetValidStartDate();
    if (this_present_validStartDate || that_present_validStartDate) {
      if (!(this_present_validStartDate && that_present_validStartDate))
        return false;
      if (!this.validStartDate.equals(that.validStartDate))
        return false;
    }

    boolean this_present_validEndDate = true && this.isSetValidEndDate();
    boolean that_present_validEndDate = true && that.isSetValidEndDate();
    if (this_present_validEndDate || that_present_validEndDate) {
      if (!(this_present_validEndDate && that_present_validEndDate))
        return false;
      if (!this.validEndDate.equals(that.validEndDate))
        return false;
    }

    boolean this_present_ejectTicketStat = true && this.isSetEjectTicketStat();
    boolean that_present_ejectTicketStat = true && that.isSetEjectTicketStat();
    if (this_present_ejectTicketStat || that_present_ejectTicketStat) {
      if (!(this_present_ejectTicketStat && that_present_ejectTicketStat))
        return false;
      if (!this.ejectTicketStat.equals(that.ejectTicketStat))
        return false;
    }

    boolean this_present_ejectTicketTime = true && this.isSetEjectTicketTime();
    boolean that_present_ejectTicketTime = true && that.isSetEjectTicketTime();
    if (this_present_ejectTicketTime || that_present_ejectTicketTime) {
      if (!(this_present_ejectTicketTime && that_present_ejectTicketTime))
        return false;
      if (!this.ejectTicketTime.equals(that.ejectTicketTime))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderDetailId()) ? 131071 : 524287);
    if (isSetOrderDetailId())
      hashCode = hashCode * 8191 + orderDetailId.hashCode();

    hashCode = hashCode * 8191 + ((isSetIdenttyId()) ? 131071 : 524287);
    if (isSetIdenttyId())
      hashCode = hashCode * 8191 + identtyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeName()) ? 131071 : 524287);
    if (isSetTicketTypeName())
      hashCode = hashCode * 8191 + ticketTypeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetSaleTime()) ? 131071 : 524287);
    if (isSetSaleTime())
      hashCode = hashCode * 8191 + saleTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetCheckFlag()) ? 131071 : 524287);
    if (isSetCheckFlag())
      hashCode = hashCode * 8191 + checkFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetCheckTicketTime()) ? 131071 : 524287);
    if (isSetCheckTicketTime())
      hashCode = hashCode * 8191 + checkTicketTime.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayType()) ? 131071 : 524287);
    if (isSetPayType())
      hashCode = hashCode * 8191 + payType.hashCode();

    hashCode = hashCode * 8191 + ((isSetValidStartDate()) ? 131071 : 524287);
    if (isSetValidStartDate())
      hashCode = hashCode * 8191 + validStartDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetValidEndDate()) ? 131071 : 524287);
    if (isSetValidEndDate())
      hashCode = hashCode * 8191 + validEndDate.hashCode();

    hashCode = hashCode * 8191 + ((isSetEjectTicketStat()) ? 131071 : 524287);
    if (isSetEjectTicketStat())
      hashCode = hashCode * 8191 + ejectTicketStat.hashCode();

    hashCode = hashCode * 8191 + ((isSetEjectTicketTime()) ? 131071 : 524287);
    if (isSetEjectTicketTime())
      hashCode = hashCode * 8191 + ejectTicketTime.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(QRY_IDENTTY_SALE_INFO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrderDetailId()).compareTo(other.isSetOrderDetailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderDetailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDetailId, other.orderDetailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdenttyId()).compareTo(other.isSetIdenttyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdenttyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identtyId, other.identtyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeName()).compareTo(other.isSetTicketTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeName, other.ticketTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleTime()).compareTo(other.isSetSaleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleTime, other.saleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCheckFlag()).compareTo(other.isSetCheckFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkFlag, other.checkFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCheckTicketTime()).compareTo(other.isSetCheckTicketTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckTicketTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkTicketTime, other.checkTicketTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValidStartDate()).compareTo(other.isSetValidStartDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidStartDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validStartDate, other.validStartDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValidEndDate()).compareTo(other.isSetValidEndDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidEndDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validEndDate, other.validEndDate);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEjectTicketStat()).compareTo(other.isSetEjectTicketStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEjectTicketStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ejectTicketStat, other.ejectTicketStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEjectTicketTime()).compareTo(other.isSetEjectTicketTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEjectTicketTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ejectTicketTime, other.ejectTicketTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("QRY_IDENTTY_SALE_INFO(");
    boolean first = true;

    if (isSetOrderDetailId()) {
      sb.append("orderDetailId:");
      if (this.orderDetailId == null) {
        sb.append("null");
      } else {
        sb.append(this.orderDetailId);
      }
      first = false;
    }
    if (isSetIdenttyId()) {
      if (!first) sb.append(", ");
      sb.append("identtyId:");
      if (this.identtyId == null) {
        sb.append("null");
      } else {
        sb.append(this.identtyId);
      }
      first = false;
    }
    if (isSetTicketTypeId()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeId:");
      if (this.ticketTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeId);
      }
      first = false;
    }
    if (isSetTicketTypeName()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeName:");
      if (this.ticketTypeName == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeName);
      }
      first = false;
    }
    if (isSetSaleTime()) {
      if (!first) sb.append(", ");
      sb.append("saleTime:");
      if (this.saleTime == null) {
        sb.append("null");
      } else {
        sb.append(this.saleTime);
      }
      first = false;
    }
    if (isSetCheckFlag()) {
      if (!first) sb.append(", ");
      sb.append("checkFlag:");
      if (this.checkFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.checkFlag);
      }
      first = false;
    }
    if (isSetCheckTicketTime()) {
      if (!first) sb.append(", ");
      sb.append("checkTicketTime:");
      if (this.checkTicketTime == null) {
        sb.append("null");
      } else {
        sb.append(this.checkTicketTime);
      }
      first = false;
    }
    if (isSetPayType()) {
      if (!first) sb.append(", ");
      sb.append("payType:");
      if (this.payType == null) {
        sb.append("null");
      } else {
        sb.append(this.payType);
      }
      first = false;
    }
    if (isSetValidStartDate()) {
      if (!first) sb.append(", ");
      sb.append("validStartDate:");
      if (this.validStartDate == null) {
        sb.append("null");
      } else {
        sb.append(this.validStartDate);
      }
      first = false;
    }
    if (isSetValidEndDate()) {
      if (!first) sb.append(", ");
      sb.append("validEndDate:");
      if (this.validEndDate == null) {
        sb.append("null");
      } else {
        sb.append(this.validEndDate);
      }
      first = false;
    }
    if (isSetEjectTicketStat()) {
      if (!first) sb.append(", ");
      sb.append("ejectTicketStat:");
      if (this.ejectTicketStat == null) {
        sb.append("null");
      } else {
        sb.append(this.ejectTicketStat);
      }
      first = false;
    }
    if (isSetEjectTicketTime()) {
      if (!first) sb.append(", ");
      sb.append("ejectTicketTime:");
      if (this.ejectTicketTime == null) {
        sb.append("null");
      } else {
        sb.append(this.ejectTicketTime);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QRY_IDENTTY_SALE_INFOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QRY_IDENTTY_SALE_INFOStandardScheme getScheme() {
      return new QRY_IDENTTY_SALE_INFOStandardScheme();
    }
  }

  private static class QRY_IDENTTY_SALE_INFOStandardScheme extends org.apache.thrift.scheme.StandardScheme<QRY_IDENTTY_SALE_INFO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QRY_IDENTTY_SALE_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_DETAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderDetailId = iprot.readString();
              struct.setOrderDetailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IDENTTY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identtyId = iprot.readString();
              struct.setIdenttyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeName = iprot.readString();
              struct.setTicketTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // SALE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saleTime = iprot.readString();
              struct.setSaleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // CHECK_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkFlag = iprot.readString();
              struct.setCheckFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CHECK_TICKET_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkTicketTime = iprot.readString();
              struct.setCheckTicketTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payType = iprot.readString();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VALID_START_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.validStartDate = iprot.readString();
              struct.setValidStartDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VALID_END_DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.validEndDate = iprot.readString();
              struct.setValidEndDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // EJECT_TICKET_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ejectTicketStat = iprot.readString();
              struct.setEjectTicketStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // EJECT_TICKET_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ejectTicketTime = iprot.readString();
              struct.setEjectTicketTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QRY_IDENTTY_SALE_INFO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderDetailId != null) {
        if (struct.isSetOrderDetailId()) {
          oprot.writeFieldBegin(ORDER_DETAIL_ID_FIELD_DESC);
          oprot.writeString(struct.orderDetailId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.identtyId != null) {
        if (struct.isSetIdenttyId()) {
          oprot.writeFieldBegin(IDENTTY_ID_FIELD_DESC);
          oprot.writeString(struct.identtyId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeId != null) {
        if (struct.isSetTicketTypeId()) {
          oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.ticketTypeId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeName != null) {
        if (struct.isSetTicketTypeName()) {
          oprot.writeFieldBegin(TICKET_TYPE_NAME_FIELD_DESC);
          oprot.writeString(struct.ticketTypeName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.saleTime != null) {
        if (struct.isSetSaleTime()) {
          oprot.writeFieldBegin(SALE_TIME_FIELD_DESC);
          oprot.writeString(struct.saleTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.checkFlag != null) {
        if (struct.isSetCheckFlag()) {
          oprot.writeFieldBegin(CHECK_FLAG_FIELD_DESC);
          oprot.writeString(struct.checkFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.checkTicketTime != null) {
        if (struct.isSetCheckTicketTime()) {
          oprot.writeFieldBegin(CHECK_TICKET_TIME_FIELD_DESC);
          oprot.writeString(struct.checkTicketTime);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payType != null) {
        if (struct.isSetPayType()) {
          oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
          oprot.writeString(struct.payType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.validStartDate != null) {
        if (struct.isSetValidStartDate()) {
          oprot.writeFieldBegin(VALID_START_DATE_FIELD_DESC);
          oprot.writeString(struct.validStartDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.validEndDate != null) {
        if (struct.isSetValidEndDate()) {
          oprot.writeFieldBegin(VALID_END_DATE_FIELD_DESC);
          oprot.writeString(struct.validEndDate);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ejectTicketStat != null) {
        if (struct.isSetEjectTicketStat()) {
          oprot.writeFieldBegin(EJECT_TICKET_STAT_FIELD_DESC);
          oprot.writeString(struct.ejectTicketStat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ejectTicketTime != null) {
        if (struct.isSetEjectTicketTime()) {
          oprot.writeFieldBegin(EJECT_TICKET_TIME_FIELD_DESC);
          oprot.writeString(struct.ejectTicketTime);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QRY_IDENTTY_SALE_INFOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QRY_IDENTTY_SALE_INFOTupleScheme getScheme() {
      return new QRY_IDENTTY_SALE_INFOTupleScheme();
    }
  }

  private static class QRY_IDENTTY_SALE_INFOTupleScheme extends org.apache.thrift.scheme.TupleScheme<QRY_IDENTTY_SALE_INFO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QRY_IDENTTY_SALE_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOrderDetailId()) {
        optionals.set(0);
      }
      if (struct.isSetIdenttyId()) {
        optionals.set(1);
      }
      if (struct.isSetTicketTypeId()) {
        optionals.set(2);
      }
      if (struct.isSetTicketTypeName()) {
        optionals.set(3);
      }
      if (struct.isSetSaleTime()) {
        optionals.set(4);
      }
      if (struct.isSetCheckFlag()) {
        optionals.set(5);
      }
      if (struct.isSetCheckTicketTime()) {
        optionals.set(6);
      }
      if (struct.isSetPayType()) {
        optionals.set(7);
      }
      if (struct.isSetValidStartDate()) {
        optionals.set(8);
      }
      if (struct.isSetValidEndDate()) {
        optionals.set(9);
      }
      if (struct.isSetEjectTicketStat()) {
        optionals.set(10);
      }
      if (struct.isSetEjectTicketTime()) {
        optionals.set(11);
      }
      oprot.writeBitSet(optionals, 12);
      if (struct.isSetOrderDetailId()) {
        oprot.writeString(struct.orderDetailId);
      }
      if (struct.isSetIdenttyId()) {
        oprot.writeString(struct.identtyId);
      }
      if (struct.isSetTicketTypeId()) {
        oprot.writeString(struct.ticketTypeId);
      }
      if (struct.isSetTicketTypeName()) {
        oprot.writeString(struct.ticketTypeName);
      }
      if (struct.isSetSaleTime()) {
        oprot.writeString(struct.saleTime);
      }
      if (struct.isSetCheckFlag()) {
        oprot.writeString(struct.checkFlag);
      }
      if (struct.isSetCheckTicketTime()) {
        oprot.writeString(struct.checkTicketTime);
      }
      if (struct.isSetPayType()) {
        oprot.writeString(struct.payType);
      }
      if (struct.isSetValidStartDate()) {
        oprot.writeString(struct.validStartDate);
      }
      if (struct.isSetValidEndDate()) {
        oprot.writeString(struct.validEndDate);
      }
      if (struct.isSetEjectTicketStat()) {
        oprot.writeString(struct.ejectTicketStat);
      }
      if (struct.isSetEjectTicketTime()) {
        oprot.writeString(struct.ejectTicketTime);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QRY_IDENTTY_SALE_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(12);
      if (incoming.get(0)) {
        struct.orderDetailId = iprot.readString();
        struct.setOrderDetailIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.identtyId = iprot.readString();
        struct.setIdenttyIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.ticketTypeId = iprot.readString();
        struct.setTicketTypeIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.ticketTypeName = iprot.readString();
        struct.setTicketTypeNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.saleTime = iprot.readString();
        struct.setSaleTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.checkFlag = iprot.readString();
        struct.setCheckFlagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.checkTicketTime = iprot.readString();
        struct.setCheckTicketTimeIsSet(true);
      }
      if (incoming.get(7)) {
        struct.payType = iprot.readString();
        struct.setPayTypeIsSet(true);
      }
      if (incoming.get(8)) {
        struct.validStartDate = iprot.readString();
        struct.setValidStartDateIsSet(true);
      }
      if (incoming.get(9)) {
        struct.validEndDate = iprot.readString();
        struct.setValidEndDateIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ejectTicketStat = iprot.readString();
        struct.setEjectTicketStatIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ejectTicketTime = iprot.readString();
        struct.setEjectTicketTimeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

