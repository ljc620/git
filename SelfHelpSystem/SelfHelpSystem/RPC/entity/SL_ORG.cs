/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 机构表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_ORG : TBase
  {
    private string _location;
    private string _legal;
    private string _contact;
    private string _tel;
    private double _creditAmt;
    private long _depositAmt;
    private long _advanceAmt;
    private long _advanceFrozeAmt;
    private string _opeUserId;
    private long _opeTime;
    private long _versionNo;

    /// <summary>
    /// 组织机构代码
    /// </summary>
    public string OrgId { get; set; }

    /// <summary>
    /// 机构名称
    /// </summary>
    public string OrgName { get; set; }

    /// <summary>
    /// 机构类型(0签约社1网络代理商2实体代理商)
    /// </summary>
    public string OrgType { get; set; }

    /// <summary>
    /// 地址
    /// </summary>
    public string Location
    {
      get
      {
        return _location;
      }
      set
      {
        __isset.location = true;
        this._location = value;
      }
    }

    /// <summary>
    /// 法人代表
    /// </summary>
    public string Legal
    {
      get
      {
        return _legal;
      }
      set
      {
        __isset.legal = true;
        this._legal = value;
      }
    }

    /// <summary>
    /// 联系人
    /// </summary>
    public string Contact
    {
      get
      {
        return _contact;
      }
      set
      {
        __isset.contact = true;
        this._contact = value;
      }
    }

    /// <summary>
    /// 联系电话
    /// </summary>
    public string Tel
    {
      get
      {
        return _tel;
      }
      set
      {
        __isset.tel = true;
        this._tel = value;
      }
    }

    /// <summary>
    /// 信用额度
    /// </summary>
    public double CreditAmt
    {
      get
      {
        return _creditAmt;
      }
      set
      {
        __isset.creditAmt = true;
        this._creditAmt = value;
      }
    }

    /// <summary>
    /// 机构状态(Y正常N停用)
    /// </summary>
    public string OrgStat { get; set; }

    /// <summary>
    /// 保证金
    /// </summary>
    public long DepositAmt
    {
      get
      {
        return _depositAmt;
      }
      set
      {
        __isset.depositAmt = true;
        this._depositAmt = value;
      }
    }

    /// <summary>
    /// 预付款余额
    /// </summary>
    public long AdvanceAmt
    {
      get
      {
        return _advanceAmt;
      }
      set
      {
        __isset.advanceAmt = true;
        this._advanceAmt = value;
      }
    }

    /// <summary>
    /// 预付款冻结金额
    /// </summary>
    public long AdvanceFrozeAmt
    {
      get
      {
        return _advanceFrozeAmt;
      }
      set
      {
        __isset.advanceFrozeAmt = true;
        this._advanceFrozeAmt = value;
      }
    }

    /// <summary>
    /// 操作人
    /// </summary>
    public string OpeUserId
    {
      get
      {
        return _opeUserId;
      }
      set
      {
        __isset.opeUserId = true;
        this._opeUserId = value;
      }
    }

    /// <summary>
    /// 操作时间
    /// </summary>
    public long OpeTime
    {
      get
      {
        return _opeTime;
      }
      set
      {
        __isset.opeTime = true;
        this._opeTime = value;
      }
    }

    /// <summary>
    /// 版本号
    /// </summary>
    public long VersionNo
    {
      get
      {
        return _versionNo;
      }
      set
      {
        __isset.versionNo = true;
        this._versionNo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool location;
      public bool legal;
      public bool contact;
      public bool tel;
      public bool creditAmt;
      public bool depositAmt;
      public bool advanceAmt;
      public bool advanceFrozeAmt;
      public bool opeUserId;
      public bool opeTime;
      public bool versionNo;
    }

    public SL_ORG() {
    }

    public SL_ORG(string orgId, string orgName, string orgType, string orgStat) : this() {
      this.OrgId = orgId;
      this.OrgName = orgName;
      this.OrgType = orgType;
      this.OrgStat = orgStat;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_orgId = false;
        bool isset_orgName = false;
        bool isset_orgType = false;
        bool isset_orgStat = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OrgId = iprot.ReadString();
                isset_orgId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrgName = iprot.ReadString();
                isset_orgName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                OrgType = iprot.ReadString();
                isset_orgType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Location = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                Legal = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Contact = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Tel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.Double) {
                CreditAmt = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                OrgStat = iprot.ReadString();
                isset_orgStat = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                DepositAmt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                AdvanceAmt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                AdvanceFrozeAmt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                OpeUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I64) {
                OpeTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.I64) {
                VersionNo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_orgId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_orgName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_orgType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_orgStat)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_ORG");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "orgId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrgId);
        oprot.WriteFieldEnd();
        field.Name = "orgName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrgName);
        oprot.WriteFieldEnd();
        field.Name = "orgType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrgType);
        oprot.WriteFieldEnd();
        if (Location != null && __isset.location) {
          field.Name = "location";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Location);
          oprot.WriteFieldEnd();
        }
        if (Legal != null && __isset.legal) {
          field.Name = "legal";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Legal);
          oprot.WriteFieldEnd();
        }
        if (Contact != null && __isset.contact) {
          field.Name = "contact";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Contact);
          oprot.WriteFieldEnd();
        }
        if (Tel != null && __isset.tel) {
          field.Name = "tel";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tel);
          oprot.WriteFieldEnd();
        }
        if (__isset.creditAmt) {
          field.Name = "creditAmt";
          field.Type = TType.Double;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(CreditAmt);
          oprot.WriteFieldEnd();
        }
        field.Name = "orgStat";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrgStat);
        oprot.WriteFieldEnd();
        if (__isset.depositAmt) {
          field.Name = "depositAmt";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(DepositAmt);
          oprot.WriteFieldEnd();
        }
        if (__isset.advanceAmt) {
          field.Name = "advanceAmt";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AdvanceAmt);
          oprot.WriteFieldEnd();
        }
        if (__isset.advanceFrozeAmt) {
          field.Name = "advanceFrozeAmt";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(AdvanceFrozeAmt);
          oprot.WriteFieldEnd();
        }
        if (OpeUserId != null && __isset.opeUserId) {
          field.Name = "opeUserId";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OpeUserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.opeTime) {
          field.Name = "opeTime";
          field.Type = TType.I64;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OpeTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.versionNo) {
          field.Name = "versionNo";
          field.Type = TType.I64;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(VersionNo);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_ORG(");
      __sb.Append(", OrgId: ");
      __sb.Append(OrgId);
      __sb.Append(", OrgName: ");
      __sb.Append(OrgName);
      __sb.Append(", OrgType: ");
      __sb.Append(OrgType);
      if (Location != null && __isset.location) {
        __sb.Append(", Location: ");
        __sb.Append(Location);
      }
      if (Legal != null && __isset.legal) {
        __sb.Append(", Legal: ");
        __sb.Append(Legal);
      }
      if (Contact != null && __isset.contact) {
        __sb.Append(", Contact: ");
        __sb.Append(Contact);
      }
      if (Tel != null && __isset.tel) {
        __sb.Append(", Tel: ");
        __sb.Append(Tel);
      }
      if (__isset.creditAmt) {
        __sb.Append(", CreditAmt: ");
        __sb.Append(CreditAmt);
      }
      __sb.Append(", OrgStat: ");
      __sb.Append(OrgStat);
      if (__isset.depositAmt) {
        __sb.Append(", DepositAmt: ");
        __sb.Append(DepositAmt);
      }
      if (__isset.advanceAmt) {
        __sb.Append(", AdvanceAmt: ");
        __sb.Append(AdvanceAmt);
      }
      if (__isset.advanceFrozeAmt) {
        __sb.Append(", AdvanceFrozeAmt: ");
        __sb.Append(AdvanceFrozeAmt);
      }
      if (OpeUserId != null && __isset.opeUserId) {
        __sb.Append(", OpeUserId: ");
        __sb.Append(OpeUserId);
      }
      if (__isset.opeTime) {
        __sb.Append(", OpeTime: ");
        __sb.Append(OpeTime);
      }
      if (__isset.versionNo) {
        __sb.Append(", VersionNo: ");
        __sb.Append(VersionNo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
