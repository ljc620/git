/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 支付方式明细表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_PAY_TYPE : TBase
  {
    private string _payId;
    private long _versionNo;
    private string _paymentCode;

    /// <summary>
    /// 订单支付方式明细表id
    /// </summary>
    public string PayTypeId { get; set; }

    /// <summary>
    /// 销售单号
    /// </summary>
    public string OrderId { get; set; }

    /// <summary>
    /// 支付方式
    /// </summary>
    public string PayType { get; set; }

    /// <summary>
    /// 金额
    /// </summary>
    public long Amt { get; set; }

    /// <summary>
    /// 第三方支付单号
    /// </summary>
    public string PayId
    {
      get
      {
        return _payId;
      }
      set
      {
        __isset.payId = true;
        this._payId = value;
      }
    }

    /// <summary>
    /// 版本号
    /// </summary>
    public long VersionNo
    {
      get
      {
        return _versionNo;
      }
      set
      {
        __isset.versionNo = true;
        this._versionNo = value;
      }
    }

    /// <summary>
    /// 付款码
    /// </summary>
    public string PaymentCode
    {
      get
      {
        return _paymentCode;
      }
      set
      {
        __isset.paymentCode = true;
        this._paymentCode = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool payId;
      public bool versionNo;
      public bool paymentCode;
    }

    public SL_PAY_TYPE() {
    }

    public SL_PAY_TYPE(string payTypeId, string orderId, string payType, long amt) : this() {
      this.PayTypeId = payTypeId;
      this.OrderId = orderId;
      this.PayType = payType;
      this.Amt = amt;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_payTypeId = false;
        bool isset_orderId = false;
        bool isset_payType = false;
        bool isset_amt = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PayTypeId = iprot.ReadString();
                isset_payTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
                isset_orderId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                PayType = iprot.ReadString();
                isset_payType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                Amt = iprot.ReadI64();
                isset_amt = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                PayId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                VersionNo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                PaymentCode = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_payTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_orderId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_payType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_amt)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_PAY_TYPE");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "payTypeId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PayTypeId);
        oprot.WriteFieldEnd();
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
        field.Name = "payType";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PayType);
        oprot.WriteFieldEnd();
        field.Name = "amt";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Amt);
        oprot.WriteFieldEnd();
        if (PayId != null && __isset.payId) {
          field.Name = "payId";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PayId);
          oprot.WriteFieldEnd();
        }
        if (__isset.versionNo) {
          field.Name = "versionNo";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(VersionNo);
          oprot.WriteFieldEnd();
        }
        if (PaymentCode != null && __isset.paymentCode) {
          field.Name = "paymentCode";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PaymentCode);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_PAY_TYPE(");
      __sb.Append(", PayTypeId: ");
      __sb.Append(PayTypeId);
      __sb.Append(", OrderId: ");
      __sb.Append(OrderId);
      __sb.Append(", PayType: ");
      __sb.Append(PayType);
      __sb.Append(", Amt: ");
      __sb.Append(Amt);
      if (PayId != null && __isset.payId) {
        __sb.Append(", PayId: ");
        __sb.Append(PayId);
      }
      if (__isset.versionNo) {
        __sb.Append(", VersionNo: ");
        __sb.Append(VersionNo);
      }
      if (PaymentCode != null && __isset.paymentCode) {
        __sb.Append(", PaymentCode: ");
        __sb.Append(PaymentCode);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
