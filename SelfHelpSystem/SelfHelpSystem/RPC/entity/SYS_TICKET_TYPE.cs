/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 票种表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SYS_TICKET_TYPE : TBase
  {
    private string _dayNightFlag;
    private string _dayValidateFlag;
    private long _price;
    private string _opeUserId;
    private long _opeTime;
    private long _versionNo;
    private List<SYS_TICKET_TYPE_RULE> _sysTicketTypeRulelist;
    private List<SYS_TICKET_TYPE_VENUE> _sysTicketTypeVenuelist;

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId { get; set; }

    /// <summary>
    /// 票种名称
    /// </summary>
    public string TicketTypeName { get; set; }

    /// <summary>
    /// 是否团体
    /// </summary>
    public string TeamFlag { get; set; }

    /// <summary>
    /// 可用次数
    /// </summary>
    public long ValidateTimes { get; set; }

    /// <summary>
    /// 是否优惠
    /// </summary>
    public string LessFlag { get; set; }

    /// <summary>
    /// 日夜场
    /// </summary>
    public string DayNightFlag
    {
      get
      {
        return _dayNightFlag;
      }
      set
      {
        __isset.dayNightFlag = true;
        this._dayNightFlag = value;
      }
    }

    /// <summary>
    /// 是否销售日当日有效
    /// </summary>
    public string DayValidateFlag
    {
      get
      {
        return _dayValidateFlag;
      }
      set
      {
        __isset.dayValidateFlag = true;
        this._dayValidateFlag = value;
      }
    }

    /// <summary>
    /// 票价
    /// </summary>
    public long Price
    {
      get
      {
        return _price;
      }
      set
      {
        __isset.price = true;
        this._price = value;
      }
    }

    /// <summary>
    /// 操作人
    /// </summary>
    public string OpeUserId
    {
      get
      {
        return _opeUserId;
      }
      set
      {
        __isset.opeUserId = true;
        this._opeUserId = value;
      }
    }

    /// <summary>
    /// 操作时间
    /// </summary>
    public long OpeTime
    {
      get
      {
        return _opeTime;
      }
      set
      {
        __isset.opeTime = true;
        this._opeTime = value;
      }
    }

    /// <summary>
    /// 版本号
    /// </summary>
    public long VersionNo
    {
      get
      {
        return _versionNo;
      }
      set
      {
        __isset.versionNo = true;
        this._versionNo = value;
      }
    }

    /// <summary>
    /// 票种检票规则表
    /// </summary>
    public List<SYS_TICKET_TYPE_RULE> SysTicketTypeRulelist
    {
      get
      {
        return _sysTicketTypeRulelist;
      }
      set
      {
        __isset.sysTicketTypeRulelist = true;
        this._sysTicketTypeRulelist = value;
      }
    }

    /// <summary>
    /// 票种场馆表
    /// </summary>
    public List<SYS_TICKET_TYPE_VENUE> SysTicketTypeVenuelist
    {
      get
      {
        return _sysTicketTypeVenuelist;
      }
      set
      {
        __isset.sysTicketTypeVenuelist = true;
        this._sysTicketTypeVenuelist = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool dayNightFlag;
      public bool dayValidateFlag;
      public bool price;
      public bool opeUserId;
      public bool opeTime;
      public bool versionNo;
      public bool sysTicketTypeRulelist;
      public bool sysTicketTypeVenuelist;
    }

    public SYS_TICKET_TYPE() {
    }

    public SYS_TICKET_TYPE(string ticketTypeId, string ticketTypeName, string teamFlag, long validateTimes, string lessFlag) : this() {
      this.TicketTypeId = ticketTypeId;
      this.TicketTypeName = ticketTypeName;
      this.TeamFlag = teamFlag;
      this.ValidateTimes = validateTimes;
      this.LessFlag = lessFlag;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ticketTypeId = false;
        bool isset_ticketTypeName = false;
        bool isset_teamFlag = false;
        bool isset_validateTimes = false;
        bool isset_lessFlag = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
                isset_ticketTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TicketTypeName = iprot.ReadString();
                isset_ticketTypeName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TeamFlag = iprot.ReadString();
                isset_teamFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                ValidateTimes = iprot.ReadI64();
                isset_validateTimes = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                LessFlag = iprot.ReadString();
                isset_lessFlag = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                DayNightFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                DayValidateFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                Price = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                OpeUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                OpeTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.I64) {
                VersionNo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  SysTicketTypeRulelist = new List<SYS_TICKET_TYPE_RULE>();
                  TList _list24 = iprot.ReadListBegin();
                  for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                  {
                    SYS_TICKET_TYPE_RULE _elem26;
                    _elem26 = new SYS_TICKET_TYPE_RULE();
                    _elem26.Read(iprot);
                    SysTicketTypeRulelist.Add(_elem26);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.List) {
                {
                  SysTicketTypeVenuelist = new List<SYS_TICKET_TYPE_VENUE>();
                  TList _list27 = iprot.ReadListBegin();
                  for( int _i28 = 0; _i28 < _list27.Count; ++_i28)
                  {
                    SYS_TICKET_TYPE_VENUE _elem29;
                    _elem29 = new SYS_TICKET_TYPE_VENUE();
                    _elem29.Read(iprot);
                    SysTicketTypeVenuelist.Add(_elem29);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_ticketTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_teamFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_validateTimes)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_lessFlag)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SYS_TICKET_TYPE");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "ticketTypeId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeId);
        oprot.WriteFieldEnd();
        field.Name = "ticketTypeName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeName);
        oprot.WriteFieldEnd();
        field.Name = "teamFlag";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TeamFlag);
        oprot.WriteFieldEnd();
        field.Name = "validateTimes";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ValidateTimes);
        oprot.WriteFieldEnd();
        field.Name = "lessFlag";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(LessFlag);
        oprot.WriteFieldEnd();
        if (DayNightFlag != null && __isset.dayNightFlag) {
          field.Name = "dayNightFlag";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DayNightFlag);
          oprot.WriteFieldEnd();
        }
        if (DayValidateFlag != null && __isset.dayValidateFlag) {
          field.Name = "dayValidateFlag";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DayValidateFlag);
          oprot.WriteFieldEnd();
        }
        if (__isset.price) {
          field.Name = "price";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Price);
          oprot.WriteFieldEnd();
        }
        if (OpeUserId != null && __isset.opeUserId) {
          field.Name = "opeUserId";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OpeUserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.opeTime) {
          field.Name = "opeTime";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OpeTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.versionNo) {
          field.Name = "versionNo";
          field.Type = TType.I64;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(VersionNo);
          oprot.WriteFieldEnd();
        }
        if (SysTicketTypeRulelist != null && __isset.sysTicketTypeRulelist) {
          field.Name = "sysTicketTypeRulelist";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SysTicketTypeRulelist.Count));
            foreach (SYS_TICKET_TYPE_RULE _iter30 in SysTicketTypeRulelist)
            {
              _iter30.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SysTicketTypeVenuelist != null && __isset.sysTicketTypeVenuelist) {
          field.Name = "sysTicketTypeVenuelist";
          field.Type = TType.List;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SysTicketTypeVenuelist.Count));
            foreach (SYS_TICKET_TYPE_VENUE _iter31 in SysTicketTypeVenuelist)
            {
              _iter31.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SYS_TICKET_TYPE(");
      __sb.Append(", TicketTypeId: ");
      __sb.Append(TicketTypeId);
      __sb.Append(", TicketTypeName: ");
      __sb.Append(TicketTypeName);
      __sb.Append(", TeamFlag: ");
      __sb.Append(TeamFlag);
      __sb.Append(", ValidateTimes: ");
      __sb.Append(ValidateTimes);
      __sb.Append(", LessFlag: ");
      __sb.Append(LessFlag);
      if (DayNightFlag != null && __isset.dayNightFlag) {
        __sb.Append(", DayNightFlag: ");
        __sb.Append(DayNightFlag);
      }
      if (DayValidateFlag != null && __isset.dayValidateFlag) {
        __sb.Append(", DayValidateFlag: ");
        __sb.Append(DayValidateFlag);
      }
      if (__isset.price) {
        __sb.Append(", Price: ");
        __sb.Append(Price);
      }
      if (OpeUserId != null && __isset.opeUserId) {
        __sb.Append(", OpeUserId: ");
        __sb.Append(OpeUserId);
      }
      if (__isset.opeTime) {
        __sb.Append(", OpeTime: ");
        __sb.Append(OpeTime);
      }
      if (__isset.versionNo) {
        __sb.Append(", VersionNo: ");
        __sb.Append(VersionNo);
      }
      if (SysTicketTypeRulelist != null && __isset.sysTicketTypeRulelist) {
        __sb.Append(", SysTicketTypeRulelist: ");
        __sb.Append(SysTicketTypeRulelist);
      }
      if (SysTicketTypeVenuelist != null && __isset.sysTicketTypeVenuelist) {
        __sb.Append(", SysTicketTypeVenuelist: ");
        __sb.Append(SysTicketTypeVenuelist);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
