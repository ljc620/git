/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 团队票预定表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_TEAM_ORDER : TBase
  {
    private string _orgId;
    private string _orgName;
    private long _inDt;
    private string _changeUserId;
    private string _changeUserName;
    private long _changeTime;
    private string _examUserId;
    private string _examUserName;
    private long _examTime;
    private string _stat;
    private double _applyFrozenAdvanceAmt;
    private double _examFrozenAdvanceAmt;
    private string _examType;
    private double _minusAdvanceAmt;
    private string _cardType;
    private string _cardTypeName;
    private string _cardId;
    private string _tel;
    private string _remark;

    /// <summary>
    /// 申请编号
    /// </summary>
    public string ApplyId { get; set; }

    /// <summary>
    /// 申请时间
    /// </summary>
    public long ApplyTime { get; set; }

    /// <summary>
    /// 申请人
    /// </summary>
    public string ApplyUserId { get; set; }

    /// <summary>
    /// 机构编号
    /// </summary>
    public string OrgId
    {
      get
      {
        return _orgId;
      }
      set
      {
        __isset.orgId = true;
        this._orgId = value;
      }
    }

    /// <summary>
    /// 机构名称
    /// </summary>
    public string OrgName
    {
      get
      {
        return _orgName;
      }
      set
      {
        __isset.orgName = true;
        this._orgName = value;
      }
    }

    /// <summary>
    /// 入园日期
    /// </summary>
    public long InDt
    {
      get
      {
        return _inDt;
      }
      set
      {
        __isset.inDt = true;
        this._inDt = value;
      }
    }

    /// <summary>
    /// 换票人编号
    /// </summary>
    public string ChangeUserId
    {
      get
      {
        return _changeUserId;
      }
      set
      {
        __isset.changeUserId = true;
        this._changeUserId = value;
      }
    }

    /// <summary>
    /// 换票人姓名
    /// </summary>
    public string ChangeUserName
    {
      get
      {
        return _changeUserName;
      }
      set
      {
        __isset.changeUserName = true;
        this._changeUserName = value;
      }
    }

    /// <summary>
    /// 换票时间
    /// </summary>
    public long ChangeTime
    {
      get
      {
        return _changeTime;
      }
      set
      {
        __isset.changeTime = true;
        this._changeTime = value;
      }
    }

    /// <summary>
    /// 审核人
    /// </summary>
    public string ExamUserId
    {
      get
      {
        return _examUserId;
      }
      set
      {
        __isset.examUserId = true;
        this._examUserId = value;
      }
    }

    /// <summary>
    /// 审核人名称
    /// </summary>
    public string ExamUserName
    {
      get
      {
        return _examUserName;
      }
      set
      {
        __isset.examUserName = true;
        this._examUserName = value;
      }
    }

    /// <summary>
    /// 审核时间
    /// </summary>
    public long ExamTime
    {
      get
      {
        return _examTime;
      }
      set
      {
        __isset.examTime = true;
        this._examTime = value;
      }
    }

    /// <summary>
    /// 状态 (01-已保存,02-未审核,03-已审核)
    /// </summary>
    public string Stat
    {
      get
      {
        return _stat;
      }
      set
      {
        __isset.stat = true;
        this._stat = value;
      }
    }

    /// <summary>
    /// 申请冻结预付款
    /// </summary>
    public double ApplyFrozenAdvanceAmt
    {
      get
      {
        return _applyFrozenAdvanceAmt;
      }
      set
      {
        __isset.applyFrozenAdvanceAmt = true;
        this._applyFrozenAdvanceAmt = value;
      }
    }

    /// <summary>
    /// 审核冻结预付款
    /// </summary>
    public double ExamFrozenAdvanceAmt
    {
      get
      {
        return _examFrozenAdvanceAmt;
      }
      set
      {
        __isset.examFrozenAdvanceAmt = true;
        this._examFrozenAdvanceAmt = value;
      }
    }

    /// <summary>
    /// 审核类型 (01-自动审核,02-人工审核)
    /// </summary>
    public string ExamType
    {
      get
      {
        return _examType;
      }
      set
      {
        __isset.examType = true;
        this._examType = value;
      }
    }

    /// <summary>
    /// 扣减预付款
    /// </summary>
    public double MinusAdvanceAmt
    {
      get
      {
        return _minusAdvanceAmt;
      }
      set
      {
        __isset.minusAdvanceAmt = true;
        this._minusAdvanceAmt = value;
      }
    }

    /// <summary>
    /// 团队票预订明细
    /// </summary>
    public List<SL_TEAM_ORDER_DETAIL> TeamOrderDetail { get; set; }

    /// <summary>
    /// 换票人证件类型
    /// </summary>
    public string CardType
    {
      get
      {
        return _cardType;
      }
      set
      {
        __isset.cardType = true;
        this._cardType = value;
      }
    }

    /// <summary>
    /// 换票人证件类型名称
    /// </summary>
    public string CardTypeName
    {
      get
      {
        return _cardTypeName;
      }
      set
      {
        __isset.cardTypeName = true;
        this._cardTypeName = value;
      }
    }

    /// <summary>
    /// 换票人证件号码
    /// </summary>
    public string CardId
    {
      get
      {
        return _cardId;
      }
      set
      {
        __isset.cardId = true;
        this._cardId = value;
      }
    }

    /// <summary>
    /// 联系电话
    /// </summary>
    public string Tel
    {
      get
      {
        return _tel;
      }
      set
      {
        __isset.tel = true;
        this._tel = value;
      }
    }

    /// <summary>
    /// 订单说明
    /// </summary>
    public string Remark
    {
      get
      {
        return _remark;
      }
      set
      {
        __isset.remark = true;
        this._remark = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool orgId;
      public bool orgName;
      public bool inDt;
      public bool changeUserId;
      public bool changeUserName;
      public bool changeTime;
      public bool examUserId;
      public bool examUserName;
      public bool examTime;
      public bool stat;
      public bool applyFrozenAdvanceAmt;
      public bool examFrozenAdvanceAmt;
      public bool examType;
      public bool minusAdvanceAmt;
      public bool cardType;
      public bool cardTypeName;
      public bool cardId;
      public bool tel;
      public bool remark;
    }

    public SL_TEAM_ORDER() {
    }

    public SL_TEAM_ORDER(string applyId, long applyTime, string applyUserId, List<SL_TEAM_ORDER_DETAIL> teamOrderDetail) : this() {
      this.ApplyId = applyId;
      this.ApplyTime = applyTime;
      this.ApplyUserId = applyUserId;
      this.TeamOrderDetail = teamOrderDetail;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_applyId = false;
        bool isset_applyTime = false;
        bool isset_applyUserId = false;
        bool isset_teamOrderDetail = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ApplyId = iprot.ReadString();
                isset_applyId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                ApplyTime = iprot.ReadI64();
                isset_applyTime = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ApplyUserId = iprot.ReadString();
                isset_applyUserId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                OrgId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                OrgName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                InDt = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                ChangeUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                ChangeUserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                ChangeTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                ExamUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                ExamUserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                ExamTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                Stat = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.Double) {
                ApplyFrozenAdvanceAmt = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.Double) {
                ExamFrozenAdvanceAmt = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                ExamType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.Double) {
                MinusAdvanceAmt = iprot.ReadDouble();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.List) {
                {
                  TeamOrderDetail = new List<SL_TEAM_ORDER_DETAIL>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    SL_TEAM_ORDER_DETAIL _elem10;
                    _elem10 = new SL_TEAM_ORDER_DETAIL();
                    _elem10.Read(iprot);
                    TeamOrderDetail.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
                isset_teamOrderDetail = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 19:
              if (field.Type == TType.String) {
                CardType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 20:
              if (field.Type == TType.String) {
                CardTypeName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 21:
              if (field.Type == TType.String) {
                CardId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 22:
              if (field.Type == TType.String) {
                Tel = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 23:
              if (field.Type == TType.String) {
                Remark = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_applyId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_applyTime)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_applyUserId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_teamOrderDetail)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_TEAM_ORDER");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "applyId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ApplyId);
        oprot.WriteFieldEnd();
        field.Name = "applyTime";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ApplyTime);
        oprot.WriteFieldEnd();
        field.Name = "applyUserId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ApplyUserId);
        oprot.WriteFieldEnd();
        if (OrgId != null && __isset.orgId) {
          field.Name = "orgId";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrgId);
          oprot.WriteFieldEnd();
        }
        if (OrgName != null && __isset.orgName) {
          field.Name = "orgName";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OrgName);
          oprot.WriteFieldEnd();
        }
        if (__isset.inDt) {
          field.Name = "inDt";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(InDt);
          oprot.WriteFieldEnd();
        }
        if (ChangeUserId != null && __isset.changeUserId) {
          field.Name = "changeUserId";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChangeUserId);
          oprot.WriteFieldEnd();
        }
        if (ChangeUserName != null && __isset.changeUserName) {
          field.Name = "changeUserName";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChangeUserName);
          oprot.WriteFieldEnd();
        }
        if (__isset.changeTime) {
          field.Name = "changeTime";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ChangeTime);
          oprot.WriteFieldEnd();
        }
        if (ExamUserId != null && __isset.examUserId) {
          field.Name = "examUserId";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExamUserId);
          oprot.WriteFieldEnd();
        }
        if (ExamUserName != null && __isset.examUserName) {
          field.Name = "examUserName";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExamUserName);
          oprot.WriteFieldEnd();
        }
        if (__isset.examTime) {
          field.Name = "examTime";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ExamTime);
          oprot.WriteFieldEnd();
        }
        if (Stat != null && __isset.stat) {
          field.Name = "stat";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Stat);
          oprot.WriteFieldEnd();
        }
        if (__isset.applyFrozenAdvanceAmt) {
          field.Name = "applyFrozenAdvanceAmt";
          field.Type = TType.Double;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(ApplyFrozenAdvanceAmt);
          oprot.WriteFieldEnd();
        }
        if (__isset.examFrozenAdvanceAmt) {
          field.Name = "examFrozenAdvanceAmt";
          field.Type = TType.Double;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(ExamFrozenAdvanceAmt);
          oprot.WriteFieldEnd();
        }
        if (ExamType != null && __isset.examType) {
          field.Name = "examType";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ExamType);
          oprot.WriteFieldEnd();
        }
        if (__isset.minusAdvanceAmt) {
          field.Name = "minusAdvanceAmt";
          field.Type = TType.Double;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteDouble(MinusAdvanceAmt);
          oprot.WriteFieldEnd();
        }
        field.Name = "teamOrderDetail";
        field.Type = TType.List;
        field.ID = 18;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, TeamOrderDetail.Count));
          foreach (SL_TEAM_ORDER_DETAIL _iter11 in TeamOrderDetail)
          {
            _iter11.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
        if (CardType != null && __isset.cardType) {
          field.Name = "cardType";
          field.Type = TType.String;
          field.ID = 19;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CardType);
          oprot.WriteFieldEnd();
        }
        if (CardTypeName != null && __isset.cardTypeName) {
          field.Name = "cardTypeName";
          field.Type = TType.String;
          field.ID = 20;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CardTypeName);
          oprot.WriteFieldEnd();
        }
        if (CardId != null && __isset.cardId) {
          field.Name = "cardId";
          field.Type = TType.String;
          field.ID = 21;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CardId);
          oprot.WriteFieldEnd();
        }
        if (Tel != null && __isset.tel) {
          field.Name = "tel";
          field.Type = TType.String;
          field.ID = 22;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Tel);
          oprot.WriteFieldEnd();
        }
        if (Remark != null && __isset.remark) {
          field.Name = "remark";
          field.Type = TType.String;
          field.ID = 23;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Remark);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_TEAM_ORDER(");
      __sb.Append(", ApplyId: ");
      __sb.Append(ApplyId);
      __sb.Append(", ApplyTime: ");
      __sb.Append(ApplyTime);
      __sb.Append(", ApplyUserId: ");
      __sb.Append(ApplyUserId);
      if (OrgId != null && __isset.orgId) {
        __sb.Append(", OrgId: ");
        __sb.Append(OrgId);
      }
      if (OrgName != null && __isset.orgName) {
        __sb.Append(", OrgName: ");
        __sb.Append(OrgName);
      }
      if (__isset.inDt) {
        __sb.Append(", InDt: ");
        __sb.Append(InDt);
      }
      if (ChangeUserId != null && __isset.changeUserId) {
        __sb.Append(", ChangeUserId: ");
        __sb.Append(ChangeUserId);
      }
      if (ChangeUserName != null && __isset.changeUserName) {
        __sb.Append(", ChangeUserName: ");
        __sb.Append(ChangeUserName);
      }
      if (__isset.changeTime) {
        __sb.Append(", ChangeTime: ");
        __sb.Append(ChangeTime);
      }
      if (ExamUserId != null && __isset.examUserId) {
        __sb.Append(", ExamUserId: ");
        __sb.Append(ExamUserId);
      }
      if (ExamUserName != null && __isset.examUserName) {
        __sb.Append(", ExamUserName: ");
        __sb.Append(ExamUserName);
      }
      if (__isset.examTime) {
        __sb.Append(", ExamTime: ");
        __sb.Append(ExamTime);
      }
      if (Stat != null && __isset.stat) {
        __sb.Append(", Stat: ");
        __sb.Append(Stat);
      }
      if (__isset.applyFrozenAdvanceAmt) {
        __sb.Append(", ApplyFrozenAdvanceAmt: ");
        __sb.Append(ApplyFrozenAdvanceAmt);
      }
      if (__isset.examFrozenAdvanceAmt) {
        __sb.Append(", ExamFrozenAdvanceAmt: ");
        __sb.Append(ExamFrozenAdvanceAmt);
      }
      if (ExamType != null && __isset.examType) {
        __sb.Append(", ExamType: ");
        __sb.Append(ExamType);
      }
      if (__isset.minusAdvanceAmt) {
        __sb.Append(", MinusAdvanceAmt: ");
        __sb.Append(MinusAdvanceAmt);
      }
      __sb.Append(", TeamOrderDetail: ");
      __sb.Append(TeamOrderDetail);
      if (CardType != null && __isset.cardType) {
        __sb.Append(", CardType: ");
        __sb.Append(CardType);
      }
      if (CardTypeName != null && __isset.cardTypeName) {
        __sb.Append(", CardTypeName: ");
        __sb.Append(CardTypeName);
      }
      if (CardId != null && __isset.cardId) {
        __sb.Append(", CardId: ");
        __sb.Append(CardId);
      }
      if (Tel != null && __isset.tel) {
        __sb.Append(", Tel: ");
        __sb.Append(Tel);
      }
      if (Remark != null && __isset.remark) {
        __sb.Append(", Remark: ");
        __sb.Append(Remark);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
