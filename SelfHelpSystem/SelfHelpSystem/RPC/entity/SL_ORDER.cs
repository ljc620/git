/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 销售单记录表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_ORDER : TBase
  {
    private string _remark;
    private List<SL_PAY_TYPE> _slPayTypelist;
    private List<SL_ORDER_DETAIL> _slOrderDetaillist;

    /// <summary>
    /// 销售单号
    /// </summary>
    public string OrderId { get; set; }

    /// <summary>
    /// 销售类型(XC-现场售票、ZY-自营售票、TD-团队换票、WL-网络代理换票、ST-实体代理、BP-补票)
    /// </summary>
    public string OrderType { get; set; }

    /// <summary>
    /// 销售张数
    /// </summary>
    public long TicketCount { get; set; }

    /// <summary>
    /// 应收合计
    /// </summary>
    public long DueSum { get; set; }

    /// <summary>
    /// 实收合计
    /// </summary>
    public long RealSum { get; set; }

    /// <summary>
    /// 订单说明
    /// </summary>
    public string Remark
    {
      get
      {
        return _remark;
      }
      set
      {
        __isset.remark = true;
        this._remark = value;
      }
    }

    /// <summary>
    /// 支付状态(1-待支付 2-已支付 3-支付失败)
    /// </summary>
    public string PayStat { get; set; }

    /// <summary>
    /// 售票人
    /// </summary>
    public string SaleUserId { get; set; }

    /// <summary>
    /// 售票时间
    /// </summary>
    public long SaleTime { get; set; }

    /// <summary>
    /// 版本号
    /// </summary>
    public long VersionNo { get; set; }

    /// <summary>
    /// 支付明细
    /// </summary>
    public List<SL_PAY_TYPE> SlPayTypelist
    {
      get
      {
        return _slPayTypelist;
      }
      set
      {
        __isset.slPayTypelist = true;
        this._slPayTypelist = value;
      }
    }

    /// <summary>
    /// 销售明细
    /// </summary>
    public List<SL_ORDER_DETAIL> SlOrderDetaillist
    {
      get
      {
        return _slOrderDetaillist;
      }
      set
      {
        __isset.slOrderDetaillist = true;
        this._slOrderDetaillist = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool remark;
      public bool slPayTypelist;
      public bool slOrderDetaillist;
    }

    public SL_ORDER() {
    }

    public SL_ORDER(string orderId, string orderType, long ticketCount, long dueSum, long realSum, string payStat, string saleUserId, long saleTime, long versionNo) : this() {
      this.OrderId = orderId;
      this.OrderType = orderType;
      this.TicketCount = ticketCount;
      this.DueSum = dueSum;
      this.RealSum = realSum;
      this.PayStat = payStat;
      this.SaleUserId = saleUserId;
      this.SaleTime = saleTime;
      this.VersionNo = versionNo;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_orderId = false;
        bool isset_orderType = false;
        bool isset_ticketCount = false;
        bool isset_dueSum = false;
        bool isset_realSum = false;
        bool isset_payStat = false;
        bool isset_saleUserId = false;
        bool isset_saleTime = false;
        bool isset_versionNo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
                isset_orderId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderType = iprot.ReadString();
                isset_orderType = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TicketCount = iprot.ReadI64();
                isset_ticketCount = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                DueSum = iprot.ReadI64();
                isset_dueSum = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                RealSum = iprot.ReadI64();
                isset_realSum = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                Remark = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                PayStat = iprot.ReadString();
                isset_payStat = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                SaleUserId = iprot.ReadString();
                isset_saleUserId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                SaleTime = iprot.ReadI64();
                isset_saleTime = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                VersionNo = iprot.ReadI64();
                isset_versionNo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.List) {
                {
                  SlPayTypelist = new List<SL_PAY_TYPE>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    SL_PAY_TYPE _elem14;
                    _elem14 = new SL_PAY_TYPE();
                    _elem14.Read(iprot);
                    SlPayTypelist.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.List) {
                {
                  SlOrderDetaillist = new List<SL_ORDER_DETAIL>();
                  TList _list15 = iprot.ReadListBegin();
                  for( int _i16 = 0; _i16 < _list15.Count; ++_i16)
                  {
                    SL_ORDER_DETAIL _elem17;
                    _elem17 = new SL_ORDER_DETAIL();
                    _elem17.Read(iprot);
                    SlOrderDetaillist.Add(_elem17);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_orderId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_orderType)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketCount)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_dueSum)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_realSum)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_payStat)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_saleUserId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_saleTime)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_versionNo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_ORDER");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
        field.Name = "orderType";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderType);
        oprot.WriteFieldEnd();
        field.Name = "ticketCount";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TicketCount);
        oprot.WriteFieldEnd();
        field.Name = "dueSum";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(DueSum);
        oprot.WriteFieldEnd();
        field.Name = "realSum";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(RealSum);
        oprot.WriteFieldEnd();
        if (Remark != null && __isset.remark) {
          field.Name = "remark";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Remark);
          oprot.WriteFieldEnd();
        }
        field.Name = "payStat";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PayStat);
        oprot.WriteFieldEnd();
        field.Name = "saleUserId";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SaleUserId);
        oprot.WriteFieldEnd();
        field.Name = "saleTime";
        field.Type = TType.I64;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SaleTime);
        oprot.WriteFieldEnd();
        field.Name = "versionNo";
        field.Type = TType.I64;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(VersionNo);
        oprot.WriteFieldEnd();
        if (SlPayTypelist != null && __isset.slPayTypelist) {
          field.Name = "slPayTypelist";
          field.Type = TType.List;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SlPayTypelist.Count));
            foreach (SL_PAY_TYPE _iter18 in SlPayTypelist)
            {
              _iter18.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        if (SlOrderDetaillist != null && __isset.slOrderDetaillist) {
          field.Name = "slOrderDetaillist";
          field.Type = TType.List;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.Struct, SlOrderDetaillist.Count));
            foreach (SL_ORDER_DETAIL _iter19 in SlOrderDetaillist)
            {
              _iter19.Write(oprot);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_ORDER(");
      __sb.Append(", OrderId: ");
      __sb.Append(OrderId);
      __sb.Append(", OrderType: ");
      __sb.Append(OrderType);
      __sb.Append(", TicketCount: ");
      __sb.Append(TicketCount);
      __sb.Append(", DueSum: ");
      __sb.Append(DueSum);
      __sb.Append(", RealSum: ");
      __sb.Append(RealSum);
      if (Remark != null && __isset.remark) {
        __sb.Append(", Remark: ");
        __sb.Append(Remark);
      }
      __sb.Append(", PayStat: ");
      __sb.Append(PayStat);
      __sb.Append(", SaleUserId: ");
      __sb.Append(SaleUserId);
      __sb.Append(", SaleTime: ");
      __sb.Append(SaleTime);
      __sb.Append(", VersionNo: ");
      __sb.Append(VersionNo);
      if (SlPayTypelist != null && __isset.slPayTypelist) {
        __sb.Append(", SlPayTypelist: ");
        __sb.Append(SlPayTypelist);
      }
      if (SlOrderDetaillist != null && __isset.slOrderDetaillist) {
        __sb.Append(", SlOrderDetaillist: ");
        __sb.Append(SlOrderDetaillist);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
