/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 销售明细表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_ORDER_DETAIL : TBase
  {
    private string _ticketClass;
    private string _ticketUid;
    private string _identtyId;
    private long _originalPrice;
    private long _salePrice;
    private string _checkFlag;
    private string _uselessFlag;
    private long _outletId;
    private long _clientId;
    private string _ejectUserId;
    private string _ejectTicketStat;
    private long _ejectTicketTime;
    private long _versionNo;

    /// <summary>
    /// 销售明细表ID
    /// </summary>
    public string OrderDetailId { get; set; }

    /// <summary>
    /// 销售单号
    /// </summary>
    public string OrderId { get; set; }

    /// <summary>
    /// 门票类型(1-FRID、2-身份证、3-二维码)
    /// </summary>
    public string TicketClass
    {
      get
      {
        return _ticketClass;
      }
      set
      {
        __isset.ticketClass = true;
        this._ticketClass = value;
      }
    }

    /// <summary>
    /// 票号
    /// </summary>
    public long TicketId { get; set; }

    /// <summary>
    /// 票据唯一号
    /// </summary>
    public string TicketUid
    {
      get
      {
        return _ticketUid;
      }
      set
      {
        __isset.ticketUid = true;
        this._ticketUid = value;
      }
    }

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId { get; set; }

    /// <summary>
    /// 可用次数
    /// </summary>
    public long ValidateTimes { get; set; }

    /// <summary>
    /// 身份证号码
    /// </summary>
    public string IdenttyId
    {
      get
      {
        return _identtyId;
      }
      set
      {
        __isset.identtyId = true;
        this._identtyId = value;
      }
    }

    /// <summary>
    /// 原单价
    /// </summary>
    public long OriginalPrice
    {
      get
      {
        return _originalPrice;
      }
      set
      {
        __isset.originalPrice = true;
        this._originalPrice = value;
      }
    }

    /// <summary>
    /// 销售价
    /// </summary>
    public long SalePrice
    {
      get
      {
        return _salePrice;
      }
      set
      {
        __isset.salePrice = true;
        this._salePrice = value;
      }
    }

    /// <summary>
    /// 是否检票(Y是N否)
    /// </summary>
    public string CheckFlag
    {
      get
      {
        return _checkFlag;
      }
      set
      {
        __isset.checkFlag = true;
        this._checkFlag = value;
      }
    }

    /// <summary>
    /// 是否作废(Y是N否)
    /// </summary>
    public string UselessFlag
    {
      get
      {
        return _uselessFlag;
      }
      set
      {
        __isset.uselessFlag = true;
        this._uselessFlag = value;
      }
    }

    /// <summary>
    /// 出票网点编号
    /// </summary>
    public long OutletId
    {
      get
      {
        return _outletId;
      }
      set
      {
        __isset.outletId = true;
        this._outletId = value;
      }
    }

    /// <summary>
    /// 出票终端编号
    /// </summary>
    public long ClientId
    {
      get
      {
        return _clientId;
      }
      set
      {
        __isset.clientId = true;
        this._clientId = value;
      }
    }

    /// <summary>
    /// 出票人
    /// </summary>
    public string EjectUserId
    {
      get
      {
        return _ejectUserId;
      }
      set
      {
        __isset.ejectUserId = true;
        this._ejectUserId = value;
      }
    }

    /// <summary>
    /// 出票状态(1-待出票 2-已出票)
    /// </summary>
    public string EjectTicketStat
    {
      get
      {
        return _ejectTicketStat;
      }
      set
      {
        __isset.ejectTicketStat = true;
        this._ejectTicketStat = value;
      }
    }

    /// <summary>
    /// 出票时间
    /// </summary>
    public long EjectTicketTime
    {
      get
      {
        return _ejectTicketTime;
      }
      set
      {
        __isset.ejectTicketTime = true;
        this._ejectTicketTime = value;
      }
    }

    /// <summary>
    /// 版本号
    /// </summary>
    public long VersionNo
    {
      get
      {
        return _versionNo;
      }
      set
      {
        __isset.versionNo = true;
        this._versionNo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketClass;
      public bool ticketUid;
      public bool identtyId;
      public bool originalPrice;
      public bool salePrice;
      public bool checkFlag;
      public bool uselessFlag;
      public bool outletId;
      public bool clientId;
      public bool ejectUserId;
      public bool ejectTicketStat;
      public bool ejectTicketTime;
      public bool versionNo;
    }

    public SL_ORDER_DETAIL() {
    }

    public SL_ORDER_DETAIL(string orderDetailId, string orderId, long ticketId, string ticketTypeId, long validateTimes) : this() {
      this.OrderDetailId = orderDetailId;
      this.OrderId = orderId;
      this.TicketId = ticketId;
      this.TicketTypeId = ticketTypeId;
      this.ValidateTimes = validateTimes;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_orderDetailId = false;
        bool isset_orderId = false;
        bool isset_ticketId = false;
        bool isset_ticketTypeId = false;
        bool isset_validateTimes = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OrderDetailId = iprot.ReadString();
                isset_orderDetailId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
                isset_orderId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TicketClass = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                TicketId = iprot.ReadI64();
                isset_ticketId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                TicketUid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
                isset_ticketTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                ValidateTimes = iprot.ReadI64();
                isset_validateTimes = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                IdenttyId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                OriginalPrice = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                SalePrice = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                CheckFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                UselessFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.I64) {
                OutletId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I64) {
                ClientId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.String) {
                EjectUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.String) {
                EjectTicketStat = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.I64) {
                EjectTicketTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 18:
              if (field.Type == TType.I64) {
                VersionNo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_orderDetailId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_orderId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_validateTimes)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_ORDER_DETAIL");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "orderDetailId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderDetailId);
        oprot.WriteFieldEnd();
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
        if (TicketClass != null && __isset.ticketClass) {
          field.Name = "ticketClass";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketClass);
          oprot.WriteFieldEnd();
        }
        field.Name = "ticketId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TicketId);
        oprot.WriteFieldEnd();
        if (TicketUid != null && __isset.ticketUid) {
          field.Name = "ticketUid";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketUid);
          oprot.WriteFieldEnd();
        }
        field.Name = "ticketTypeId";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeId);
        oprot.WriteFieldEnd();
        field.Name = "validateTimes";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ValidateTimes);
        oprot.WriteFieldEnd();
        if (IdenttyId != null && __isset.identtyId) {
          field.Name = "identtyId";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IdenttyId);
          oprot.WriteFieldEnd();
        }
        if (__isset.originalPrice) {
          field.Name = "originalPrice";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OriginalPrice);
          oprot.WriteFieldEnd();
        }
        if (__isset.salePrice) {
          field.Name = "salePrice";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(SalePrice);
          oprot.WriteFieldEnd();
        }
        if (CheckFlag != null && __isset.checkFlag) {
          field.Name = "checkFlag";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CheckFlag);
          oprot.WriteFieldEnd();
        }
        if (UselessFlag != null && __isset.uselessFlag) {
          field.Name = "uselessFlag";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UselessFlag);
          oprot.WriteFieldEnd();
        }
        if (__isset.outletId) {
          field.Name = "outletId";
          field.Type = TType.I64;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OutletId);
          oprot.WriteFieldEnd();
        }
        if (__isset.clientId) {
          field.Name = "clientId";
          field.Type = TType.I64;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ClientId);
          oprot.WriteFieldEnd();
        }
        if (EjectUserId != null && __isset.ejectUserId) {
          field.Name = "ejectUserId";
          field.Type = TType.String;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EjectUserId);
          oprot.WriteFieldEnd();
        }
        if (EjectTicketStat != null && __isset.ejectTicketStat) {
          field.Name = "ejectTicketStat";
          field.Type = TType.String;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(EjectTicketStat);
          oprot.WriteFieldEnd();
        }
        if (__isset.ejectTicketTime) {
          field.Name = "ejectTicketTime";
          field.Type = TType.I64;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(EjectTicketTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.versionNo) {
          field.Name = "versionNo";
          field.Type = TType.I64;
          field.ID = 18;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(VersionNo);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_ORDER_DETAIL(");
      __sb.Append(", OrderDetailId: ");
      __sb.Append(OrderDetailId);
      __sb.Append(", OrderId: ");
      __sb.Append(OrderId);
      if (TicketClass != null && __isset.ticketClass) {
        __sb.Append(", TicketClass: ");
        __sb.Append(TicketClass);
      }
      __sb.Append(", TicketId: ");
      __sb.Append(TicketId);
      if (TicketUid != null && __isset.ticketUid) {
        __sb.Append(", TicketUid: ");
        __sb.Append(TicketUid);
      }
      __sb.Append(", TicketTypeId: ");
      __sb.Append(TicketTypeId);
      __sb.Append(", ValidateTimes: ");
      __sb.Append(ValidateTimes);
      if (IdenttyId != null && __isset.identtyId) {
        __sb.Append(", IdenttyId: ");
        __sb.Append(IdenttyId);
      }
      if (__isset.originalPrice) {
        __sb.Append(", OriginalPrice: ");
        __sb.Append(OriginalPrice);
      }
      if (__isset.salePrice) {
        __sb.Append(", SalePrice: ");
        __sb.Append(SalePrice);
      }
      if (CheckFlag != null && __isset.checkFlag) {
        __sb.Append(", CheckFlag: ");
        __sb.Append(CheckFlag);
      }
      if (UselessFlag != null && __isset.uselessFlag) {
        __sb.Append(", UselessFlag: ");
        __sb.Append(UselessFlag);
      }
      if (__isset.outletId) {
        __sb.Append(", OutletId: ");
        __sb.Append(OutletId);
      }
      if (__isset.clientId) {
        __sb.Append(", ClientId: ");
        __sb.Append(ClientId);
      }
      if (EjectUserId != null && __isset.ejectUserId) {
        __sb.Append(", EjectUserId: ");
        __sb.Append(EjectUserId);
      }
      if (EjectTicketStat != null && __isset.ejectTicketStat) {
        __sb.Append(", EjectTicketStat: ");
        __sb.Append(EjectTicketStat);
      }
      if (__isset.ejectTicketTime) {
        __sb.Append(", EjectTicketTime: ");
        __sb.Append(EjectTicketTime);
      }
      if (__isset.versionNo) {
        __sb.Append(", VersionNo: ");
        __sb.Append(VersionNo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
