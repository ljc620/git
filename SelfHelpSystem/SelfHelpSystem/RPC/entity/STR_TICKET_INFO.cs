/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 门票库存表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class STR_TICKET_INFO : TBase
  {
    private string _ticketUid;
    private string _chipId;
    private long _chestId;
    private long _boxId;
    private string _batchId;
    private string _saleTime;
    private string _outletId;
    private string _outletName;
    private string _backlistFlag;

    /// <summary>
    /// 票号
    /// </summary>
    public long TicketId { get; set; }

    /// <summary>
    /// 票据唯一号
    /// </summary>
    public string TicketUid
    {
      get
      {
        return _ticketUid;
      }
      set
      {
        __isset.ticketUid = true;
        this._ticketUid = value;
      }
    }

    /// <summary>
    /// 芯片ID
    /// </summary>
    public string ChipId
    {
      get
      {
        return _chipId;
      }
      set
      {
        __isset.chipId = true;
        this._chipId = value;
      }
    }

    /// <summary>
    /// 箱号
    /// </summary>
    public long ChestId
    {
      get
      {
        return _chestId;
      }
      set
      {
        __isset.chestId = true;
        this._chestId = value;
      }
    }

    /// <summary>
    /// 盒号
    /// </summary>
    public long BoxId
    {
      get
      {
        return _boxId;
      }
      set
      {
        __isset.boxId = true;
        this._boxId = value;
      }
    }

    /// <summary>
    /// 批次号
    /// </summary>
    public string BatchId
    {
      get
      {
        return _batchId;
      }
      set
      {
        __isset.batchId = true;
        this._batchId = value;
      }
    }

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId { get; set; }

    /// <summary>
    /// 状态状态(000-未核实 001-已核实 003-已销售,004-已作废)
    /// </summary>
    public string Stat { get; set; }

    /// <summary>
    /// 出票时间
    /// </summary>
    public string SaleTime
    {
      get
      {
        return _saleTime;
      }
      set
      {
        __isset.saleTime = true;
        this._saleTime = value;
      }
    }

    /// <summary>
    /// 出票网点编号
    /// </summary>
    public string OutletId
    {
      get
      {
        return _outletId;
      }
      set
      {
        __isset.outletId = true;
        this._outletId = value;
      }
    }

    /// <summary>
    /// 出票网点名称
    /// </summary>
    public string OutletName
    {
      get
      {
        return _outletName;
      }
      set
      {
        __isset.outletName = true;
        this._outletName = value;
      }
    }

    /// <summary>
    /// 是否在黑名单
    /// </summary>
    public string BacklistFlag
    {
      get
      {
        return _backlistFlag;
      }
      set
      {
        __isset.backlistFlag = true;
        this._backlistFlag = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketUid;
      public bool chipId;
      public bool chestId;
      public bool boxId;
      public bool batchId;
      public bool saleTime;
      public bool outletId;
      public bool outletName;
      public bool backlistFlag;
    }

    public STR_TICKET_INFO() {
    }

    public STR_TICKET_INFO(long ticketId, string ticketTypeId, string stat) : this() {
      this.TicketId = ticketId;
      this.TicketTypeId = ticketTypeId;
      this.Stat = stat;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_ticketId = false;
        bool isset_ticketTypeId = false;
        bool isset_stat = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                TicketId = iprot.ReadI64();
                isset_ticketId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TicketUid = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ChipId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                ChestId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                BoxId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                BatchId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
                isset_ticketTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Stat = iprot.ReadString();
                isset_stat = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                SaleTime = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                OutletId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                OutletName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.String) {
                BacklistFlag = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_ticketId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_stat)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("STR_TICKET_INFO");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "ticketId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TicketId);
        oprot.WriteFieldEnd();
        if (TicketUid != null && __isset.ticketUid) {
          field.Name = "ticketUid";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketUid);
          oprot.WriteFieldEnd();
        }
        if (ChipId != null && __isset.chipId) {
          field.Name = "chipId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ChipId);
          oprot.WriteFieldEnd();
        }
        if (__isset.chestId) {
          field.Name = "chestId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ChestId);
          oprot.WriteFieldEnd();
        }
        if (__isset.boxId) {
          field.Name = "boxId";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(BoxId);
          oprot.WriteFieldEnd();
        }
        if (BatchId != null && __isset.batchId) {
          field.Name = "batchId";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BatchId);
          oprot.WriteFieldEnd();
        }
        field.Name = "ticketTypeId";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeId);
        oprot.WriteFieldEnd();
        field.Name = "stat";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Stat);
        oprot.WriteFieldEnd();
        if (SaleTime != null && __isset.saleTime) {
          field.Name = "saleTime";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(SaleTime);
          oprot.WriteFieldEnd();
        }
        if (OutletId != null && __isset.outletId) {
          field.Name = "outletId";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutletId);
          oprot.WriteFieldEnd();
        }
        if (OutletName != null && __isset.outletName) {
          field.Name = "outletName";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutletName);
          oprot.WriteFieldEnd();
        }
        if (BacklistFlag != null && __isset.backlistFlag) {
          field.Name = "backlistFlag";
          field.Type = TType.String;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BacklistFlag);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("STR_TICKET_INFO(");
      __sb.Append(", TicketId: ");
      __sb.Append(TicketId);
      if (TicketUid != null && __isset.ticketUid) {
        __sb.Append(", TicketUid: ");
        __sb.Append(TicketUid);
      }
      if (ChipId != null && __isset.chipId) {
        __sb.Append(", ChipId: ");
        __sb.Append(ChipId);
      }
      if (__isset.chestId) {
        __sb.Append(", ChestId: ");
        __sb.Append(ChestId);
      }
      if (__isset.boxId) {
        __sb.Append(", BoxId: ");
        __sb.Append(BoxId);
      }
      if (BatchId != null && __isset.batchId) {
        __sb.Append(", BatchId: ");
        __sb.Append(BatchId);
      }
      __sb.Append(", TicketTypeId: ");
      __sb.Append(TicketTypeId);
      __sb.Append(", Stat: ");
      __sb.Append(Stat);
      if (SaleTime != null && __isset.saleTime) {
        __sb.Append(", SaleTime: ");
        __sb.Append(SaleTime);
      }
      if (OutletId != null && __isset.outletId) {
        __sb.Append(", OutletId: ");
        __sb.Append(OutletId);
      }
      if (OutletName != null && __isset.outletName) {
        __sb.Append(", OutletName: ");
        __sb.Append(OutletName);
      }
      if (BacklistFlag != null && __isset.backlistFlag) {
        __sb.Append(", BacklistFlag: ");
        __sb.Append(BacklistFlag);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
