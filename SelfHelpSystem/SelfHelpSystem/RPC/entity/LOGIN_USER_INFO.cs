/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 当前登录用户信息
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class LOGIN_USER_INFO : TBase
  {
    private string _outletType;
    private string _department;
    private string _outletName;
    private string _positionName;

    /// <summary>
    /// 用户编号
    /// </summary>
    public string UserId { get; set; }

    /// <summary>
    /// 用户名称
    /// </summary>
    public string UserName { get; set; }

    /// <summary>
    /// 用户状态(N停用Y启用)
    /// </summary>
    public string UserStat { get; set; }

    /// <summary>
    /// 所属网点
    /// </summary>
    public long OutletId { get; set; }

    /// <summary>
    /// 网点类型(01-现场网点（包括网络代理）、02-自营网点、03-团队换票、04-票务处理、05-实体代理、06-签约社)
    /// </summary>
    public string OutletType
    {
      get
      {
        return _outletType;
      }
      set
      {
        __isset.outletType = true;
        this._outletType = value;
      }
    }

    /// <summary>
    /// 岗位
    /// </summary>
    public string PositionCode { get; set; }

    /// <summary>
    /// 所属部门
    /// </summary>
    public string Department
    {
      get
      {
        return _department;
      }
      set
      {
        __isset.department = true;
        this._department = value;
      }
    }

    /// <summary>
    /// 授权码
    /// </summary>
    public string Token { get; set; }

    /// <summary>
    /// 权限集,以逗分隔
    /// </summary>
    public string Menus { get; set; }

    /// <summary>
    /// 所属网点名称
    /// </summary>
    public string OutletName
    {
      get
      {
        return _outletName;
      }
      set
      {
        __isset.outletName = true;
        this._outletName = value;
      }
    }

    /// <summary>
    /// 所属岗位名称
    /// </summary>
    public string PositionName
    {
      get
      {
        return _positionName;
      }
      set
      {
        __isset.positionName = true;
        this._positionName = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool outletType;
      public bool department;
      public bool outletName;
      public bool positionName;
    }

    public LOGIN_USER_INFO() {
    }

    public LOGIN_USER_INFO(string userId, string userName, string userStat, long outletId, string positionCode, string token, string menus) : this() {
      this.UserId = userId;
      this.UserName = userName;
      this.UserStat = userStat;
      this.OutletId = outletId;
      this.PositionCode = positionCode;
      this.Token = token;
      this.Menus = menus;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_userId = false;
        bool isset_userName = false;
        bool isset_userStat = false;
        bool isset_outletId = false;
        bool isset_positionCode = false;
        bool isset_token = false;
        bool isset_menus = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
                isset_userId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserName = iprot.ReadString();
                isset_userName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                UserStat = iprot.ReadString();
                isset_userStat = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                OutletId = iprot.ReadI64();
                isset_outletId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                OutletType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                PositionCode = iprot.ReadString();
                isset_positionCode = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Department = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                Token = iprot.ReadString();
                isset_token = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Menus = iprot.ReadString();
                isset_menus = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                OutletName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                PositionName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_userId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_userName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_userStat)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_outletId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_positionCode)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_token)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_menus)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("LOGIN_USER_INFO");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
        field.Name = "userName";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserName);
        oprot.WriteFieldEnd();
        field.Name = "userStat";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserStat);
        oprot.WriteFieldEnd();
        field.Name = "outletId";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OutletId);
        oprot.WriteFieldEnd();
        if (OutletType != null && __isset.outletType) {
          field.Name = "outletType";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutletType);
          oprot.WriteFieldEnd();
        }
        field.Name = "positionCode";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PositionCode);
        oprot.WriteFieldEnd();
        if (Department != null && __isset.department) {
          field.Name = "department";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Department);
          oprot.WriteFieldEnd();
        }
        field.Name = "token";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Token);
        oprot.WriteFieldEnd();
        field.Name = "menus";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Menus);
        oprot.WriteFieldEnd();
        if (OutletName != null && __isset.outletName) {
          field.Name = "outletName";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutletName);
          oprot.WriteFieldEnd();
        }
        if (PositionName != null && __isset.positionName) {
          field.Name = "positionName";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PositionName);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("LOGIN_USER_INFO(");
      __sb.Append(", UserId: ");
      __sb.Append(UserId);
      __sb.Append(", UserName: ");
      __sb.Append(UserName);
      __sb.Append(", UserStat: ");
      __sb.Append(UserStat);
      __sb.Append(", OutletId: ");
      __sb.Append(OutletId);
      if (OutletType != null && __isset.outletType) {
        __sb.Append(", OutletType: ");
        __sb.Append(OutletType);
      }
      __sb.Append(", PositionCode: ");
      __sb.Append(PositionCode);
      if (Department != null && __isset.department) {
        __sb.Append(", Department: ");
        __sb.Append(Department);
      }
      __sb.Append(", Token: ");
      __sb.Append(Token);
      __sb.Append(", Menus: ");
      __sb.Append(Menus);
      if (OutletName != null && __isset.outletName) {
        __sb.Append(", OutletName: ");
        __sb.Append(OutletName);
      }
      if (PositionName != null && __isset.positionName) {
        __sb.Append(", PositionName: ");
        __sb.Append(PositionName);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
