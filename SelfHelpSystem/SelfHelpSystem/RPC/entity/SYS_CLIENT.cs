/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 终端表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SYS_CLIENT : TBase
  {
    private string _clientName;
    private string _clientType;
    private long _regionId;
    private string _regionName;
    private long _outletId;
    private string _outletName;
    private string _ipAddr;
    private string _port;
    private string _stat;
    private string _opeUserId;
    private long _opeTime;
    private string _token;
    private int _runStat;
    private int _gateMode;
    private long _reportTime;
    private string _ticketNum;

    /// <summary>
    /// 终端编号
    /// </summary>
    public long ClientId { get; set; }

    /// <summary>
    /// 终端名称
    /// </summary>
    public string ClientName
    {
      get
      {
        return _clientName;
      }
      set
      {
        __isset.clientName = true;
        this._clientName = value;
      }
    }

    /// <summary>
    /// 终端类型
    /// </summary>
    public string ClientType
    {
      get
      {
        return _clientType;
      }
      set
      {
        __isset.clientType = true;
        this._clientType = value;
      }
    }

    /// <summary>
    /// 区域编号
    /// </summary>
    public long RegionId
    {
      get
      {
        return _regionId;
      }
      set
      {
        __isset.regionId = true;
        this._regionId = value;
      }
    }

    /// <summary>
    /// 区域名称
    /// </summary>
    public string RegionName
    {
      get
      {
        return _regionName;
      }
      set
      {
        __isset.regionName = true;
        this._regionName = value;
      }
    }

    /// <summary>
    /// 网点编号
    /// </summary>
    public long OutletId
    {
      get
      {
        return _outletId;
      }
      set
      {
        __isset.outletId = true;
        this._outletId = value;
      }
    }

    /// <summary>
    /// 网点名称
    /// </summary>
    public string OutletName
    {
      get
      {
        return _outletName;
      }
      set
      {
        __isset.outletName = true;
        this._outletName = value;
      }
    }

    /// <summary>
    /// IP地址
    /// </summary>
    public string IpAddr
    {
      get
      {
        return _ipAddr;
      }
      set
      {
        __isset.ipAddr = true;
        this._ipAddr = value;
      }
    }

    /// <summary>
    /// 端口
    /// </summary>
    public string Port
    {
      get
      {
        return _port;
      }
      set
      {
        __isset.port = true;
        this._port = value;
      }
    }

    /// <summary>
    /// 状态(Y启用N停用)
    /// </summary>
    public string Stat
    {
      get
      {
        return _stat;
      }
      set
      {
        __isset.stat = true;
        this._stat = value;
      }
    }

    /// <summary>
    /// 操作人
    /// </summary>
    public string OpeUserId
    {
      get
      {
        return _opeUserId;
      }
      set
      {
        __isset.opeUserId = true;
        this._opeUserId = value;
      }
    }

    /// <summary>
    /// 操作时间
    /// </summary>
    public long OpeTime
    {
      get
      {
        return _opeTime;
      }
      set
      {
        __isset.opeTime = true;
        this._opeTime = value;
      }
    }

    /// <summary>
    /// 授权码
    /// </summary>
    public string Token
    {
      get
      {
        return _token;
      }
      set
      {
        __isset.token = true;
        this._token = value;
      }
    }

    /// <summary>
    /// 运行状态(1-正常,2-停用,3-压印设备故障,4-闸机异常,5-员工卡读卡器异常,6-票据读卡器异常,7-IO输出异常8-网络异常)
    /// </summary>
    public int RunStat
    {
      get
      {
        return _runStat;
      }
      set
      {
        __isset.runStat = true;
        this._runStat = value;
      }
    }

    /// <summary>
    /// 运行模式0-正常模式,1-紧急模式,2-落杆模式,3-关闭模式,4-A向关闭,B向不控制,5-A向不控制,B向关闭
    /// </summary>
    public int GateMode
    {
      get
      {
        return _gateMode;
      }
      set
      {
        __isset.gateMode = true;
        this._gateMode = value;
      }
    }

    /// <summary>
    /// 报告时间
    /// </summary>
    public long ReportTime
    {
      get
      {
        return _reportTime;
      }
      set
      {
        __isset.reportTime = true;
        this._reportTime = value;
      }
    }

    /// <summary>
    /// 余票数量(自助售票机用) A:数量,B:数量
    /// </summary>
    public string TicketNum
    {
      get
      {
        return _ticketNum;
      }
      set
      {
        __isset.ticketNum = true;
        this._ticketNum = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool clientName;
      public bool clientType;
      public bool regionId;
      public bool regionName;
      public bool outletId;
      public bool outletName;
      public bool ipAddr;
      public bool port;
      public bool stat;
      public bool opeUserId;
      public bool opeTime;
      public bool token;
      public bool runStat;
      public bool gateMode;
      public bool reportTime;
      public bool ticketNum;
    }

    public SYS_CLIENT() {
    }

    public SYS_CLIENT(long clientId) : this() {
      this.ClientId = clientId;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_clientId = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                ClientId = iprot.ReadI64();
                isset_clientId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ClientName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ClientType = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                RegionId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                RegionName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                OutletId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                OutletName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                IpAddr = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                Port = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.String) {
                Stat = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 11:
              if (field.Type == TType.String) {
                OpeUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 12:
              if (field.Type == TType.I64) {
                OpeTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 13:
              if (field.Type == TType.String) {
                Token = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 14:
              if (field.Type == TType.I32) {
                RunStat = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 15:
              if (field.Type == TType.I32) {
                GateMode = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 16:
              if (field.Type == TType.I64) {
                ReportTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 17:
              if (field.Type == TType.String) {
                TicketNum = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_clientId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SYS_CLIENT");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "clientId";
        field.Type = TType.I64;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ClientId);
        oprot.WriteFieldEnd();
        if (ClientName != null && __isset.clientName) {
          field.Name = "clientName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientName);
          oprot.WriteFieldEnd();
        }
        if (ClientType != null && __isset.clientType) {
          field.Name = "clientType";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClientType);
          oprot.WriteFieldEnd();
        }
        if (__isset.regionId) {
          field.Name = "regionId";
          field.Type = TType.I64;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(RegionId);
          oprot.WriteFieldEnd();
        }
        if (RegionName != null && __isset.regionName) {
          field.Name = "regionName";
          field.Type = TType.String;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RegionName);
          oprot.WriteFieldEnd();
        }
        if (__isset.outletId) {
          field.Name = "outletId";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OutletId);
          oprot.WriteFieldEnd();
        }
        if (OutletName != null && __isset.outletName) {
          field.Name = "outletName";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutletName);
          oprot.WriteFieldEnd();
        }
        if (IpAddr != null && __isset.ipAddr) {
          field.Name = "ipAddr";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(IpAddr);
          oprot.WriteFieldEnd();
        }
        if (Port != null && __isset.port) {
          field.Name = "port";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Port);
          oprot.WriteFieldEnd();
        }
        if (Stat != null && __isset.stat) {
          field.Name = "stat";
          field.Type = TType.String;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Stat);
          oprot.WriteFieldEnd();
        }
        if (OpeUserId != null && __isset.opeUserId) {
          field.Name = "opeUserId";
          field.Type = TType.String;
          field.ID = 11;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OpeUserId);
          oprot.WriteFieldEnd();
        }
        if (__isset.opeTime) {
          field.Name = "opeTime";
          field.Type = TType.I64;
          field.ID = 12;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OpeTime);
          oprot.WriteFieldEnd();
        }
        if (Token != null && __isset.token) {
          field.Name = "token";
          field.Type = TType.String;
          field.ID = 13;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Token);
          oprot.WriteFieldEnd();
        }
        if (__isset.runStat) {
          field.Name = "runStat";
          field.Type = TType.I32;
          field.ID = 14;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(RunStat);
          oprot.WriteFieldEnd();
        }
        if (__isset.gateMode) {
          field.Name = "gateMode";
          field.Type = TType.I32;
          field.ID = 15;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(GateMode);
          oprot.WriteFieldEnd();
        }
        if (__isset.reportTime) {
          field.Name = "reportTime";
          field.Type = TType.I64;
          field.ID = 16;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ReportTime);
          oprot.WriteFieldEnd();
        }
        if (TicketNum != null && __isset.ticketNum) {
          field.Name = "ticketNum";
          field.Type = TType.String;
          field.ID = 17;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketNum);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SYS_CLIENT(");
      __sb.Append(", ClientId: ");
      __sb.Append(ClientId);
      if (ClientName != null && __isset.clientName) {
        __sb.Append(", ClientName: ");
        __sb.Append(ClientName);
      }
      if (ClientType != null && __isset.clientType) {
        __sb.Append(", ClientType: ");
        __sb.Append(ClientType);
      }
      if (__isset.regionId) {
        __sb.Append(", RegionId: ");
        __sb.Append(RegionId);
      }
      if (RegionName != null && __isset.regionName) {
        __sb.Append(", RegionName: ");
        __sb.Append(RegionName);
      }
      if (__isset.outletId) {
        __sb.Append(", OutletId: ");
        __sb.Append(OutletId);
      }
      if (OutletName != null && __isset.outletName) {
        __sb.Append(", OutletName: ");
        __sb.Append(OutletName);
      }
      if (IpAddr != null && __isset.ipAddr) {
        __sb.Append(", IpAddr: ");
        __sb.Append(IpAddr);
      }
      if (Port != null && __isset.port) {
        __sb.Append(", Port: ");
        __sb.Append(Port);
      }
      if (Stat != null && __isset.stat) {
        __sb.Append(", Stat: ");
        __sb.Append(Stat);
      }
      if (OpeUserId != null && __isset.opeUserId) {
        __sb.Append(", OpeUserId: ");
        __sb.Append(OpeUserId);
      }
      if (__isset.opeTime) {
        __sb.Append(", OpeTime: ");
        __sb.Append(OpeTime);
      }
      if (Token != null && __isset.token) {
        __sb.Append(", Token: ");
        __sb.Append(Token);
      }
      if (__isset.runStat) {
        __sb.Append(", RunStat: ");
        __sb.Append(RunStat);
      }
      if (__isset.gateMode) {
        __sb.Append(", GateMode: ");
        __sb.Append(GateMode);
      }
      if (__isset.reportTime) {
        __sb.Append(", ReportTime: ");
        __sb.Append(ReportTime);
      }
      if (TicketNum != null && __isset.ticketNum) {
        __sb.Append(", TicketNum: ");
        __sb.Append(TicketNum);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
