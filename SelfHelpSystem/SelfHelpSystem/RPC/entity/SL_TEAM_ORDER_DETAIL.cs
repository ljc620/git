/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 团队票预订明细表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_TEAM_ORDER_DETAIL : TBase
  {
    private long _examNum;
    private long _changeNum;
    private long _minusLimit;
    private long _applyFrozenLimit;

    /// <summary>
    /// 团队票预订明细ID
    /// </summary>
    public string DetailId { get; set; }

    /// <summary>
    /// 申请编号
    /// </summary>
    public string ApplyId { get; set; }

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId { get; set; }

    /// <summary>
    /// 票种名称
    /// </summary>
    public string TicketTypeName { get; set; }

    /// <summary>
    /// 申请数量
    /// </summary>
    public long ApplyNum { get; set; }

    /// <summary>
    /// 审核数量
    /// </summary>
    public long ExamNum
    {
      get
      {
        return _examNum;
      }
      set
      {
        __isset.examNum = true;
        this._examNum = value;
      }
    }

    /// <summary>
    /// 出票数量
    /// </summary>
    public long ChangeNum
    {
      get
      {
        return _changeNum;
      }
      set
      {
        __isset.changeNum = true;
        this._changeNum = value;
      }
    }

    /// <summary>
    /// 扣减额度
    /// </summary>
    public long MinusLimit
    {
      get
      {
        return _minusLimit;
      }
      set
      {
        __isset.minusLimit = true;
        this._minusLimit = value;
      }
    }

    /// <summary>
    /// 冻结额度
    /// </summary>
    public long ApplyFrozenLimit
    {
      get
      {
        return _applyFrozenLimit;
      }
      set
      {
        __isset.applyFrozenLimit = true;
        this._applyFrozenLimit = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool examNum;
      public bool changeNum;
      public bool minusLimit;
      public bool applyFrozenLimit;
    }

    public SL_TEAM_ORDER_DETAIL() {
    }

    public SL_TEAM_ORDER_DETAIL(string detailId, string applyId, string ticketTypeId, string ticketTypeName, long applyNum) : this() {
      this.DetailId = detailId;
      this.ApplyId = applyId;
      this.TicketTypeId = ticketTypeId;
      this.TicketTypeName = ticketTypeName;
      this.ApplyNum = applyNum;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_detailId = false;
        bool isset_applyId = false;
        bool isset_ticketTypeId = false;
        bool isset_ticketTypeName = false;
        bool isset_applyNum = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DetailId = iprot.ReadString();
                isset_detailId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                ApplyId = iprot.ReadString();
                isset_applyId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
                isset_ticketTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                TicketTypeName = iprot.ReadString();
                isset_ticketTypeName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                ApplyNum = iprot.ReadI64();
                isset_applyNum = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                ExamNum = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.I64) {
                ChangeNum = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                MinusLimit = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.I64) {
                ApplyFrozenLimit = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_detailId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_applyId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_applyNum)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_TEAM_ORDER_DETAIL");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "detailId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DetailId);
        oprot.WriteFieldEnd();
        field.Name = "applyId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ApplyId);
        oprot.WriteFieldEnd();
        field.Name = "ticketTypeId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeId);
        oprot.WriteFieldEnd();
        field.Name = "ticketTypeName";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeName);
        oprot.WriteFieldEnd();
        field.Name = "applyNum";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ApplyNum);
        oprot.WriteFieldEnd();
        if (__isset.examNum) {
          field.Name = "examNum";
          field.Type = TType.I64;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ExamNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.changeNum) {
          field.Name = "changeNum";
          field.Type = TType.I64;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ChangeNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.minusLimit) {
          field.Name = "minusLimit";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(MinusLimit);
          oprot.WriteFieldEnd();
        }
        if (__isset.applyFrozenLimit) {
          field.Name = "applyFrozenLimit";
          field.Type = TType.I64;
          field.ID = 10;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(ApplyFrozenLimit);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_TEAM_ORDER_DETAIL(");
      __sb.Append(", DetailId: ");
      __sb.Append(DetailId);
      __sb.Append(", ApplyId: ");
      __sb.Append(ApplyId);
      __sb.Append(", TicketTypeId: ");
      __sb.Append(TicketTypeId);
      __sb.Append(", TicketTypeName: ");
      __sb.Append(TicketTypeName);
      __sb.Append(", ApplyNum: ");
      __sb.Append(ApplyNum);
      if (__isset.examNum) {
        __sb.Append(", ExamNum: ");
        __sb.Append(ExamNum);
      }
      if (__isset.changeNum) {
        __sb.Append(", ChangeNum: ");
        __sb.Append(ChangeNum);
      }
      if (__isset.minusLimit) {
        __sb.Append(", MinusLimit: ");
        __sb.Append(MinusLimit);
      }
      if (__isset.applyFrozenLimit) {
        __sb.Append(", ApplyFrozenLimit: ");
        __sb.Append(ApplyFrozenLimit);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
