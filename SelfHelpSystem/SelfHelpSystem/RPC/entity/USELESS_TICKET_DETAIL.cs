/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 废票明细表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class USELESS_TICKET_DETAIL : TBase
  {
    private long _uselessTime;
    private long _ticketId;
    private string _ticketTypeId;
    private string _ticketTypeName;
    private long _outletId;
    private string _outletName;
    private string _uselessUserId;
    private string _uselessUserName;
    private string _uselessReason;

    /// <summary>
    /// 作废时间
    /// </summary>
    public long UselessTime
    {
      get
      {
        return _uselessTime;
      }
      set
      {
        __isset.uselessTime = true;
        this._uselessTime = value;
      }
    }

    /// <summary>
    /// 票号
    /// </summary>
    public long TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId
    {
      get
      {
        return _ticketTypeId;
      }
      set
      {
        __isset.ticketTypeId = true;
        this._ticketTypeId = value;
      }
    }

    /// <summary>
    /// 票种名称
    /// </summary>
    public string TicketTypeName
    {
      get
      {
        return _ticketTypeName;
      }
      set
      {
        __isset.ticketTypeName = true;
        this._ticketTypeName = value;
      }
    }

    /// <summary>
    /// 网点编号
    /// </summary>
    public long OutletId
    {
      get
      {
        return _outletId;
      }
      set
      {
        __isset.outletId = true;
        this._outletId = value;
      }
    }

    /// <summary>
    /// 网点名称
    /// </summary>
    public string OutletName
    {
      get
      {
        return _outletName;
      }
      set
      {
        __isset.outletName = true;
        this._outletName = value;
      }
    }

    /// <summary>
    /// 作废人编号
    /// </summary>
    public string UselessUserId
    {
      get
      {
        return _uselessUserId;
      }
      set
      {
        __isset.uselessUserId = true;
        this._uselessUserId = value;
      }
    }

    /// <summary>
    /// 作废人名称
    /// </summary>
    public string UselessUserName
    {
      get
      {
        return _uselessUserName;
      }
      set
      {
        __isset.uselessUserName = true;
        this._uselessUserName = value;
      }
    }

    /// <summary>
    /// 作废原因
    /// </summary>
    public string UselessReason
    {
      get
      {
        return _uselessReason;
      }
      set
      {
        __isset.uselessReason = true;
        this._uselessReason = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool uselessTime;
      public bool ticketId;
      public bool ticketTypeId;
      public bool ticketTypeName;
      public bool outletId;
      public bool outletName;
      public bool uselessUserId;
      public bool uselessUserName;
      public bool uselessReason;
    }

    public USELESS_TICKET_DETAIL() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I64) {
                UselessTime = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                TicketId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                TicketTypeName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                OutletId = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                OutletName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                UselessUserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.String) {
                UselessUserName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.String) {
                UselessReason = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("USELESS_TICKET_DETAIL");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.uselessTime) {
          field.Name = "uselessTime";
          field.Type = TType.I64;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(UselessTime);
          oprot.WriteFieldEnd();
        }
        if (__isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(TicketId);
          oprot.WriteFieldEnd();
        }
        if (TicketTypeId != null && __isset.ticketTypeId) {
          field.Name = "ticketTypeId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketTypeId);
          oprot.WriteFieldEnd();
        }
        if (TicketTypeName != null && __isset.ticketTypeName) {
          field.Name = "ticketTypeName";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketTypeName);
          oprot.WriteFieldEnd();
        }
        if (__isset.outletId) {
          field.Name = "outletId";
          field.Type = TType.I64;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OutletId);
          oprot.WriteFieldEnd();
        }
        if (OutletName != null && __isset.outletName) {
          field.Name = "outletName";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(OutletName);
          oprot.WriteFieldEnd();
        }
        if (UselessUserId != null && __isset.uselessUserId) {
          field.Name = "uselessUserId";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UselessUserId);
          oprot.WriteFieldEnd();
        }
        if (UselessUserName != null && __isset.uselessUserName) {
          field.Name = "uselessUserName";
          field.Type = TType.String;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UselessUserName);
          oprot.WriteFieldEnd();
        }
        if (UselessReason != null && __isset.uselessReason) {
          field.Name = "uselessReason";
          field.Type = TType.String;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UselessReason);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("USELESS_TICKET_DETAIL(");
      bool __first = true;
      if (__isset.uselessTime) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UselessTime: ");
        __sb.Append(UselessTime);
      }
      if (__isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      if (TicketTypeId != null && __isset.ticketTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketTypeId: ");
        __sb.Append(TicketTypeId);
      }
      if (TicketTypeName != null && __isset.ticketTypeName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketTypeName: ");
        __sb.Append(TicketTypeName);
      }
      if (__isset.outletId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OutletId: ");
        __sb.Append(OutletId);
      }
      if (OutletName != null && __isset.outletName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("OutletName: ");
        __sb.Append(OutletName);
      }
      if (UselessUserId != null && __isset.uselessUserId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UselessUserId: ");
        __sb.Append(UselessUserId);
      }
      if (UselessUserName != null && __isset.uselessUserName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UselessUserName: ");
        __sb.Append(UselessUserName);
      }
      if (UselessReason != null && __isset.uselessReason) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UselessReason: ");
        __sb.Append(UselessReason);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
