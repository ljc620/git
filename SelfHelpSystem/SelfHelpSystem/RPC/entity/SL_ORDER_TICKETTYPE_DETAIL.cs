/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 销售单票种明细表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_ORDER_TICKETTYPE_DETAIL : TBase
  {

    /// <summary>
    /// 销售单号
    /// </summary>
    public string OrderId { get; set; }

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId { get; set; }

    /// <summary>
    /// 销售张数
    /// </summary>
    public long TicketCount { get; set; }

    /// <summary>
    /// 出票张数
    /// </summary>
    public long EjectTicketCount { get; set; }

    public SL_ORDER_TICKETTYPE_DETAIL() {
    }

    public SL_ORDER_TICKETTYPE_DETAIL(string orderId, string ticketTypeId, long ticketCount, long ejectTicketCount) : this() {
      this.OrderId = orderId;
      this.TicketTypeId = ticketTypeId;
      this.TicketCount = ticketCount;
      this.EjectTicketCount = ejectTicketCount;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_orderId = false;
        bool isset_ticketTypeId = false;
        bool isset_ticketCount = false;
        bool isset_ejectTicketCount = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                OrderId = iprot.ReadString();
                isset_orderId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
                isset_ticketTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                TicketCount = iprot.ReadI64();
                isset_ticketCount = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                EjectTicketCount = iprot.ReadI64();
                isset_ejectTicketCount = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_orderId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketCount)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ejectTicketCount)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_ORDER_TICKETTYPE_DETAIL");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "orderId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OrderId);
        oprot.WriteFieldEnd();
        field.Name = "ticketTypeId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeId);
        oprot.WriteFieldEnd();
        field.Name = "ticketCount";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TicketCount);
        oprot.WriteFieldEnd();
        field.Name = "ejectTicketCount";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EjectTicketCount);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_ORDER_TICKETTYPE_DETAIL(");
      __sb.Append(", OrderId: ");
      __sb.Append(OrderId);
      __sb.Append(", TicketTypeId: ");
      __sb.Append(TicketTypeId);
      __sb.Append(", TicketCount: ");
      __sb.Append(TicketCount);
      __sb.Append(", EjectTicketCount: ");
      __sb.Append(EjectTicketCount);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
