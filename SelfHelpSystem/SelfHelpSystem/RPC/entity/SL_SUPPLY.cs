/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 补票表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SL_SUPPLY : TBase
  {

    /// <summary>
    /// 销售单号
    /// </summary>
    public string SupplyId { get; set; }

    /// <summary>
    /// 新票号
    /// </summary>
    public long NewTicketId { get; set; }

    /// <summary>
    /// 旧票号
    /// </summary>
    public long OldTicketId { get; set; }

    /// <summary>
    /// 新票价
    /// </summary>
    public long NewPrice { get; set; }

    /// <summary>
    /// 旧票价
    /// </summary>
    public long OldPrice { get; set; }

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId { get; set; }

    /// <summary>
    /// 操作人
    /// </summary>
    public string OpeUserId { get; set; }

    /// <summary>
    /// 操作时间
    /// </summary>
    public long OpeTime { get; set; }

    /// <summary>
    /// 销售信息
    /// </summary>
    public SL_ORDER SlOrder { get; set; }

    /// <summary>
    /// 废票信息
    /// </summary>
    public SL_USELESS_TICKET_INFO SlUselessTicketInfo { get; set; }

    public SL_SUPPLY() {
    }

    public SL_SUPPLY(string supplyId, long newTicketId, long oldTicketId, long newPrice, long oldPrice, string ticketTypeId, string opeUserId, long opeTime, SL_ORDER slOrder, SL_USELESS_TICKET_INFO slUselessTicketInfo) : this() {
      this.SupplyId = supplyId;
      this.NewTicketId = newTicketId;
      this.OldTicketId = oldTicketId;
      this.NewPrice = newPrice;
      this.OldPrice = oldPrice;
      this.TicketTypeId = ticketTypeId;
      this.OpeUserId = opeUserId;
      this.OpeTime = opeTime;
      this.SlOrder = slOrder;
      this.SlUselessTicketInfo = slUselessTicketInfo;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_supplyId = false;
        bool isset_newTicketId = false;
        bool isset_oldTicketId = false;
        bool isset_newPrice = false;
        bool isset_oldPrice = false;
        bool isset_ticketTypeId = false;
        bool isset_opeUserId = false;
        bool isset_opeTime = false;
        bool isset_slOrder = false;
        bool isset_slUselessTicketInfo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                SupplyId = iprot.ReadString();
                isset_supplyId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                NewTicketId = iprot.ReadI64();
                isset_newTicketId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I64) {
                OldTicketId = iprot.ReadI64();
                isset_oldTicketId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I64) {
                NewPrice = iprot.ReadI64();
                isset_newPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                OldPrice = iprot.ReadI64();
                isset_oldPrice = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
                isset_ticketTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                OpeUserId = iprot.ReadString();
                isset_opeUserId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                OpeTime = iprot.ReadI64();
                isset_opeTime = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.Struct) {
                SlOrder = new SL_ORDER();
                SlOrder.Read(iprot);
                isset_slOrder = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 10:
              if (field.Type == TType.Struct) {
                SlUselessTicketInfo = new SL_USELESS_TICKET_INFO();
                SlUselessTicketInfo.Read(iprot);
                isset_slUselessTicketInfo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_supplyId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_newTicketId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_oldTicketId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_newPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_oldPrice)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_opeUserId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_opeTime)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_slOrder)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_slUselessTicketInfo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SL_SUPPLY");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "supplyId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SupplyId);
        oprot.WriteFieldEnd();
        field.Name = "newTicketId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NewTicketId);
        oprot.WriteFieldEnd();
        field.Name = "oldTicketId";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OldTicketId);
        oprot.WriteFieldEnd();
        field.Name = "newPrice";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(NewPrice);
        oprot.WriteFieldEnd();
        field.Name = "oldPrice";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OldPrice);
        oprot.WriteFieldEnd();
        field.Name = "ticketTypeId";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeId);
        oprot.WriteFieldEnd();
        field.Name = "opeUserId";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(OpeUserId);
        oprot.WriteFieldEnd();
        field.Name = "opeTime";
        field.Type = TType.I64;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(OpeTime);
        oprot.WriteFieldEnd();
        field.Name = "slOrder";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        SlOrder.Write(oprot);
        oprot.WriteFieldEnd();
        field.Name = "slUselessTicketInfo";
        field.Type = TType.Struct;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        SlUselessTicketInfo.Write(oprot);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SL_SUPPLY(");
      __sb.Append(", SupplyId: ");
      __sb.Append(SupplyId);
      __sb.Append(", NewTicketId: ");
      __sb.Append(NewTicketId);
      __sb.Append(", OldTicketId: ");
      __sb.Append(OldTicketId);
      __sb.Append(", NewPrice: ");
      __sb.Append(NewPrice);
      __sb.Append(", OldPrice: ");
      __sb.Append(OldPrice);
      __sb.Append(", TicketTypeId: ");
      __sb.Append(TicketTypeId);
      __sb.Append(", OpeUserId: ");
      __sb.Append(OpeUserId);
      __sb.Append(", OpeTime: ");
      __sb.Append(OpeTime);
      __sb.Append(", SlOrder: ");
      __sb.Append(SlOrder== null ? "<null>" : SlOrder.ToString());
      __sb.Append(", SlUselessTicketInfo: ");
      __sb.Append(SlUselessTicketInfo);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
