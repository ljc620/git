/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 配送明细表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class STR_DELIVERY_DETAIL : TBase
  {

    /// <summary>
    /// 配送明细ID
    /// </summary>
    public string DeliveryDetailId { get; set; }

    /// <summary>
    /// 箱号
    /// </summary>
    public long ChestId { get; set; }

    /// <summary>
    /// 申请编号
    /// </summary>
    public string ApplyId { get; set; }

    /// <summary>
    /// 票种编号
    /// </summary>
    public string TicketTypeId { get; set; }

    /// <summary>
    /// 票起号
    /// </summary>
    public long BeginNo { get; set; }

    /// <summary>
    /// 票止号
    /// </summary>
    public long EndNo { get; set; }

    public STR_DELIVERY_DETAIL() {
    }

    public STR_DELIVERY_DETAIL(string deliveryDetailId, long chestId, string applyId, string ticketTypeId, long beginNo, long endNo) : this() {
      this.DeliveryDetailId = deliveryDetailId;
      this.ChestId = chestId;
      this.ApplyId = applyId;
      this.TicketTypeId = ticketTypeId;
      this.BeginNo = beginNo;
      this.EndNo = endNo;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_deliveryDetailId = false;
        bool isset_chestId = false;
        bool isset_applyId = false;
        bool isset_ticketTypeId = false;
        bool isset_beginNo = false;
        bool isset_endNo = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DeliveryDetailId = iprot.ReadString();
                isset_deliveryDetailId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                ChestId = iprot.ReadI64();
                isset_chestId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ApplyId = iprot.ReadString();
                isset_applyId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                TicketTypeId = iprot.ReadString();
                isset_ticketTypeId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.I64) {
                BeginNo = iprot.ReadI64();
                isset_beginNo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.I64) {
                EndNo = iprot.ReadI64();
                isset_endNo = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_deliveryDetailId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_chestId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_applyId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_ticketTypeId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_beginNo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_endNo)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("STR_DELIVERY_DETAIL");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "deliveryDetailId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DeliveryDetailId);
        oprot.WriteFieldEnd();
        field.Name = "chestId";
        field.Type = TType.I64;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(ChestId);
        oprot.WriteFieldEnd();
        field.Name = "applyId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ApplyId);
        oprot.WriteFieldEnd();
        field.Name = "ticketTypeId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(TicketTypeId);
        oprot.WriteFieldEnd();
        field.Name = "beginNo";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(BeginNo);
        oprot.WriteFieldEnd();
        field.Name = "endNo";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(EndNo);
        oprot.WriteFieldEnd();
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("STR_DELIVERY_DETAIL(");
      __sb.Append(", DeliveryDetailId: ");
      __sb.Append(DeliveryDetailId);
      __sb.Append(", ChestId: ");
      __sb.Append(ChestId);
      __sb.Append(", ApplyId: ");
      __sb.Append(ApplyId);
      __sb.Append(", TicketTypeId: ");
      __sb.Append(TicketTypeId);
      __sb.Append(", BeginNo: ");
      __sb.Append(BeginNo);
      __sb.Append(", EndNo: ");
      __sb.Append(EndNo);
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
