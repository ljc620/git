/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.entity
{

  /// <summary>
  /// 字典表
  /// </summary>
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class SYS_DICTIONARY : TBase
  {
    private string _itemVal;
    private string _stat;
    private long _orderNum;
    private long _versionNo;

    /// <summary>
    /// 字典编号
    /// </summary>
    public string DictionaryId { get; set; }

    /// <summary>
    /// 字段名
    /// </summary>
    public string KeyCd { get; set; }

    /// <summary>
    /// 字段中文名
    /// </summary>
    public string KeyName { get; set; }

    /// <summary>
    /// 数据项代码
    /// </summary>
    public string ItemCd { get; set; }

    /// <summary>
    /// 数据项名称
    /// </summary>
    public string ItemName { get; set; }

    /// <summary>
    /// 数据项值
    /// </summary>
    public string ItemVal
    {
      get
      {
        return _itemVal;
      }
      set
      {
        __isset.itemVal = true;
        this._itemVal = value;
      }
    }

    /// <summary>
    /// 状态
    /// </summary>
    public string Stat
    {
      get
      {
        return _stat;
      }
      set
      {
        __isset.stat = true;
        this._stat = value;
      }
    }

    /// <summary>
    /// 序号
    /// </summary>
    public long OrderNum
    {
      get
      {
        return _orderNum;
      }
      set
      {
        __isset.orderNum = true;
        this._orderNum = value;
      }
    }

    /// <summary>
    /// 版本号
    /// </summary>
    public long VersionNo
    {
      get
      {
        return _versionNo;
      }
      set
      {
        __isset.versionNo = true;
        this._versionNo = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool itemVal;
      public bool stat;
      public bool orderNum;
      public bool versionNo;
    }

    public SYS_DICTIONARY() {
    }

    public SYS_DICTIONARY(string dictionaryId, string keyCd, string keyName, string itemCd, string itemName) : this() {
      this.DictionaryId = dictionaryId;
      this.KeyCd = keyCd;
      this.KeyName = keyName;
      this.ItemCd = itemCd;
      this.ItemName = itemName;
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        bool isset_dictionaryId = false;
        bool isset_keyCd = false;
        bool isset_keyName = false;
        bool isset_itemCd = false;
        bool isset_itemName = false;
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                DictionaryId = iprot.ReadString();
                isset_dictionaryId = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                KeyCd = iprot.ReadString();
                isset_keyCd = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                KeyName = iprot.ReadString();
                isset_keyName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                ItemCd = iprot.ReadString();
                isset_itemCd = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.String) {
                ItemName = iprot.ReadString();
                isset_itemName = true;
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 6:
              if (field.Type == TType.String) {
                ItemVal = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 7:
              if (field.Type == TType.String) {
                Stat = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 8:
              if (field.Type == TType.I64) {
                OrderNum = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 9:
              if (field.Type == TType.I64) {
                VersionNo = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
        if (!isset_dictionaryId)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_keyCd)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_keyName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_itemCd)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
        if (!isset_itemName)
          throw new TProtocolException(TProtocolException.INVALID_DATA);
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("SYS_DICTIONARY");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        field.Name = "dictionaryId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DictionaryId);
        oprot.WriteFieldEnd();
        field.Name = "keyCd";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(KeyCd);
        oprot.WriteFieldEnd();
        field.Name = "keyName";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(KeyName);
        oprot.WriteFieldEnd();
        field.Name = "itemCd";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemCd);
        oprot.WriteFieldEnd();
        field.Name = "itemName";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ItemName);
        oprot.WriteFieldEnd();
        if (ItemVal != null && __isset.itemVal) {
          field.Name = "itemVal";
          field.Type = TType.String;
          field.ID = 6;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ItemVal);
          oprot.WriteFieldEnd();
        }
        if (Stat != null && __isset.stat) {
          field.Name = "stat";
          field.Type = TType.String;
          field.ID = 7;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Stat);
          oprot.WriteFieldEnd();
        }
        if (__isset.orderNum) {
          field.Name = "orderNum";
          field.Type = TType.I64;
          field.ID = 8;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(OrderNum);
          oprot.WriteFieldEnd();
        }
        if (__isset.versionNo) {
          field.Name = "versionNo";
          field.Type = TType.I64;
          field.ID = 9;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(VersionNo);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("SYS_DICTIONARY(");
      __sb.Append(", DictionaryId: ");
      __sb.Append(DictionaryId);
      __sb.Append(", KeyCd: ");
      __sb.Append(KeyCd);
      __sb.Append(", KeyName: ");
      __sb.Append(KeyName);
      __sb.Append(", ItemCd: ");
      __sb.Append(ItemCd);
      __sb.Append(", ItemName: ");
      __sb.Append(ItemName);
      if (ItemVal != null && __isset.itemVal) {
        __sb.Append(", ItemVal: ");
        __sb.Append(ItemVal);
      }
      if (Stat != null && __isset.stat) {
        __sb.Append(", Stat: ");
        __sb.Append(Stat);
      }
      if (__isset.orderNum) {
        __sb.Append(", OrderNum: ");
        __sb.Append(OrderNum);
      }
      if (__isset.versionNo) {
        __sb.Append(", VersionNo: ");
        __sb.Append(VersionNo);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
