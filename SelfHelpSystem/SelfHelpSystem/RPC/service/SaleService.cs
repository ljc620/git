/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.service
{
  public partial class SaleService {
    /// <summary>
    /// 销售信息服务
    /// </summary>
    public interface ISync {
      /// <summary>
      /// 根据客户端id获取客户端和网点信息的接口
      /// @return 客户端和网点信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="clientId">客户端id</param>
      tbims.rpc.entity.SYS_CLIENT_OUTLET getInfoByClientId(tbims.rpc.entity.AUTHORIZATION auth, long clientId);
      /// <summary>
      /// 查询代理商信息
      /// @return 代理商信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="orgType">机构类型(0签约社1网络代理商2实体代理商)</param>
      /// <param name="outletId">网点编号</param>
      List<tbims.rpc.entity.SL_ORG> querySlOrg(tbims.rpc.entity.AUTHORIZATION auth, string orgType, long outletId);
      /// <summary>
      /// 门票配送申请单查询
      /// @return 门票信息suppl
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="applyId">申请编号</param>
      /// <param name="app_begin_tm">申请开始时间</param>
      /// <param name="app_end_tm">申请开始时间</param>
      /// <param name="exam_stat">审核状态(0待审核1已审核2已配送3已接收4已拒收)</param>
      /// <param name="outlet_id">网点编号</param>
      List<tbims.rpc.entity.STR_DELIVERY_APPLY> ticketApplyQuery(tbims.rpc.entity.AUTHORIZATION auth, string applyId, long app_begin_tm, long app_end_tm, string exam_stat, long outlet_id);
      /// <summary>
      /// 门票配送申请
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="delivery_apply">配送申请信息</param>
      bool ticketApply(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply);
      /// <summary>
      /// 门票配送确认
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="applyId">申请编号</param>
      /// <param name="exam_stat">审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)</param>
      bool ticketConfirm(tbims.rpc.entity.AUTHORIZATION auth, string applyId, string exam_stat);
      /// <summary>
      /// 票据信息查询
      /// @return 票信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="ticket_id">票号</param>
      /// <param name="outlet_id">网点编码</param>
      tbims.rpc.entity.STR_TICKET_INFO ticketInfoQuery(tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id);
      /// <summary>
      /// 检票信息查询
      /// @return 检票信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="ticket_id">票号</param>
      List<tbims.rpc.entity.SL_CHECK> checkInfoQuery(tbims.rpc.entity.AUTHORIZATION auth, long ticket_id);
      /// <summary>
      /// 团队订单查询
      /// @return 团队票订单信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="apply_id">申请编号</param>
      tbims.rpc.entity.SL_TEAM_ORDER teamOrderQuery(tbims.rpc.entity.AUTHORIZATION auth, string apply_id);
      /// <summary>
      /// 自营售票验票号接口
      /// 
      /// @return 是否联号 true:检查通过 false:检查失败
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="begin_ticket_id">起始票号</param>
      /// <param name="ticket_num">数量</param>
      /// <param name="end_ticket_id">起始票号</param>
      bool checkSaleTicketBYzy(tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id);
      /// <summary>
      /// 售票信息上传 (XC-现场售票、ZY-自营售票、ST-实体代理、TD-团队换票),增量上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_orders">销售订单信息</param>
      bool saleTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER> sl_orders);
      /// <summary>
      /// 售票信息上传(ZG-自助购票,按RFID卡),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order">销售订单信息</param>
      /// <param name="sl_order_tickettype_detail">销售单票种明细表</param>
      bool saleTicketByZG(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order, tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail);
      /// <summary>
      /// 售票信息上传(ZG-自助购票,按身份证),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order">销售订单信息</param>
      bool saleTicketByIdenttyZG(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order);
      /// <summary>
      /// 身份证换票查询 (ZQ-自助取票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="identty_id">销售订单信息</param>
      List<tbims.rpc.entity.SL_ORDER_DETAIL> queryTicketByIdenttyId(tbims.rpc.entity.AUTHORIZATION auth, string identty_id);
      /// <summary>
      /// 查询售票单的支付状态,返回支付状态(1-待支付 2-已支付 3-支付失败),联机,调用6次,每5秒调用一次，非2-已支付 则调用取消交易接口
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="order_id">销售订单信息</param>
      int querTicketPayStatus(tbims.rpc.entity.AUTHORIZATION auth, string order_id);
      /// <summary>
      /// 撤消交易,支付超时或未知状态,并通过查询确认后调用
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="order_id">销售订单信息</param>
      bool cancelTicketPay(tbims.rpc.entity.AUTHORIZATION auth, string order_id);
      /// <summary>
      /// 出票信息上传-自助售票机 (ZG-自助购票、ZQ-自助取票),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order_detail_list">销售订单信息</param>
      bool ejectTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list);
      /// <summary>
      /// 售票信息上传 (WL-网络代理换票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_netagent_order">网络代理订单表</param>
      bool changeTicket(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order);
      /// <summary>
      /// 补票信息上传 (PB-补票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_supply">补票信息</param>
      bool supplyTicket(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_SUPPLY sl_supply);
      /// <summary>
      /// 坏票信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="useless_ticket_infos">废票信息</param>
      bool uselessTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos);
      /// <summary>
      /// 检票信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_checks">检票信息</param>
      bool checkInfo(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_CHECK> sl_checks);
      /// <summary>
      /// 身份证入园检票-联机(没检票、没取实体票、没有作废的记录就通过，通过后再入检票表),返回 1-成功 40-当前场馆无有效门票 41-当前门票已过有效期 42-当前时间不允许此门票入场 43-系统错误
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="checkId">检票表id</param>
      /// <param name="ticketClass">门票类型(2-身份证、3-二维码)</param>
      /// <param name="ticketUid">票据唯一号</param>
      int checkTicketOnline(tbims.rpc.entity.AUTHORIZATION auth, string checkId, string ticketClass, string ticketUid);
      /// <summary>
      /// 网点员工销售统计表
      /// @return 销售数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      List<tbims.rpc.entity.RPT_SALE_DATA_USER> rptSaleDataUser(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id);
      /// <summary>
      /// 网点销售统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET> rptSaleDataOutlet(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id);
      /// <summary>
      /// 网点库存统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      List<tbims.rpc.entity.RPT_STR_DATA> rptStrData(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id);
      /// <summary>
      /// 当日网点库存统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="outlet_id">网点编号</param>
      List<tbims.rpc.entity.RPT_STR_DATA> rptStrDataNow(tbims.rpc.entity.AUTHORIZATION auth, long outlet_id);
    }

    /// <summary>
    /// 销售信息服务
    /// </summary>
    public interface Iface : ISync {
      /// <summary>
      /// 根据客户端id获取客户端和网点信息的接口
      /// @return 客户端和网点信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="clientId">客户端id</param>
      #if SILVERLIGHT
      IAsyncResult Begin_getInfoByClientId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long clientId);
      tbims.rpc.entity.SYS_CLIENT_OUTLET End_getInfoByClientId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询代理商信息
      /// @return 代理商信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="orgType">机构类型(0签约社1网络代理商2实体代理商)</param>
      /// <param name="outletId">网点编号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_querySlOrg(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string orgType, long outletId);
      List<tbims.rpc.entity.SL_ORG> End_querySlOrg(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 门票配送申请单查询
      /// @return 门票信息suppl
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="applyId">申请编号</param>
      /// <param name="app_begin_tm">申请开始时间</param>
      /// <param name="app_end_tm">申请开始时间</param>
      /// <param name="exam_stat">审核状态(0待审核1已审核2已配送3已接收4已拒收)</param>
      /// <param name="outlet_id">网点编号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ticketApplyQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string applyId, long app_begin_tm, long app_end_tm, string exam_stat, long outlet_id);
      List<tbims.rpc.entity.STR_DELIVERY_APPLY> End_ticketApplyQuery(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 门票配送申请
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="delivery_apply">配送申请信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ticketApply(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply);
      bool End_ticketApply(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 门票配送确认
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="applyId">申请编号</param>
      /// <param name="exam_stat">审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ticketConfirm(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string applyId, string exam_stat);
      bool End_ticketConfirm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 票据信息查询
      /// @return 票信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="ticket_id">票号</param>
      /// <param name="outlet_id">网点编码</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ticketInfoQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id);
      tbims.rpc.entity.STR_TICKET_INFO End_ticketInfoQuery(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 检票信息查询
      /// @return 检票信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="ticket_id">票号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_checkInfoQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long ticket_id);
      List<tbims.rpc.entity.SL_CHECK> End_checkInfoQuery(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 团队订单查询
      /// @return 团队票订单信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="apply_id">申请编号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_teamOrderQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string apply_id);
      tbims.rpc.entity.SL_TEAM_ORDER End_teamOrderQuery(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 自营售票验票号接口
      /// 
      /// @return 是否联号 true:检查通过 false:检查失败
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="begin_ticket_id">起始票号</param>
      /// <param name="ticket_num">数量</param>
      /// <param name="end_ticket_id">起始票号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_checkSaleTicketBYzy(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id);
      bool End_checkSaleTicketBYzy(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 售票信息上传 (XC-现场售票、ZY-自营售票、ST-实体代理、TD-团队换票),增量上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_orders">销售订单信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_saleTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER> sl_orders);
      bool End_saleTicket(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 售票信息上传(ZG-自助购票,按RFID卡),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order">销售订单信息</param>
      /// <param name="sl_order_tickettype_detail">销售单票种明细表</param>
      #if SILVERLIGHT
      IAsyncResult Begin_saleTicketByZG(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order, tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail);
      bool End_saleTicketByZG(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 售票信息上传(ZG-自助购票,按身份证),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order">销售订单信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_saleTicketByIdenttyZG(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order);
      bool End_saleTicketByIdenttyZG(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 身份证换票查询 (ZQ-自助取票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="identty_id">销售订单信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_queryTicketByIdenttyId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string identty_id);
      List<tbims.rpc.entity.SL_ORDER_DETAIL> End_queryTicketByIdenttyId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询售票单的支付状态,返回支付状态(1-待支付 2-已支付 3-支付失败),联机,调用6次,每5秒调用一次，非2-已支付 则调用取消交易接口
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="order_id">销售订单信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_querTicketPayStatus(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string order_id);
      int End_querTicketPayStatus(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 撤消交易,支付超时或未知状态,并通过查询确认后调用
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="order_id">销售订单信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_cancelTicketPay(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string order_id);
      bool End_cancelTicketPay(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 出票信息上传-自助售票机 (ZG-自助购票、ZQ-自助取票),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order_detail_list">销售订单信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ejectTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list);
      bool End_ejectTicket(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 售票信息上传 (WL-网络代理换票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_netagent_order">网络代理订单表</param>
      #if SILVERLIGHT
      IAsyncResult Begin_changeTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order);
      bool End_changeTicket(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 补票信息上传 (PB-补票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_supply">补票信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_supplyTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_SUPPLY sl_supply);
      bool End_supplyTicket(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 坏票信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="useless_ticket_infos">废票信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_uselessTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos);
      bool End_uselessTicket(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 检票信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_checks">检票信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_checkInfo(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_CHECK> sl_checks);
      bool End_checkInfo(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 身份证入园检票-联机(没检票、没取实体票、没有作废的记录就通过，通过后再入检票表),返回 1-成功 40-当前场馆无有效门票 41-当前门票已过有效期 42-当前时间不允许此门票入场 43-系统错误
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="checkId">检票表id</param>
      /// <param name="ticketClass">门票类型(2-身份证、3-二维码)</param>
      /// <param name="ticketUid">票据唯一号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_checkTicketOnline(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string checkId, string ticketClass, string ticketUid);
      int End_checkTicketOnline(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 网点员工销售统计表
      /// @return 销售数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_rptSaleDataUser(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id);
      List<tbims.rpc.entity.RPT_SALE_DATA_USER> End_rptSaleDataUser(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 网点销售统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_rptSaleDataOutlet(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id);
      List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET> End_rptSaleDataOutlet(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 网点库存统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_rptStrData(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id);
      List<tbims.rpc.entity.RPT_STR_DATA> End_rptStrData(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 当日网点库存统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="outlet_id">网点编号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_rptStrDataNow(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long outlet_id);
      List<tbims.rpc.entity.RPT_STR_DATA> End_rptStrDataNow(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 销售信息服务
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_getInfoByClientId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long clientId)
      {
        return send_getInfoByClientId(callback, state, auth, clientId);
      }

      public tbims.rpc.entity.SYS_CLIENT_OUTLET End_getInfoByClientId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getInfoByClientId();
      }

      #endif

      /// <summary>
      /// 根据客户端id获取客户端和网点信息的接口
      /// @return 客户端和网点信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="clientId">客户端id</param>
      public tbims.rpc.entity.SYS_CLIENT_OUTLET getInfoByClientId(tbims.rpc.entity.AUTHORIZATION auth, long clientId)
      {
        #if !SILVERLIGHT
        send_getInfoByClientId(auth, clientId);
        return recv_getInfoByClientId();

        #else
        var asyncResult = Begin_getInfoByClientId(null, null, auth, clientId);
        return End_getInfoByClientId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getInfoByClientId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long clientId)
      #else
      public void send_getInfoByClientId(tbims.rpc.entity.AUTHORIZATION auth, long clientId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getInfoByClientId", TMessageType.Call, seqid_));
        getInfoByClientId_args args = new getInfoByClientId_args();
        args.Auth = auth;
        args.ClientId = clientId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public tbims.rpc.entity.SYS_CLIENT_OUTLET recv_getInfoByClientId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getInfoByClientId_result result = new getInfoByClientId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getInfoByClientId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_querySlOrg(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string orgType, long outletId)
      {
        return send_querySlOrg(callback, state, auth, orgType, outletId);
      }

      public List<tbims.rpc.entity.SL_ORG> End_querySlOrg(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_querySlOrg();
      }

      #endif

      /// <summary>
      /// 查询代理商信息
      /// @return 代理商信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="orgType">机构类型(0签约社1网络代理商2实体代理商)</param>
      /// <param name="outletId">网点编号</param>
      public List<tbims.rpc.entity.SL_ORG> querySlOrg(tbims.rpc.entity.AUTHORIZATION auth, string orgType, long outletId)
      {
        #if !SILVERLIGHT
        send_querySlOrg(auth, orgType, outletId);
        return recv_querySlOrg();

        #else
        var asyncResult = Begin_querySlOrg(null, null, auth, orgType, outletId);
        return End_querySlOrg(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_querySlOrg(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string orgType, long outletId)
      #else
      public void send_querySlOrg(tbims.rpc.entity.AUTHORIZATION auth, string orgType, long outletId)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("querySlOrg", TMessageType.Call, seqid_));
        querySlOrg_args args = new querySlOrg_args();
        args.Auth = auth;
        args.OrgType = orgType;
        args.OutletId = outletId;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SL_ORG> recv_querySlOrg()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        querySlOrg_result result = new querySlOrg_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "querySlOrg failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ticketApplyQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string applyId, long app_begin_tm, long app_end_tm, string exam_stat, long outlet_id)
      {
        return send_ticketApplyQuery(callback, state, auth, applyId, app_begin_tm, app_end_tm, exam_stat, outlet_id);
      }

      public List<tbims.rpc.entity.STR_DELIVERY_APPLY> End_ticketApplyQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ticketApplyQuery();
      }

      #endif

      /// <summary>
      /// 门票配送申请单查询
      /// @return 门票信息suppl
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="applyId">申请编号</param>
      /// <param name="app_begin_tm">申请开始时间</param>
      /// <param name="app_end_tm">申请开始时间</param>
      /// <param name="exam_stat">审核状态(0待审核1已审核2已配送3已接收4已拒收)</param>
      /// <param name="outlet_id">网点编号</param>
      public List<tbims.rpc.entity.STR_DELIVERY_APPLY> ticketApplyQuery(tbims.rpc.entity.AUTHORIZATION auth, string applyId, long app_begin_tm, long app_end_tm, string exam_stat, long outlet_id)
      {
        #if !SILVERLIGHT
        send_ticketApplyQuery(auth, applyId, app_begin_tm, app_end_tm, exam_stat, outlet_id);
        return recv_ticketApplyQuery();

        #else
        var asyncResult = Begin_ticketApplyQuery(null, null, auth, applyId, app_begin_tm, app_end_tm, exam_stat, outlet_id);
        return End_ticketApplyQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ticketApplyQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string applyId, long app_begin_tm, long app_end_tm, string exam_stat, long outlet_id)
      #else
      public void send_ticketApplyQuery(tbims.rpc.entity.AUTHORIZATION auth, string applyId, long app_begin_tm, long app_end_tm, string exam_stat, long outlet_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ticketApplyQuery", TMessageType.Call, seqid_));
        ticketApplyQuery_args args = new ticketApplyQuery_args();
        args.Auth = auth;
        args.ApplyId = applyId;
        args.App_begin_tm = app_begin_tm;
        args.App_end_tm = app_end_tm;
        args.Exam_stat = exam_stat;
        args.Outlet_id = outlet_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.STR_DELIVERY_APPLY> recv_ticketApplyQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ticketApplyQuery_result result = new ticketApplyQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ticketApplyQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ticketApply(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply)
      {
        return send_ticketApply(callback, state, auth, delivery_apply);
      }

      public bool End_ticketApply(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ticketApply();
      }

      #endif

      /// <summary>
      /// 门票配送申请
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="delivery_apply">配送申请信息</param>
      public bool ticketApply(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply)
      {
        #if !SILVERLIGHT
        send_ticketApply(auth, delivery_apply);
        return recv_ticketApply();

        #else
        var asyncResult = Begin_ticketApply(null, null, auth, delivery_apply);
        return End_ticketApply(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ticketApply(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply)
      #else
      public void send_ticketApply(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ticketApply", TMessageType.Call, seqid_));
        ticketApply_args args = new ticketApply_args();
        args.Auth = auth;
        args.Delivery_apply = delivery_apply;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ticketApply()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ticketApply_result result = new ticketApply_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ticketApply failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ticketConfirm(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string applyId, string exam_stat)
      {
        return send_ticketConfirm(callback, state, auth, applyId, exam_stat);
      }

      public bool End_ticketConfirm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ticketConfirm();
      }

      #endif

      /// <summary>
      /// 门票配送确认
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="applyId">申请编号</param>
      /// <param name="exam_stat">审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)</param>
      public bool ticketConfirm(tbims.rpc.entity.AUTHORIZATION auth, string applyId, string exam_stat)
      {
        #if !SILVERLIGHT
        send_ticketConfirm(auth, applyId, exam_stat);
        return recv_ticketConfirm();

        #else
        var asyncResult = Begin_ticketConfirm(null, null, auth, applyId, exam_stat);
        return End_ticketConfirm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ticketConfirm(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string applyId, string exam_stat)
      #else
      public void send_ticketConfirm(tbims.rpc.entity.AUTHORIZATION auth, string applyId, string exam_stat)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ticketConfirm", TMessageType.Call, seqid_));
        ticketConfirm_args args = new ticketConfirm_args();
        args.Auth = auth;
        args.ApplyId = applyId;
        args.Exam_stat = exam_stat;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ticketConfirm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ticketConfirm_result result = new ticketConfirm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ticketConfirm failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ticketInfoQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id)
      {
        return send_ticketInfoQuery(callback, state, auth, ticket_id, outlet_id);
      }

      public tbims.rpc.entity.STR_TICKET_INFO End_ticketInfoQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ticketInfoQuery();
      }

      #endif

      /// <summary>
      /// 票据信息查询
      /// @return 票信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="ticket_id">票号</param>
      /// <param name="outlet_id">网点编码</param>
      public tbims.rpc.entity.STR_TICKET_INFO ticketInfoQuery(tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id)
      {
        #if !SILVERLIGHT
        send_ticketInfoQuery(auth, ticket_id, outlet_id);
        return recv_ticketInfoQuery();

        #else
        var asyncResult = Begin_ticketInfoQuery(null, null, auth, ticket_id, outlet_id);
        return End_ticketInfoQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ticketInfoQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id)
      #else
      public void send_ticketInfoQuery(tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ticketInfoQuery", TMessageType.Call, seqid_));
        ticketInfoQuery_args args = new ticketInfoQuery_args();
        args.Auth = auth;
        args.Ticket_id = ticket_id;
        args.Outlet_id = outlet_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public tbims.rpc.entity.STR_TICKET_INFO recv_ticketInfoQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ticketInfoQuery_result result = new ticketInfoQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ticketInfoQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkInfoQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long ticket_id)
      {
        return send_checkInfoQuery(callback, state, auth, ticket_id);
      }

      public List<tbims.rpc.entity.SL_CHECK> End_checkInfoQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkInfoQuery();
      }

      #endif

      /// <summary>
      /// 检票信息查询
      /// @return 检票信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="ticket_id">票号</param>
      public List<tbims.rpc.entity.SL_CHECK> checkInfoQuery(tbims.rpc.entity.AUTHORIZATION auth, long ticket_id)
      {
        #if !SILVERLIGHT
        send_checkInfoQuery(auth, ticket_id);
        return recv_checkInfoQuery();

        #else
        var asyncResult = Begin_checkInfoQuery(null, null, auth, ticket_id);
        return End_checkInfoQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkInfoQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long ticket_id)
      #else
      public void send_checkInfoQuery(tbims.rpc.entity.AUTHORIZATION auth, long ticket_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkInfoQuery", TMessageType.Call, seqid_));
        checkInfoQuery_args args = new checkInfoQuery_args();
        args.Auth = auth;
        args.Ticket_id = ticket_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SL_CHECK> recv_checkInfoQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkInfoQuery_result result = new checkInfoQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkInfoQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_teamOrderQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string apply_id)
      {
        return send_teamOrderQuery(callback, state, auth, apply_id);
      }

      public tbims.rpc.entity.SL_TEAM_ORDER End_teamOrderQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_teamOrderQuery();
      }

      #endif

      /// <summary>
      /// 团队订单查询
      /// @return 团队票订单信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="apply_id">申请编号</param>
      public tbims.rpc.entity.SL_TEAM_ORDER teamOrderQuery(tbims.rpc.entity.AUTHORIZATION auth, string apply_id)
      {
        #if !SILVERLIGHT
        send_teamOrderQuery(auth, apply_id);
        return recv_teamOrderQuery();

        #else
        var asyncResult = Begin_teamOrderQuery(null, null, auth, apply_id);
        return End_teamOrderQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_teamOrderQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string apply_id)
      #else
      public void send_teamOrderQuery(tbims.rpc.entity.AUTHORIZATION auth, string apply_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("teamOrderQuery", TMessageType.Call, seqid_));
        teamOrderQuery_args args = new teamOrderQuery_args();
        args.Auth = auth;
        args.Apply_id = apply_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public tbims.rpc.entity.SL_TEAM_ORDER recv_teamOrderQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        teamOrderQuery_result result = new teamOrderQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "teamOrderQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkSaleTicketBYzy(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id)
      {
        return send_checkSaleTicketBYzy(callback, state, auth, begin_ticket_id, ticket_num, end_ticket_id);
      }

      public bool End_checkSaleTicketBYzy(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkSaleTicketBYzy();
      }

      #endif

      /// <summary>
      /// 自营售票验票号接口
      /// 
      /// @return 是否联号 true:检查通过 false:检查失败
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="begin_ticket_id">起始票号</param>
      /// <param name="ticket_num">数量</param>
      /// <param name="end_ticket_id">起始票号</param>
      public bool checkSaleTicketBYzy(tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id)
      {
        #if !SILVERLIGHT
        send_checkSaleTicketBYzy(auth, begin_ticket_id, ticket_num, end_ticket_id);
        return recv_checkSaleTicketBYzy();

        #else
        var asyncResult = Begin_checkSaleTicketBYzy(null, null, auth, begin_ticket_id, ticket_num, end_ticket_id);
        return End_checkSaleTicketBYzy(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkSaleTicketBYzy(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id)
      #else
      public void send_checkSaleTicketBYzy(tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkSaleTicketBYzy", TMessageType.Call, seqid_));
        checkSaleTicketBYzy_args args = new checkSaleTicketBYzy_args();
        args.Auth = auth;
        args.Begin_ticket_id = begin_ticket_id;
        args.Ticket_num = ticket_num;
        args.End_ticket_id = end_ticket_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_checkSaleTicketBYzy()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkSaleTicketBYzy_result result = new checkSaleTicketBYzy_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkSaleTicketBYzy failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saleTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER> sl_orders)
      {
        return send_saleTicket(callback, state, auth, sl_orders);
      }

      public bool End_saleTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_saleTicket();
      }

      #endif

      /// <summary>
      /// 售票信息上传 (XC-现场售票、ZY-自营售票、ST-实体代理、TD-团队换票),增量上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_orders">销售订单信息</param>
      public bool saleTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER> sl_orders)
      {
        #if !SILVERLIGHT
        send_saleTicket(auth, sl_orders);
        return recv_saleTicket();

        #else
        var asyncResult = Begin_saleTicket(null, null, auth, sl_orders);
        return End_saleTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saleTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER> sl_orders)
      #else
      public void send_saleTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER> sl_orders)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saleTicket", TMessageType.Call, seqid_));
        saleTicket_args args = new saleTicket_args();
        args.Auth = auth;
        args.Sl_orders = sl_orders;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_saleTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saleTicket_result result = new saleTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saleTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saleTicketByZG(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order, tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail)
      {
        return send_saleTicketByZG(callback, state, auth, sl_order, sl_order_tickettype_detail);
      }

      public bool End_saleTicketByZG(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_saleTicketByZG();
      }

      #endif

      /// <summary>
      /// 售票信息上传(ZG-自助购票,按RFID卡),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order">销售订单信息</param>
      /// <param name="sl_order_tickettype_detail">销售单票种明细表</param>
      public bool saleTicketByZG(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order, tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail)
      {
        #if !SILVERLIGHT
        send_saleTicketByZG(auth, sl_order, sl_order_tickettype_detail);
        return recv_saleTicketByZG();

        #else
        var asyncResult = Begin_saleTicketByZG(null, null, auth, sl_order, sl_order_tickettype_detail);
        return End_saleTicketByZG(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saleTicketByZG(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order, tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail)
      #else
      public void send_saleTicketByZG(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order, tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saleTicketByZG", TMessageType.Call, seqid_));
        saleTicketByZG_args args = new saleTicketByZG_args();
        args.Auth = auth;
        args.Sl_order = sl_order;
        args.Sl_order_tickettype_detail = sl_order_tickettype_detail;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_saleTicketByZG()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saleTicketByZG_result result = new saleTicketByZG_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saleTicketByZG failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saleTicketByIdenttyZG(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order)
      {
        return send_saleTicketByIdenttyZG(callback, state, auth, sl_order);
      }

      public bool End_saleTicketByIdenttyZG(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_saleTicketByIdenttyZG();
      }

      #endif

      /// <summary>
      /// 售票信息上传(ZG-自助购票,按身份证),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order">销售订单信息</param>
      public bool saleTicketByIdenttyZG(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order)
      {
        #if !SILVERLIGHT
        send_saleTicketByIdenttyZG(auth, sl_order);
        return recv_saleTicketByIdenttyZG();

        #else
        var asyncResult = Begin_saleTicketByIdenttyZG(null, null, auth, sl_order);
        return End_saleTicketByIdenttyZG(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saleTicketByIdenttyZG(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order)
      #else
      public void send_saleTicketByIdenttyZG(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_ORDER sl_order)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saleTicketByIdenttyZG", TMessageType.Call, seqid_));
        saleTicketByIdenttyZG_args args = new saleTicketByIdenttyZG_args();
        args.Auth = auth;
        args.Sl_order = sl_order;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_saleTicketByIdenttyZG()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saleTicketByIdenttyZG_result result = new saleTicketByIdenttyZG_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saleTicketByIdenttyZG failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryTicketByIdenttyId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string identty_id)
      {
        return send_queryTicketByIdenttyId(callback, state, auth, identty_id);
      }

      public List<tbims.rpc.entity.SL_ORDER_DETAIL> End_queryTicketByIdenttyId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryTicketByIdenttyId();
      }

      #endif

      /// <summary>
      /// 身份证换票查询 (ZQ-自助取票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="identty_id">销售订单信息</param>
      public List<tbims.rpc.entity.SL_ORDER_DETAIL> queryTicketByIdenttyId(tbims.rpc.entity.AUTHORIZATION auth, string identty_id)
      {
        #if !SILVERLIGHT
        send_queryTicketByIdenttyId(auth, identty_id);
        return recv_queryTicketByIdenttyId();

        #else
        var asyncResult = Begin_queryTicketByIdenttyId(null, null, auth, identty_id);
        return End_queryTicketByIdenttyId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryTicketByIdenttyId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string identty_id)
      #else
      public void send_queryTicketByIdenttyId(tbims.rpc.entity.AUTHORIZATION auth, string identty_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryTicketByIdenttyId", TMessageType.Call, seqid_));
        queryTicketByIdenttyId_args args = new queryTicketByIdenttyId_args();
        args.Auth = auth;
        args.Identty_id = identty_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SL_ORDER_DETAIL> recv_queryTicketByIdenttyId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryTicketByIdenttyId_result result = new queryTicketByIdenttyId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryTicketByIdenttyId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_querTicketPayStatus(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      {
        return send_querTicketPayStatus(callback, state, auth, order_id);
      }

      public int End_querTicketPayStatus(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_querTicketPayStatus();
      }

      #endif

      /// <summary>
      /// 查询售票单的支付状态,返回支付状态(1-待支付 2-已支付 3-支付失败),联机,调用6次,每5秒调用一次，非2-已支付 则调用取消交易接口
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="order_id">销售订单信息</param>
      public int querTicketPayStatus(tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      {
        #if !SILVERLIGHT
        send_querTicketPayStatus(auth, order_id);
        return recv_querTicketPayStatus();

        #else
        var asyncResult = Begin_querTicketPayStatus(null, null, auth, order_id);
        return End_querTicketPayStatus(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_querTicketPayStatus(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      #else
      public void send_querTicketPayStatus(tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("querTicketPayStatus", TMessageType.Call, seqid_));
        querTicketPayStatus_args args = new querTicketPayStatus_args();
        args.Auth = auth;
        args.Order_id = order_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_querTicketPayStatus()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        querTicketPayStatus_result result = new querTicketPayStatus_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "querTicketPayStatus failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_cancelTicketPay(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      {
        return send_cancelTicketPay(callback, state, auth, order_id);
      }

      public bool End_cancelTicketPay(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_cancelTicketPay();
      }

      #endif

      /// <summary>
      /// 撤消交易,支付超时或未知状态,并通过查询确认后调用
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="order_id">销售订单信息</param>
      public bool cancelTicketPay(tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      {
        #if !SILVERLIGHT
        send_cancelTicketPay(auth, order_id);
        return recv_cancelTicketPay();

        #else
        var asyncResult = Begin_cancelTicketPay(null, null, auth, order_id);
        return End_cancelTicketPay(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_cancelTicketPay(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      #else
      public void send_cancelTicketPay(tbims.rpc.entity.AUTHORIZATION auth, string order_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("cancelTicketPay", TMessageType.Call, seqid_));
        cancelTicketPay_args args = new cancelTicketPay_args();
        args.Auth = auth;
        args.Order_id = order_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_cancelTicketPay()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        cancelTicketPay_result result = new cancelTicketPay_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cancelTicketPay failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ejectTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list)
      {
        return send_ejectTicket(callback, state, auth, sl_order_detail_list);
      }

      public bool End_ejectTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ejectTicket();
      }

      #endif

      /// <summary>
      /// 出票信息上传-自助售票机 (ZG-自助购票、ZQ-自助取票),联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_order_detail_list">销售订单信息</param>
      public bool ejectTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list)
      {
        #if !SILVERLIGHT
        send_ejectTicket(auth, sl_order_detail_list);
        return recv_ejectTicket();

        #else
        var asyncResult = Begin_ejectTicket(null, null, auth, sl_order_detail_list);
        return End_ejectTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ejectTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list)
      #else
      public void send_ejectTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ejectTicket", TMessageType.Call, seqid_));
        ejectTicket_args args = new ejectTicket_args();
        args.Auth = auth;
        args.Sl_order_detail_list = sl_order_detail_list;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ejectTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ejectTicket_result result = new ejectTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ejectTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changeTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order)
      {
        return send_changeTicket(callback, state, auth, sl_netagent_order);
      }

      public bool End_changeTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_changeTicket();
      }

      #endif

      /// <summary>
      /// 售票信息上传 (WL-网络代理换票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_netagent_order">网络代理订单表</param>
      public bool changeTicket(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order)
      {
        #if !SILVERLIGHT
        send_changeTicket(auth, sl_netagent_order);
        return recv_changeTicket();

        #else
        var asyncResult = Begin_changeTicket(null, null, auth, sl_netagent_order);
        return End_changeTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changeTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order)
      #else
      public void send_changeTicket(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changeTicket", TMessageType.Call, seqid_));
        changeTicket_args args = new changeTicket_args();
        args.Auth = auth;
        args.Sl_netagent_order = sl_netagent_order;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_changeTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changeTicket_result result = new changeTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changeTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_supplyTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_SUPPLY sl_supply)
      {
        return send_supplyTicket(callback, state, auth, sl_supply);
      }

      public bool End_supplyTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_supplyTicket();
      }

      #endif

      /// <summary>
      /// 补票信息上传 (PB-补票)
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_supply">补票信息</param>
      public bool supplyTicket(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_SUPPLY sl_supply)
      {
        #if !SILVERLIGHT
        send_supplyTicket(auth, sl_supply);
        return recv_supplyTicket();

        #else
        var asyncResult = Begin_supplyTicket(null, null, auth, sl_supply);
        return End_supplyTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_supplyTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_SUPPLY sl_supply)
      #else
      public void send_supplyTicket(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SL_SUPPLY sl_supply)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("supplyTicket", TMessageType.Call, seqid_));
        supplyTicket_args args = new supplyTicket_args();
        args.Auth = auth;
        args.Sl_supply = sl_supply;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_supplyTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        supplyTicket_result result = new supplyTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "supplyTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_uselessTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos)
      {
        return send_uselessTicket(callback, state, auth, useless_ticket_infos);
      }

      public bool End_uselessTicket(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_uselessTicket();
      }

      #endif

      /// <summary>
      /// 坏票信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="useless_ticket_infos">废票信息</param>
      public bool uselessTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos)
      {
        #if !SILVERLIGHT
        send_uselessTicket(auth, useless_ticket_infos);
        return recv_uselessTicket();

        #else
        var asyncResult = Begin_uselessTicket(null, null, auth, useless_ticket_infos);
        return End_uselessTicket(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_uselessTicket(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos)
      #else
      public void send_uselessTicket(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("uselessTicket", TMessageType.Call, seqid_));
        uselessTicket_args args = new uselessTicket_args();
        args.Auth = auth;
        args.Useless_ticket_infos = useless_ticket_infos;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_uselessTicket()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        uselessTicket_result result = new uselessTicket_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uselessTicket failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkInfo(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_CHECK> sl_checks)
      {
        return send_checkInfo(callback, state, auth, sl_checks);
      }

      public bool End_checkInfo(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkInfo();
      }

      #endif

      /// <summary>
      /// 检票信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sl_checks">检票信息</param>
      public bool checkInfo(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_CHECK> sl_checks)
      {
        #if !SILVERLIGHT
        send_checkInfo(auth, sl_checks);
        return recv_checkInfo();

        #else
        var asyncResult = Begin_checkInfo(null, null, auth, sl_checks);
        return End_checkInfo(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkInfo(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_CHECK> sl_checks)
      #else
      public void send_checkInfo(tbims.rpc.entity.AUTHORIZATION auth, List<tbims.rpc.entity.SL_CHECK> sl_checks)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkInfo", TMessageType.Call, seqid_));
        checkInfo_args args = new checkInfo_args();
        args.Auth = auth;
        args.Sl_checks = sl_checks;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_checkInfo()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkInfo_result result = new checkInfo_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkInfo failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_checkTicketOnline(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string checkId, string ticketClass, string ticketUid)
      {
        return send_checkTicketOnline(callback, state, auth, checkId, ticketClass, ticketUid);
      }

      public int End_checkTicketOnline(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_checkTicketOnline();
      }

      #endif

      /// <summary>
      /// 身份证入园检票-联机(没检票、没取实体票、没有作废的记录就通过，通过后再入检票表),返回 1-成功 40-当前场馆无有效门票 41-当前门票已过有效期 42-当前时间不允许此门票入场 43-系统错误
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="checkId">检票表id</param>
      /// <param name="ticketClass">门票类型(2-身份证、3-二维码)</param>
      /// <param name="ticketUid">票据唯一号</param>
      public int checkTicketOnline(tbims.rpc.entity.AUTHORIZATION auth, string checkId, string ticketClass, string ticketUid)
      {
        #if !SILVERLIGHT
        send_checkTicketOnline(auth, checkId, ticketClass, ticketUid);
        return recv_checkTicketOnline();

        #else
        var asyncResult = Begin_checkTicketOnline(null, null, auth, checkId, ticketClass, ticketUid);
        return End_checkTicketOnline(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_checkTicketOnline(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string checkId, string ticketClass, string ticketUid)
      #else
      public void send_checkTicketOnline(tbims.rpc.entity.AUTHORIZATION auth, string checkId, string ticketClass, string ticketUid)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("checkTicketOnline", TMessageType.Call, seqid_));
        checkTicketOnline_args args = new checkTicketOnline_args();
        args.Auth = auth;
        args.CheckId = checkId;
        args.TicketClass = ticketClass;
        args.TicketUid = ticketUid;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public int recv_checkTicketOnline()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        checkTicketOnline_result result = new checkTicketOnline_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "checkTicketOnline failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rptSaleDataUser(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      {
        return send_rptSaleDataUser(callback, state, auth, rpt_date, outlet_id);
      }

      public List<tbims.rpc.entity.RPT_SALE_DATA_USER> End_rptSaleDataUser(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_rptSaleDataUser();
      }

      #endif

      /// <summary>
      /// 网点员工销售统计表
      /// @return 销售数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      public List<tbims.rpc.entity.RPT_SALE_DATA_USER> rptSaleDataUser(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      {
        #if !SILVERLIGHT
        send_rptSaleDataUser(auth, rpt_date, outlet_id);
        return recv_rptSaleDataUser();

        #else
        var asyncResult = Begin_rptSaleDataUser(null, null, auth, rpt_date, outlet_id);
        return End_rptSaleDataUser(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rptSaleDataUser(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      #else
      public void send_rptSaleDataUser(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rptSaleDataUser", TMessageType.Call, seqid_));
        rptSaleDataUser_args args = new rptSaleDataUser_args();
        args.Auth = auth;
        args.Rpt_date = rpt_date;
        args.Outlet_id = outlet_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.RPT_SALE_DATA_USER> recv_rptSaleDataUser()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rptSaleDataUser_result result = new rptSaleDataUser_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rptSaleDataUser failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rptSaleDataOutlet(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      {
        return send_rptSaleDataOutlet(callback, state, auth, rpt_date, outlet_id);
      }

      public List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET> End_rptSaleDataOutlet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_rptSaleDataOutlet();
      }

      #endif

      /// <summary>
      /// 网点销售统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      public List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET> rptSaleDataOutlet(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      {
        #if !SILVERLIGHT
        send_rptSaleDataOutlet(auth, rpt_date, outlet_id);
        return recv_rptSaleDataOutlet();

        #else
        var asyncResult = Begin_rptSaleDataOutlet(null, null, auth, rpt_date, outlet_id);
        return End_rptSaleDataOutlet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rptSaleDataOutlet(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      #else
      public void send_rptSaleDataOutlet(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rptSaleDataOutlet", TMessageType.Call, seqid_));
        rptSaleDataOutlet_args args = new rptSaleDataOutlet_args();
        args.Auth = auth;
        args.Rpt_date = rpt_date;
        args.Outlet_id = outlet_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET> recv_rptSaleDataOutlet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rptSaleDataOutlet_result result = new rptSaleDataOutlet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rptSaleDataOutlet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rptStrData(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      {
        return send_rptStrData(callback, state, auth, rpt_date, outlet_id);
      }

      public List<tbims.rpc.entity.RPT_STR_DATA> End_rptStrData(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_rptStrData();
      }

      #endif

      /// <summary>
      /// 网点库存统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="rpt_date">统计日期</param>
      /// <param name="outlet_id">网点编号</param>
      public List<tbims.rpc.entity.RPT_STR_DATA> rptStrData(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      {
        #if !SILVERLIGHT
        send_rptStrData(auth, rpt_date, outlet_id);
        return recv_rptStrData();

        #else
        var asyncResult = Begin_rptStrData(null, null, auth, rpt_date, outlet_id);
        return End_rptStrData(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rptStrData(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      #else
      public void send_rptStrData(tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rptStrData", TMessageType.Call, seqid_));
        rptStrData_args args = new rptStrData_args();
        args.Auth = auth;
        args.Rpt_date = rpt_date;
        args.Outlet_id = outlet_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.RPT_STR_DATA> recv_rptStrData()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rptStrData_result result = new rptStrData_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rptStrData failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_rptStrDataNow(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long outlet_id)
      {
        return send_rptStrDataNow(callback, state, auth, outlet_id);
      }

      public List<tbims.rpc.entity.RPT_STR_DATA> End_rptStrDataNow(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_rptStrDataNow();
      }

      #endif

      /// <summary>
      /// 当日网点库存统计表
      /// @return 营业数据
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="outlet_id">网点编号</param>
      public List<tbims.rpc.entity.RPT_STR_DATA> rptStrDataNow(tbims.rpc.entity.AUTHORIZATION auth, long outlet_id)
      {
        #if !SILVERLIGHT
        send_rptStrDataNow(auth, outlet_id);
        return recv_rptStrDataNow();

        #else
        var asyncResult = Begin_rptStrDataNow(null, null, auth, outlet_id);
        return End_rptStrDataNow(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_rptStrDataNow(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long outlet_id)
      #else
      public void send_rptStrDataNow(tbims.rpc.entity.AUTHORIZATION auth, long outlet_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("rptStrDataNow", TMessageType.Call, seqid_));
        rptStrDataNow_args args = new rptStrDataNow_args();
        args.Auth = auth;
        args.Outlet_id = outlet_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.RPT_STR_DATA> recv_rptStrDataNow()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        rptStrDataNow_result result = new rptStrDataNow_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "rptStrDataNow failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["getInfoByClientId"] = getInfoByClientId_Process;
        processMap_["querySlOrg"] = querySlOrg_Process;
        processMap_["ticketApplyQuery"] = ticketApplyQuery_Process;
        processMap_["ticketApply"] = ticketApply_Process;
        processMap_["ticketConfirm"] = ticketConfirm_Process;
        processMap_["ticketInfoQuery"] = ticketInfoQuery_Process;
        processMap_["checkInfoQuery"] = checkInfoQuery_Process;
        processMap_["teamOrderQuery"] = teamOrderQuery_Process;
        processMap_["checkSaleTicketBYzy"] = checkSaleTicketBYzy_Process;
        processMap_["saleTicket"] = saleTicket_Process;
        processMap_["saleTicketByZG"] = saleTicketByZG_Process;
        processMap_["saleTicketByIdenttyZG"] = saleTicketByIdenttyZG_Process;
        processMap_["queryTicketByIdenttyId"] = queryTicketByIdenttyId_Process;
        processMap_["querTicketPayStatus"] = querTicketPayStatus_Process;
        processMap_["cancelTicketPay"] = cancelTicketPay_Process;
        processMap_["ejectTicket"] = ejectTicket_Process;
        processMap_["changeTicket"] = changeTicket_Process;
        processMap_["supplyTicket"] = supplyTicket_Process;
        processMap_["uselessTicket"] = uselessTicket_Process;
        processMap_["checkInfo"] = checkInfo_Process;
        processMap_["checkTicketOnline"] = checkTicketOnline_Process;
        processMap_["rptSaleDataUser"] = rptSaleDataUser_Process;
        processMap_["rptSaleDataOutlet"] = rptSaleDataOutlet_Process;
        processMap_["rptStrData"] = rptStrData_Process;
        processMap_["rptStrDataNow"] = rptStrDataNow_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void getInfoByClientId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getInfoByClientId_args args = new getInfoByClientId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getInfoByClientId_result result = new getInfoByClientId_result();
        try
        {
          try
          {
            result.Success = iface_.getInfoByClientId(args.Auth, args.ClientId);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("getInfoByClientId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getInfoByClientId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void querySlOrg_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        querySlOrg_args args = new querySlOrg_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        querySlOrg_result result = new querySlOrg_result();
        try
        {
          try
          {
            result.Success = iface_.querySlOrg(args.Auth, args.OrgType, args.OutletId);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("querySlOrg", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("querySlOrg", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ticketApplyQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ticketApplyQuery_args args = new ticketApplyQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ticketApplyQuery_result result = new ticketApplyQuery_result();
        try
        {
          try
          {
            result.Success = iface_.ticketApplyQuery(args.Auth, args.ApplyId, args.App_begin_tm, args.App_end_tm, args.Exam_stat, args.Outlet_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ticketApplyQuery", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ticketApplyQuery", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ticketApply_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ticketApply_args args = new ticketApply_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ticketApply_result result = new ticketApply_result();
        try
        {
          try
          {
            result.Success = iface_.ticketApply(args.Auth, args.Delivery_apply);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ticketApply", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ticketApply", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ticketConfirm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ticketConfirm_args args = new ticketConfirm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ticketConfirm_result result = new ticketConfirm_result();
        try
        {
          try
          {
            result.Success = iface_.ticketConfirm(args.Auth, args.ApplyId, args.Exam_stat);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ticketConfirm", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ticketConfirm", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ticketInfoQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ticketInfoQuery_args args = new ticketInfoQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ticketInfoQuery_result result = new ticketInfoQuery_result();
        try
        {
          try
          {
            result.Success = iface_.ticketInfoQuery(args.Auth, args.Ticket_id, args.Outlet_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ticketInfoQuery", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ticketInfoQuery", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkInfoQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkInfoQuery_args args = new checkInfoQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkInfoQuery_result result = new checkInfoQuery_result();
        try
        {
          try
          {
            result.Success = iface_.checkInfoQuery(args.Auth, args.Ticket_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("checkInfoQuery", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("checkInfoQuery", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void teamOrderQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        teamOrderQuery_args args = new teamOrderQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        teamOrderQuery_result result = new teamOrderQuery_result();
        try
        {
          try
          {
            result.Success = iface_.teamOrderQuery(args.Auth, args.Apply_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("teamOrderQuery", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("teamOrderQuery", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkSaleTicketBYzy_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkSaleTicketBYzy_args args = new checkSaleTicketBYzy_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkSaleTicketBYzy_result result = new checkSaleTicketBYzy_result();
        try
        {
          try
          {
            result.Success = iface_.checkSaleTicketBYzy(args.Auth, args.Begin_ticket_id, args.Ticket_num, args.End_ticket_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("checkSaleTicketBYzy", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("checkSaleTicketBYzy", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saleTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saleTicket_args args = new saleTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saleTicket_result result = new saleTicket_result();
        try
        {
          try
          {
            result.Success = iface_.saleTicket(args.Auth, args.Sl_orders);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("saleTicket", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("saleTicket", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saleTicketByZG_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saleTicketByZG_args args = new saleTicketByZG_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saleTicketByZG_result result = new saleTicketByZG_result();
        try
        {
          try
          {
            result.Success = iface_.saleTicketByZG(args.Auth, args.Sl_order, args.Sl_order_tickettype_detail);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("saleTicketByZG", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("saleTicketByZG", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saleTicketByIdenttyZG_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saleTicketByIdenttyZG_args args = new saleTicketByIdenttyZG_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saleTicketByIdenttyZG_result result = new saleTicketByIdenttyZG_result();
        try
        {
          try
          {
            result.Success = iface_.saleTicketByIdenttyZG(args.Auth, args.Sl_order);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("saleTicketByIdenttyZG", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("saleTicketByIdenttyZG", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryTicketByIdenttyId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryTicketByIdenttyId_args args = new queryTicketByIdenttyId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryTicketByIdenttyId_result result = new queryTicketByIdenttyId_result();
        try
        {
          try
          {
            result.Success = iface_.queryTicketByIdenttyId(args.Auth, args.Identty_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("queryTicketByIdenttyId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("queryTicketByIdenttyId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void querTicketPayStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        querTicketPayStatus_args args = new querTicketPayStatus_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        querTicketPayStatus_result result = new querTicketPayStatus_result();
        try
        {
          try
          {
            result.Success = iface_.querTicketPayStatus(args.Auth, args.Order_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("querTicketPayStatus", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("querTicketPayStatus", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void cancelTicketPay_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        cancelTicketPay_args args = new cancelTicketPay_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        cancelTicketPay_result result = new cancelTicketPay_result();
        try
        {
          result.Success = iface_.cancelTicketPay(args.Auth, args.Order_id);
          oprot.WriteMessageBegin(new TMessage("cancelTicketPay", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("cancelTicketPay", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ejectTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ejectTicket_args args = new ejectTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ejectTicket_result result = new ejectTicket_result();
        try
        {
          try
          {
            result.Success = iface_.ejectTicket(args.Auth, args.Sl_order_detail_list);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ejectTicket", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ejectTicket", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changeTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changeTicket_args args = new changeTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changeTicket_result result = new changeTicket_result();
        try
        {
          try
          {
            result.Success = iface_.changeTicket(args.Auth, args.Sl_netagent_order);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("changeTicket", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("changeTicket", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void supplyTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        supplyTicket_args args = new supplyTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        supplyTicket_result result = new supplyTicket_result();
        try
        {
          try
          {
            result.Success = iface_.supplyTicket(args.Auth, args.Sl_supply);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("supplyTicket", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("supplyTicket", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void uselessTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        uselessTicket_args args = new uselessTicket_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        uselessTicket_result result = new uselessTicket_result();
        try
        {
          try
          {
            result.Success = iface_.uselessTicket(args.Auth, args.Useless_ticket_infos);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("uselessTicket", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("uselessTicket", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkInfo_args args = new checkInfo_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkInfo_result result = new checkInfo_result();
        try
        {
          try
          {
            result.Success = iface_.checkInfo(args.Auth, args.Sl_checks);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("checkInfo", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("checkInfo", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void checkTicketOnline_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        checkTicketOnline_args args = new checkTicketOnline_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        checkTicketOnline_result result = new checkTicketOnline_result();
        try
        {
          try
          {
            result.Success = iface_.checkTicketOnline(args.Auth, args.CheckId, args.TicketClass, args.TicketUid);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("checkTicketOnline", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("checkTicketOnline", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rptSaleDataUser_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rptSaleDataUser_args args = new rptSaleDataUser_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rptSaleDataUser_result result = new rptSaleDataUser_result();
        try
        {
          try
          {
            result.Success = iface_.rptSaleDataUser(args.Auth, args.Rpt_date, args.Outlet_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("rptSaleDataUser", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("rptSaleDataUser", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rptSaleDataOutlet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rptSaleDataOutlet_args args = new rptSaleDataOutlet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rptSaleDataOutlet_result result = new rptSaleDataOutlet_result();
        try
        {
          try
          {
            result.Success = iface_.rptSaleDataOutlet(args.Auth, args.Rpt_date, args.Outlet_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("rptSaleDataOutlet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("rptSaleDataOutlet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rptStrData_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rptStrData_args args = new rptStrData_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rptStrData_result result = new rptStrData_result();
        try
        {
          try
          {
            result.Success = iface_.rptStrData(args.Auth, args.Rpt_date, args.Outlet_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("rptStrData", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("rptStrData", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void rptStrDataNow_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        rptStrDataNow_args args = new rptStrDataNow_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        rptStrDataNow_result result = new rptStrDataNow_result();
        try
        {
          try
          {
            result.Success = iface_.rptStrDataNow(args.Auth, args.Outlet_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("rptStrDataNow", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("rptStrDataNow", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInfoByClientId_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _clientId;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 客户端id
      /// </summary>
      public long ClientId
      {
        get
        {
          return _clientId;
        }
        set
        {
          __isset.clientId = true;
          this._clientId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool clientId;
      }

      public getInfoByClientId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  ClientId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInfoByClientId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.clientId) {
            field.Name = "clientId";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(ClientId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInfoByClientId_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.clientId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientId: ");
          __sb.Append(ClientId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getInfoByClientId_result : TBase
    {
      private tbims.rpc.entity.SYS_CLIENT_OUTLET _success;
      private tbims.rpc.entity.RPCException _e;

      public tbims.rpc.entity.SYS_CLIENT_OUTLET Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getInfoByClientId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new tbims.rpc.entity.SYS_CLIENT_OUTLET();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getInfoByClientId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getInfoByClientId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class querySlOrg_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _orgType;
      private long _outletId;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 机构类型(0签约社1网络代理商2实体代理商)
      /// </summary>
      public string OrgType
      {
        get
        {
          return _orgType;
        }
        set
        {
          __isset.orgType = true;
          this._orgType = value;
        }
      }

      /// <summary>
      /// 网点编号
      /// </summary>
      public long OutletId
      {
        get
        {
          return _outletId;
        }
        set
        {
          __isset.outletId = true;
          this._outletId = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool orgType;
        public bool outletId;
      }

      public querySlOrg_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  OrgType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  OutletId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("querySlOrg_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (OrgType != null && __isset.orgType) {
            field.Name = "orgType";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OrgType);
            oprot.WriteFieldEnd();
          }
          if (__isset.outletId) {
            field.Name = "outletId";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(OutletId);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("querySlOrg_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (OrgType != null && __isset.orgType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OrgType: ");
          __sb.Append(OrgType);
        }
        if (__isset.outletId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OutletId: ");
          __sb.Append(OutletId);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class querySlOrg_result : TBase
    {
      private List<tbims.rpc.entity.SL_ORG> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SL_ORG> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public querySlOrg_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SL_ORG>();
                    TList _list0 = iprot.ReadListBegin();
                    for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                    {
                      tbims.rpc.entity.SL_ORG _elem2;
                      _elem2 = new tbims.rpc.entity.SL_ORG();
                      _elem2.Read(iprot);
                      Success.Add(_elem2);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("querySlOrg_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SL_ORG _iter3 in Success)
                {
                  _iter3.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("querySlOrg_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketApplyQuery_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _applyId;
      private long _app_begin_tm;
      private long _app_end_tm;
      private string _exam_stat;
      private long _outlet_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 申请编号
      /// </summary>
      public string ApplyId
      {
        get
        {
          return _applyId;
        }
        set
        {
          __isset.applyId = true;
          this._applyId = value;
        }
      }

      /// <summary>
      /// 申请开始时间
      /// </summary>
      public long App_begin_tm
      {
        get
        {
          return _app_begin_tm;
        }
        set
        {
          __isset.app_begin_tm = true;
          this._app_begin_tm = value;
        }
      }

      /// <summary>
      /// 申请开始时间
      /// </summary>
      public long App_end_tm
      {
        get
        {
          return _app_end_tm;
        }
        set
        {
          __isset.app_end_tm = true;
          this._app_end_tm = value;
        }
      }

      /// <summary>
      /// 审核状态(0待审核1已审核2已配送3已接收4已拒收)
      /// </summary>
      public string Exam_stat
      {
        get
        {
          return _exam_stat;
        }
        set
        {
          __isset.exam_stat = true;
          this._exam_stat = value;
        }
      }

      /// <summary>
      /// 网点编号
      /// </summary>
      public long Outlet_id
      {
        get
        {
          return _outlet_id;
        }
        set
        {
          __isset.outlet_id = true;
          this._outlet_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool applyId;
        public bool app_begin_tm;
        public bool app_end_tm;
        public bool exam_stat;
        public bool outlet_id;
      }

      public ticketApplyQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ApplyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  App_begin_tm = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I64) {
                  App_end_tm = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 6:
                if (field.Type == TType.String) {
                  Exam_stat = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 7:
                if (field.Type == TType.I64) {
                  Outlet_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketApplyQuery_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (ApplyId != null && __isset.applyId) {
            field.Name = "applyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ApplyId);
            oprot.WriteFieldEnd();
          }
          if (__isset.app_begin_tm) {
            field.Name = "app_begin_tm";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(App_begin_tm);
            oprot.WriteFieldEnd();
          }
          if (__isset.app_end_tm) {
            field.Name = "app_end_tm";
            field.Type = TType.I64;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(App_end_tm);
            oprot.WriteFieldEnd();
          }
          if (Exam_stat != null && __isset.exam_stat) {
            field.Name = "exam_stat";
            field.Type = TType.String;
            field.ID = 6;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Exam_stat);
            oprot.WriteFieldEnd();
          }
          if (__isset.outlet_id) {
            field.Name = "outlet_id";
            field.Type = TType.I64;
            field.ID = 7;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Outlet_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketApplyQuery_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (ApplyId != null && __isset.applyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ApplyId: ");
          __sb.Append(ApplyId);
        }
        if (__isset.app_begin_tm) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("App_begin_tm: ");
          __sb.Append(App_begin_tm);
        }
        if (__isset.app_end_tm) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("App_end_tm: ");
          __sb.Append(App_end_tm);
        }
        if (Exam_stat != null && __isset.exam_stat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Exam_stat: ");
          __sb.Append(Exam_stat);
        }
        if (__isset.outlet_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Outlet_id: ");
          __sb.Append(Outlet_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketApplyQuery_result : TBase
    {
      private List<tbims.rpc.entity.STR_DELIVERY_APPLY> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.STR_DELIVERY_APPLY> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ticketApplyQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.STR_DELIVERY_APPLY>();
                    TList _list4 = iprot.ReadListBegin();
                    for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                    {
                      tbims.rpc.entity.STR_DELIVERY_APPLY _elem6;
                      _elem6 = new tbims.rpc.entity.STR_DELIVERY_APPLY();
                      _elem6.Read(iprot);
                      Success.Add(_elem6);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketApplyQuery_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.STR_DELIVERY_APPLY _iter7 in Success)
                {
                  _iter7.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketApplyQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketApply_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.STR_DELIVERY_APPLY _delivery_apply;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 配送申请信息
      /// </summary>
      public tbims.rpc.entity.STR_DELIVERY_APPLY Delivery_apply
      {
        get
        {
          return _delivery_apply;
        }
        set
        {
          __isset.delivery_apply = true;
          this._delivery_apply = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool delivery_apply;
      }

      public ticketApply_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Delivery_apply = new tbims.rpc.entity.STR_DELIVERY_APPLY();
                  Delivery_apply.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketApply_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Delivery_apply != null && __isset.delivery_apply) {
            field.Name = "delivery_apply";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Delivery_apply.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketApply_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Delivery_apply != null && __isset.delivery_apply) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Delivery_apply: ");
          __sb.Append(Delivery_apply== null ? "<null>" : Delivery_apply.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketApply_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ticketApply_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketApply_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketApply_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketConfirm_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _applyId;
      private string _exam_stat;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 申请编号
      /// </summary>
      public string ApplyId
      {
        get
        {
          return _applyId;
        }
        set
        {
          __isset.applyId = true;
          this._applyId = value;
        }
      }

      /// <summary>
      /// 审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)
      /// </summary>
      public string Exam_stat
      {
        get
        {
          return _exam_stat;
        }
        set
        {
          __isset.exam_stat = true;
          this._exam_stat = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool applyId;
        public bool exam_stat;
      }

      public ticketConfirm_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ApplyId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Exam_stat = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketConfirm_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (ApplyId != null && __isset.applyId) {
            field.Name = "applyId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ApplyId);
            oprot.WriteFieldEnd();
          }
          if (Exam_stat != null && __isset.exam_stat) {
            field.Name = "exam_stat";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Exam_stat);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketConfirm_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (ApplyId != null && __isset.applyId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ApplyId: ");
          __sb.Append(ApplyId);
        }
        if (Exam_stat != null && __isset.exam_stat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Exam_stat: ");
          __sb.Append(Exam_stat);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketConfirm_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ticketConfirm_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketConfirm_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketConfirm_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketInfoQuery_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _ticket_id;
      private long _outlet_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 票号
      /// </summary>
      public long Ticket_id
      {
        get
        {
          return _ticket_id;
        }
        set
        {
          __isset.ticket_id = true;
          this._ticket_id = value;
        }
      }

      /// <summary>
      /// 网点编码
      /// </summary>
      public long Outlet_id
      {
        get
        {
          return _outlet_id;
        }
        set
        {
          __isset.outlet_id = true;
          this._outlet_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool ticket_id;
        public bool outlet_id;
      }

      public ticketInfoQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Ticket_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Outlet_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketInfoQuery_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.ticket_id) {
            field.Name = "ticket_id";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ticket_id);
            oprot.WriteFieldEnd();
          }
          if (__isset.outlet_id) {
            field.Name = "outlet_id";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Outlet_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketInfoQuery_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.ticket_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ticket_id: ");
          __sb.Append(Ticket_id);
        }
        if (__isset.outlet_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Outlet_id: ");
          __sb.Append(Outlet_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketInfoQuery_result : TBase
    {
      private tbims.rpc.entity.STR_TICKET_INFO _success;
      private tbims.rpc.entity.RPCException _e;

      public tbims.rpc.entity.STR_TICKET_INFO Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ticketInfoQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new tbims.rpc.entity.STR_TICKET_INFO();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketInfoQuery_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketInfoQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkInfoQuery_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _ticket_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 票号
      /// </summary>
      public long Ticket_id
      {
        get
        {
          return _ticket_id;
        }
        set
        {
          __isset.ticket_id = true;
          this._ticket_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool ticket_id;
      }

      public checkInfoQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Ticket_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkInfoQuery_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.ticket_id) {
            field.Name = "ticket_id";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ticket_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkInfoQuery_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.ticket_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ticket_id: ");
          __sb.Append(Ticket_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkInfoQuery_result : TBase
    {
      private List<tbims.rpc.entity.SL_CHECK> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SL_CHECK> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public checkInfoQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SL_CHECK>();
                    TList _list8 = iprot.ReadListBegin();
                    for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                    {
                      tbims.rpc.entity.SL_CHECK _elem10;
                      _elem10 = new tbims.rpc.entity.SL_CHECK();
                      _elem10.Read(iprot);
                      Success.Add(_elem10);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkInfoQuery_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SL_CHECK _iter11 in Success)
                {
                  _iter11.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkInfoQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class teamOrderQuery_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _apply_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 申请编号
      /// </summary>
      public string Apply_id
      {
        get
        {
          return _apply_id;
        }
        set
        {
          __isset.apply_id = true;
          this._apply_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool apply_id;
      }

      public teamOrderQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Apply_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("teamOrderQuery_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Apply_id != null && __isset.apply_id) {
            field.Name = "apply_id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Apply_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("teamOrderQuery_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Apply_id != null && __isset.apply_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Apply_id: ");
          __sb.Append(Apply_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class teamOrderQuery_result : TBase
    {
      private tbims.rpc.entity.SL_TEAM_ORDER _success;
      private tbims.rpc.entity.RPCException _e;

      public tbims.rpc.entity.SL_TEAM_ORDER Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public teamOrderQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new tbims.rpc.entity.SL_TEAM_ORDER();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("teamOrderQuery_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("teamOrderQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkSaleTicketBYzy_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _begin_ticket_id;
      private long _ticket_num;
      private long _end_ticket_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 起始票号
      /// </summary>
      public long Begin_ticket_id
      {
        get
        {
          return _begin_ticket_id;
        }
        set
        {
          __isset.begin_ticket_id = true;
          this._begin_ticket_id = value;
        }
      }

      /// <summary>
      /// 数量
      /// </summary>
      public long Ticket_num
      {
        get
        {
          return _ticket_num;
        }
        set
        {
          __isset.ticket_num = true;
          this._ticket_num = value;
        }
      }

      /// <summary>
      /// 起始票号
      /// </summary>
      public long End_ticket_id
      {
        get
        {
          return _end_ticket_id;
        }
        set
        {
          __isset.end_ticket_id = true;
          this._end_ticket_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool begin_ticket_id;
        public bool ticket_num;
        public bool end_ticket_id;
      }

      public checkSaleTicketBYzy_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Begin_ticket_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Ticket_num = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.I64) {
                  End_ticket_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkSaleTicketBYzy_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.begin_ticket_id) {
            field.Name = "begin_ticket_id";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Begin_ticket_id);
            oprot.WriteFieldEnd();
          }
          if (__isset.ticket_num) {
            field.Name = "ticket_num";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Ticket_num);
            oprot.WriteFieldEnd();
          }
          if (__isset.end_ticket_id) {
            field.Name = "end_ticket_id";
            field.Type = TType.I64;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(End_ticket_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkSaleTicketBYzy_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.begin_ticket_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Begin_ticket_id: ");
          __sb.Append(Begin_ticket_id);
        }
        if (__isset.ticket_num) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ticket_num: ");
          __sb.Append(Ticket_num);
        }
        if (__isset.end_ticket_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("End_ticket_id: ");
          __sb.Append(End_ticket_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkSaleTicketBYzy_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public checkSaleTicketBYzy_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkSaleTicketBYzy_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkSaleTicketBYzy_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saleTicket_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private List<tbims.rpc.entity.SL_ORDER> _sl_orders;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 销售订单信息
      /// </summary>
      public List<tbims.rpc.entity.SL_ORDER> Sl_orders
      {
        get
        {
          return _sl_orders;
        }
        set
        {
          __isset.sl_orders = true;
          this._sl_orders = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sl_orders;
      }

      public saleTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Sl_orders = new List<tbims.rpc.entity.SL_ORDER>();
                    TList _list12 = iprot.ReadListBegin();
                    for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                    {
                      tbims.rpc.entity.SL_ORDER _elem14;
                      _elem14 = new tbims.rpc.entity.SL_ORDER();
                      _elem14.Read(iprot);
                      Sl_orders.Add(_elem14);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saleTicket_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_orders != null && __isset.sl_orders) {
            field.Name = "sl_orders";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Sl_orders.Count));
              foreach (tbims.rpc.entity.SL_ORDER _iter15 in Sl_orders)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saleTicket_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sl_orders != null && __isset.sl_orders) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_orders: ");
          __sb.Append(Sl_orders);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saleTicket_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public saleTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saleTicket_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saleTicket_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saleTicketByZG_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.SL_ORDER _sl_order;
      private tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL _sl_order_tickettype_detail;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 销售订单信息
      /// </summary>
      public tbims.rpc.entity.SL_ORDER Sl_order
      {
        get
        {
          return _sl_order;
        }
        set
        {
          __isset.sl_order = true;
          this._sl_order = value;
        }
      }

      /// <summary>
      /// 销售单票种明细表
      /// </summary>
      public tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL Sl_order_tickettype_detail
      {
        get
        {
          return _sl_order_tickettype_detail;
        }
        set
        {
          __isset.sl_order_tickettype_detail = true;
          this._sl_order_tickettype_detail = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sl_order;
        public bool sl_order_tickettype_detail;
      }

      public saleTicketByZG_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Sl_order = new tbims.rpc.entity.SL_ORDER();
                  Sl_order.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.Struct) {
                  Sl_order_tickettype_detail = new tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL();
                  Sl_order_tickettype_detail.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saleTicketByZG_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_order != null && __isset.sl_order) {
            field.Name = "sl_order";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Sl_order.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_order_tickettype_detail != null && __isset.sl_order_tickettype_detail) {
            field.Name = "sl_order_tickettype_detail";
            field.Type = TType.Struct;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            Sl_order_tickettype_detail.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saleTicketByZG_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sl_order != null && __isset.sl_order) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_order: ");
          __sb.Append(Sl_order== null ? "<null>" : Sl_order.ToString());
        }
        if (Sl_order_tickettype_detail != null && __isset.sl_order_tickettype_detail) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_order_tickettype_detail: ");
          __sb.Append(Sl_order_tickettype_detail== null ? "<null>" : Sl_order_tickettype_detail.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saleTicketByZG_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public saleTicketByZG_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saleTicketByZG_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saleTicketByZG_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saleTicketByIdenttyZG_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.SL_ORDER _sl_order;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 销售订单信息
      /// </summary>
      public tbims.rpc.entity.SL_ORDER Sl_order
      {
        get
        {
          return _sl_order;
        }
        set
        {
          __isset.sl_order = true;
          this._sl_order = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sl_order;
      }

      public saleTicketByIdenttyZG_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Sl_order = new tbims.rpc.entity.SL_ORDER();
                  Sl_order.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saleTicketByIdenttyZG_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_order != null && __isset.sl_order) {
            field.Name = "sl_order";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Sl_order.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saleTicketByIdenttyZG_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sl_order != null && __isset.sl_order) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_order: ");
          __sb.Append(Sl_order== null ? "<null>" : Sl_order.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saleTicketByIdenttyZG_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public saleTicketByIdenttyZG_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saleTicketByIdenttyZG_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saleTicketByIdenttyZG_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryTicketByIdenttyId_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _identty_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 销售订单信息
      /// </summary>
      public string Identty_id
      {
        get
        {
          return _identty_id;
        }
        set
        {
          __isset.identty_id = true;
          this._identty_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool identty_id;
      }

      public queryTicketByIdenttyId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Identty_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("queryTicketByIdenttyId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Identty_id != null && __isset.identty_id) {
            field.Name = "identty_id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Identty_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("queryTicketByIdenttyId_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Identty_id != null && __isset.identty_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Identty_id: ");
          __sb.Append(Identty_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryTicketByIdenttyId_result : TBase
    {
      private List<tbims.rpc.entity.SL_ORDER_DETAIL> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SL_ORDER_DETAIL> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public queryTicketByIdenttyId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SL_ORDER_DETAIL>();
                    TList _list16 = iprot.ReadListBegin();
                    for( int _i17 = 0; _i17 < _list16.Count; ++_i17)
                    {
                      tbims.rpc.entity.SL_ORDER_DETAIL _elem18;
                      _elem18 = new tbims.rpc.entity.SL_ORDER_DETAIL();
                      _elem18.Read(iprot);
                      Success.Add(_elem18);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("queryTicketByIdenttyId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SL_ORDER_DETAIL _iter19 in Success)
                {
                  _iter19.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("queryTicketByIdenttyId_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class querTicketPayStatus_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _order_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 销售订单信息
      /// </summary>
      public string Order_id
      {
        get
        {
          return _order_id;
        }
        set
        {
          __isset.order_id = true;
          this._order_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool order_id;
      }

      public querTicketPayStatus_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Order_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("querTicketPayStatus_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Order_id != null && __isset.order_id) {
            field.Name = "order_id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Order_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("querTicketPayStatus_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Order_id != null && __isset.order_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Order_id: ");
          __sb.Append(Order_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class querTicketPayStatus_result : TBase
    {
      private int _success;
      private tbims.rpc.entity.RPCException _e;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public querTicketPayStatus_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("querTicketPayStatus_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("querTicketPayStatus_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelTicketPay_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _order_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 销售订单信息
      /// </summary>
      public string Order_id
      {
        get
        {
          return _order_id;
        }
        set
        {
          __isset.order_id = true;
          this._order_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool order_id;
      }

      public cancelTicketPay_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  Order_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancelTicketPay_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Order_id != null && __isset.order_id) {
            field.Name = "order_id";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Order_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancelTicketPay_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Order_id != null && __isset.order_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Order_id: ");
          __sb.Append(Order_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class cancelTicketPay_result : TBase
    {
      private bool _success;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public cancelTicketPay_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("cancelTicketPay_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("cancelTicketPay_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ejectTicket_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private List<tbims.rpc.entity.SL_ORDER_DETAIL> _sl_order_detail_list;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 销售订单信息
      /// </summary>
      public List<tbims.rpc.entity.SL_ORDER_DETAIL> Sl_order_detail_list
      {
        get
        {
          return _sl_order_detail_list;
        }
        set
        {
          __isset.sl_order_detail_list = true;
          this._sl_order_detail_list = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sl_order_detail_list;
      }

      public ejectTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Sl_order_detail_list = new List<tbims.rpc.entity.SL_ORDER_DETAIL>();
                    TList _list20 = iprot.ReadListBegin();
                    for( int _i21 = 0; _i21 < _list20.Count; ++_i21)
                    {
                      tbims.rpc.entity.SL_ORDER_DETAIL _elem22;
                      _elem22 = new tbims.rpc.entity.SL_ORDER_DETAIL();
                      _elem22.Read(iprot);
                      Sl_order_detail_list.Add(_elem22);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ejectTicket_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_order_detail_list != null && __isset.sl_order_detail_list) {
            field.Name = "sl_order_detail_list";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Sl_order_detail_list.Count));
              foreach (tbims.rpc.entity.SL_ORDER_DETAIL _iter23 in Sl_order_detail_list)
              {
                _iter23.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ejectTicket_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sl_order_detail_list != null && __isset.sl_order_detail_list) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_order_detail_list: ");
          __sb.Append(Sl_order_detail_list);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ejectTicket_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ejectTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ejectTicket_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ejectTicket_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeTicket_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.SL_NETAGENT_ORDER _sl_netagent_order;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 网络代理订单表
      /// </summary>
      public tbims.rpc.entity.SL_NETAGENT_ORDER Sl_netagent_order
      {
        get
        {
          return _sl_netagent_order;
        }
        set
        {
          __isset.sl_netagent_order = true;
          this._sl_netagent_order = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sl_netagent_order;
      }

      public changeTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Sl_netagent_order = new tbims.rpc.entity.SL_NETAGENT_ORDER();
                  Sl_netagent_order.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("changeTicket_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_netagent_order != null && __isset.sl_netagent_order) {
            field.Name = "sl_netagent_order";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Sl_netagent_order.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("changeTicket_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sl_netagent_order != null && __isset.sl_netagent_order) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_netagent_order: ");
          __sb.Append(Sl_netagent_order== null ? "<null>" : Sl_netagent_order.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changeTicket_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public changeTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("changeTicket_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("changeTicket_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class supplyTicket_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.SL_SUPPLY _sl_supply;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 补票信息
      /// </summary>
      public tbims.rpc.entity.SL_SUPPLY Sl_supply
      {
        get
        {
          return _sl_supply;
        }
        set
        {
          __isset.sl_supply = true;
          this._sl_supply = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sl_supply;
      }

      public supplyTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Sl_supply = new tbims.rpc.entity.SL_SUPPLY();
                  Sl_supply.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("supplyTicket_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_supply != null && __isset.sl_supply) {
            field.Name = "sl_supply";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Sl_supply.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("supplyTicket_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sl_supply != null && __isset.sl_supply) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_supply: ");
          __sb.Append(Sl_supply== null ? "<null>" : Sl_supply.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class supplyTicket_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public supplyTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("supplyTicket_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("supplyTicket_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uselessTicket_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> _useless_ticket_infos;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 废票信息
      /// </summary>
      public List<tbims.rpc.entity.SL_USELESS_TICKET_INFO> Useless_ticket_infos
      {
        get
        {
          return _useless_ticket_infos;
        }
        set
        {
          __isset.useless_ticket_infos = true;
          this._useless_ticket_infos = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool useless_ticket_infos;
      }

      public uselessTicket_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Useless_ticket_infos = new List<tbims.rpc.entity.SL_USELESS_TICKET_INFO>();
                    TList _list24 = iprot.ReadListBegin();
                    for( int _i25 = 0; _i25 < _list24.Count; ++_i25)
                    {
                      tbims.rpc.entity.SL_USELESS_TICKET_INFO _elem26;
                      _elem26 = new tbims.rpc.entity.SL_USELESS_TICKET_INFO();
                      _elem26.Read(iprot);
                      Useless_ticket_infos.Add(_elem26);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("uselessTicket_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Useless_ticket_infos != null && __isset.useless_ticket_infos) {
            field.Name = "useless_ticket_infos";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Useless_ticket_infos.Count));
              foreach (tbims.rpc.entity.SL_USELESS_TICKET_INFO _iter27 in Useless_ticket_infos)
              {
                _iter27.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("uselessTicket_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Useless_ticket_infos != null && __isset.useless_ticket_infos) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Useless_ticket_infos: ");
          __sb.Append(Useless_ticket_infos);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uselessTicket_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public uselessTicket_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("uselessTicket_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("uselessTicket_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkInfo_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private List<tbims.rpc.entity.SL_CHECK> _sl_checks;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 检票信息
      /// </summary>
      public List<tbims.rpc.entity.SL_CHECK> Sl_checks
      {
        get
        {
          return _sl_checks;
        }
        set
        {
          __isset.sl_checks = true;
          this._sl_checks = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sl_checks;
      }

      public checkInfo_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.List) {
                  {
                    Sl_checks = new List<tbims.rpc.entity.SL_CHECK>();
                    TList _list28 = iprot.ReadListBegin();
                    for( int _i29 = 0; _i29 < _list28.Count; ++_i29)
                    {
                      tbims.rpc.entity.SL_CHECK _elem30;
                      _elem30 = new tbims.rpc.entity.SL_CHECK();
                      _elem30.Read(iprot);
                      Sl_checks.Add(_elem30);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkInfo_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sl_checks != null && __isset.sl_checks) {
            field.Name = "sl_checks";
            field.Type = TType.List;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Sl_checks.Count));
              foreach (tbims.rpc.entity.SL_CHECK _iter31 in Sl_checks)
              {
                _iter31.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkInfo_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sl_checks != null && __isset.sl_checks) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sl_checks: ");
          __sb.Append(Sl_checks);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkInfo_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public checkInfo_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkInfo_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkInfo_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkTicketOnline_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _checkId;
      private string _ticketClass;
      private string _ticketUid;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 检票表id
      /// </summary>
      public string CheckId
      {
        get
        {
          return _checkId;
        }
        set
        {
          __isset.checkId = true;
          this._checkId = value;
        }
      }

      /// <summary>
      /// 门票类型(2-身份证、3-二维码)
      /// </summary>
      public string TicketClass
      {
        get
        {
          return _ticketClass;
        }
        set
        {
          __isset.ticketClass = true;
          this._ticketClass = value;
        }
      }

      /// <summary>
      /// 票据唯一号
      /// </summary>
      public string TicketUid
      {
        get
        {
          return _ticketUid;
        }
        set
        {
          __isset.ticketUid = true;
          this._ticketUid = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool checkId;
        public bool ticketClass;
        public bool ticketUid;
      }

      public checkTicketOnline_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  CheckId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  TicketClass = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  TicketUid = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkTicketOnline_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (CheckId != null && __isset.checkId) {
            field.Name = "checkId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(CheckId);
            oprot.WriteFieldEnd();
          }
          if (TicketClass != null && __isset.ticketClass) {
            field.Name = "ticketClass";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TicketClass);
            oprot.WriteFieldEnd();
          }
          if (TicketUid != null && __isset.ticketUid) {
            field.Name = "ticketUid";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(TicketUid);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkTicketOnline_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (CheckId != null && __isset.checkId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("CheckId: ");
          __sb.Append(CheckId);
        }
        if (TicketClass != null && __isset.ticketClass) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TicketClass: ");
          __sb.Append(TicketClass);
        }
        if (TicketUid != null && __isset.ticketUid) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("TicketUid: ");
          __sb.Append(TicketUid);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class checkTicketOnline_result : TBase
    {
      private int _success;
      private tbims.rpc.entity.RPCException _e;

      public int Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public checkTicketOnline_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I32) {
                  Success = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("checkTicketOnline_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I32;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("checkTicketOnline_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptSaleDataUser_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _rpt_date;
      private long _outlet_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 统计日期
      /// </summary>
      public long Rpt_date
      {
        get
        {
          return _rpt_date;
        }
        set
        {
          __isset.rpt_date = true;
          this._rpt_date = value;
        }
      }

      /// <summary>
      /// 网点编号
      /// </summary>
      public long Outlet_id
      {
        get
        {
          return _outlet_id;
        }
        set
        {
          __isset.outlet_id = true;
          this._outlet_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool rpt_date;
        public bool outlet_id;
      }

      public rptSaleDataUser_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Rpt_date = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Outlet_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptSaleDataUser_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.rpt_date) {
            field.Name = "rpt_date";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Rpt_date);
            oprot.WriteFieldEnd();
          }
          if (__isset.outlet_id) {
            field.Name = "outlet_id";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Outlet_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptSaleDataUser_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.rpt_date) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rpt_date: ");
          __sb.Append(Rpt_date);
        }
        if (__isset.outlet_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Outlet_id: ");
          __sb.Append(Outlet_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptSaleDataUser_result : TBase
    {
      private List<tbims.rpc.entity.RPT_SALE_DATA_USER> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.RPT_SALE_DATA_USER> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public rptSaleDataUser_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.RPT_SALE_DATA_USER>();
                    TList _list32 = iprot.ReadListBegin();
                    for( int _i33 = 0; _i33 < _list32.Count; ++_i33)
                    {
                      tbims.rpc.entity.RPT_SALE_DATA_USER _elem34;
                      _elem34 = new tbims.rpc.entity.RPT_SALE_DATA_USER();
                      _elem34.Read(iprot);
                      Success.Add(_elem34);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptSaleDataUser_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.RPT_SALE_DATA_USER _iter35 in Success)
                {
                  _iter35.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptSaleDataUser_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptSaleDataOutlet_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _rpt_date;
      private long _outlet_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 统计日期
      /// </summary>
      public long Rpt_date
      {
        get
        {
          return _rpt_date;
        }
        set
        {
          __isset.rpt_date = true;
          this._rpt_date = value;
        }
      }

      /// <summary>
      /// 网点编号
      /// </summary>
      public long Outlet_id
      {
        get
        {
          return _outlet_id;
        }
        set
        {
          __isset.outlet_id = true;
          this._outlet_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool rpt_date;
        public bool outlet_id;
      }

      public rptSaleDataOutlet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Rpt_date = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Outlet_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptSaleDataOutlet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.rpt_date) {
            field.Name = "rpt_date";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Rpt_date);
            oprot.WriteFieldEnd();
          }
          if (__isset.outlet_id) {
            field.Name = "outlet_id";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Outlet_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptSaleDataOutlet_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.rpt_date) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rpt_date: ");
          __sb.Append(Rpt_date);
        }
        if (__isset.outlet_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Outlet_id: ");
          __sb.Append(Outlet_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptSaleDataOutlet_result : TBase
    {
      private List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public rptSaleDataOutlet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.RPT_SALE_DATA_OUTLET>();
                    TList _list36 = iprot.ReadListBegin();
                    for( int _i37 = 0; _i37 < _list36.Count; ++_i37)
                    {
                      tbims.rpc.entity.RPT_SALE_DATA_OUTLET _elem38;
                      _elem38 = new tbims.rpc.entity.RPT_SALE_DATA_OUTLET();
                      _elem38.Read(iprot);
                      Success.Add(_elem38);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptSaleDataOutlet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.RPT_SALE_DATA_OUTLET _iter39 in Success)
                {
                  _iter39.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptSaleDataOutlet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptStrData_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _rpt_date;
      private long _outlet_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 统计日期
      /// </summary>
      public long Rpt_date
      {
        get
        {
          return _rpt_date;
        }
        set
        {
          __isset.rpt_date = true;
          this._rpt_date = value;
        }
      }

      /// <summary>
      /// 网点编号
      /// </summary>
      public long Outlet_id
      {
        get
        {
          return _outlet_id;
        }
        set
        {
          __isset.outlet_id = true;
          this._outlet_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool rpt_date;
        public bool outlet_id;
      }

      public rptStrData_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Rpt_date = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.I64) {
                  Outlet_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptStrData_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.rpt_date) {
            field.Name = "rpt_date";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Rpt_date);
            oprot.WriteFieldEnd();
          }
          if (__isset.outlet_id) {
            field.Name = "outlet_id";
            field.Type = TType.I64;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Outlet_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptStrData_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.rpt_date) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Rpt_date: ");
          __sb.Append(Rpt_date);
        }
        if (__isset.outlet_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Outlet_id: ");
          __sb.Append(Outlet_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptStrData_result : TBase
    {
      private List<tbims.rpc.entity.RPT_STR_DATA> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.RPT_STR_DATA> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public rptStrData_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.RPT_STR_DATA>();
                    TList _list40 = iprot.ReadListBegin();
                    for( int _i41 = 0; _i41 < _list40.Count; ++_i41)
                    {
                      tbims.rpc.entity.RPT_STR_DATA _elem42;
                      _elem42 = new tbims.rpc.entity.RPT_STR_DATA();
                      _elem42.Read(iprot);
                      Success.Add(_elem42);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptStrData_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.RPT_STR_DATA _iter43 in Success)
                {
                  _iter43.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptStrData_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptStrDataNow_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _outlet_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 网点编号
      /// </summary>
      public long Outlet_id
      {
        get
        {
          return _outlet_id;
        }
        set
        {
          __isset.outlet_id = true;
          this._outlet_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool outlet_id;
      }

      public rptStrDataNow_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Outlet_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptStrDataNow_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.outlet_id) {
            field.Name = "outlet_id";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Outlet_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptStrDataNow_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.outlet_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Outlet_id: ");
          __sb.Append(Outlet_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class rptStrDataNow_result : TBase
    {
      private List<tbims.rpc.entity.RPT_STR_DATA> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.RPT_STR_DATA> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public rptStrDataNow_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.RPT_STR_DATA>();
                    TList _list44 = iprot.ReadListBegin();
                    for( int _i45 = 0; _i45 < _list44.Count; ++_i45)
                    {
                      tbims.rpc.entity.RPT_STR_DATA _elem46;
                      _elem46 = new tbims.rpc.entity.RPT_STR_DATA();
                      _elem46.Read(iprot);
                      Success.Add(_elem46);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("rptStrDataNow_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.RPT_STR_DATA _iter47 in Success)
                {
                  _iter47.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("rptStrDataNow_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
