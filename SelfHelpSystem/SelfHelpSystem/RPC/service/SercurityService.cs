/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.service
{
  public partial class SercurityService {
    /// <summary>
    /// 认证管理  增加一个获取权限集的接口
    /// </summary>
    public interface ISync {
      /// <summary>
      /// 客户端登录接口
      /// </summary>
      /// <param name="client_id">客户端id</param>
      /// <param name="userId">用户代码</param>
      /// <param name="password">密码</param>
      tbims.rpc.entity.LOGIN_USER_INFO login(long client_id, string userId, string password);
      /// <summary>
      /// 获取随机数
      /// </summary>
      /// <param name="client_id">客户端id</param>
      string getRandom(long client_id);
      /// <summary>
      /// 外网客户端登录接口
      /// </summary>
      /// <param name="client_id">客户端id</param>
      /// <param name="userId">用户代码</param>
      /// <param name="password">密码</param>
      /// <param name="encDataClient">ukey code</param>
      tbims.rpc.entity.LOGIN_USER_INFO loginByNet(long client_id, string userId, string password, string encDataClient);
      /// <summary>
      /// 修改密码
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="userId">用户代码</param>
      /// <param name="oldPassword">旧密码</param>
      /// <param name="newPassword">新密码</param>
      bool changePass(tbims.rpc.entity.AUTHORIZATION auth, string userId, string oldPassword, string newPassword);
      /// <summary>
      /// 心跳发送包
      /// </summary>
      /// <param name="auth">通用参数</param>
      bool ping(tbims.rpc.entity.AUTHORIZATION auth);
    }

    /// <summary>
    /// 认证管理  增加一个获取权限集的接口
    /// </summary>
    public interface Iface : ISync {
      /// <summary>
      /// 客户端登录接口
      /// </summary>
      /// <param name="client_id">客户端id</param>
      /// <param name="userId">用户代码</param>
      /// <param name="password">密码</param>
      #if SILVERLIGHT
      IAsyncResult Begin_login(AsyncCallback callback, object state, long client_id, string userId, string password);
      tbims.rpc.entity.LOGIN_USER_INFO End_login(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取随机数
      /// </summary>
      /// <param name="client_id">客户端id</param>
      #if SILVERLIGHT
      IAsyncResult Begin_getRandom(AsyncCallback callback, object state, long client_id);
      string End_getRandom(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 外网客户端登录接口
      /// </summary>
      /// <param name="client_id">客户端id</param>
      /// <param name="userId">用户代码</param>
      /// <param name="password">密码</param>
      /// <param name="encDataClient">ukey code</param>
      #if SILVERLIGHT
      IAsyncResult Begin_loginByNet(AsyncCallback callback, object state, long client_id, string userId, string password, string encDataClient);
      tbims.rpc.entity.LOGIN_USER_INFO End_loginByNet(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 修改密码
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="userId">用户代码</param>
      /// <param name="oldPassword">旧密码</param>
      /// <param name="newPassword">新密码</param>
      #if SILVERLIGHT
      IAsyncResult Begin_changePass(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string userId, string oldPassword, string newPassword);
      bool End_changePass(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 心跳发送包
      /// </summary>
      /// <param name="auth">通用参数</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth);
      bool End_ping(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 认证管理  增加一个获取权限集的接口
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_login(AsyncCallback callback, object state, long client_id, string userId, string password)
      {
        return send_login(callback, state, client_id, userId, password);
      }

      public tbims.rpc.entity.LOGIN_USER_INFO End_login(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_login();
      }

      #endif

      /// <summary>
      /// 客户端登录接口
      /// </summary>
      /// <param name="client_id">客户端id</param>
      /// <param name="userId">用户代码</param>
      /// <param name="password">密码</param>
      public tbims.rpc.entity.LOGIN_USER_INFO login(long client_id, string userId, string password)
      {
        #if !SILVERLIGHT
        send_login(client_id, userId, password);
        return recv_login();

        #else
        var asyncResult = Begin_login(null, null, client_id, userId, password);
        return End_login(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_login(AsyncCallback callback, object state, long client_id, string userId, string password)
      #else
      public void send_login(long client_id, string userId, string password)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("login", TMessageType.Call, seqid_));
        login_args args = new login_args();
        args.Client_id = client_id;
        args.UserId = userId;
        args.Password = password;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public tbims.rpc.entity.LOGIN_USER_INFO recv_login()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        login_result result = new login_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "login failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getRandom(AsyncCallback callback, object state, long client_id)
      {
        return send_getRandom(callback, state, client_id);
      }

      public string End_getRandom(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getRandom();
      }

      #endif

      /// <summary>
      /// 获取随机数
      /// </summary>
      /// <param name="client_id">客户端id</param>
      public string getRandom(long client_id)
      {
        #if !SILVERLIGHT
        send_getRandom(client_id);
        return recv_getRandom();

        #else
        var asyncResult = Begin_getRandom(null, null, client_id);
        return End_getRandom(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getRandom(AsyncCallback callback, object state, long client_id)
      #else
      public void send_getRandom(long client_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getRandom", TMessageType.Call, seqid_));
        getRandom_args args = new getRandom_args();
        args.Client_id = client_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public string recv_getRandom()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getRandom_result result = new getRandom_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getRandom failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_loginByNet(AsyncCallback callback, object state, long client_id, string userId, string password, string encDataClient)
      {
        return send_loginByNet(callback, state, client_id, userId, password, encDataClient);
      }

      public tbims.rpc.entity.LOGIN_USER_INFO End_loginByNet(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_loginByNet();
      }

      #endif

      /// <summary>
      /// 外网客户端登录接口
      /// </summary>
      /// <param name="client_id">客户端id</param>
      /// <param name="userId">用户代码</param>
      /// <param name="password">密码</param>
      /// <param name="encDataClient">ukey code</param>
      public tbims.rpc.entity.LOGIN_USER_INFO loginByNet(long client_id, string userId, string password, string encDataClient)
      {
        #if !SILVERLIGHT
        send_loginByNet(client_id, userId, password, encDataClient);
        return recv_loginByNet();

        #else
        var asyncResult = Begin_loginByNet(null, null, client_id, userId, password, encDataClient);
        return End_loginByNet(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_loginByNet(AsyncCallback callback, object state, long client_id, string userId, string password, string encDataClient)
      #else
      public void send_loginByNet(long client_id, string userId, string password, string encDataClient)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("loginByNet", TMessageType.Call, seqid_));
        loginByNet_args args = new loginByNet_args();
        args.Client_id = client_id;
        args.UserId = userId;
        args.Password = password;
        args.EncDataClient = encDataClient;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public tbims.rpc.entity.LOGIN_USER_INFO recv_loginByNet()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        loginByNet_result result = new loginByNet_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "loginByNet failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_changePass(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string userId, string oldPassword, string newPassword)
      {
        return send_changePass(callback, state, auth, userId, oldPassword, newPassword);
      }

      public bool End_changePass(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_changePass();
      }

      #endif

      /// <summary>
      /// 修改密码
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="userId">用户代码</param>
      /// <param name="oldPassword">旧密码</param>
      /// <param name="newPassword">新密码</param>
      public bool changePass(tbims.rpc.entity.AUTHORIZATION auth, string userId, string oldPassword, string newPassword)
      {
        #if !SILVERLIGHT
        send_changePass(auth, userId, oldPassword, newPassword);
        return recv_changePass();

        #else
        var asyncResult = Begin_changePass(null, null, auth, userId, oldPassword, newPassword);
        return End_changePass(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_changePass(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string userId, string oldPassword, string newPassword)
      #else
      public void send_changePass(tbims.rpc.entity.AUTHORIZATION auth, string userId, string oldPassword, string newPassword)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("changePass", TMessageType.Call, seqid_));
        changePass_args args = new changePass_args();
        args.Auth = auth;
        args.UserId = userId;
        args.OldPassword = oldPassword;
        args.NewPassword = newPassword;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_changePass()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        changePass_result result = new changePass_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "changePass failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ping(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      {
        return send_ping(callback, state, auth);
      }

      public bool End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ping();
      }

      #endif

      /// <summary>
      /// 心跳发送包
      /// </summary>
      /// <param name="auth">通用参数</param>
      public bool ping(tbims.rpc.entity.AUTHORIZATION auth)
      {
        #if !SILVERLIGHT
        send_ping(auth);
        return recv_ping();

        #else
        var asyncResult = Begin_ping(null, null, auth);
        return End_ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      #else
      public void send_ping(tbims.rpc.entity.AUTHORIZATION auth)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Auth = auth;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["login"] = login_Process;
        processMap_["getRandom"] = getRandom_Process;
        processMap_["loginByNet"] = loginByNet_Process;
        processMap_["changePass"] = changePass_Process;
        processMap_["ping"] = ping_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void login_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        login_args args = new login_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        login_result result = new login_result();
        try
        {
          try
          {
            result.Success = iface_.login(args.Client_id, args.UserId, args.Password);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("login", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getRandom_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getRandom_args args = new getRandom_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getRandom_result result = new getRandom_result();
        try
        {
          try
          {
            result.Success = iface_.getRandom(args.Client_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("getRandom", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getRandom", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void loginByNet_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        loginByNet_args args = new loginByNet_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        loginByNet_result result = new loginByNet_result();
        try
        {
          try
          {
            result.Success = iface_.loginByNet(args.Client_id, args.UserId, args.Password, args.EncDataClient);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("loginByNet", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("loginByNet", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void changePass_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        changePass_args args = new changePass_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        changePass_result result = new changePass_result();
        try
        {
          try
          {
            result.Success = iface_.changePass(args.Auth, args.UserId, args.OldPassword, args.NewPassword);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("changePass", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("changePass", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        try
        {
          try
          {
            result.Success = iface_.ping(args.Auth);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_args : TBase
    {
      private long _client_id;
      private string _userId;
      private string _password;

      /// <summary>
      /// 客户端id
      /// </summary>
      public long Client_id
      {
        get
        {
          return _client_id;
        }
        set
        {
          __isset.client_id = true;
          this._client_id = value;
        }
      }

      /// <summary>
      /// 用户代码
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// 密码
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool client_id;
        public bool userId;
        public bool password;
      }

      public login_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Client_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.client_id) {
            field.Name = "client_id";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Client_id);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_args(");
        bool __first = true;
        if (__isset.client_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Client_id: ");
          __sb.Append(Client_id);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class login_result : TBase
    {
      private tbims.rpc.entity.LOGIN_USER_INFO _success;
      private tbims.rpc.entity.RPCException _e;

      public tbims.rpc.entity.LOGIN_USER_INFO Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public login_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new tbims.rpc.entity.LOGIN_USER_INFO();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("login_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("login_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRandom_args : TBase
    {
      private long _client_id;

      /// <summary>
      /// 客户端id
      /// </summary>
      public long Client_id
      {
        get
        {
          return _client_id;
        }
        set
        {
          __isset.client_id = true;
          this._client_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool client_id;
      }

      public getRandom_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Client_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getRandom_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.client_id) {
            field.Name = "client_id";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Client_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRandom_args(");
        bool __first = true;
        if (__isset.client_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Client_id: ");
          __sb.Append(Client_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getRandom_result : TBase
    {
      private string _success;
      private tbims.rpc.entity.RPCException _e;

      public string Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getRandom_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.String) {
                  Success = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getRandom_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.String;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              oprot.WriteString(Success);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getRandom_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginByNet_args : TBase
    {
      private long _client_id;
      private string _userId;
      private string _password;
      private string _encDataClient;

      /// <summary>
      /// 客户端id
      /// </summary>
      public long Client_id
      {
        get
        {
          return _client_id;
        }
        set
        {
          __isset.client_id = true;
          this._client_id = value;
        }
      }

      /// <summary>
      /// 用户代码
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// 密码
      /// </summary>
      public string Password
      {
        get
        {
          return _password;
        }
        set
        {
          __isset.password = true;
          this._password = value;
        }
      }

      /// <summary>
      /// ukey code
      /// </summary>
      public string EncDataClient
      {
        get
        {
          return _encDataClient;
        }
        set
        {
          __isset.encDataClient = true;
          this._encDataClient = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool client_id;
        public bool userId;
        public bool password;
        public bool encDataClient;
      }

      public loginByNet_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.I64) {
                  Client_id = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Password = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  EncDataClient = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginByNet_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (__isset.client_id) {
            field.Name = "client_id";
            field.Type = TType.I64;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Client_id);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (Password != null && __isset.password) {
            field.Name = "password";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Password);
            oprot.WriteFieldEnd();
          }
          if (EncDataClient != null && __isset.encDataClient) {
            field.Name = "encDataClient";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(EncDataClient);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginByNet_args(");
        bool __first = true;
        if (__isset.client_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Client_id: ");
          __sb.Append(Client_id);
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (Password != null && __isset.password) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Password: ");
          __sb.Append(Password);
        }
        if (EncDataClient != null && __isset.encDataClient) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EncDataClient: ");
          __sb.Append(EncDataClient);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class loginByNet_result : TBase
    {
      private tbims.rpc.entity.LOGIN_USER_INFO _success;
      private tbims.rpc.entity.RPCException _e;

      public tbims.rpc.entity.LOGIN_USER_INFO Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public loginByNet_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Struct) {
                  Success = new tbims.rpc.entity.LOGIN_USER_INFO();
                  Success.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("loginByNet_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.Struct;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              Success.Write(oprot);
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("loginByNet_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success== null ? "<null>" : Success.ToString());
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changePass_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _userId;
      private string _oldPassword;
      private string _newPassword;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 用户代码
      /// </summary>
      public string UserId
      {
        get
        {
          return _userId;
        }
        set
        {
          __isset.userId = true;
          this._userId = value;
        }
      }

      /// <summary>
      /// 旧密码
      /// </summary>
      public string OldPassword
      {
        get
        {
          return _oldPassword;
        }
        set
        {
          __isset.oldPassword = true;
          this._oldPassword = value;
        }
      }

      /// <summary>
      /// 新密码
      /// </summary>
      public string NewPassword
      {
        get
        {
          return _newPassword;
        }
        set
        {
          __isset.newPassword = true;
          this._newPassword = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool userId;
        public bool oldPassword;
        public bool newPassword;
      }

      public changePass_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  UserId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  OldPassword = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  NewPassword = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("changePass_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (UserId != null && __isset.userId) {
            field.Name = "userId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(UserId);
            oprot.WriteFieldEnd();
          }
          if (OldPassword != null && __isset.oldPassword) {
            field.Name = "oldPassword";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(OldPassword);
            oprot.WriteFieldEnd();
          }
          if (NewPassword != null && __isset.newPassword) {
            field.Name = "newPassword";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(NewPassword);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("changePass_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (UserId != null && __isset.userId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("UserId: ");
          __sb.Append(UserId);
        }
        if (OldPassword != null && __isset.oldPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OldPassword: ");
          __sb.Append(OldPassword);
        }
        if (NewPassword != null && __isset.newPassword) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("NewPassword: ");
          __sb.Append(NewPassword);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class changePass_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public changePass_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("changePass_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("changePass_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
      }

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ping_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ping_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
