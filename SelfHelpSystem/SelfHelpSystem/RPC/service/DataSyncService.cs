/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.service
{
  public partial class DataSyncService {
    /// <summary>
    /// 基础数据服务接口
    /// </summary>
    public interface ISync {
      /// <summary>
      /// 闸机信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_client">闸机信息</param>
      bool gateStateSnyc(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_CLIENT sys_client);
      /// <summary>
      /// 自助售票机状态和票数同步,联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="state">状态</param>
      /// <param name="ticket_num">余票数量(自助售票机用) A:数量,B:数量</param>
      bool ejectTicketStatSync(tbims.rpc.entity.AUTHORIZATION auth, int state, string ticket_num);
      /// <summary>
      /// 员工卡登记表下载
      /// 增量下载
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      List<tbims.rpc.entity.SYS_EMP_REGISTER> empRegisterSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      /// <summary>
      /// 查询员工卡登记表
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_emp_register">员工卡信息</param>
      List<tbims.rpc.entity.SYS_EMP_REGISTER> queryEmpRegister(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register);
      /// <summary>
      /// 保存或更新员工卡登记表
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_emp_register">员工卡信息</param>
      bool saveOrUpdateEmpRegister(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register);
      /// <summary>
      /// 状态启用或禁用
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="empId">员工编号</param>
      /// <param name="stat">状态</param>
      bool empRegisterStat(tbims.rpc.entity.AUTHORIZATION auth, long empId, string stat);
      /// <summary>
      /// 补卡更新芯片ID
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="empId">员工编号</param>
      /// <param name="chip_id">芯片ID</param>
      bool empRegisterChipId(tbims.rpc.entity.AUTHORIZATION auth, long empId, string chip_id);
      /// <summary>
      /// 票种表下载
      /// 全量下载，版本号预留
      /// @return 票种信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      List<tbims.rpc.entity.SYS_TICKET_TYPE> ticketTypeSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      /// <summary>
      /// 场馆表下载
      /// 全量下载
      /// @return 场馆表
      /// </summary>
      /// <param name="auth">通用参数</param>
      List<tbims.rpc.entity.SYS_VENUE> sysVenueSnyc(tbims.rpc.entity.AUTHORIZATION auth);
      /// <summary>
      /// 黑名单表下载
      /// 增量下载
      /// @return 黑名单信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      List<tbims.rpc.entity.SYS_BLACK_LIST> blacklistSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      /// <summary>
      /// 字典表
      /// 全量下载，版本号预留
      /// @return 字典信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      List<tbims.rpc.entity.SYS_DICTIONARY> sysDictionarySnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      /// <summary>
      /// 参数表
      /// 全量下载，版本号预留
      /// @return 参数表
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      List<tbims.rpc.entity.SYS_PAREMETER> sysParemeterSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      /// <summary>
      /// 预售期信息查询
      /// @return 预售期信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      List<tbims.rpc.entity.SL_PERIOD> salePeriodQuery(tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      /// <summary>
      /// 获取服务器时间,精确到秒
      /// </summary>
      /// <param name="auth">通用参数</param>
      long getSystemDateTime(tbims.rpc.entity.AUTHORIZATION auth);
      /// <summary>
      /// 查询、同步终端信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="clientId">终端编号</param>
      /// <param name="clientName"></param>
      /// <param name="clientType">终端类型</param>
      /// <param name="regionIds">类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔</param>
      List<tbims.rpc.entity.SYS_CLIENT> queryClient(tbims.rpc.entity.AUTHORIZATION auth, string clientId, string clientName, string clientType, string regionIds);
      /// <summary>
      /// 客户端日志上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="fileName">文件名</param>
      /// <param name="file">文件</param>
      bool uploadClientLog(tbims.rpc.entity.AUTHORIZATION auth, string fileName, byte[] file);
    }

    /// <summary>
    /// 基础数据服务接口
    /// </summary>
    public interface Iface : ISync {
      /// <summary>
      /// 闸机信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_client">闸机信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_gateStateSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_CLIENT sys_client);
      bool End_gateStateSnyc(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 自助售票机状态和票数同步,联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="state">状态</param>
      /// <param name="ticket_num">余票数量(自助售票机用) A:数量,B:数量</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ejectTicketStatSync(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int state, string ticket_num);
      bool End_ejectTicketStatSync(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 员工卡登记表下载
      /// 增量下载
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_empRegisterSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      List<tbims.rpc.entity.SYS_EMP_REGISTER> End_empRegisterSnyc(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询员工卡登记表
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_emp_register">员工卡信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_queryEmpRegister(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register);
      List<tbims.rpc.entity.SYS_EMP_REGISTER> End_queryEmpRegister(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 保存或更新员工卡登记表
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_emp_register">员工卡信息</param>
      #if SILVERLIGHT
      IAsyncResult Begin_saveOrUpdateEmpRegister(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register);
      bool End_saveOrUpdateEmpRegister(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 状态启用或禁用
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="empId">员工编号</param>
      /// <param name="stat">状态</param>
      #if SILVERLIGHT
      IAsyncResult Begin_empRegisterStat(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long empId, string stat);
      bool End_empRegisterStat(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 补卡更新芯片ID
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="empId">员工编号</param>
      /// <param name="chip_id">芯片ID</param>
      #if SILVERLIGHT
      IAsyncResult Begin_empRegisterChipId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long empId, string chip_id);
      bool End_empRegisterChipId(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 票种表下载
      /// 全量下载，版本号预留
      /// @return 票种信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ticketTypeSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      List<tbims.rpc.entity.SYS_TICKET_TYPE> End_ticketTypeSnyc(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 场馆表下载
      /// 全量下载
      /// @return 场馆表
      /// </summary>
      /// <param name="auth">通用参数</param>
      #if SILVERLIGHT
      IAsyncResult Begin_sysVenueSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth);
      List<tbims.rpc.entity.SYS_VENUE> End_sysVenueSnyc(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 黑名单表下载
      /// 增量下载
      /// @return 黑名单信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_blacklistSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      List<tbims.rpc.entity.SYS_BLACK_LIST> End_blacklistSnyc(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 字典表
      /// 全量下载，版本号预留
      /// @return 字典信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_sysDictionarySnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      List<tbims.rpc.entity.SYS_DICTIONARY> End_sysDictionarySnyc(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 参数表
      /// 全量下载，版本号预留
      /// @return 参数表
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_sysParemeterSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      List<tbims.rpc.entity.SYS_PAREMETER> End_sysParemeterSnyc(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 预售期信息查询
      /// @return 预售期信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      #if SILVERLIGHT
      IAsyncResult Begin_salePeriodQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no);
      List<tbims.rpc.entity.SL_PERIOD> End_salePeriodQuery(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 获取服务器时间,精确到秒
      /// </summary>
      /// <param name="auth">通用参数</param>
      #if SILVERLIGHT
      IAsyncResult Begin_getSystemDateTime(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth);
      long End_getSystemDateTime(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 查询、同步终端信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="clientId">终端编号</param>
      /// <param name="clientName"></param>
      /// <param name="clientType">终端类型</param>
      /// <param name="regionIds">类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔</param>
      #if SILVERLIGHT
      IAsyncResult Begin_queryClient(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string clientId, string clientName, string clientType, string regionIds);
      List<tbims.rpc.entity.SYS_CLIENT> End_queryClient(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 客户端日志上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="fileName">文件名</param>
      /// <param name="file">文件</param>
      #if SILVERLIGHT
      IAsyncResult Begin_uploadClientLog(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string fileName, byte[] file);
      bool End_uploadClientLog(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 基础数据服务接口
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_gateStateSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_CLIENT sys_client)
      {
        return send_gateStateSnyc(callback, state, auth, sys_client);
      }

      public bool End_gateStateSnyc(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_gateStateSnyc();
      }

      #endif

      /// <summary>
      /// 闸机信息上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_client">闸机信息</param>
      public bool gateStateSnyc(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_CLIENT sys_client)
      {
        #if !SILVERLIGHT
        send_gateStateSnyc(auth, sys_client);
        return recv_gateStateSnyc();

        #else
        var asyncResult = Begin_gateStateSnyc(null, null, auth, sys_client);
        return End_gateStateSnyc(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_gateStateSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_CLIENT sys_client)
      #else
      public void send_gateStateSnyc(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_CLIENT sys_client)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("gateStateSnyc", TMessageType.Call, seqid_));
        gateStateSnyc_args args = new gateStateSnyc_args();
        args.Auth = auth;
        args.Sys_client = sys_client;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_gateStateSnyc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        gateStateSnyc_result result = new gateStateSnyc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "gateStateSnyc failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ejectTicketStatSync(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int state, string ticket_num)
      {
        return send_ejectTicketStatSync(callback, state, auth, state, ticket_num);
      }

      public bool End_ejectTicketStatSync(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ejectTicketStatSync();
      }

      #endif

      /// <summary>
      /// 自助售票机状态和票数同步,联机上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="state">状态</param>
      /// <param name="ticket_num">余票数量(自助售票机用) A:数量,B:数量</param>
      public bool ejectTicketStatSync(tbims.rpc.entity.AUTHORIZATION auth, int state, string ticket_num)
      {
        #if !SILVERLIGHT
        send_ejectTicketStatSync(auth, state, ticket_num);
        return recv_ejectTicketStatSync();

        #else
        var asyncResult = Begin_ejectTicketStatSync(null, null, auth, state, ticket_num);
        return End_ejectTicketStatSync(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ejectTicketStatSync(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int state, string ticket_num)
      #else
      public void send_ejectTicketStatSync(tbims.rpc.entity.AUTHORIZATION auth, int state, string ticket_num)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ejectTicketStatSync", TMessageType.Call, seqid_));
        ejectTicketStatSync_args args = new ejectTicketStatSync_args();
        args.Auth = auth;
        args.State = state;
        args.Ticket_num = ticket_num;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ejectTicketStatSync()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ejectTicketStatSync_result result = new ejectTicketStatSync_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ejectTicketStatSync failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_empRegisterSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        return send_empRegisterSnyc(callback, state, auth, version_no);
      }

      public List<tbims.rpc.entity.SYS_EMP_REGISTER> End_empRegisterSnyc(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_empRegisterSnyc();
      }

      #endif

      /// <summary>
      /// 员工卡登记表下载
      /// 增量下载
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      public List<tbims.rpc.entity.SYS_EMP_REGISTER> empRegisterSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        #if !SILVERLIGHT
        send_empRegisterSnyc(auth, version_no);
        return recv_empRegisterSnyc();

        #else
        var asyncResult = Begin_empRegisterSnyc(null, null, auth, version_no);
        return End_empRegisterSnyc(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_empRegisterSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #else
      public void send_empRegisterSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("empRegisterSnyc", TMessageType.Call, seqid_));
        empRegisterSnyc_args args = new empRegisterSnyc_args();
        args.Auth = auth;
        args.Version_no = version_no;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_EMP_REGISTER> recv_empRegisterSnyc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        empRegisterSnyc_result result = new empRegisterSnyc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "empRegisterSnyc failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryEmpRegister(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      {
        return send_queryEmpRegister(callback, state, auth, sys_emp_register);
      }

      public List<tbims.rpc.entity.SYS_EMP_REGISTER> End_queryEmpRegister(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryEmpRegister();
      }

      #endif

      /// <summary>
      /// 查询员工卡登记表
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_emp_register">员工卡信息</param>
      public List<tbims.rpc.entity.SYS_EMP_REGISTER> queryEmpRegister(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      {
        #if !SILVERLIGHT
        send_queryEmpRegister(auth, sys_emp_register);
        return recv_queryEmpRegister();

        #else
        var asyncResult = Begin_queryEmpRegister(null, null, auth, sys_emp_register);
        return End_queryEmpRegister(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryEmpRegister(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      #else
      public void send_queryEmpRegister(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryEmpRegister", TMessageType.Call, seqid_));
        queryEmpRegister_args args = new queryEmpRegister_args();
        args.Auth = auth;
        args.Sys_emp_register = sys_emp_register;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_EMP_REGISTER> recv_queryEmpRegister()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryEmpRegister_result result = new queryEmpRegister_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryEmpRegister failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_saveOrUpdateEmpRegister(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      {
        return send_saveOrUpdateEmpRegister(callback, state, auth, sys_emp_register);
      }

      public bool End_saveOrUpdateEmpRegister(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_saveOrUpdateEmpRegister();
      }

      #endif

      /// <summary>
      /// 保存或更新员工卡登记表
      /// @return 员工卡信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="sys_emp_register">员工卡信息</param>
      public bool saveOrUpdateEmpRegister(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      {
        #if !SILVERLIGHT
        send_saveOrUpdateEmpRegister(auth, sys_emp_register);
        return recv_saveOrUpdateEmpRegister();

        #else
        var asyncResult = Begin_saveOrUpdateEmpRegister(null, null, auth, sys_emp_register);
        return End_saveOrUpdateEmpRegister(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_saveOrUpdateEmpRegister(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      #else
      public void send_saveOrUpdateEmpRegister(tbims.rpc.entity.AUTHORIZATION auth, tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("saveOrUpdateEmpRegister", TMessageType.Call, seqid_));
        saveOrUpdateEmpRegister_args args = new saveOrUpdateEmpRegister_args();
        args.Auth = auth;
        args.Sys_emp_register = sys_emp_register;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_saveOrUpdateEmpRegister()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        saveOrUpdateEmpRegister_result result = new saveOrUpdateEmpRegister_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "saveOrUpdateEmpRegister failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_empRegisterStat(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long empId, string stat)
      {
        return send_empRegisterStat(callback, state, auth, empId, stat);
      }

      public bool End_empRegisterStat(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_empRegisterStat();
      }

      #endif

      /// <summary>
      /// 状态启用或禁用
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="empId">员工编号</param>
      /// <param name="stat">状态</param>
      public bool empRegisterStat(tbims.rpc.entity.AUTHORIZATION auth, long empId, string stat)
      {
        #if !SILVERLIGHT
        send_empRegisterStat(auth, empId, stat);
        return recv_empRegisterStat();

        #else
        var asyncResult = Begin_empRegisterStat(null, null, auth, empId, stat);
        return End_empRegisterStat(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_empRegisterStat(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long empId, string stat)
      #else
      public void send_empRegisterStat(tbims.rpc.entity.AUTHORIZATION auth, long empId, string stat)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("empRegisterStat", TMessageType.Call, seqid_));
        empRegisterStat_args args = new empRegisterStat_args();
        args.Auth = auth;
        args.EmpId = empId;
        args.Stat = stat;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_empRegisterStat()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        empRegisterStat_result result = new empRegisterStat_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "empRegisterStat failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_empRegisterChipId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long empId, string chip_id)
      {
        return send_empRegisterChipId(callback, state, auth, empId, chip_id);
      }

      public bool End_empRegisterChipId(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_empRegisterChipId();
      }

      #endif

      /// <summary>
      /// 补卡更新芯片ID
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="empId">员工编号</param>
      /// <param name="chip_id">芯片ID</param>
      public bool empRegisterChipId(tbims.rpc.entity.AUTHORIZATION auth, long empId, string chip_id)
      {
        #if !SILVERLIGHT
        send_empRegisterChipId(auth, empId, chip_id);
        return recv_empRegisterChipId();

        #else
        var asyncResult = Begin_empRegisterChipId(null, null, auth, empId, chip_id);
        return End_empRegisterChipId(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_empRegisterChipId(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long empId, string chip_id)
      #else
      public void send_empRegisterChipId(tbims.rpc.entity.AUTHORIZATION auth, long empId, string chip_id)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("empRegisterChipId", TMessageType.Call, seqid_));
        empRegisterChipId_args args = new empRegisterChipId_args();
        args.Auth = auth;
        args.EmpId = empId;
        args.Chip_id = chip_id;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_empRegisterChipId()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        empRegisterChipId_result result = new empRegisterChipId_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "empRegisterChipId failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ticketTypeSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        return send_ticketTypeSnyc(callback, state, auth, version_no);
      }

      public List<tbims.rpc.entity.SYS_TICKET_TYPE> End_ticketTypeSnyc(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ticketTypeSnyc();
      }

      #endif

      /// <summary>
      /// 票种表下载
      /// 全量下载，版本号预留
      /// @return 票种信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      public List<tbims.rpc.entity.SYS_TICKET_TYPE> ticketTypeSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        #if !SILVERLIGHT
        send_ticketTypeSnyc(auth, version_no);
        return recv_ticketTypeSnyc();

        #else
        var asyncResult = Begin_ticketTypeSnyc(null, null, auth, version_no);
        return End_ticketTypeSnyc(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ticketTypeSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #else
      public void send_ticketTypeSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ticketTypeSnyc", TMessageType.Call, seqid_));
        ticketTypeSnyc_args args = new ticketTypeSnyc_args();
        args.Auth = auth;
        args.Version_no = version_no;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_TICKET_TYPE> recv_ticketTypeSnyc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ticketTypeSnyc_result result = new ticketTypeSnyc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ticketTypeSnyc failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sysVenueSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      {
        return send_sysVenueSnyc(callback, state, auth);
      }

      public List<tbims.rpc.entity.SYS_VENUE> End_sysVenueSnyc(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sysVenueSnyc();
      }

      #endif

      /// <summary>
      /// 场馆表下载
      /// 全量下载
      /// @return 场馆表
      /// </summary>
      /// <param name="auth">通用参数</param>
      public List<tbims.rpc.entity.SYS_VENUE> sysVenueSnyc(tbims.rpc.entity.AUTHORIZATION auth)
      {
        #if !SILVERLIGHT
        send_sysVenueSnyc(auth);
        return recv_sysVenueSnyc();

        #else
        var asyncResult = Begin_sysVenueSnyc(null, null, auth);
        return End_sysVenueSnyc(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sysVenueSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      #else
      public void send_sysVenueSnyc(tbims.rpc.entity.AUTHORIZATION auth)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sysVenueSnyc", TMessageType.Call, seqid_));
        sysVenueSnyc_args args = new sysVenueSnyc_args();
        args.Auth = auth;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_VENUE> recv_sysVenueSnyc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sysVenueSnyc_result result = new sysVenueSnyc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sysVenueSnyc failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_blacklistSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        return send_blacklistSnyc(callback, state, auth, version_no);
      }

      public List<tbims.rpc.entity.SYS_BLACK_LIST> End_blacklistSnyc(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_blacklistSnyc();
      }

      #endif

      /// <summary>
      /// 黑名单表下载
      /// 增量下载
      /// @return 黑名单信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      public List<tbims.rpc.entity.SYS_BLACK_LIST> blacklistSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        #if !SILVERLIGHT
        send_blacklistSnyc(auth, version_no);
        return recv_blacklistSnyc();

        #else
        var asyncResult = Begin_blacklistSnyc(null, null, auth, version_no);
        return End_blacklistSnyc(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_blacklistSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #else
      public void send_blacklistSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("blacklistSnyc", TMessageType.Call, seqid_));
        blacklistSnyc_args args = new blacklistSnyc_args();
        args.Auth = auth;
        args.Version_no = version_no;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_BLACK_LIST> recv_blacklistSnyc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        blacklistSnyc_result result = new blacklistSnyc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "blacklistSnyc failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sysDictionarySnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        return send_sysDictionarySnyc(callback, state, auth, version_no);
      }

      public List<tbims.rpc.entity.SYS_DICTIONARY> End_sysDictionarySnyc(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sysDictionarySnyc();
      }

      #endif

      /// <summary>
      /// 字典表
      /// 全量下载，版本号预留
      /// @return 字典信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      public List<tbims.rpc.entity.SYS_DICTIONARY> sysDictionarySnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        #if !SILVERLIGHT
        send_sysDictionarySnyc(auth, version_no);
        return recv_sysDictionarySnyc();

        #else
        var asyncResult = Begin_sysDictionarySnyc(null, null, auth, version_no);
        return End_sysDictionarySnyc(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sysDictionarySnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #else
      public void send_sysDictionarySnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sysDictionarySnyc", TMessageType.Call, seqid_));
        sysDictionarySnyc_args args = new sysDictionarySnyc_args();
        args.Auth = auth;
        args.Version_no = version_no;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_DICTIONARY> recv_sysDictionarySnyc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sysDictionarySnyc_result result = new sysDictionarySnyc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sysDictionarySnyc failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_sysParemeterSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        return send_sysParemeterSnyc(callback, state, auth, version_no);
      }

      public List<tbims.rpc.entity.SYS_PAREMETER> End_sysParemeterSnyc(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_sysParemeterSnyc();
      }

      #endif

      /// <summary>
      /// 参数表
      /// 全量下载，版本号预留
      /// @return 参数表
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      public List<tbims.rpc.entity.SYS_PAREMETER> sysParemeterSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        #if !SILVERLIGHT
        send_sysParemeterSnyc(auth, version_no);
        return recv_sysParemeterSnyc();

        #else
        var asyncResult = Begin_sysParemeterSnyc(null, null, auth, version_no);
        return End_sysParemeterSnyc(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_sysParemeterSnyc(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #else
      public void send_sysParemeterSnyc(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("sysParemeterSnyc", TMessageType.Call, seqid_));
        sysParemeterSnyc_args args = new sysParemeterSnyc_args();
        args.Auth = auth;
        args.Version_no = version_no;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_PAREMETER> recv_sysParemeterSnyc()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        sysParemeterSnyc_result result = new sysParemeterSnyc_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "sysParemeterSnyc failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_salePeriodQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        return send_salePeriodQuery(callback, state, auth, version_no);
      }

      public List<tbims.rpc.entity.SL_PERIOD> End_salePeriodQuery(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_salePeriodQuery();
      }

      #endif

      /// <summary>
      /// 预售期信息查询
      /// @return 预售期信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="version_no">版本号</param>
      public List<tbims.rpc.entity.SL_PERIOD> salePeriodQuery(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      {
        #if !SILVERLIGHT
        send_salePeriodQuery(auth, version_no);
        return recv_salePeriodQuery();

        #else
        var asyncResult = Begin_salePeriodQuery(null, null, auth, version_no);
        return End_salePeriodQuery(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_salePeriodQuery(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #else
      public void send_salePeriodQuery(tbims.rpc.entity.AUTHORIZATION auth, long version_no)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("salePeriodQuery", TMessageType.Call, seqid_));
        salePeriodQuery_args args = new salePeriodQuery_args();
        args.Auth = auth;
        args.Version_no = version_no;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SL_PERIOD> recv_salePeriodQuery()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        salePeriodQuery_result result = new salePeriodQuery_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "salePeriodQuery failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSystemDateTime(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      {
        return send_getSystemDateTime(callback, state, auth);
      }

      public long End_getSystemDateTime(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSystemDateTime();
      }

      #endif

      /// <summary>
      /// 获取服务器时间,精确到秒
      /// </summary>
      /// <param name="auth">通用参数</param>
      public long getSystemDateTime(tbims.rpc.entity.AUTHORIZATION auth)
      {
        #if !SILVERLIGHT
        send_getSystemDateTime(auth);
        return recv_getSystemDateTime();

        #else
        var asyncResult = Begin_getSystemDateTime(null, null, auth);
        return End_getSystemDateTime(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSystemDateTime(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      #else
      public void send_getSystemDateTime(tbims.rpc.entity.AUTHORIZATION auth)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSystemDateTime", TMessageType.Call, seqid_));
        getSystemDateTime_args args = new getSystemDateTime_args();
        args.Auth = auth;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getSystemDateTime()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSystemDateTime_result result = new getSystemDateTime_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSystemDateTime failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_queryClient(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string clientId, string clientName, string clientType, string regionIds)
      {
        return send_queryClient(callback, state, auth, clientId, clientName, clientType, regionIds);
      }

      public List<tbims.rpc.entity.SYS_CLIENT> End_queryClient(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_queryClient();
      }

      #endif

      /// <summary>
      /// 查询、同步终端信息
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="clientId">终端编号</param>
      /// <param name="clientName"></param>
      /// <param name="clientType">终端类型</param>
      /// <param name="regionIds">类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔</param>
      public List<tbims.rpc.entity.SYS_CLIENT> queryClient(tbims.rpc.entity.AUTHORIZATION auth, string clientId, string clientName, string clientType, string regionIds)
      {
        #if !SILVERLIGHT
        send_queryClient(auth, clientId, clientName, clientType, regionIds);
        return recv_queryClient();

        #else
        var asyncResult = Begin_queryClient(null, null, auth, clientId, clientName, clientType, regionIds);
        return End_queryClient(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_queryClient(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string clientId, string clientName, string clientType, string regionIds)
      #else
      public void send_queryClient(tbims.rpc.entity.AUTHORIZATION auth, string clientId, string clientName, string clientType, string regionIds)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("queryClient", TMessageType.Call, seqid_));
        queryClient_args args = new queryClient_args();
        args.Auth = auth;
        args.ClientId = clientId;
        args.ClientName = clientName;
        args.ClientType = clientType;
        args.RegionIds = regionIds;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<tbims.rpc.entity.SYS_CLIENT> recv_queryClient()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        queryClient_result result = new queryClient_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "queryClient failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_uploadClientLog(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string fileName, byte[] file)
      {
        return send_uploadClientLog(callback, state, auth, fileName, file);
      }

      public bool End_uploadClientLog(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_uploadClientLog();
      }

      #endif

      /// <summary>
      /// 客户端日志上传
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="fileName">文件名</param>
      /// <param name="file">文件</param>
      public bool uploadClientLog(tbims.rpc.entity.AUTHORIZATION auth, string fileName, byte[] file)
      {
        #if !SILVERLIGHT
        send_uploadClientLog(auth, fileName, file);
        return recv_uploadClientLog();

        #else
        var asyncResult = Begin_uploadClientLog(null, null, auth, fileName, file);
        return End_uploadClientLog(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_uploadClientLog(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, string fileName, byte[] file)
      #else
      public void send_uploadClientLog(tbims.rpc.entity.AUTHORIZATION auth, string fileName, byte[] file)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("uploadClientLog", TMessageType.Call, seqid_));
        uploadClientLog_args args = new uploadClientLog_args();
        args.Auth = auth;
        args.FileName = fileName;
        args.File = file;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_uploadClientLog()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        uploadClientLog_result result = new uploadClientLog_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uploadClientLog failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["gateStateSnyc"] = gateStateSnyc_Process;
        processMap_["ejectTicketStatSync"] = ejectTicketStatSync_Process;
        processMap_["empRegisterSnyc"] = empRegisterSnyc_Process;
        processMap_["queryEmpRegister"] = queryEmpRegister_Process;
        processMap_["saveOrUpdateEmpRegister"] = saveOrUpdateEmpRegister_Process;
        processMap_["empRegisterStat"] = empRegisterStat_Process;
        processMap_["empRegisterChipId"] = empRegisterChipId_Process;
        processMap_["ticketTypeSnyc"] = ticketTypeSnyc_Process;
        processMap_["sysVenueSnyc"] = sysVenueSnyc_Process;
        processMap_["blacklistSnyc"] = blacklistSnyc_Process;
        processMap_["sysDictionarySnyc"] = sysDictionarySnyc_Process;
        processMap_["sysParemeterSnyc"] = sysParemeterSnyc_Process;
        processMap_["salePeriodQuery"] = salePeriodQuery_Process;
        processMap_["getSystemDateTime"] = getSystemDateTime_Process;
        processMap_["queryClient"] = queryClient_Process;
        processMap_["uploadClientLog"] = uploadClientLog_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void gateStateSnyc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        gateStateSnyc_args args = new gateStateSnyc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        gateStateSnyc_result result = new gateStateSnyc_result();
        try
        {
          try
          {
            result.Success = iface_.gateStateSnyc(args.Auth, args.Sys_client);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("gateStateSnyc", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("gateStateSnyc", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ejectTicketStatSync_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ejectTicketStatSync_args args = new ejectTicketStatSync_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ejectTicketStatSync_result result = new ejectTicketStatSync_result();
        try
        {
          try
          {
            result.Success = iface_.ejectTicketStatSync(args.Auth, args.State, args.Ticket_num);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ejectTicketStatSync", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ejectTicketStatSync", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void empRegisterSnyc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        empRegisterSnyc_args args = new empRegisterSnyc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        empRegisterSnyc_result result = new empRegisterSnyc_result();
        try
        {
          try
          {
            result.Success = iface_.empRegisterSnyc(args.Auth, args.Version_no);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("empRegisterSnyc", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("empRegisterSnyc", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryEmpRegister_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryEmpRegister_args args = new queryEmpRegister_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryEmpRegister_result result = new queryEmpRegister_result();
        try
        {
          try
          {
            result.Success = iface_.queryEmpRegister(args.Auth, args.Sys_emp_register);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("queryEmpRegister", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("queryEmpRegister", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void saveOrUpdateEmpRegister_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        saveOrUpdateEmpRegister_args args = new saveOrUpdateEmpRegister_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        saveOrUpdateEmpRegister_result result = new saveOrUpdateEmpRegister_result();
        try
        {
          try
          {
            result.Success = iface_.saveOrUpdateEmpRegister(args.Auth, args.Sys_emp_register);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("saveOrUpdateEmpRegister", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("saveOrUpdateEmpRegister", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void empRegisterStat_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        empRegisterStat_args args = new empRegisterStat_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        empRegisterStat_result result = new empRegisterStat_result();
        try
        {
          try
          {
            result.Success = iface_.empRegisterStat(args.Auth, args.EmpId, args.Stat);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("empRegisterStat", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("empRegisterStat", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void empRegisterChipId_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        empRegisterChipId_args args = new empRegisterChipId_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        empRegisterChipId_result result = new empRegisterChipId_result();
        try
        {
          try
          {
            result.Success = iface_.empRegisterChipId(args.Auth, args.EmpId, args.Chip_id);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("empRegisterChipId", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("empRegisterChipId", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ticketTypeSnyc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ticketTypeSnyc_args args = new ticketTypeSnyc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ticketTypeSnyc_result result = new ticketTypeSnyc_result();
        try
        {
          try
          {
            result.Success = iface_.ticketTypeSnyc(args.Auth, args.Version_no);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ticketTypeSnyc", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ticketTypeSnyc", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sysVenueSnyc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sysVenueSnyc_args args = new sysVenueSnyc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sysVenueSnyc_result result = new sysVenueSnyc_result();
        try
        {
          try
          {
            result.Success = iface_.sysVenueSnyc(args.Auth);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("sysVenueSnyc", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sysVenueSnyc", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void blacklistSnyc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        blacklistSnyc_args args = new blacklistSnyc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        blacklistSnyc_result result = new blacklistSnyc_result();
        try
        {
          try
          {
            result.Success = iface_.blacklistSnyc(args.Auth, args.Version_no);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("blacklistSnyc", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("blacklistSnyc", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sysDictionarySnyc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sysDictionarySnyc_args args = new sysDictionarySnyc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sysDictionarySnyc_result result = new sysDictionarySnyc_result();
        try
        {
          try
          {
            result.Success = iface_.sysDictionarySnyc(args.Auth, args.Version_no);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("sysDictionarySnyc", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sysDictionarySnyc", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void sysParemeterSnyc_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        sysParemeterSnyc_args args = new sysParemeterSnyc_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        sysParemeterSnyc_result result = new sysParemeterSnyc_result();
        try
        {
          try
          {
            result.Success = iface_.sysParemeterSnyc(args.Auth, args.Version_no);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("sysParemeterSnyc", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("sysParemeterSnyc", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void salePeriodQuery_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        salePeriodQuery_args args = new salePeriodQuery_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        salePeriodQuery_result result = new salePeriodQuery_result();
        try
        {
          try
          {
            result.Success = iface_.salePeriodQuery(args.Auth, args.Version_no);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("salePeriodQuery", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("salePeriodQuery", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSystemDateTime_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSystemDateTime_args args = new getSystemDateTime_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSystemDateTime_result result = new getSystemDateTime_result();
        try
        {
          try
          {
            result.Success = iface_.getSystemDateTime(args.Auth);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("getSystemDateTime", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("getSystemDateTime", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void queryClient_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        queryClient_args args = new queryClient_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        queryClient_result result = new queryClient_result();
        try
        {
          try
          {
            result.Success = iface_.queryClient(args.Auth, args.ClientId, args.ClientName, args.ClientType, args.RegionIds);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("queryClient", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("queryClient", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void uploadClientLog_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        uploadClientLog_args args = new uploadClientLog_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        uploadClientLog_result result = new uploadClientLog_result();
        try
        {
          try
          {
            result.Success = iface_.uploadClientLog(args.Auth, args.FileName, args.File);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("uploadClientLog", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("uploadClientLog", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class gateStateSnyc_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.SYS_CLIENT _sys_client;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 闸机信息
      /// </summary>
      public tbims.rpc.entity.SYS_CLIENT Sys_client
      {
        get
        {
          return _sys_client;
        }
        set
        {
          __isset.sys_client = true;
          this._sys_client = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sys_client;
      }

      public gateStateSnyc_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Sys_client = new tbims.rpc.entity.SYS_CLIENT();
                  Sys_client.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("gateStateSnyc_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sys_client != null && __isset.sys_client) {
            field.Name = "sys_client";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Sys_client.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("gateStateSnyc_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sys_client != null && __isset.sys_client) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sys_client: ");
          __sb.Append(Sys_client== null ? "<null>" : Sys_client.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class gateStateSnyc_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public gateStateSnyc_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("gateStateSnyc_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("gateStateSnyc_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ejectTicketStatSync_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private int _state;
      private string _ticket_num;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 状态
      /// </summary>
      public int State
      {
        get
        {
          return _state;
        }
        set
        {
          __isset.state = true;
          this._state = value;
        }
      }

      /// <summary>
      /// 余票数量(自助售票机用) A:数量,B:数量
      /// </summary>
      public string Ticket_num
      {
        get
        {
          return _ticket_num;
        }
        set
        {
          __isset.ticket_num = true;
          this._ticket_num = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool state;
        public bool ticket_num;
      }

      public ejectTicketStatSync_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  State = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Ticket_num = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ejectTicketStatSync_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.state) {
            field.Name = "state";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(State);
            oprot.WriteFieldEnd();
          }
          if (Ticket_num != null && __isset.ticket_num) {
            field.Name = "ticket_num";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Ticket_num);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ejectTicketStatSync_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.state) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("State: ");
          __sb.Append(State);
        }
        if (Ticket_num != null && __isset.ticket_num) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Ticket_num: ");
          __sb.Append(Ticket_num);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ejectTicketStatSync_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ejectTicketStatSync_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ejectTicketStatSync_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ejectTicketStatSync_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class empRegisterSnyc_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _version_no;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 版本号
      /// </summary>
      public long Version_no
      {
        get
        {
          return _version_no;
        }
        set
        {
          __isset.version_no = true;
          this._version_no = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool version_no;
      }

      public empRegisterSnyc_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version_no = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("empRegisterSnyc_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.version_no) {
            field.Name = "version_no";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version_no);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("empRegisterSnyc_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.version_no) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version_no: ");
          __sb.Append(Version_no);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class empRegisterSnyc_result : TBase
    {
      private List<tbims.rpc.entity.SYS_EMP_REGISTER> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_EMP_REGISTER> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public empRegisterSnyc_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_EMP_REGISTER>();
                    TList _list68 = iprot.ReadListBegin();
                    for( int _i69 = 0; _i69 < _list68.Count; ++_i69)
                    {
                      tbims.rpc.entity.SYS_EMP_REGISTER _elem70;
                      _elem70 = new tbims.rpc.entity.SYS_EMP_REGISTER();
                      _elem70.Read(iprot);
                      Success.Add(_elem70);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("empRegisterSnyc_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_EMP_REGISTER _iter71 in Success)
                {
                  _iter71.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("empRegisterSnyc_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryEmpRegister_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.SYS_EMP_REGISTER _sys_emp_register;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 员工卡信息
      /// </summary>
      public tbims.rpc.entity.SYS_EMP_REGISTER Sys_emp_register
      {
        get
        {
          return _sys_emp_register;
        }
        set
        {
          __isset.sys_emp_register = true;
          this._sys_emp_register = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sys_emp_register;
      }

      public queryEmpRegister_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Sys_emp_register = new tbims.rpc.entity.SYS_EMP_REGISTER();
                  Sys_emp_register.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("queryEmpRegister_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sys_emp_register != null && __isset.sys_emp_register) {
            field.Name = "sys_emp_register";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Sys_emp_register.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("queryEmpRegister_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sys_emp_register != null && __isset.sys_emp_register) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sys_emp_register: ");
          __sb.Append(Sys_emp_register== null ? "<null>" : Sys_emp_register.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryEmpRegister_result : TBase
    {
      private List<tbims.rpc.entity.SYS_EMP_REGISTER> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_EMP_REGISTER> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public queryEmpRegister_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_EMP_REGISTER>();
                    TList _list72 = iprot.ReadListBegin();
                    for( int _i73 = 0; _i73 < _list72.Count; ++_i73)
                    {
                      tbims.rpc.entity.SYS_EMP_REGISTER _elem74;
                      _elem74 = new tbims.rpc.entity.SYS_EMP_REGISTER();
                      _elem74.Read(iprot);
                      Success.Add(_elem74);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("queryEmpRegister_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_EMP_REGISTER _iter75 in Success)
                {
                  _iter75.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("queryEmpRegister_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveOrUpdateEmpRegister_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private tbims.rpc.entity.SYS_EMP_REGISTER _sys_emp_register;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 员工卡信息
      /// </summary>
      public tbims.rpc.entity.SYS_EMP_REGISTER Sys_emp_register
      {
        get
        {
          return _sys_emp_register;
        }
        set
        {
          __isset.sys_emp_register = true;
          this._sys_emp_register = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool sys_emp_register;
      }

      public saveOrUpdateEmpRegister_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.Struct) {
                  Sys_emp_register = new tbims.rpc.entity.SYS_EMP_REGISTER();
                  Sys_emp_register.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saveOrUpdateEmpRegister_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (Sys_emp_register != null && __isset.sys_emp_register) {
            field.Name = "sys_emp_register";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Sys_emp_register.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveOrUpdateEmpRegister_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (Sys_emp_register != null && __isset.sys_emp_register) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Sys_emp_register: ");
          __sb.Append(Sys_emp_register== null ? "<null>" : Sys_emp_register.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class saveOrUpdateEmpRegister_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public saveOrUpdateEmpRegister_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("saveOrUpdateEmpRegister_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("saveOrUpdateEmpRegister_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class empRegisterStat_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _empId;
      private string _stat;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 员工编号
      /// </summary>
      public long EmpId
      {
        get
        {
          return _empId;
        }
        set
        {
          __isset.empId = true;
          this._empId = value;
        }
      }

      /// <summary>
      /// 状态
      /// </summary>
      public string Stat
      {
        get
        {
          return _stat;
        }
        set
        {
          __isset.stat = true;
          this._stat = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool empId;
        public bool stat;
      }

      public empRegisterStat_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  EmpId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Stat = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("empRegisterStat_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.empId) {
            field.Name = "empId";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(EmpId);
            oprot.WriteFieldEnd();
          }
          if (Stat != null && __isset.stat) {
            field.Name = "stat";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Stat);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("empRegisterStat_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.empId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmpId: ");
          __sb.Append(EmpId);
        }
        if (Stat != null && __isset.stat) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Stat: ");
          __sb.Append(Stat);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class empRegisterStat_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public empRegisterStat_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("empRegisterStat_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("empRegisterStat_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class empRegisterChipId_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _empId;
      private string _chip_id;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 员工编号
      /// </summary>
      public long EmpId
      {
        get
        {
          return _empId;
        }
        set
        {
          __isset.empId = true;
          this._empId = value;
        }
      }

      /// <summary>
      /// 芯片ID
      /// </summary>
      public string Chip_id
      {
        get
        {
          return _chip_id;
        }
        set
        {
          __isset.chip_id = true;
          this._chip_id = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool empId;
        public bool chip_id;
      }

      public empRegisterChipId_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  EmpId = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  Chip_id = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("empRegisterChipId_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.empId) {
            field.Name = "empId";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(EmpId);
            oprot.WriteFieldEnd();
          }
          if (Chip_id != null && __isset.chip_id) {
            field.Name = "chip_id";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Chip_id);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("empRegisterChipId_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.empId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("EmpId: ");
          __sb.Append(EmpId);
        }
        if (Chip_id != null && __isset.chip_id) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Chip_id: ");
          __sb.Append(Chip_id);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class empRegisterChipId_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public empRegisterChipId_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("empRegisterChipId_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("empRegisterChipId_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketTypeSnyc_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _version_no;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 版本号
      /// </summary>
      public long Version_no
      {
        get
        {
          return _version_no;
        }
        set
        {
          __isset.version_no = true;
          this._version_no = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool version_no;
      }

      public ticketTypeSnyc_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version_no = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketTypeSnyc_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.version_no) {
            field.Name = "version_no";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version_no);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketTypeSnyc_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.version_no) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version_no: ");
          __sb.Append(Version_no);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ticketTypeSnyc_result : TBase
    {
      private List<tbims.rpc.entity.SYS_TICKET_TYPE> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_TICKET_TYPE> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ticketTypeSnyc_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_TICKET_TYPE>();
                    TList _list76 = iprot.ReadListBegin();
                    for( int _i77 = 0; _i77 < _list76.Count; ++_i77)
                    {
                      tbims.rpc.entity.SYS_TICKET_TYPE _elem78;
                      _elem78 = new tbims.rpc.entity.SYS_TICKET_TYPE();
                      _elem78.Read(iprot);
                      Success.Add(_elem78);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ticketTypeSnyc_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_TICKET_TYPE _iter79 in Success)
                {
                  _iter79.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ticketTypeSnyc_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sysVenueSnyc_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
      }

      public sysVenueSnyc_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sysVenueSnyc_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sysVenueSnyc_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sysVenueSnyc_result : TBase
    {
      private List<tbims.rpc.entity.SYS_VENUE> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_VENUE> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public sysVenueSnyc_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_VENUE>();
                    TList _list80 = iprot.ReadListBegin();
                    for( int _i81 = 0; _i81 < _list80.Count; ++_i81)
                    {
                      tbims.rpc.entity.SYS_VENUE _elem82;
                      _elem82 = new tbims.rpc.entity.SYS_VENUE();
                      _elem82.Read(iprot);
                      Success.Add(_elem82);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sysVenueSnyc_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_VENUE _iter83 in Success)
                {
                  _iter83.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sysVenueSnyc_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class blacklistSnyc_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _version_no;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 版本号
      /// </summary>
      public long Version_no
      {
        get
        {
          return _version_no;
        }
        set
        {
          __isset.version_no = true;
          this._version_no = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool version_no;
      }

      public blacklistSnyc_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version_no = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("blacklistSnyc_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.version_no) {
            field.Name = "version_no";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version_no);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("blacklistSnyc_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.version_no) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version_no: ");
          __sb.Append(Version_no);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class blacklistSnyc_result : TBase
    {
      private List<tbims.rpc.entity.SYS_BLACK_LIST> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_BLACK_LIST> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public blacklistSnyc_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_BLACK_LIST>();
                    TList _list84 = iprot.ReadListBegin();
                    for( int _i85 = 0; _i85 < _list84.Count; ++_i85)
                    {
                      tbims.rpc.entity.SYS_BLACK_LIST _elem86;
                      _elem86 = new tbims.rpc.entity.SYS_BLACK_LIST();
                      _elem86.Read(iprot);
                      Success.Add(_elem86);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("blacklistSnyc_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_BLACK_LIST _iter87 in Success)
                {
                  _iter87.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("blacklistSnyc_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sysDictionarySnyc_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _version_no;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 版本号
      /// </summary>
      public long Version_no
      {
        get
        {
          return _version_no;
        }
        set
        {
          __isset.version_no = true;
          this._version_no = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool version_no;
      }

      public sysDictionarySnyc_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version_no = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sysDictionarySnyc_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.version_no) {
            field.Name = "version_no";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version_no);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sysDictionarySnyc_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.version_no) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version_no: ");
          __sb.Append(Version_no);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sysDictionarySnyc_result : TBase
    {
      private List<tbims.rpc.entity.SYS_DICTIONARY> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_DICTIONARY> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public sysDictionarySnyc_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_DICTIONARY>();
                    TList _list88 = iprot.ReadListBegin();
                    for( int _i89 = 0; _i89 < _list88.Count; ++_i89)
                    {
                      tbims.rpc.entity.SYS_DICTIONARY _elem90;
                      _elem90 = new tbims.rpc.entity.SYS_DICTIONARY();
                      _elem90.Read(iprot);
                      Success.Add(_elem90);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sysDictionarySnyc_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_DICTIONARY _iter91 in Success)
                {
                  _iter91.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sysDictionarySnyc_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sysParemeterSnyc_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _version_no;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 版本号
      /// </summary>
      public long Version_no
      {
        get
        {
          return _version_no;
        }
        set
        {
          __isset.version_no = true;
          this._version_no = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool version_no;
      }

      public sysParemeterSnyc_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version_no = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sysParemeterSnyc_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.version_no) {
            field.Name = "version_no";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version_no);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sysParemeterSnyc_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.version_no) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version_no: ");
          __sb.Append(Version_no);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class sysParemeterSnyc_result : TBase
    {
      private List<tbims.rpc.entity.SYS_PAREMETER> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_PAREMETER> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public sysParemeterSnyc_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_PAREMETER>();
                    TList _list92 = iprot.ReadListBegin();
                    for( int _i93 = 0; _i93 < _list92.Count; ++_i93)
                    {
                      tbims.rpc.entity.SYS_PAREMETER _elem94;
                      _elem94 = new tbims.rpc.entity.SYS_PAREMETER();
                      _elem94.Read(iprot);
                      Success.Add(_elem94);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("sysParemeterSnyc_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_PAREMETER _iter95 in Success)
                {
                  _iter95.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("sysParemeterSnyc_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class salePeriodQuery_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private long _version_no;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 版本号
      /// </summary>
      public long Version_no
      {
        get
        {
          return _version_no;
        }
        set
        {
          __isset.version_no = true;
          this._version_no = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool version_no;
      }

      public salePeriodQuery_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I64) {
                  Version_no = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("salePeriodQuery_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.version_no) {
            field.Name = "version_no";
            field.Type = TType.I64;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Version_no);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("salePeriodQuery_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.version_no) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Version_no: ");
          __sb.Append(Version_no);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class salePeriodQuery_result : TBase
    {
      private List<tbims.rpc.entity.SL_PERIOD> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SL_PERIOD> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public salePeriodQuery_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SL_PERIOD>();
                    TList _list96 = iprot.ReadListBegin();
                    for( int _i97 = 0; _i97 < _list96.Count; ++_i97)
                    {
                      tbims.rpc.entity.SL_PERIOD _elem98;
                      _elem98 = new tbims.rpc.entity.SL_PERIOD();
                      _elem98.Read(iprot);
                      Success.Add(_elem98);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("salePeriodQuery_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SL_PERIOD _iter99 in Success)
                {
                  _iter99.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("salePeriodQuery_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSystemDateTime_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
      }

      public getSystemDateTime_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSystemDateTime_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSystemDateTime_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSystemDateTime_result : TBase
    {
      private long _success;
      private tbims.rpc.entity.RPCException _e;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public getSystemDateTime_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.I64) {
                  Success = iprot.ReadI64();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("getSystemDateTime_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.I64;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteI64(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("getSystemDateTime_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryClient_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _clientId;
      private string _clientName;
      private string _clientType;
      private string _regionIds;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 终端编号
      /// </summary>
      public string ClientId
      {
        get
        {
          return _clientId;
        }
        set
        {
          __isset.clientId = true;
          this._clientId = value;
        }
      }

      public string ClientName
      {
        get
        {
          return _clientName;
        }
        set
        {
          __isset.clientName = true;
          this._clientName = value;
        }
      }

      /// <summary>
      /// 终端类型
      /// </summary>
      public string ClientType
      {
        get
        {
          return _clientType;
        }
        set
        {
          __isset.clientType = true;
          this._clientType = value;
        }
      }

      /// <summary>
      /// 类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔
      /// </summary>
      public string RegionIds
      {
        get
        {
          return _regionIds;
        }
        set
        {
          __isset.regionIds = true;
          this._regionIds = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool clientId;
        public bool clientName;
        public bool clientType;
        public bool regionIds;
      }

      public queryClient_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  ClientId = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  ClientName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 4:
                if (field.Type == TType.String) {
                  ClientType = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 5:
                if (field.Type == TType.String) {
                  RegionIds = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("queryClient_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (ClientId != null && __isset.clientId) {
            field.Name = "clientId";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClientId);
            oprot.WriteFieldEnd();
          }
          if (ClientName != null && __isset.clientName) {
            field.Name = "clientName";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClientName);
            oprot.WriteFieldEnd();
          }
          if (ClientType != null && __isset.clientType) {
            field.Name = "clientType";
            field.Type = TType.String;
            field.ID = 4;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(ClientType);
            oprot.WriteFieldEnd();
          }
          if (RegionIds != null && __isset.regionIds) {
            field.Name = "regionIds";
            field.Type = TType.String;
            field.ID = 5;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(RegionIds);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("queryClient_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (ClientId != null && __isset.clientId) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientId: ");
          __sb.Append(ClientId);
        }
        if (ClientName != null && __isset.clientName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientName: ");
          __sb.Append(ClientName);
        }
        if (ClientType != null && __isset.clientType) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("ClientType: ");
          __sb.Append(ClientType);
        }
        if (RegionIds != null && __isset.regionIds) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("RegionIds: ");
          __sb.Append(RegionIds);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class queryClient_result : TBase
    {
      private List<tbims.rpc.entity.SYS_CLIENT> _success;
      private tbims.rpc.entity.RPCException _e;

      public List<tbims.rpc.entity.SYS_CLIENT> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public queryClient_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.List) {
                  {
                    Success = new List<tbims.rpc.entity.SYS_CLIENT>();
                    TList _list100 = iprot.ReadListBegin();
                    for( int _i101 = 0; _i101 < _list100.Count; ++_i101)
                    {
                      tbims.rpc.entity.SYS_CLIENT _elem102;
                      _elem102 = new tbims.rpc.entity.SYS_CLIENT();
                      _elem102.Read(iprot);
                      Success.Add(_elem102);
                    }
                    iprot.ReadListEnd();
                  }
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("queryClient_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            if (Success != null) {
              field.Name = "Success";
              field.Type = TType.List;
              field.ID = 0;
              oprot.WriteFieldBegin(field);
              {
                oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
                foreach (tbims.rpc.entity.SYS_CLIENT _iter103 in Success)
                {
                  _iter103.Write(oprot);
                }
                oprot.WriteListEnd();
              }
              oprot.WriteFieldEnd();
            }
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("queryClient_result(");
        bool __first = true;
        if (Success != null && __isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadClientLog_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private string _fileName;
      private byte[] _file;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 文件名
      /// </summary>
      public string FileName
      {
        get
        {
          return _fileName;
        }
        set
        {
          __isset.fileName = true;
          this._fileName = value;
        }
      }

      /// <summary>
      /// 文件
      /// </summary>
      public byte[] File
      {
        get
        {
          return _file;
        }
        set
        {
          __isset.file = true;
          this._file = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool fileName;
        public bool file;
      }

      public uploadClientLog_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.String) {
                  FileName = iprot.ReadString();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 3:
                if (field.Type == TType.String) {
                  File = iprot.ReadBinary();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("uploadClientLog_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (FileName != null && __isset.fileName) {
            field.Name = "fileName";
            field.Type = TType.String;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(FileName);
            oprot.WriteFieldEnd();
          }
          if (File != null && __isset.file) {
            field.Name = "file";
            field.Type = TType.String;
            field.ID = 3;
            oprot.WriteFieldBegin(field);
            oprot.WriteBinary(File);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("uploadClientLog_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (FileName != null && __isset.fileName) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("FileName: ");
          __sb.Append(FileName);
        }
        if (File != null && __isset.file) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("File: ");
          __sb.Append(File);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class uploadClientLog_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public uploadClientLog_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("uploadClientLog_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("uploadClientLog_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
