/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace tbims.rpc.service
{
  public partial class SystemService {
    /// <summary>
    /// 闸机管理(服务端部署在闸机客户端)
    /// </summary>
    public interface ISync {
      /// <summary>
      /// 运营模式切换
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="gateMode">模式状态</param>
      bool gateModeChange(tbims.rpc.entity.AUTHORIZATION auth, int gateMode);
      /// <summary>
      /// 闸机重启或关闭
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="optCode">状态1-重启2-关闭系统</param>
      bool gateSysShutdown(tbims.rpc.entity.AUTHORIZATION auth, int optCode);
      /// <summary>
      /// 心跳发送包
      /// </summary>
      /// <param name="auth">通用参数</param>
      bool ping(tbims.rpc.entity.AUTHORIZATION auth);
    }

    /// <summary>
    /// 闸机管理(服务端部署在闸机客户端)
    /// </summary>
    public interface Iface : ISync {
      /// <summary>
      /// 运营模式切换
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="gateMode">模式状态</param>
      #if SILVERLIGHT
      IAsyncResult Begin_gateModeChange(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int gateMode);
      bool End_gateModeChange(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 闸机重启或关闭
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="optCode">状态1-重启2-关闭系统</param>
      #if SILVERLIGHT
      IAsyncResult Begin_gateSysShutdown(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int optCode);
      bool End_gateSysShutdown(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 心跳发送包
      /// </summary>
      /// <param name="auth">通用参数</param>
      #if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth);
      bool End_ping(IAsyncResult asyncResult);
      #endif
    }

    /// <summary>
    /// 闸机管理(服务端部署在闸机客户端)
    /// </summary>
    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_gateModeChange(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int gateMode)
      {
        return send_gateModeChange(callback, state, auth, gateMode);
      }

      public bool End_gateModeChange(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_gateModeChange();
      }

      #endif

      /// <summary>
      /// 运营模式切换
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="gateMode">模式状态</param>
      public bool gateModeChange(tbims.rpc.entity.AUTHORIZATION auth, int gateMode)
      {
        #if !SILVERLIGHT
        send_gateModeChange(auth, gateMode);
        return recv_gateModeChange();

        #else
        var asyncResult = Begin_gateModeChange(null, null, auth, gateMode);
        return End_gateModeChange(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_gateModeChange(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int gateMode)
      #else
      public void send_gateModeChange(tbims.rpc.entity.AUTHORIZATION auth, int gateMode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("gateModeChange", TMessageType.Call, seqid_));
        gateModeChange_args args = new gateModeChange_args();
        args.Auth = auth;
        args.GateMode = gateMode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_gateModeChange()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        gateModeChange_result result = new gateModeChange_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "gateModeChange failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_gateSysShutdown(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int optCode)
      {
        return send_gateSysShutdown(callback, state, auth, optCode);
      }

      public bool End_gateSysShutdown(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_gateSysShutdown();
      }

      #endif

      /// <summary>
      /// 闸机重启或关闭
      /// </summary>
      /// <param name="auth">通用参数</param>
      /// <param name="optCode">状态1-重启2-关闭系统</param>
      public bool gateSysShutdown(tbims.rpc.entity.AUTHORIZATION auth, int optCode)
      {
        #if !SILVERLIGHT
        send_gateSysShutdown(auth, optCode);
        return recv_gateSysShutdown();

        #else
        var asyncResult = Begin_gateSysShutdown(null, null, auth, optCode);
        return End_gateSysShutdown(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_gateSysShutdown(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth, int optCode)
      #else
      public void send_gateSysShutdown(tbims.rpc.entity.AUTHORIZATION auth, int optCode)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("gateSysShutdown", TMessageType.Call, seqid_));
        gateSysShutdown_args args = new gateSysShutdown_args();
        args.Auth = auth;
        args.OptCode = optCode;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_gateSysShutdown()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        gateSysShutdown_result result = new gateSysShutdown_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "gateSysShutdown failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ping(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      {
        return send_ping(callback, state, auth);
      }

      public bool End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ping();
      }

      #endif

      /// <summary>
      /// 心跳发送包
      /// </summary>
      /// <param name="auth">通用参数</param>
      public bool ping(tbims.rpc.entity.AUTHORIZATION auth)
      {
        #if !SILVERLIGHT
        send_ping(auth);
        return recv_ping();

        #else
        var asyncResult = Begin_ping(null, null, auth);
        return End_ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state, tbims.rpc.entity.AUTHORIZATION auth)
      #else
      public void send_ping(tbims.rpc.entity.AUTHORIZATION auth)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Auth = auth;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.e) {
          throw result.E;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ping failed: unknown result");
      }

    }
    public class Processor : TProcessor {
      public Processor(ISync iface)
      {
        iface_ = iface;
        processMap_["gateModeChange"] = gateModeChange_Process;
        processMap_["gateSysShutdown"] = gateSysShutdown_Process;
        processMap_["ping"] = ping_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private ISync iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void gateModeChange_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        gateModeChange_args args = new gateModeChange_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        gateModeChange_result result = new gateModeChange_result();
        try
        {
          try
          {
            result.Success = iface_.gateModeChange(args.Auth, args.GateMode);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("gateModeChange", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("gateModeChange", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void gateSysShutdown_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        gateSysShutdown_args args = new gateSysShutdown_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        gateSysShutdown_result result = new gateSysShutdown_result();
        try
        {
          try
          {
            result.Success = iface_.gateSysShutdown(args.Auth, args.OptCode);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("gateSysShutdown", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("gateSysShutdown", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        try
        {
          try
          {
            result.Success = iface_.ping(args.Auth);
          }
          catch (tbims.rpc.entity.RPCException e)
          {
            result.E = e;
          }
          oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
          result.Write(oprot);
        }
        catch (TTransportException)
        {
          throw;
        }
        catch (Exception ex)
        {
          Console.Error.WriteLine("Error occurred in processor:");
          Console.Error.WriteLine(ex.ToString());
          TApplicationException x = new TApplicationException        (TApplicationException.ExceptionType.InternalError," Internal error.");
          oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Exception, seqid));
          x.Write(oprot);
        }
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class gateModeChange_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private int _gateMode;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 模式状态
      /// </summary>
      public int GateMode
      {
        get
        {
          return _gateMode;
        }
        set
        {
          __isset.gateMode = true;
          this._gateMode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool gateMode;
      }

      public gateModeChange_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  GateMode = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("gateModeChange_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.gateMode) {
            field.Name = "gateMode";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(GateMode);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("gateModeChange_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.gateMode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("GateMode: ");
          __sb.Append(GateMode);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class gateModeChange_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public gateModeChange_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("gateModeChange_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("gateModeChange_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class gateSysShutdown_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;
      private int _optCode;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }

      /// <summary>
      /// 状态1-重启2-关闭系统
      /// </summary>
      public int OptCode
      {
        get
        {
          return _optCode;
        }
        set
        {
          __isset.optCode = true;
          this._optCode = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
        public bool optCode;
      }

      public gateSysShutdown_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 2:
                if (field.Type == TType.I32) {
                  OptCode = iprot.ReadI32();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("gateSysShutdown_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          if (__isset.optCode) {
            field.Name = "optCode";
            field.Type = TType.I32;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            oprot.WriteI32(OptCode);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("gateSysShutdown_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        if (__isset.optCode) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("OptCode: ");
          __sb.Append(OptCode);
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class gateSysShutdown_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public gateSysShutdown_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("gateSysShutdown_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("gateSysShutdown_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_args : TBase
    {
      private tbims.rpc.entity.AUTHORIZATION _auth;

      /// <summary>
      /// 通用参数
      /// </summary>
      public tbims.rpc.entity.AUTHORIZATION Auth
      {
        get
        {
          return _auth;
        }
        set
        {
          __isset.auth = true;
          this._auth = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool auth;
      }

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 1:
                if (field.Type == TType.Struct) {
                  Auth = new tbims.rpc.entity.AUTHORIZATION();
                  Auth.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ping_args");
          oprot.WriteStructBegin(struc);
          TField field = new TField();
          if (Auth != null && __isset.auth) {
            field.Name = "auth";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Auth.Write(oprot);
            oprot.WriteFieldEnd();
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_args(");
        bool __first = true;
        if (Auth != null && __isset.auth) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Auth: ");
          __sb.Append(Auth== null ? "<null>" : Auth.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_result : TBase
    {
      private bool _success;
      private tbims.rpc.entity.RPCException _e;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public tbims.rpc.entity.RPCException E
      {
        get
        {
          return _e;
        }
        set
        {
          __isset.e = true;
          this._e = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool e;
      }

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        iprot.IncrementRecursionDepth();
        try
        {
          TField field;
          iprot.ReadStructBegin();
          while (true)
          {
            field = iprot.ReadFieldBegin();
            if (field.Type == TType.Stop) { 
              break;
            }
            switch (field.ID)
            {
              case 0:
                if (field.Type == TType.Bool) {
                  Success = iprot.ReadBool();
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              case 1:
                if (field.Type == TType.Struct) {
                  E = new tbims.rpc.entity.RPCException();
                  E.Read(iprot);
                } else { 
                  TProtocolUtil.Skip(iprot, field.Type);
                }
                break;
              default: 
                TProtocolUtil.Skip(iprot, field.Type);
                break;
            }
            iprot.ReadFieldEnd();
          }
          iprot.ReadStructEnd();
        }
        finally
        {
          iprot.DecrementRecursionDepth();
        }
      }

      public void Write(TProtocol oprot) {
        oprot.IncrementRecursionDepth();
        try
        {
          TStruct struc = new TStruct("ping_result");
          oprot.WriteStructBegin(struc);
          TField field = new TField();

          if (this.__isset.success) {
            field.Name = "Success";
            field.Type = TType.Bool;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteBool(Success);
            oprot.WriteFieldEnd();
          } else if (this.__isset.e) {
            if (E != null) {
              field.Name = "E";
              field.Type = TType.Struct;
              field.ID = 1;
              oprot.WriteFieldBegin(field);
              E.Write(oprot);
              oprot.WriteFieldEnd();
            }
          }
          oprot.WriteFieldStop();
          oprot.WriteStructEnd();
        }
        finally
        {
          oprot.DecrementRecursionDepth();
        }
      }

      public override string ToString() {
        StringBuilder __sb = new StringBuilder("ping_result(");
        bool __first = true;
        if (__isset.success) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("Success: ");
          __sb.Append(Success);
        }
        if (E != null && __isset.e) {
          if(!__first) { __sb.Append(", "); }
          __first = false;
          __sb.Append("E: ");
          __sb.Append(E== null ? "<null>" : E.ToString());
        }
        __sb.Append(")");
        return __sb.ToString();
      }

    }

  }
}
