/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 票种表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SYS_TICKET_TYPE implements org.apache.thrift.TBase<SYS_TICKET_TYPE, SYS_TICKET_TYPE._Fields>, java.io.Serializable, Cloneable, Comparable<SYS_TICKET_TYPE> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SYS_TICKET_TYPE");

  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TEAM_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("teamFlag", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField VALIDATE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("validateTimes", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField LESS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("lessFlag", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField DAY_NIGHT_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("dayNightFlag", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DAY_VALIDATE_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("dayValidateFlag", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("price", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField SYS_TICKET_TYPE_RULELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sysTicketTypeRulelist", org.apache.thrift.protocol.TType.LIST, (short)12);
  private static final org.apache.thrift.protocol.TField SYS_TICKET_TYPE_VENUELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sysTicketTypeVenuelist", org.apache.thrift.protocol.TType.LIST, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SYS_TICKET_TYPEStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SYS_TICKET_TYPETupleSchemeFactory();

  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // required
  /**
   * 票种名称
   */
  public java.lang.String ticketTypeName; // required
  /**
   * 是否团体
   */
  public java.lang.String teamFlag; // required
  /**
   * 可用次数
   */
  public long validateTimes; // required
  /**
   * 是否优惠
   */
  public java.lang.String lessFlag; // required
  /**
   * 日夜场
   */
  public java.lang.String dayNightFlag; // optional
  /**
   * 是否销售日当日有效
   */
  public java.lang.String dayValidateFlag; // optional
  /**
   * 票价
   */
  public long price; // optional
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // optional
  /**
   * 操作时间
   */
  public long opeTime; // optional
  /**
   * 版本号
   */
  public long versionNo; // optional
  /**
   * 票种检票规则表
   */
  public java.util.List<SYS_TICKET_TYPE_RULE> sysTicketTypeRulelist; // optional
  /**
   * 票种场馆表
   */
  public java.util.List<SYS_TICKET_TYPE_VENUE> sysTicketTypeVenuelist; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)1, "ticketTypeId"),
    /**
     * 票种名称
     */
    TICKET_TYPE_NAME((short)2, "ticketTypeName"),
    /**
     * 是否团体
     */
    TEAM_FLAG((short)3, "teamFlag"),
    /**
     * 可用次数
     */
    VALIDATE_TIMES((short)4, "validateTimes"),
    /**
     * 是否优惠
     */
    LESS_FLAG((short)5, "lessFlag"),
    /**
     * 日夜场
     */
    DAY_NIGHT_FLAG((short)6, "dayNightFlag"),
    /**
     * 是否销售日当日有效
     */
    DAY_VALIDATE_FLAG((short)7, "dayValidateFlag"),
    /**
     * 票价
     */
    PRICE((short)8, "price"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)9, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)10, "opeTime"),
    /**
     * 版本号
     */
    VERSION_NO((short)11, "versionNo"),
    /**
     * 票种检票规则表
     */
    SYS_TICKET_TYPE_RULELIST((short)12, "sysTicketTypeRulelist"),
    /**
     * 票种场馆表
     */
    SYS_TICKET_TYPE_VENUELIST((short)13, "sysTicketTypeVenuelist");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 2: // TICKET_TYPE_NAME
          return TICKET_TYPE_NAME;
        case 3: // TEAM_FLAG
          return TEAM_FLAG;
        case 4: // VALIDATE_TIMES
          return VALIDATE_TIMES;
        case 5: // LESS_FLAG
          return LESS_FLAG;
        case 6: // DAY_NIGHT_FLAG
          return DAY_NIGHT_FLAG;
        case 7: // DAY_VALIDATE_FLAG
          return DAY_VALIDATE_FLAG;
        case 8: // PRICE
          return PRICE;
        case 9: // OPE_USER_ID
          return OPE_USER_ID;
        case 10: // OPE_TIME
          return OPE_TIME;
        case 11: // VERSION_NO
          return VERSION_NO;
        case 12: // SYS_TICKET_TYPE_RULELIST
          return SYS_TICKET_TYPE_RULELIST;
        case 13: // SYS_TICKET_TYPE_VENUELIST
          return SYS_TICKET_TYPE_VENUELIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VALIDATETIMES_ISSET_ID = 0;
  private static final int __PRICE_ISSET_ID = 1;
  private static final int __OPETIME_ISSET_ID = 2;
  private static final int __VERSIONNO_ISSET_ID = 3;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DAY_NIGHT_FLAG,_Fields.DAY_VALIDATE_FLAG,_Fields.PRICE,_Fields.OPE_USER_ID,_Fields.OPE_TIME,_Fields.VERSION_NO,_Fields.SYS_TICKET_TYPE_RULELIST,_Fields.SYS_TICKET_TYPE_VENUELIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_NAME, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TEAM_FLAG, new org.apache.thrift.meta_data.FieldMetaData("teamFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALIDATE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("validateTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.LESS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("lessFlag", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAY_NIGHT_FLAG, new org.apache.thrift.meta_data.FieldMetaData("dayNightFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DAY_VALIDATE_FLAG, new org.apache.thrift.meta_data.FieldMetaData("dayValidateFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRICE, new org.apache.thrift.meta_data.FieldMetaData("price", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SYS_TICKET_TYPE_RULELIST, new org.apache.thrift.meta_data.FieldMetaData("sysTicketTypeRulelist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SYS_TICKET_TYPE_RULE"))));
    tmpMap.put(_Fields.SYS_TICKET_TYPE_VENUELIST, new org.apache.thrift.meta_data.FieldMetaData("sysTicketTypeVenuelist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SYS_TICKET_TYPE_VENUE"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SYS_TICKET_TYPE.class, metaDataMap);
  }

  public SYS_TICKET_TYPE() {
  }

  public SYS_TICKET_TYPE(
    java.lang.String ticketTypeId,
    java.lang.String ticketTypeName,
    java.lang.String teamFlag,
    long validateTimes,
    java.lang.String lessFlag)
  {
    this();
    this.ticketTypeId = ticketTypeId;
    this.ticketTypeName = ticketTypeName;
    this.teamFlag = teamFlag;
    this.validateTimes = validateTimes;
    setValidateTimesIsSet(true);
    this.lessFlag = lessFlag;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SYS_TICKET_TYPE(SYS_TICKET_TYPE other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetTicketTypeName()) {
      this.ticketTypeName = other.ticketTypeName;
    }
    if (other.isSetTeamFlag()) {
      this.teamFlag = other.teamFlag;
    }
    this.validateTimes = other.validateTimes;
    if (other.isSetLessFlag()) {
      this.lessFlag = other.lessFlag;
    }
    if (other.isSetDayNightFlag()) {
      this.dayNightFlag = other.dayNightFlag;
    }
    if (other.isSetDayValidateFlag()) {
      this.dayValidateFlag = other.dayValidateFlag;
    }
    this.price = other.price;
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
    this.versionNo = other.versionNo;
    if (other.isSetSysTicketTypeRulelist()) {
      java.util.List<SYS_TICKET_TYPE_RULE> __this__sysTicketTypeRulelist = new java.util.ArrayList<SYS_TICKET_TYPE_RULE>(other.sysTicketTypeRulelist.size());
      for (SYS_TICKET_TYPE_RULE other_element : other.sysTicketTypeRulelist) {
        __this__sysTicketTypeRulelist.add(other_element);
      }
      this.sysTicketTypeRulelist = __this__sysTicketTypeRulelist;
    }
    if (other.isSetSysTicketTypeVenuelist()) {
      java.util.List<SYS_TICKET_TYPE_VENUE> __this__sysTicketTypeVenuelist = new java.util.ArrayList<SYS_TICKET_TYPE_VENUE>(other.sysTicketTypeVenuelist.size());
      for (SYS_TICKET_TYPE_VENUE other_element : other.sysTicketTypeVenuelist) {
        __this__sysTicketTypeVenuelist.add(other_element);
      }
      this.sysTicketTypeVenuelist = __this__sysTicketTypeVenuelist;
    }
  }

  public SYS_TICKET_TYPE deepCopy() {
    return new SYS_TICKET_TYPE(this);
  }

  @Override
  public void clear() {
    this.ticketTypeId = null;
    this.ticketTypeName = null;
    this.teamFlag = null;
    setValidateTimesIsSet(false);
    this.validateTimes = 0;
    this.lessFlag = null;
    this.dayNightFlag = null;
    this.dayValidateFlag = null;
    setPriceIsSet(false);
    this.price = 0;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
    setVersionNoIsSet(false);
    this.versionNo = 0;
    this.sysTicketTypeRulelist = null;
    this.sysTicketTypeVenuelist = null;
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public SYS_TICKET_TYPE setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 票种名称
   */
  public java.lang.String getTicketTypeName() {
    return this.ticketTypeName;
  }

  /**
   * 票种名称
   */
  public SYS_TICKET_TYPE setTicketTypeName(java.lang.String ticketTypeName) {
    this.ticketTypeName = ticketTypeName;
    return this;
  }

  public void unsetTicketTypeName() {
    this.ticketTypeName = null;
  }

  /** Returns true if field ticketTypeName is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeName() {
    return this.ticketTypeName != null;
  }

  public void setTicketTypeNameIsSet(boolean value) {
    if (!value) {
      this.ticketTypeName = null;
    }
  }

  /**
   * 是否团体
   */
  public java.lang.String getTeamFlag() {
    return this.teamFlag;
  }

  /**
   * 是否团体
   */
  public SYS_TICKET_TYPE setTeamFlag(java.lang.String teamFlag) {
    this.teamFlag = teamFlag;
    return this;
  }

  public void unsetTeamFlag() {
    this.teamFlag = null;
  }

  /** Returns true if field teamFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetTeamFlag() {
    return this.teamFlag != null;
  }

  public void setTeamFlagIsSet(boolean value) {
    if (!value) {
      this.teamFlag = null;
    }
  }

  /**
   * 可用次数
   */
  public long getValidateTimes() {
    return this.validateTimes;
  }

  /**
   * 可用次数
   */
  public SYS_TICKET_TYPE setValidateTimes(long validateTimes) {
    this.validateTimes = validateTimes;
    setValidateTimesIsSet(true);
    return this;
  }

  public void unsetValidateTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALIDATETIMES_ISSET_ID);
  }

  /** Returns true if field validateTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetValidateTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALIDATETIMES_ISSET_ID);
  }

  public void setValidateTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALIDATETIMES_ISSET_ID, value);
  }

  /**
   * 是否优惠
   */
  public java.lang.String getLessFlag() {
    return this.lessFlag;
  }

  /**
   * 是否优惠
   */
  public SYS_TICKET_TYPE setLessFlag(java.lang.String lessFlag) {
    this.lessFlag = lessFlag;
    return this;
  }

  public void unsetLessFlag() {
    this.lessFlag = null;
  }

  /** Returns true if field lessFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetLessFlag() {
    return this.lessFlag != null;
  }

  public void setLessFlagIsSet(boolean value) {
    if (!value) {
      this.lessFlag = null;
    }
  }

  /**
   * 日夜场
   */
  public java.lang.String getDayNightFlag() {
    return this.dayNightFlag;
  }

  /**
   * 日夜场
   */
  public SYS_TICKET_TYPE setDayNightFlag(java.lang.String dayNightFlag) {
    this.dayNightFlag = dayNightFlag;
    return this;
  }

  public void unsetDayNightFlag() {
    this.dayNightFlag = null;
  }

  /** Returns true if field dayNightFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDayNightFlag() {
    return this.dayNightFlag != null;
  }

  public void setDayNightFlagIsSet(boolean value) {
    if (!value) {
      this.dayNightFlag = null;
    }
  }

  /**
   * 是否销售日当日有效
   */
  public java.lang.String getDayValidateFlag() {
    return this.dayValidateFlag;
  }

  /**
   * 是否销售日当日有效
   */
  public SYS_TICKET_TYPE setDayValidateFlag(java.lang.String dayValidateFlag) {
    this.dayValidateFlag = dayValidateFlag;
    return this;
  }

  public void unsetDayValidateFlag() {
    this.dayValidateFlag = null;
  }

  /** Returns true if field dayValidateFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetDayValidateFlag() {
    return this.dayValidateFlag != null;
  }

  public void setDayValidateFlagIsSet(boolean value) {
    if (!value) {
      this.dayValidateFlag = null;
    }
  }

  /**
   * 票价
   */
  public long getPrice() {
    return this.price;
  }

  /**
   * 票价
   */
  public SYS_TICKET_TYPE setPrice(long price) {
    this.price = price;
    setPriceIsSet(true);
    return this;
  }

  public void unsetPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  /** Returns true if field price is set (has been assigned a value) and false otherwise */
  public boolean isSetPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRICE_ISSET_ID);
  }

  public void setPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRICE_ISSET_ID, value);
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SYS_TICKET_TYPE setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SYS_TICKET_TYPE setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SYS_TICKET_TYPE setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  public int getSysTicketTypeRulelistSize() {
    return (this.sysTicketTypeRulelist == null) ? 0 : this.sysTicketTypeRulelist.size();
  }

  public java.util.Iterator<SYS_TICKET_TYPE_RULE> getSysTicketTypeRulelistIterator() {
    return (this.sysTicketTypeRulelist == null) ? null : this.sysTicketTypeRulelist.iterator();
  }

  public void addToSysTicketTypeRulelist(SYS_TICKET_TYPE_RULE elem) {
    if (this.sysTicketTypeRulelist == null) {
      this.sysTicketTypeRulelist = new java.util.ArrayList<SYS_TICKET_TYPE_RULE>();
    }
    this.sysTicketTypeRulelist.add(elem);
  }

  /**
   * 票种检票规则表
   */
  public java.util.List<SYS_TICKET_TYPE_RULE> getSysTicketTypeRulelist() {
    return this.sysTicketTypeRulelist;
  }

  /**
   * 票种检票规则表
   */
  public SYS_TICKET_TYPE setSysTicketTypeRulelist(java.util.List<SYS_TICKET_TYPE_RULE> sysTicketTypeRulelist) {
    this.sysTicketTypeRulelist = sysTicketTypeRulelist;
    return this;
  }

  public void unsetSysTicketTypeRulelist() {
    this.sysTicketTypeRulelist = null;
  }

  /** Returns true if field sysTicketTypeRulelist is set (has been assigned a value) and false otherwise */
  public boolean isSetSysTicketTypeRulelist() {
    return this.sysTicketTypeRulelist != null;
  }

  public void setSysTicketTypeRulelistIsSet(boolean value) {
    if (!value) {
      this.sysTicketTypeRulelist = null;
    }
  }

  public int getSysTicketTypeVenuelistSize() {
    return (this.sysTicketTypeVenuelist == null) ? 0 : this.sysTicketTypeVenuelist.size();
  }

  public java.util.Iterator<SYS_TICKET_TYPE_VENUE> getSysTicketTypeVenuelistIterator() {
    return (this.sysTicketTypeVenuelist == null) ? null : this.sysTicketTypeVenuelist.iterator();
  }

  public void addToSysTicketTypeVenuelist(SYS_TICKET_TYPE_VENUE elem) {
    if (this.sysTicketTypeVenuelist == null) {
      this.sysTicketTypeVenuelist = new java.util.ArrayList<SYS_TICKET_TYPE_VENUE>();
    }
    this.sysTicketTypeVenuelist.add(elem);
  }

  /**
   * 票种场馆表
   */
  public java.util.List<SYS_TICKET_TYPE_VENUE> getSysTicketTypeVenuelist() {
    return this.sysTicketTypeVenuelist;
  }

  /**
   * 票种场馆表
   */
  public SYS_TICKET_TYPE setSysTicketTypeVenuelist(java.util.List<SYS_TICKET_TYPE_VENUE> sysTicketTypeVenuelist) {
    this.sysTicketTypeVenuelist = sysTicketTypeVenuelist;
    return this;
  }

  public void unsetSysTicketTypeVenuelist() {
    this.sysTicketTypeVenuelist = null;
  }

  /** Returns true if field sysTicketTypeVenuelist is set (has been assigned a value) and false otherwise */
  public boolean isSetSysTicketTypeVenuelist() {
    return this.sysTicketTypeVenuelist != null;
  }

  public void setSysTicketTypeVenuelistIsSet(boolean value) {
    if (!value) {
      this.sysTicketTypeVenuelist = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_NAME:
      if (value == null) {
        unsetTicketTypeName();
      } else {
        setTicketTypeName((java.lang.String)value);
      }
      break;

    case TEAM_FLAG:
      if (value == null) {
        unsetTeamFlag();
      } else {
        setTeamFlag((java.lang.String)value);
      }
      break;

    case VALIDATE_TIMES:
      if (value == null) {
        unsetValidateTimes();
      } else {
        setValidateTimes((java.lang.Long)value);
      }
      break;

    case LESS_FLAG:
      if (value == null) {
        unsetLessFlag();
      } else {
        setLessFlag((java.lang.String)value);
      }
      break;

    case DAY_NIGHT_FLAG:
      if (value == null) {
        unsetDayNightFlag();
      } else {
        setDayNightFlag((java.lang.String)value);
      }
      break;

    case DAY_VALIDATE_FLAG:
      if (value == null) {
        unsetDayValidateFlag();
      } else {
        setDayValidateFlag((java.lang.String)value);
      }
      break;

    case PRICE:
      if (value == null) {
        unsetPrice();
      } else {
        setPrice((java.lang.Long)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    case SYS_TICKET_TYPE_RULELIST:
      if (value == null) {
        unsetSysTicketTypeRulelist();
      } else {
        setSysTicketTypeRulelist((java.util.List<SYS_TICKET_TYPE_RULE>)value);
      }
      break;

    case SYS_TICKET_TYPE_VENUELIST:
      if (value == null) {
        unsetSysTicketTypeVenuelist();
      } else {
        setSysTicketTypeVenuelist((java.util.List<SYS_TICKET_TYPE_VENUE>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_TYPE_NAME:
      return getTicketTypeName();

    case TEAM_FLAG:
      return getTeamFlag();

    case VALIDATE_TIMES:
      return getValidateTimes();

    case LESS_FLAG:
      return getLessFlag();

    case DAY_NIGHT_FLAG:
      return getDayNightFlag();

    case DAY_VALIDATE_FLAG:
      return getDayValidateFlag();

    case PRICE:
      return getPrice();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    case VERSION_NO:
      return getVersionNo();

    case SYS_TICKET_TYPE_RULELIST:
      return getSysTicketTypeRulelist();

    case SYS_TICKET_TYPE_VENUELIST:
      return getSysTicketTypeVenuelist();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_TYPE_NAME:
      return isSetTicketTypeName();
    case TEAM_FLAG:
      return isSetTeamFlag();
    case VALIDATE_TIMES:
      return isSetValidateTimes();
    case LESS_FLAG:
      return isSetLessFlag();
    case DAY_NIGHT_FLAG:
      return isSetDayNightFlag();
    case DAY_VALIDATE_FLAG:
      return isSetDayValidateFlag();
    case PRICE:
      return isSetPrice();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    case VERSION_NO:
      return isSetVersionNo();
    case SYS_TICKET_TYPE_RULELIST:
      return isSetSysTicketTypeRulelist();
    case SYS_TICKET_TYPE_VENUELIST:
      return isSetSysTicketTypeVenuelist();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SYS_TICKET_TYPE)
      return this.equals((SYS_TICKET_TYPE)that);
    return false;
  }

  public boolean equals(SYS_TICKET_TYPE that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketTypeName = true && this.isSetTicketTypeName();
    boolean that_present_ticketTypeName = true && that.isSetTicketTypeName();
    if (this_present_ticketTypeName || that_present_ticketTypeName) {
      if (!(this_present_ticketTypeName && that_present_ticketTypeName))
        return false;
      if (!this.ticketTypeName.equals(that.ticketTypeName))
        return false;
    }

    boolean this_present_teamFlag = true && this.isSetTeamFlag();
    boolean that_present_teamFlag = true && that.isSetTeamFlag();
    if (this_present_teamFlag || that_present_teamFlag) {
      if (!(this_present_teamFlag && that_present_teamFlag))
        return false;
      if (!this.teamFlag.equals(that.teamFlag))
        return false;
    }

    boolean this_present_validateTimes = true;
    boolean that_present_validateTimes = true;
    if (this_present_validateTimes || that_present_validateTimes) {
      if (!(this_present_validateTimes && that_present_validateTimes))
        return false;
      if (this.validateTimes != that.validateTimes)
        return false;
    }

    boolean this_present_lessFlag = true && this.isSetLessFlag();
    boolean that_present_lessFlag = true && that.isSetLessFlag();
    if (this_present_lessFlag || that_present_lessFlag) {
      if (!(this_present_lessFlag && that_present_lessFlag))
        return false;
      if (!this.lessFlag.equals(that.lessFlag))
        return false;
    }

    boolean this_present_dayNightFlag = true && this.isSetDayNightFlag();
    boolean that_present_dayNightFlag = true && that.isSetDayNightFlag();
    if (this_present_dayNightFlag || that_present_dayNightFlag) {
      if (!(this_present_dayNightFlag && that_present_dayNightFlag))
        return false;
      if (!this.dayNightFlag.equals(that.dayNightFlag))
        return false;
    }

    boolean this_present_dayValidateFlag = true && this.isSetDayValidateFlag();
    boolean that_present_dayValidateFlag = true && that.isSetDayValidateFlag();
    if (this_present_dayValidateFlag || that_present_dayValidateFlag) {
      if (!(this_present_dayValidateFlag && that_present_dayValidateFlag))
        return false;
      if (!this.dayValidateFlag.equals(that.dayValidateFlag))
        return false;
    }

    boolean this_present_price = true && this.isSetPrice();
    boolean that_present_price = true && that.isSetPrice();
    if (this_present_price || that_present_price) {
      if (!(this_present_price && that_present_price))
        return false;
      if (this.price != that.price)
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true && this.isSetOpeTime();
    boolean that_present_opeTime = true && that.isSetOpeTime();
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    boolean this_present_sysTicketTypeRulelist = true && this.isSetSysTicketTypeRulelist();
    boolean that_present_sysTicketTypeRulelist = true && that.isSetSysTicketTypeRulelist();
    if (this_present_sysTicketTypeRulelist || that_present_sysTicketTypeRulelist) {
      if (!(this_present_sysTicketTypeRulelist && that_present_sysTicketTypeRulelist))
        return false;
      if (!this.sysTicketTypeRulelist.equals(that.sysTicketTypeRulelist))
        return false;
    }

    boolean this_present_sysTicketTypeVenuelist = true && this.isSetSysTicketTypeVenuelist();
    boolean that_present_sysTicketTypeVenuelist = true && that.isSetSysTicketTypeVenuelist();
    if (this_present_sysTicketTypeVenuelist || that_present_sysTicketTypeVenuelist) {
      if (!(this_present_sysTicketTypeVenuelist && that_present_sysTicketTypeVenuelist))
        return false;
      if (!this.sysTicketTypeVenuelist.equals(that.sysTicketTypeVenuelist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeName()) ? 131071 : 524287);
    if (isSetTicketTypeName())
      hashCode = hashCode * 8191 + ticketTypeName.hashCode();

    hashCode = hashCode * 8191 + ((isSetTeamFlag()) ? 131071 : 524287);
    if (isSetTeamFlag())
      hashCode = hashCode * 8191 + teamFlag.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(validateTimes);

    hashCode = hashCode * 8191 + ((isSetLessFlag()) ? 131071 : 524287);
    if (isSetLessFlag())
      hashCode = hashCode * 8191 + lessFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetDayNightFlag()) ? 131071 : 524287);
    if (isSetDayNightFlag())
      hashCode = hashCode * 8191 + dayNightFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetDayValidateFlag()) ? 131071 : 524287);
    if (isSetDayValidateFlag())
      hashCode = hashCode * 8191 + dayValidateFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrice()) ? 131071 : 524287);
    if (isSetPrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(price);

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeTime()) ? 131071 : 524287);
    if (isSetOpeTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    hashCode = hashCode * 8191 + ((isSetSysTicketTypeRulelist()) ? 131071 : 524287);
    if (isSetSysTicketTypeRulelist())
      hashCode = hashCode * 8191 + sysTicketTypeRulelist.hashCode();

    hashCode = hashCode * 8191 + ((isSetSysTicketTypeVenuelist()) ? 131071 : 524287);
    if (isSetSysTicketTypeVenuelist())
      hashCode = hashCode * 8191 + sysTicketTypeVenuelist.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SYS_TICKET_TYPE other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeName()).compareTo(other.isSetTicketTypeName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeName, other.ticketTypeName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTeamFlag()).compareTo(other.isSetTeamFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTeamFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.teamFlag, other.teamFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValidateTimes()).compareTo(other.isSetValidateTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidateTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validateTimes, other.validateTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLessFlag()).compareTo(other.isSetLessFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLessFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lessFlag, other.lessFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDayNightFlag()).compareTo(other.isSetDayNightFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayNightFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayNightFlag, other.dayNightFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDayValidateFlag()).compareTo(other.isSetDayValidateFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDayValidateFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dayValidateFlag, other.dayValidateFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrice()).compareTo(other.isSetPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.price, other.price);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysTicketTypeRulelist()).compareTo(other.isSetSysTicketTypeRulelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysTicketTypeRulelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysTicketTypeRulelist, other.sysTicketTypeRulelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSysTicketTypeVenuelist()).compareTo(other.isSetSysTicketTypeVenuelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSysTicketTypeVenuelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sysTicketTypeVenuelist, other.sysTicketTypeVenuelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SYS_TICKET_TYPE(");
    boolean first = true;

    sb.append("ticketTypeId:");
    if (this.ticketTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketTypeName:");
    if (this.ticketTypeName == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTypeName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("teamFlag:");
    if (this.teamFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.teamFlag);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validateTimes:");
    sb.append(this.validateTimes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lessFlag:");
    if (this.lessFlag == null) {
      sb.append("null");
    } else {
      sb.append(this.lessFlag);
    }
    first = false;
    if (isSetDayNightFlag()) {
      if (!first) sb.append(", ");
      sb.append("dayNightFlag:");
      if (this.dayNightFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.dayNightFlag);
      }
      first = false;
    }
    if (isSetDayValidateFlag()) {
      if (!first) sb.append(", ");
      sb.append("dayValidateFlag:");
      if (this.dayValidateFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.dayValidateFlag);
      }
      first = false;
    }
    if (isSetPrice()) {
      if (!first) sb.append(", ");
      sb.append("price:");
      sb.append(this.price);
      first = false;
    }
    if (isSetOpeUserId()) {
      if (!first) sb.append(", ");
      sb.append("opeUserId:");
      if (this.opeUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.opeUserId);
      }
      first = false;
    }
    if (isSetOpeTime()) {
      if (!first) sb.append(", ");
      sb.append("opeTime:");
      sb.append(this.opeTime);
      first = false;
    }
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    if (isSetSysTicketTypeRulelist()) {
      if (!first) sb.append(", ");
      sb.append("sysTicketTypeRulelist:");
      if (this.sysTicketTypeRulelist == null) {
        sb.append("null");
      } else {
        sb.append(this.sysTicketTypeRulelist);
      }
      first = false;
    }
    if (isSetSysTicketTypeVenuelist()) {
      if (!first) sb.append(", ");
      sb.append("sysTicketTypeVenuelist:");
      if (this.sysTicketTypeVenuelist == null) {
        sb.append("null");
      } else {
        sb.append(this.sysTicketTypeVenuelist);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (ticketTypeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketTypeId' was not present! Struct: " + toString());
    }
    if (ticketTypeName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketTypeName' was not present! Struct: " + toString());
    }
    if (teamFlag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'teamFlag' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'validateTimes' because it's a primitive and you chose the non-beans generator.
    if (lessFlag == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'lessFlag' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SYS_TICKET_TYPEStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_TICKET_TYPEStandardScheme getScheme() {
      return new SYS_TICKET_TYPEStandardScheme();
    }
  }

  private static class SYS_TICKET_TYPEStandardScheme extends org.apache.thrift.scheme.StandardScheme<SYS_TICKET_TYPE> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SYS_TICKET_TYPE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_TYPE_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeName = iprot.readString();
              struct.setTicketTypeNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TEAM_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.teamFlag = iprot.readString();
              struct.setTeamFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // VALIDATE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.validateTimes = iprot.readI64();
              struct.setValidateTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // LESS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lessFlag = iprot.readString();
              struct.setLessFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DAY_NIGHT_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dayNightFlag = iprot.readString();
              struct.setDayNightFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DAY_VALIDATE_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dayValidateFlag = iprot.readString();
              struct.setDayValidateFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.price = iprot.readI64();
              struct.setPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SYS_TICKET_TYPE_RULELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                struct.sysTicketTypeRulelist = new java.util.ArrayList<SYS_TICKET_TYPE_RULE>(_list48.size);
                SYS_TICKET_TYPE_RULE _elem49;
                for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                {
                  _elem49 = new SYS_TICKET_TYPE_RULE();
                  _elem49.read(iprot);
                  struct.sysTicketTypeRulelist.add(_elem49);
                }
                iprot.readListEnd();
              }
              struct.setSysTicketTypeRulelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // SYS_TICKET_TYPE_VENUELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list51 = iprot.readListBegin();
                struct.sysTicketTypeVenuelist = new java.util.ArrayList<SYS_TICKET_TYPE_VENUE>(_list51.size);
                SYS_TICKET_TYPE_VENUE _elem52;
                for (int _i53 = 0; _i53 < _list51.size; ++_i53)
                {
                  _elem52 = new SYS_TICKET_TYPE_VENUE();
                  _elem52.read(iprot);
                  struct.sysTicketTypeVenuelist.add(_elem52);
                }
                iprot.readListEnd();
              }
              struct.setSysTicketTypeVenuelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetValidateTimes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'validateTimes' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SYS_TICKET_TYPE struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ticketTypeId != null) {
        oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.ticketTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketTypeName != null) {
        oprot.writeFieldBegin(TICKET_TYPE_NAME_FIELD_DESC);
        oprot.writeString(struct.ticketTypeName);
        oprot.writeFieldEnd();
      }
      if (struct.teamFlag != null) {
        oprot.writeFieldBegin(TEAM_FLAG_FIELD_DESC);
        oprot.writeString(struct.teamFlag);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALIDATE_TIMES_FIELD_DESC);
      oprot.writeI64(struct.validateTimes);
      oprot.writeFieldEnd();
      if (struct.lessFlag != null) {
        oprot.writeFieldBegin(LESS_FLAG_FIELD_DESC);
        oprot.writeString(struct.lessFlag);
        oprot.writeFieldEnd();
      }
      if (struct.dayNightFlag != null) {
        if (struct.isSetDayNightFlag()) {
          oprot.writeFieldBegin(DAY_NIGHT_FLAG_FIELD_DESC);
          oprot.writeString(struct.dayNightFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.dayValidateFlag != null) {
        if (struct.isSetDayValidateFlag()) {
          oprot.writeFieldBegin(DAY_VALIDATE_FLAG_FIELD_DESC);
          oprot.writeString(struct.dayValidateFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetPrice()) {
        oprot.writeFieldBegin(PRICE_FIELD_DESC);
        oprot.writeI64(struct.price);
        oprot.writeFieldEnd();
      }
      if (struct.opeUserId != null) {
        if (struct.isSetOpeUserId()) {
          oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.opeUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpeTime()) {
        oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
        oprot.writeI64(struct.opeTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      if (struct.sysTicketTypeRulelist != null) {
        if (struct.isSetSysTicketTypeRulelist()) {
          oprot.writeFieldBegin(SYS_TICKET_TYPE_RULELIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sysTicketTypeRulelist.size()));
            for (SYS_TICKET_TYPE_RULE _iter54 : struct.sysTicketTypeRulelist)
            {
              _iter54.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.sysTicketTypeVenuelist != null) {
        if (struct.isSetSysTicketTypeVenuelist()) {
          oprot.writeFieldBegin(SYS_TICKET_TYPE_VENUELIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sysTicketTypeVenuelist.size()));
            for (SYS_TICKET_TYPE_VENUE _iter55 : struct.sysTicketTypeVenuelist)
            {
              _iter55.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SYS_TICKET_TYPETupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_TICKET_TYPETupleScheme getScheme() {
      return new SYS_TICKET_TYPETupleScheme();
    }
  }

  private static class SYS_TICKET_TYPETupleScheme extends org.apache.thrift.scheme.TupleScheme<SYS_TICKET_TYPE> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SYS_TICKET_TYPE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.ticketTypeId);
      oprot.writeString(struct.ticketTypeName);
      oprot.writeString(struct.teamFlag);
      oprot.writeI64(struct.validateTimes);
      oprot.writeString(struct.lessFlag);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetDayNightFlag()) {
        optionals.set(0);
      }
      if (struct.isSetDayValidateFlag()) {
        optionals.set(1);
      }
      if (struct.isSetPrice()) {
        optionals.set(2);
      }
      if (struct.isSetOpeUserId()) {
        optionals.set(3);
      }
      if (struct.isSetOpeTime()) {
        optionals.set(4);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(5);
      }
      if (struct.isSetSysTicketTypeRulelist()) {
        optionals.set(6);
      }
      if (struct.isSetSysTicketTypeVenuelist()) {
        optionals.set(7);
      }
      oprot.writeBitSet(optionals, 8);
      if (struct.isSetDayNightFlag()) {
        oprot.writeString(struct.dayNightFlag);
      }
      if (struct.isSetDayValidateFlag()) {
        oprot.writeString(struct.dayValidateFlag);
      }
      if (struct.isSetPrice()) {
        oprot.writeI64(struct.price);
      }
      if (struct.isSetOpeUserId()) {
        oprot.writeString(struct.opeUserId);
      }
      if (struct.isSetOpeTime()) {
        oprot.writeI64(struct.opeTime);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
      if (struct.isSetSysTicketTypeRulelist()) {
        {
          oprot.writeI32(struct.sysTicketTypeRulelist.size());
          for (SYS_TICKET_TYPE_RULE _iter56 : struct.sysTicketTypeRulelist)
          {
            _iter56.write(oprot);
          }
        }
      }
      if (struct.isSetSysTicketTypeVenuelist()) {
        {
          oprot.writeI32(struct.sysTicketTypeVenuelist.size());
          for (SYS_TICKET_TYPE_VENUE _iter57 : struct.sysTicketTypeVenuelist)
          {
            _iter57.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SYS_TICKET_TYPE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.ticketTypeId = iprot.readString();
      struct.setTicketTypeIdIsSet(true);
      struct.ticketTypeName = iprot.readString();
      struct.setTicketTypeNameIsSet(true);
      struct.teamFlag = iprot.readString();
      struct.setTeamFlagIsSet(true);
      struct.validateTimes = iprot.readI64();
      struct.setValidateTimesIsSet(true);
      struct.lessFlag = iprot.readString();
      struct.setLessFlagIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(8);
      if (incoming.get(0)) {
        struct.dayNightFlag = iprot.readString();
        struct.setDayNightFlagIsSet(true);
      }
      if (incoming.get(1)) {
        struct.dayValidateFlag = iprot.readString();
        struct.setDayValidateFlagIsSet(true);
      }
      if (incoming.get(2)) {
        struct.price = iprot.readI64();
        struct.setPriceIsSet(true);
      }
      if (incoming.get(3)) {
        struct.opeUserId = iprot.readString();
        struct.setOpeUserIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.opeTime = iprot.readI64();
        struct.setOpeTimeIsSet(true);
      }
      if (incoming.get(5)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sysTicketTypeRulelist = new java.util.ArrayList<SYS_TICKET_TYPE_RULE>(_list58.size);
          SYS_TICKET_TYPE_RULE _elem59;
          for (int _i60 = 0; _i60 < _list58.size; ++_i60)
          {
            _elem59 = new SYS_TICKET_TYPE_RULE();
            _elem59.read(iprot);
            struct.sysTicketTypeRulelist.add(_elem59);
          }
        }
        struct.setSysTicketTypeRulelistIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.sysTicketTypeVenuelist = new java.util.ArrayList<SYS_TICKET_TYPE_VENUE>(_list61.size);
          SYS_TICKET_TYPE_VENUE _elem62;
          for (int _i63 = 0; _i63 < _list61.size; ++_i63)
          {
            _elem62 = new SYS_TICKET_TYPE_VENUE();
            _elem62.read(iprot);
            struct.sysTicketTypeVenuelist.add(_elem62);
          }
        }
        struct.setSysTicketTypeVenuelistIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

