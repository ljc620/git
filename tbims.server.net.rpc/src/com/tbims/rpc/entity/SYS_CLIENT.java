/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 终端表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SYS_CLIENT implements org.apache.thrift.TBase<SYS_CLIENT, SYS_CLIENT._Fields>, java.io.Serializable, Cloneable, Comparable<SYS_CLIENT> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SYS_CLIENT");

  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField REGION_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("regionId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField REGION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("regionName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField IP_ADDR_FIELD_DESC = new org.apache.thrift.protocol.TField("ipAddr", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField PORT_FIELD_DESC = new org.apache.thrift.protocol.TField("port", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField RUN_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("runStat", org.apache.thrift.protocol.TType.I32, (short)14);
  private static final org.apache.thrift.protocol.TField GATE_MODE_FIELD_DESC = new org.apache.thrift.protocol.TField("gateMode", org.apache.thrift.protocol.TType.I32, (short)15);
  private static final org.apache.thrift.protocol.TField REPORT_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("reportTime", org.apache.thrift.protocol.TType.I64, (short)16);
  private static final org.apache.thrift.protocol.TField TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketNum", org.apache.thrift.protocol.TType.STRING, (short)17);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SYS_CLIENTStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SYS_CLIENTTupleSchemeFactory();

  /**
   * 终端编号
   */
  public long clientId; // required
  /**
   * 终端名称
   */
  public java.lang.String clientName; // optional
  /**
   * 终端类型
   */
  public java.lang.String clientType; // optional
  /**
   * 区域编号
   */
  public long regionId; // optional
  /**
   * 区域名称
   */
  public java.lang.String regionName; // optional
  /**
   * 网点编号
   */
  public long outletId; // optional
  /**
   * 网点名称
   */
  public java.lang.String outletName; // optional
  /**
   * IP地址
   */
  public java.lang.String ipAddr; // optional
  /**
   * 端口
   */
  public java.lang.String port; // optional
  /**
   * 状态(Y启用N停用)
   */
  public java.lang.String stat; // optional
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // optional
  /**
   * 操作时间
   */
  public long opeTime; // optional
  /**
   * 授权码
   */
  public java.lang.String token; // optional
  /**
   * 运行状态(1-正常,2-停用,3-压印设备故障,4-闸机异常,5-员工卡读卡器异常,6-票据读卡器异常,7-IO输出异常8-网络异常)
   */
  public int runStat; // optional
  /**
   * 运行模式0-正常模式,1-紧急模式,2-落杆模式,3-关闭模式,4-A向关闭,B向不控制,5-A向不控制,B向关闭
   */
  public int gateMode; // optional
  /**
   * 报告时间
   */
  public long reportTime; // optional
  /**
   * 余票数量(自助售票机用) A:数量,B:数量
   */
  public java.lang.String ticketNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 终端编号
     */
    CLIENT_ID((short)1, "clientId"),
    /**
     * 终端名称
     */
    CLIENT_NAME((short)2, "clientName"),
    /**
     * 终端类型
     */
    CLIENT_TYPE((short)3, "clientType"),
    /**
     * 区域编号
     */
    REGION_ID((short)4, "regionId"),
    /**
     * 区域名称
     */
    REGION_NAME((short)5, "regionName"),
    /**
     * 网点编号
     */
    OUTLET_ID((short)6, "outletId"),
    /**
     * 网点名称
     */
    OUTLET_NAME((short)7, "outletName"),
    /**
     * IP地址
     */
    IP_ADDR((short)8, "ipAddr"),
    /**
     * 端口
     */
    PORT((short)9, "port"),
    /**
     * 状态(Y启用N停用)
     */
    STAT((short)10, "stat"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)11, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)12, "opeTime"),
    /**
     * 授权码
     */
    TOKEN((short)13, "token"),
    /**
     * 运行状态(1-正常,2-停用,3-压印设备故障,4-闸机异常,5-员工卡读卡器异常,6-票据读卡器异常,7-IO输出异常8-网络异常)
     */
    RUN_STAT((short)14, "runStat"),
    /**
     * 运行模式0-正常模式,1-紧急模式,2-落杆模式,3-关闭模式,4-A向关闭,B向不控制,5-A向不控制,B向关闭
     */
    GATE_MODE((short)15, "gateMode"),
    /**
     * 报告时间
     */
    REPORT_TIME((short)16, "reportTime"),
    /**
     * 余票数量(自助售票机用) A:数量,B:数量
     */
    TICKET_NUM((short)17, "ticketNum");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CLIENT_ID
          return CLIENT_ID;
        case 2: // CLIENT_NAME
          return CLIENT_NAME;
        case 3: // CLIENT_TYPE
          return CLIENT_TYPE;
        case 4: // REGION_ID
          return REGION_ID;
        case 5: // REGION_NAME
          return REGION_NAME;
        case 6: // OUTLET_ID
          return OUTLET_ID;
        case 7: // OUTLET_NAME
          return OUTLET_NAME;
        case 8: // IP_ADDR
          return IP_ADDR;
        case 9: // PORT
          return PORT;
        case 10: // STAT
          return STAT;
        case 11: // OPE_USER_ID
          return OPE_USER_ID;
        case 12: // OPE_TIME
          return OPE_TIME;
        case 13: // TOKEN
          return TOKEN;
        case 14: // RUN_STAT
          return RUN_STAT;
        case 15: // GATE_MODE
          return GATE_MODE;
        case 16: // REPORT_TIME
          return REPORT_TIME;
        case 17: // TICKET_NUM
          return TICKET_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __CLIENTID_ISSET_ID = 0;
  private static final int __REGIONID_ISSET_ID = 1;
  private static final int __OUTLETID_ISSET_ID = 2;
  private static final int __OPETIME_ISSET_ID = 3;
  private static final int __RUNSTAT_ISSET_ID = 4;
  private static final int __GATEMODE_ISSET_ID = 5;
  private static final int __REPORTTIME_ISSET_ID = 6;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CLIENT_NAME,_Fields.CLIENT_TYPE,_Fields.REGION_ID,_Fields.REGION_NAME,_Fields.OUTLET_ID,_Fields.OUTLET_NAME,_Fields.IP_ADDR,_Fields.PORT,_Fields.STAT,_Fields.OPE_USER_ID,_Fields.OPE_TIME,_Fields.TOKEN,_Fields.RUN_STAT,_Fields.GATE_MODE,_Fields.REPORT_TIME,_Fields.TICKET_NUM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION_ID, new org.apache.thrift.meta_data.FieldMetaData("regionId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REGION_NAME, new org.apache.thrift.meta_data.FieldMetaData("regionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.IP_ADDR, new org.apache.thrift.meta_data.FieldMetaData("ipAddr", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PORT, new org.apache.thrift.meta_data.FieldMetaData("port", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.RUN_STAT, new org.apache.thrift.meta_data.FieldMetaData("runStat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.GATE_MODE, new org.apache.thrift.meta_data.FieldMetaData("gateMode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.REPORT_TIME, new org.apache.thrift.meta_data.FieldMetaData("reportTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("ticketNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SYS_CLIENT.class, metaDataMap);
  }

  public SYS_CLIENT() {
  }

  public SYS_CLIENT(
    long clientId)
  {
    this();
    this.clientId = clientId;
    setClientIdIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SYS_CLIENT(SYS_CLIENT other) {
    __isset_bitfield = other.__isset_bitfield;
    this.clientId = other.clientId;
    if (other.isSetClientName()) {
      this.clientName = other.clientName;
    }
    if (other.isSetClientType()) {
      this.clientType = other.clientType;
    }
    this.regionId = other.regionId;
    if (other.isSetRegionName()) {
      this.regionName = other.regionName;
    }
    this.outletId = other.outletId;
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetIpAddr()) {
      this.ipAddr = other.ipAddr;
    }
    if (other.isSetPort()) {
      this.port = other.port;
    }
    if (other.isSetStat()) {
      this.stat = other.stat;
    }
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
    if (other.isSetToken()) {
      this.token = other.token;
    }
    this.runStat = other.runStat;
    this.gateMode = other.gateMode;
    this.reportTime = other.reportTime;
    if (other.isSetTicketNum()) {
      this.ticketNum = other.ticketNum;
    }
  }

  public SYS_CLIENT deepCopy() {
    return new SYS_CLIENT(this);
  }

  @Override
  public void clear() {
    setClientIdIsSet(false);
    this.clientId = 0;
    this.clientName = null;
    this.clientType = null;
    setRegionIdIsSet(false);
    this.regionId = 0;
    this.regionName = null;
    setOutletIdIsSet(false);
    this.outletId = 0;
    this.outletName = null;
    this.ipAddr = null;
    this.port = null;
    this.stat = null;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
    this.token = null;
    setRunStatIsSet(false);
    this.runStat = 0;
    setGateModeIsSet(false);
    this.gateMode = 0;
    setReportTimeIsSet(false);
    this.reportTime = 0;
    this.ticketNum = null;
  }

  /**
   * 终端编号
   */
  public long getClientId() {
    return this.clientId;
  }

  /**
   * 终端编号
   */
  public SYS_CLIENT setClientId(long clientId) {
    this.clientId = clientId;
    setClientIdIsSet(true);
    return this;
  }

  public void unsetClientId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  public void setClientIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
  }

  /**
   * 终端名称
   */
  public java.lang.String getClientName() {
    return this.clientName;
  }

  /**
   * 终端名称
   */
  public SYS_CLIENT setClientName(java.lang.String clientName) {
    this.clientName = clientName;
    return this;
  }

  public void unsetClientName() {
    this.clientName = null;
  }

  /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
  public boolean isSetClientName() {
    return this.clientName != null;
  }

  public void setClientNameIsSet(boolean value) {
    if (!value) {
      this.clientName = null;
    }
  }

  /**
   * 终端类型
   */
  public java.lang.String getClientType() {
    return this.clientType;
  }

  /**
   * 终端类型
   */
  public SYS_CLIENT setClientType(java.lang.String clientType) {
    this.clientType = clientType;
    return this;
  }

  public void unsetClientType() {
    this.clientType = null;
  }

  /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
  public boolean isSetClientType() {
    return this.clientType != null;
  }

  public void setClientTypeIsSet(boolean value) {
    if (!value) {
      this.clientType = null;
    }
  }

  /**
   * 区域编号
   */
  public long getRegionId() {
    return this.regionId;
  }

  /**
   * 区域编号
   */
  public SYS_CLIENT setRegionId(long regionId) {
    this.regionId = regionId;
    setRegionIdIsSet(true);
    return this;
  }

  public void unsetRegionId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REGIONID_ISSET_ID);
  }

  /** Returns true if field regionId is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REGIONID_ISSET_ID);
  }

  public void setRegionIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REGIONID_ISSET_ID, value);
  }

  /**
   * 区域名称
   */
  public java.lang.String getRegionName() {
    return this.regionName;
  }

  /**
   * 区域名称
   */
  public SYS_CLIENT setRegionName(java.lang.String regionName) {
    this.regionName = regionName;
    return this;
  }

  public void unsetRegionName() {
    this.regionName = null;
  }

  /** Returns true if field regionName is set (has been assigned a value) and false otherwise */
  public boolean isSetRegionName() {
    return this.regionName != null;
  }

  public void setRegionNameIsSet(boolean value) {
    if (!value) {
      this.regionName = null;
    }
  }

  /**
   * 网点编号
   */
  public long getOutletId() {
    return this.outletId;
  }

  /**
   * 网点编号
   */
  public SYS_CLIENT setOutletId(long outletId) {
    this.outletId = outletId;
    setOutletIdIsSet(true);
    return this;
  }

  public void unsetOutletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  public void setOutletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLETID_ISSET_ID, value);
  }

  /**
   * 网点名称
   */
  public java.lang.String getOutletName() {
    return this.outletName;
  }

  /**
   * 网点名称
   */
  public SYS_CLIENT setOutletName(java.lang.String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * IP地址
   */
  public java.lang.String getIpAddr() {
    return this.ipAddr;
  }

  /**
   * IP地址
   */
  public SYS_CLIENT setIpAddr(java.lang.String ipAddr) {
    this.ipAddr = ipAddr;
    return this;
  }

  public void unsetIpAddr() {
    this.ipAddr = null;
  }

  /** Returns true if field ipAddr is set (has been assigned a value) and false otherwise */
  public boolean isSetIpAddr() {
    return this.ipAddr != null;
  }

  public void setIpAddrIsSet(boolean value) {
    if (!value) {
      this.ipAddr = null;
    }
  }

  /**
   * 端口
   */
  public java.lang.String getPort() {
    return this.port;
  }

  /**
   * 端口
   */
  public SYS_CLIENT setPort(java.lang.String port) {
    this.port = port;
    return this;
  }

  public void unsetPort() {
    this.port = null;
  }

  /** Returns true if field port is set (has been assigned a value) and false otherwise */
  public boolean isSetPort() {
    return this.port != null;
  }

  public void setPortIsSet(boolean value) {
    if (!value) {
      this.port = null;
    }
  }

  /**
   * 状态(Y启用N停用)
   */
  public java.lang.String getStat() {
    return this.stat;
  }

  /**
   * 状态(Y启用N停用)
   */
  public SYS_CLIENT setStat(java.lang.String stat) {
    this.stat = stat;
    return this;
  }

  public void unsetStat() {
    this.stat = null;
  }

  /** Returns true if field stat is set (has been assigned a value) and false otherwise */
  public boolean isSetStat() {
    return this.stat != null;
  }

  public void setStatIsSet(boolean value) {
    if (!value) {
      this.stat = null;
    }
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SYS_CLIENT setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SYS_CLIENT setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  /**
   * 授权码
   */
  public java.lang.String getToken() {
    return this.token;
  }

  /**
   * 授权码
   */
  public SYS_CLIENT setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  /**
   * 运行状态(1-正常,2-停用,3-压印设备故障,4-闸机异常,5-员工卡读卡器异常,6-票据读卡器异常,7-IO输出异常8-网络异常)
   */
  public int getRunStat() {
    return this.runStat;
  }

  /**
   * 运行状态(1-正常,2-停用,3-压印设备故障,4-闸机异常,5-员工卡读卡器异常,6-票据读卡器异常,7-IO输出异常8-网络异常)
   */
  public SYS_CLIENT setRunStat(int runStat) {
    this.runStat = runStat;
    setRunStatIsSet(true);
    return this;
  }

  public void unsetRunStat() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RUNSTAT_ISSET_ID);
  }

  /** Returns true if field runStat is set (has been assigned a value) and false otherwise */
  public boolean isSetRunStat() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RUNSTAT_ISSET_ID);
  }

  public void setRunStatIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RUNSTAT_ISSET_ID, value);
  }

  /**
   * 运行模式0-正常模式,1-紧急模式,2-落杆模式,3-关闭模式,4-A向关闭,B向不控制,5-A向不控制,B向关闭
   */
  public int getGateMode() {
    return this.gateMode;
  }

  /**
   * 运行模式0-正常模式,1-紧急模式,2-落杆模式,3-关闭模式,4-A向关闭,B向不控制,5-A向不控制,B向关闭
   */
  public SYS_CLIENT setGateMode(int gateMode) {
    this.gateMode = gateMode;
    setGateModeIsSet(true);
    return this;
  }

  public void unsetGateMode() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __GATEMODE_ISSET_ID);
  }

  /** Returns true if field gateMode is set (has been assigned a value) and false otherwise */
  public boolean isSetGateMode() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __GATEMODE_ISSET_ID);
  }

  public void setGateModeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __GATEMODE_ISSET_ID, value);
  }

  /**
   * 报告时间
   */
  public long getReportTime() {
    return this.reportTime;
  }

  /**
   * 报告时间
   */
  public SYS_CLIENT setReportTime(long reportTime) {
    this.reportTime = reportTime;
    setReportTimeIsSet(true);
    return this;
  }

  public void unsetReportTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REPORTTIME_ISSET_ID);
  }

  /** Returns true if field reportTime is set (has been assigned a value) and false otherwise */
  public boolean isSetReportTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REPORTTIME_ISSET_ID);
  }

  public void setReportTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REPORTTIME_ISSET_ID, value);
  }

  /**
   * 余票数量(自助售票机用) A:数量,B:数量
   */
  public java.lang.String getTicketNum() {
    return this.ticketNum;
  }

  /**
   * 余票数量(自助售票机用) A:数量,B:数量
   */
  public SYS_CLIENT setTicketNum(java.lang.String ticketNum) {
    this.ticketNum = ticketNum;
    return this;
  }

  public void unsetTicketNum() {
    this.ticketNum = null;
  }

  /** Returns true if field ticketNum is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketNum() {
    return this.ticketNum != null;
  }

  public void setTicketNumIsSet(boolean value) {
    if (!value) {
      this.ticketNum = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((java.lang.Long)value);
      }
      break;

    case CLIENT_NAME:
      if (value == null) {
        unsetClientName();
      } else {
        setClientName((java.lang.String)value);
      }
      break;

    case CLIENT_TYPE:
      if (value == null) {
        unsetClientType();
      } else {
        setClientType((java.lang.String)value);
      }
      break;

    case REGION_ID:
      if (value == null) {
        unsetRegionId();
      } else {
        setRegionId((java.lang.Long)value);
      }
      break;

    case REGION_NAME:
      if (value == null) {
        unsetRegionName();
      } else {
        setRegionName((java.lang.String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((java.lang.Long)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((java.lang.String)value);
      }
      break;

    case IP_ADDR:
      if (value == null) {
        unsetIpAddr();
      } else {
        setIpAddr((java.lang.String)value);
      }
      break;

    case PORT:
      if (value == null) {
        unsetPort();
      } else {
        setPort((java.lang.String)value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((java.lang.String)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case RUN_STAT:
      if (value == null) {
        unsetRunStat();
      } else {
        setRunStat((java.lang.Integer)value);
      }
      break;

    case GATE_MODE:
      if (value == null) {
        unsetGateMode();
      } else {
        setGateMode((java.lang.Integer)value);
      }
      break;

    case REPORT_TIME:
      if (value == null) {
        unsetReportTime();
      } else {
        setReportTime((java.lang.Long)value);
      }
      break;

    case TICKET_NUM:
      if (value == null) {
        unsetTicketNum();
      } else {
        setTicketNum((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CLIENT_ID:
      return getClientId();

    case CLIENT_NAME:
      return getClientName();

    case CLIENT_TYPE:
      return getClientType();

    case REGION_ID:
      return getRegionId();

    case REGION_NAME:
      return getRegionName();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_NAME:
      return getOutletName();

    case IP_ADDR:
      return getIpAddr();

    case PORT:
      return getPort();

    case STAT:
      return getStat();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    case TOKEN:
      return getToken();

    case RUN_STAT:
      return getRunStat();

    case GATE_MODE:
      return getGateMode();

    case REPORT_TIME:
      return getReportTime();

    case TICKET_NUM:
      return getTicketNum();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CLIENT_ID:
      return isSetClientId();
    case CLIENT_NAME:
      return isSetClientName();
    case CLIENT_TYPE:
      return isSetClientType();
    case REGION_ID:
      return isSetRegionId();
    case REGION_NAME:
      return isSetRegionName();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_NAME:
      return isSetOutletName();
    case IP_ADDR:
      return isSetIpAddr();
    case PORT:
      return isSetPort();
    case STAT:
      return isSetStat();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    case TOKEN:
      return isSetToken();
    case RUN_STAT:
      return isSetRunStat();
    case GATE_MODE:
      return isSetGateMode();
    case REPORT_TIME:
      return isSetReportTime();
    case TICKET_NUM:
      return isSetTicketNum();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SYS_CLIENT)
      return this.equals((SYS_CLIENT)that);
    return false;
  }

  public boolean equals(SYS_CLIENT that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_clientId = true;
    boolean that_present_clientId = true;
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (this.clientId != that.clientId)
        return false;
    }

    boolean this_present_clientName = true && this.isSetClientName();
    boolean that_present_clientName = true && that.isSetClientName();
    if (this_present_clientName || that_present_clientName) {
      if (!(this_present_clientName && that_present_clientName))
        return false;
      if (!this.clientName.equals(that.clientName))
        return false;
    }

    boolean this_present_clientType = true && this.isSetClientType();
    boolean that_present_clientType = true && that.isSetClientType();
    if (this_present_clientType || that_present_clientType) {
      if (!(this_present_clientType && that_present_clientType))
        return false;
      if (!this.clientType.equals(that.clientType))
        return false;
    }

    boolean this_present_regionId = true && this.isSetRegionId();
    boolean that_present_regionId = true && that.isSetRegionId();
    if (this_present_regionId || that_present_regionId) {
      if (!(this_present_regionId && that_present_regionId))
        return false;
      if (this.regionId != that.regionId)
        return false;
    }

    boolean this_present_regionName = true && this.isSetRegionName();
    boolean that_present_regionName = true && that.isSetRegionName();
    if (this_present_regionName || that_present_regionName) {
      if (!(this_present_regionName && that_present_regionName))
        return false;
      if (!this.regionName.equals(that.regionName))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (this.outletId != that.outletId)
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_ipAddr = true && this.isSetIpAddr();
    boolean that_present_ipAddr = true && that.isSetIpAddr();
    if (this_present_ipAddr || that_present_ipAddr) {
      if (!(this_present_ipAddr && that_present_ipAddr))
        return false;
      if (!this.ipAddr.equals(that.ipAddr))
        return false;
    }

    boolean this_present_port = true && this.isSetPort();
    boolean that_present_port = true && that.isSetPort();
    if (this_present_port || that_present_port) {
      if (!(this_present_port && that_present_port))
        return false;
      if (!this.port.equals(that.port))
        return false;
    }

    boolean this_present_stat = true && this.isSetStat();
    boolean that_present_stat = true && that.isSetStat();
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!this.stat.equals(that.stat))
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true && this.isSetOpeTime();
    boolean that_present_opeTime = true && that.isSetOpeTime();
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_runStat = true && this.isSetRunStat();
    boolean that_present_runStat = true && that.isSetRunStat();
    if (this_present_runStat || that_present_runStat) {
      if (!(this_present_runStat && that_present_runStat))
        return false;
      if (this.runStat != that.runStat)
        return false;
    }

    boolean this_present_gateMode = true && this.isSetGateMode();
    boolean that_present_gateMode = true && that.isSetGateMode();
    if (this_present_gateMode || that_present_gateMode) {
      if (!(this_present_gateMode && that_present_gateMode))
        return false;
      if (this.gateMode != that.gateMode)
        return false;
    }

    boolean this_present_reportTime = true && this.isSetReportTime();
    boolean that_present_reportTime = true && that.isSetReportTime();
    if (this_present_reportTime || that_present_reportTime) {
      if (!(this_present_reportTime && that_present_reportTime))
        return false;
      if (this.reportTime != that.reportTime)
        return false;
    }

    boolean this_present_ticketNum = true && this.isSetTicketNum();
    boolean that_present_ticketNum = true && that.isSetTicketNum();
    if (this_present_ticketNum || that_present_ticketNum) {
      if (!(this_present_ticketNum && that_present_ticketNum))
        return false;
      if (!this.ticketNum.equals(that.ticketNum))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clientId);

    hashCode = hashCode * 8191 + ((isSetClientName()) ? 131071 : 524287);
    if (isSetClientName())
      hashCode = hashCode * 8191 + clientName.hashCode();

    hashCode = hashCode * 8191 + ((isSetClientType()) ? 131071 : 524287);
    if (isSetClientType())
      hashCode = hashCode * 8191 + clientType.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegionId()) ? 131071 : 524287);
    if (isSetRegionId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(regionId);

    hashCode = hashCode * 8191 + ((isSetRegionName()) ? 131071 : 524287);
    if (isSetRegionName())
      hashCode = hashCode * 8191 + regionName.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutletId()) ? 131071 : 524287);
    if (isSetOutletId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outletId);

    hashCode = hashCode * 8191 + ((isSetOutletName()) ? 131071 : 524287);
    if (isSetOutletName())
      hashCode = hashCode * 8191 + outletName.hashCode();

    hashCode = hashCode * 8191 + ((isSetIpAddr()) ? 131071 : 524287);
    if (isSetIpAddr())
      hashCode = hashCode * 8191 + ipAddr.hashCode();

    hashCode = hashCode * 8191 + ((isSetPort()) ? 131071 : 524287);
    if (isSetPort())
      hashCode = hashCode * 8191 + port.hashCode();

    hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
    if (isSetStat())
      hashCode = hashCode * 8191 + stat.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeTime()) ? 131071 : 524287);
    if (isSetOpeTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetRunStat()) ? 131071 : 524287);
    if (isSetRunStat())
      hashCode = hashCode * 8191 + runStat;

    hashCode = hashCode * 8191 + ((isSetGateMode()) ? 131071 : 524287);
    if (isSetGateMode())
      hashCode = hashCode * 8191 + gateMode;

    hashCode = hashCode * 8191 + ((isSetReportTime()) ? 131071 : 524287);
    if (isSetReportTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(reportTime);

    hashCode = hashCode * 8191 + ((isSetTicketNum()) ? 131071 : 524287);
    if (isSetTicketNum())
      hashCode = hashCode * 8191 + ticketNum.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SYS_CLIENT other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientType()).compareTo(other.isSetClientType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, other.clientType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegionId()).compareTo(other.isSetRegionId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionId, other.regionId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegionName()).compareTo(other.isSetRegionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionName, other.regionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIpAddr()).compareTo(other.isSetIpAddr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIpAddr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ipAddr, other.ipAddr);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPort()).compareTo(other.isSetPort());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPort()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.port, other.port);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRunStat()).compareTo(other.isSetRunStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRunStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.runStat, other.runStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetGateMode()).compareTo(other.isSetGateMode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetGateMode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.gateMode, other.gateMode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReportTime()).compareTo(other.isSetReportTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReportTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reportTime, other.reportTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketNum()).compareTo(other.isSetTicketNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketNum, other.ticketNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SYS_CLIENT(");
    boolean first = true;

    sb.append("clientId:");
    sb.append(this.clientId);
    first = false;
    if (isSetClientName()) {
      if (!first) sb.append(", ");
      sb.append("clientName:");
      if (this.clientName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientName);
      }
      first = false;
    }
    if (isSetClientType()) {
      if (!first) sb.append(", ");
      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
    }
    if (isSetRegionId()) {
      if (!first) sb.append(", ");
      sb.append("regionId:");
      sb.append(this.regionId);
      first = false;
    }
    if (isSetRegionName()) {
      if (!first) sb.append(", ");
      sb.append("regionName:");
      if (this.regionName == null) {
        sb.append("null");
      } else {
        sb.append(this.regionName);
      }
      first = false;
    }
    if (isSetOutletId()) {
      if (!first) sb.append(", ");
      sb.append("outletId:");
      sb.append(this.outletId);
      first = false;
    }
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetIpAddr()) {
      if (!first) sb.append(", ");
      sb.append("ipAddr:");
      if (this.ipAddr == null) {
        sb.append("null");
      } else {
        sb.append(this.ipAddr);
      }
      first = false;
    }
    if (isSetPort()) {
      if (!first) sb.append(", ");
      sb.append("port:");
      if (this.port == null) {
        sb.append("null");
      } else {
        sb.append(this.port);
      }
      first = false;
    }
    if (isSetStat()) {
      if (!first) sb.append(", ");
      sb.append("stat:");
      if (this.stat == null) {
        sb.append("null");
      } else {
        sb.append(this.stat);
      }
      first = false;
    }
    if (isSetOpeUserId()) {
      if (!first) sb.append(", ");
      sb.append("opeUserId:");
      if (this.opeUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.opeUserId);
      }
      first = false;
    }
    if (isSetOpeTime()) {
      if (!first) sb.append(", ");
      sb.append("opeTime:");
      sb.append(this.opeTime);
      first = false;
    }
    if (isSetToken()) {
      if (!first) sb.append(", ");
      sb.append("token:");
      if (this.token == null) {
        sb.append("null");
      } else {
        sb.append(this.token);
      }
      first = false;
    }
    if (isSetRunStat()) {
      if (!first) sb.append(", ");
      sb.append("runStat:");
      sb.append(this.runStat);
      first = false;
    }
    if (isSetGateMode()) {
      if (!first) sb.append(", ");
      sb.append("gateMode:");
      sb.append(this.gateMode);
      first = false;
    }
    if (isSetReportTime()) {
      if (!first) sb.append(", ");
      sb.append("reportTime:");
      sb.append(this.reportTime);
      first = false;
    }
    if (isSetTicketNum()) {
      if (!first) sb.append(", ");
      sb.append("ticketNum:");
      if (this.ticketNum == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketNum);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'clientId' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SYS_CLIENTStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_CLIENTStandardScheme getScheme() {
      return new SYS_CLIENTStandardScheme();
    }
  }

  private static class SYS_CLIENTStandardScheme extends org.apache.thrift.scheme.StandardScheme<SYS_CLIENT> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SYS_CLIENT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clientId = iprot.readI64();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // CLIENT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientName = iprot.readString();
              struct.setClientNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // CLIENT_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clientType = iprot.readString();
              struct.setClientTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // REGION_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.regionId = iprot.readI64();
              struct.setRegionIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REGION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.regionName = iprot.readString();
              struct.setRegionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outletId = iprot.readI64();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IP_ADDR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ipAddr = iprot.readString();
              struct.setIpAddrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // PORT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.port = iprot.readString();
              struct.setPortIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stat = iprot.readString();
              struct.setStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // RUN_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.runStat = iprot.readI32();
              struct.setRunStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // GATE_MODE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.gateMode = iprot.readI32();
              struct.setGateModeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // REPORT_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.reportTime = iprot.readI64();
              struct.setReportTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // TICKET_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketNum = iprot.readString();
              struct.setTicketNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetClientId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SYS_CLIENT struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
      oprot.writeI64(struct.clientId);
      oprot.writeFieldEnd();
      if (struct.clientName != null) {
        if (struct.isSetClientName()) {
          oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
          oprot.writeString(struct.clientName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.clientType != null) {
        if (struct.isSetClientType()) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRegionId()) {
        oprot.writeFieldBegin(REGION_ID_FIELD_DESC);
        oprot.writeI64(struct.regionId);
        oprot.writeFieldEnd();
      }
      if (struct.regionName != null) {
        if (struct.isSetRegionName()) {
          oprot.writeFieldBegin(REGION_NAME_FIELD_DESC);
          oprot.writeString(struct.regionName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutletId()) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ipAddr != null) {
        if (struct.isSetIpAddr()) {
          oprot.writeFieldBegin(IP_ADDR_FIELD_DESC);
          oprot.writeString(struct.ipAddr);
          oprot.writeFieldEnd();
        }
      }
      if (struct.port != null) {
        if (struct.isSetPort()) {
          oprot.writeFieldBegin(PORT_FIELD_DESC);
          oprot.writeString(struct.port);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stat != null) {
        if (struct.isSetStat()) {
          oprot.writeFieldBegin(STAT_FIELD_DESC);
          oprot.writeString(struct.stat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.opeUserId != null) {
        if (struct.isSetOpeUserId()) {
          oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.opeUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpeTime()) {
        oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
        oprot.writeI64(struct.opeTime);
        oprot.writeFieldEnd();
      }
      if (struct.token != null) {
        if (struct.isSetToken()) {
          oprot.writeFieldBegin(TOKEN_FIELD_DESC);
          oprot.writeString(struct.token);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRunStat()) {
        oprot.writeFieldBegin(RUN_STAT_FIELD_DESC);
        oprot.writeI32(struct.runStat);
        oprot.writeFieldEnd();
      }
      if (struct.isSetGateMode()) {
        oprot.writeFieldBegin(GATE_MODE_FIELD_DESC);
        oprot.writeI32(struct.gateMode);
        oprot.writeFieldEnd();
      }
      if (struct.isSetReportTime()) {
        oprot.writeFieldBegin(REPORT_TIME_FIELD_DESC);
        oprot.writeI64(struct.reportTime);
        oprot.writeFieldEnd();
      }
      if (struct.ticketNum != null) {
        if (struct.isSetTicketNum()) {
          oprot.writeFieldBegin(TICKET_NUM_FIELD_DESC);
          oprot.writeString(struct.ticketNum);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SYS_CLIENTTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_CLIENTTupleScheme getScheme() {
      return new SYS_CLIENTTupleScheme();
    }
  }

  private static class SYS_CLIENTTupleScheme extends org.apache.thrift.scheme.TupleScheme<SYS_CLIENT> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SYS_CLIENT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeI64(struct.clientId);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetClientName()) {
        optionals.set(0);
      }
      if (struct.isSetClientType()) {
        optionals.set(1);
      }
      if (struct.isSetRegionId()) {
        optionals.set(2);
      }
      if (struct.isSetRegionName()) {
        optionals.set(3);
      }
      if (struct.isSetOutletId()) {
        optionals.set(4);
      }
      if (struct.isSetOutletName()) {
        optionals.set(5);
      }
      if (struct.isSetIpAddr()) {
        optionals.set(6);
      }
      if (struct.isSetPort()) {
        optionals.set(7);
      }
      if (struct.isSetStat()) {
        optionals.set(8);
      }
      if (struct.isSetOpeUserId()) {
        optionals.set(9);
      }
      if (struct.isSetOpeTime()) {
        optionals.set(10);
      }
      if (struct.isSetToken()) {
        optionals.set(11);
      }
      if (struct.isSetRunStat()) {
        optionals.set(12);
      }
      if (struct.isSetGateMode()) {
        optionals.set(13);
      }
      if (struct.isSetReportTime()) {
        optionals.set(14);
      }
      if (struct.isSetTicketNum()) {
        optionals.set(15);
      }
      oprot.writeBitSet(optionals, 16);
      if (struct.isSetClientName()) {
        oprot.writeString(struct.clientName);
      }
      if (struct.isSetClientType()) {
        oprot.writeString(struct.clientType);
      }
      if (struct.isSetRegionId()) {
        oprot.writeI64(struct.regionId);
      }
      if (struct.isSetRegionName()) {
        oprot.writeString(struct.regionName);
      }
      if (struct.isSetOutletId()) {
        oprot.writeI64(struct.outletId);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetIpAddr()) {
        oprot.writeString(struct.ipAddr);
      }
      if (struct.isSetPort()) {
        oprot.writeString(struct.port);
      }
      if (struct.isSetStat()) {
        oprot.writeString(struct.stat);
      }
      if (struct.isSetOpeUserId()) {
        oprot.writeString(struct.opeUserId);
      }
      if (struct.isSetOpeTime()) {
        oprot.writeI64(struct.opeTime);
      }
      if (struct.isSetToken()) {
        oprot.writeString(struct.token);
      }
      if (struct.isSetRunStat()) {
        oprot.writeI32(struct.runStat);
      }
      if (struct.isSetGateMode()) {
        oprot.writeI32(struct.gateMode);
      }
      if (struct.isSetReportTime()) {
        oprot.writeI64(struct.reportTime);
      }
      if (struct.isSetTicketNum()) {
        oprot.writeString(struct.ticketNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SYS_CLIENT struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.clientId = iprot.readI64();
      struct.setClientIdIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(16);
      if (incoming.get(0)) {
        struct.clientName = iprot.readString();
        struct.setClientNameIsSet(true);
      }
      if (incoming.get(1)) {
        struct.clientType = iprot.readString();
        struct.setClientTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.regionId = iprot.readI64();
        struct.setRegionIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.regionName = iprot.readString();
        struct.setRegionNameIsSet(true);
      }
      if (incoming.get(4)) {
        struct.outletId = iprot.readI64();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(6)) {
        struct.ipAddr = iprot.readString();
        struct.setIpAddrIsSet(true);
      }
      if (incoming.get(7)) {
        struct.port = iprot.readString();
        struct.setPortIsSet(true);
      }
      if (incoming.get(8)) {
        struct.stat = iprot.readString();
        struct.setStatIsSet(true);
      }
      if (incoming.get(9)) {
        struct.opeUserId = iprot.readString();
        struct.setOpeUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.opeTime = iprot.readI64();
        struct.setOpeTimeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.token = iprot.readString();
        struct.setTokenIsSet(true);
      }
      if (incoming.get(12)) {
        struct.runStat = iprot.readI32();
        struct.setRunStatIsSet(true);
      }
      if (incoming.get(13)) {
        struct.gateMode = iprot.readI32();
        struct.setGateModeIsSet(true);
      }
      if (incoming.get(14)) {
        struct.reportTime = iprot.readI64();
        struct.setReportTimeIsSet(true);
      }
      if (incoming.get(15)) {
        struct.ticketNum = iprot.readString();
        struct.setTicketNumIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

