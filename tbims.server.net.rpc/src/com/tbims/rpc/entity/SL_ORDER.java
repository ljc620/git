/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 销售单记录表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SL_ORDER implements org.apache.thrift.TBase<SL_ORDER, SL_ORDER._Fields>, java.io.Serializable, Cloneable, Comparable<SL_ORDER> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_ORDER");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orderType", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField DUE_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("dueSum", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField REAL_SUM_FIELD_DESC = new org.apache.thrift.protocol.TField("realSum", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField REMARK_FIELD_DESC = new org.apache.thrift.protocol.TField("remark", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField PAY_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("payStat", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField SALE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("saleUserId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField SALE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("saleTime", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField SL_PAY_TYPELIST_FIELD_DESC = new org.apache.thrift.protocol.TField("slPayTypelist", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField SL_ORDER_DETAILLIST_FIELD_DESC = new org.apache.thrift.protocol.TField("slOrderDetaillist", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_ORDERStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_ORDERTupleSchemeFactory();

  /**
   * 销售单号
   */
  public java.lang.String orderId; // required
  /**
   * 销售类型(XC-现场售票、ZY-自营售票、TD-团队换票、WL-网络代理换票、ST-实体代理、BP-补票)
   */
  public java.lang.String orderType; // required
  /**
   * 销售张数
   */
  public long ticketCount; // required
  /**
   * 应收合计
   */
  public long dueSum; // required
  /**
   * 实收合计
   */
  public long realSum; // required
  /**
   * 订单说明
   */
  public java.lang.String remark; // optional
  /**
   * 支付状态(1-待支付 2-已支付 3-支付失败)
   */
  public java.lang.String payStat; // required
  /**
   * 售票人
   */
  public java.lang.String saleUserId; // required
  /**
   * 售票时间
   */
  public long saleTime; // required
  /**
   * 版本号
   */
  public long versionNo; // required
  /**
   * 支付明细
   */
  public java.util.List<SL_PAY_TYPE> slPayTypelist; // optional
  /**
   * 销售明细
   */
  public java.util.List<SL_ORDER_DETAIL> slOrderDetaillist; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 销售单号
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 销售类型(XC-现场售票、ZY-自营售票、TD-团队换票、WL-网络代理换票、ST-实体代理、BP-补票)
     */
    ORDER_TYPE((short)2, "orderType"),
    /**
     * 销售张数
     */
    TICKET_COUNT((short)3, "ticketCount"),
    /**
     * 应收合计
     */
    DUE_SUM((short)4, "dueSum"),
    /**
     * 实收合计
     */
    REAL_SUM((short)5, "realSum"),
    /**
     * 订单说明
     */
    REMARK((short)6, "remark"),
    /**
     * 支付状态(1-待支付 2-已支付 3-支付失败)
     */
    PAY_STAT((short)7, "payStat"),
    /**
     * 售票人
     */
    SALE_USER_ID((short)8, "saleUserId"),
    /**
     * 售票时间
     */
    SALE_TIME((short)9, "saleTime"),
    /**
     * 版本号
     */
    VERSION_NO((short)10, "versionNo"),
    /**
     * 支付明细
     */
    SL_PAY_TYPELIST((short)11, "slPayTypelist"),
    /**
     * 销售明细
     */
    SL_ORDER_DETAILLIST((short)12, "slOrderDetaillist");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // ORDER_TYPE
          return ORDER_TYPE;
        case 3: // TICKET_COUNT
          return TICKET_COUNT;
        case 4: // DUE_SUM
          return DUE_SUM;
        case 5: // REAL_SUM
          return REAL_SUM;
        case 6: // REMARK
          return REMARK;
        case 7: // PAY_STAT
          return PAY_STAT;
        case 8: // SALE_USER_ID
          return SALE_USER_ID;
        case 9: // SALE_TIME
          return SALE_TIME;
        case 10: // VERSION_NO
          return VERSION_NO;
        case 11: // SL_PAY_TYPELIST
          return SL_PAY_TYPELIST;
        case 12: // SL_ORDER_DETAILLIST
          return SL_ORDER_DETAILLIST;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKETCOUNT_ISSET_ID = 0;
  private static final int __DUESUM_ISSET_ID = 1;
  private static final int __REALSUM_ISSET_ID = 2;
  private static final int __SALETIME_ISSET_ID = 3;
  private static final int __VERSIONNO_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.REMARK,_Fields.SL_PAY_TYPELIST,_Fields.SL_ORDER_DETAILLIST};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orderType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ticketCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DUE_SUM, new org.apache.thrift.meta_data.FieldMetaData("dueSum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REAL_SUM, new org.apache.thrift.meta_data.FieldMetaData("realSum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.REMARK, new org.apache.thrift.meta_data.FieldMetaData("remark", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_STAT, new org.apache.thrift.meta_data.FieldMetaData("payStat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("saleUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SALE_TIME, new org.apache.thrift.meta_data.FieldMetaData("saleTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SL_PAY_TYPELIST, new org.apache.thrift.meta_data.FieldMetaData("slPayTypelist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SL_PAY_TYPE"))));
    tmpMap.put(_Fields.SL_ORDER_DETAILLIST, new org.apache.thrift.meta_data.FieldMetaData("slOrderDetaillist", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "SL_ORDER_DETAIL"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_ORDER.class, metaDataMap);
  }

  public SL_ORDER() {
  }

  public SL_ORDER(
    java.lang.String orderId,
    java.lang.String orderType,
    long ticketCount,
    long dueSum,
    long realSum,
    java.lang.String payStat,
    java.lang.String saleUserId,
    long saleTime,
    long versionNo)
  {
    this();
    this.orderId = orderId;
    this.orderType = orderType;
    this.ticketCount = ticketCount;
    setTicketCountIsSet(true);
    this.dueSum = dueSum;
    setDueSumIsSet(true);
    this.realSum = realSum;
    setRealSumIsSet(true);
    this.payStat = payStat;
    this.saleUserId = saleUserId;
    this.saleTime = saleTime;
    setSaleTimeIsSet(true);
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_ORDER(SL_ORDER other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetOrderType()) {
      this.orderType = other.orderType;
    }
    this.ticketCount = other.ticketCount;
    this.dueSum = other.dueSum;
    this.realSum = other.realSum;
    if (other.isSetRemark()) {
      this.remark = other.remark;
    }
    if (other.isSetPayStat()) {
      this.payStat = other.payStat;
    }
    if (other.isSetSaleUserId()) {
      this.saleUserId = other.saleUserId;
    }
    this.saleTime = other.saleTime;
    this.versionNo = other.versionNo;
    if (other.isSetSlPayTypelist()) {
      java.util.List<SL_PAY_TYPE> __this__slPayTypelist = new java.util.ArrayList<SL_PAY_TYPE>(other.slPayTypelist.size());
      for (SL_PAY_TYPE other_element : other.slPayTypelist) {
        __this__slPayTypelist.add(other_element);
      }
      this.slPayTypelist = __this__slPayTypelist;
    }
    if (other.isSetSlOrderDetaillist()) {
      java.util.List<SL_ORDER_DETAIL> __this__slOrderDetaillist = new java.util.ArrayList<SL_ORDER_DETAIL>(other.slOrderDetaillist.size());
      for (SL_ORDER_DETAIL other_element : other.slOrderDetaillist) {
        __this__slOrderDetaillist.add(other_element);
      }
      this.slOrderDetaillist = __this__slOrderDetaillist;
    }
  }

  public SL_ORDER deepCopy() {
    return new SL_ORDER(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.orderType = null;
    setTicketCountIsSet(false);
    this.ticketCount = 0;
    setDueSumIsSet(false);
    this.dueSum = 0;
    setRealSumIsSet(false);
    this.realSum = 0;
    this.remark = null;
    this.payStat = null;
    this.saleUserId = null;
    setSaleTimeIsSet(false);
    this.saleTime = 0;
    setVersionNoIsSet(false);
    this.versionNo = 0;
    this.slPayTypelist = null;
    this.slOrderDetaillist = null;
  }

  /**
   * 销售单号
   */
  public java.lang.String getOrderId() {
    return this.orderId;
  }

  /**
   * 销售单号
   */
  public SL_ORDER setOrderId(java.lang.String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 销售类型(XC-现场售票、ZY-自营售票、TD-团队换票、WL-网络代理换票、ST-实体代理、BP-补票)
   */
  public java.lang.String getOrderType() {
    return this.orderType;
  }

  /**
   * 销售类型(XC-现场售票、ZY-自营售票、TD-团队换票、WL-网络代理换票、ST-实体代理、BP-补票)
   */
  public SL_ORDER setOrderType(java.lang.String orderType) {
    this.orderType = orderType;
    return this;
  }

  public void unsetOrderType() {
    this.orderType = null;
  }

  /** Returns true if field orderType is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderType() {
    return this.orderType != null;
  }

  public void setOrderTypeIsSet(boolean value) {
    if (!value) {
      this.orderType = null;
    }
  }

  /**
   * 销售张数
   */
  public long getTicketCount() {
    return this.ticketCount;
  }

  /**
   * 销售张数
   */
  public SL_ORDER setTicketCount(long ticketCount) {
    this.ticketCount = ticketCount;
    setTicketCountIsSet(true);
    return this;
  }

  public void unsetTicketCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID);
  }

  /** Returns true if field ticketCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID);
  }

  public void setTicketCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID, value);
  }

  /**
   * 应收合计
   */
  public long getDueSum() {
    return this.dueSum;
  }

  /**
   * 应收合计
   */
  public SL_ORDER setDueSum(long dueSum) {
    this.dueSum = dueSum;
    setDueSumIsSet(true);
    return this;
  }

  public void unsetDueSum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DUESUM_ISSET_ID);
  }

  /** Returns true if field dueSum is set (has been assigned a value) and false otherwise */
  public boolean isSetDueSum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DUESUM_ISSET_ID);
  }

  public void setDueSumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DUESUM_ISSET_ID, value);
  }

  /**
   * 实收合计
   */
  public long getRealSum() {
    return this.realSum;
  }

  /**
   * 实收合计
   */
  public SL_ORDER setRealSum(long realSum) {
    this.realSum = realSum;
    setRealSumIsSet(true);
    return this;
  }

  public void unsetRealSum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REALSUM_ISSET_ID);
  }

  /** Returns true if field realSum is set (has been assigned a value) and false otherwise */
  public boolean isSetRealSum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REALSUM_ISSET_ID);
  }

  public void setRealSumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REALSUM_ISSET_ID, value);
  }

  /**
   * 订单说明
   */
  public java.lang.String getRemark() {
    return this.remark;
  }

  /**
   * 订单说明
   */
  public SL_ORDER setRemark(java.lang.String remark) {
    this.remark = remark;
    return this;
  }

  public void unsetRemark() {
    this.remark = null;
  }

  /** Returns true if field remark is set (has been assigned a value) and false otherwise */
  public boolean isSetRemark() {
    return this.remark != null;
  }

  public void setRemarkIsSet(boolean value) {
    if (!value) {
      this.remark = null;
    }
  }

  /**
   * 支付状态(1-待支付 2-已支付 3-支付失败)
   */
  public java.lang.String getPayStat() {
    return this.payStat;
  }

  /**
   * 支付状态(1-待支付 2-已支付 3-支付失败)
   */
  public SL_ORDER setPayStat(java.lang.String payStat) {
    this.payStat = payStat;
    return this;
  }

  public void unsetPayStat() {
    this.payStat = null;
  }

  /** Returns true if field payStat is set (has been assigned a value) and false otherwise */
  public boolean isSetPayStat() {
    return this.payStat != null;
  }

  public void setPayStatIsSet(boolean value) {
    if (!value) {
      this.payStat = null;
    }
  }

  /**
   * 售票人
   */
  public java.lang.String getSaleUserId() {
    return this.saleUserId;
  }

  /**
   * 售票人
   */
  public SL_ORDER setSaleUserId(java.lang.String saleUserId) {
    this.saleUserId = saleUserId;
    return this;
  }

  public void unsetSaleUserId() {
    this.saleUserId = null;
  }

  /** Returns true if field saleUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleUserId() {
    return this.saleUserId != null;
  }

  public void setSaleUserIdIsSet(boolean value) {
    if (!value) {
      this.saleUserId = null;
    }
  }

  /**
   * 售票时间
   */
  public long getSaleTime() {
    return this.saleTime;
  }

  /**
   * 售票时间
   */
  public SL_ORDER setSaleTime(long saleTime) {
    this.saleTime = saleTime;
    setSaleTimeIsSet(true);
    return this;
  }

  public void unsetSaleTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALETIME_ISSET_ID);
  }

  /** Returns true if field saleTime is set (has been assigned a value) and false otherwise */
  public boolean isSetSaleTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALETIME_ISSET_ID);
  }

  public void setSaleTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALETIME_ISSET_ID, value);
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SL_ORDER setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  public int getSlPayTypelistSize() {
    return (this.slPayTypelist == null) ? 0 : this.slPayTypelist.size();
  }

  public java.util.Iterator<SL_PAY_TYPE> getSlPayTypelistIterator() {
    return (this.slPayTypelist == null) ? null : this.slPayTypelist.iterator();
  }

  public void addToSlPayTypelist(SL_PAY_TYPE elem) {
    if (this.slPayTypelist == null) {
      this.slPayTypelist = new java.util.ArrayList<SL_PAY_TYPE>();
    }
    this.slPayTypelist.add(elem);
  }

  /**
   * 支付明细
   */
  public java.util.List<SL_PAY_TYPE> getSlPayTypelist() {
    return this.slPayTypelist;
  }

  /**
   * 支付明细
   */
  public SL_ORDER setSlPayTypelist(java.util.List<SL_PAY_TYPE> slPayTypelist) {
    this.slPayTypelist = slPayTypelist;
    return this;
  }

  public void unsetSlPayTypelist() {
    this.slPayTypelist = null;
  }

  /** Returns true if field slPayTypelist is set (has been assigned a value) and false otherwise */
  public boolean isSetSlPayTypelist() {
    return this.slPayTypelist != null;
  }

  public void setSlPayTypelistIsSet(boolean value) {
    if (!value) {
      this.slPayTypelist = null;
    }
  }

  public int getSlOrderDetaillistSize() {
    return (this.slOrderDetaillist == null) ? 0 : this.slOrderDetaillist.size();
  }

  public java.util.Iterator<SL_ORDER_DETAIL> getSlOrderDetaillistIterator() {
    return (this.slOrderDetaillist == null) ? null : this.slOrderDetaillist.iterator();
  }

  public void addToSlOrderDetaillist(SL_ORDER_DETAIL elem) {
    if (this.slOrderDetaillist == null) {
      this.slOrderDetaillist = new java.util.ArrayList<SL_ORDER_DETAIL>();
    }
    this.slOrderDetaillist.add(elem);
  }

  /**
   * 销售明细
   */
  public java.util.List<SL_ORDER_DETAIL> getSlOrderDetaillist() {
    return this.slOrderDetaillist;
  }

  /**
   * 销售明细
   */
  public SL_ORDER setSlOrderDetaillist(java.util.List<SL_ORDER_DETAIL> slOrderDetaillist) {
    this.slOrderDetaillist = slOrderDetaillist;
    return this;
  }

  public void unsetSlOrderDetaillist() {
    this.slOrderDetaillist = null;
  }

  /** Returns true if field slOrderDetaillist is set (has been assigned a value) and false otherwise */
  public boolean isSetSlOrderDetaillist() {
    return this.slOrderDetaillist != null;
  }

  public void setSlOrderDetaillistIsSet(boolean value) {
    if (!value) {
      this.slOrderDetaillist = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((java.lang.String)value);
      }
      break;

    case ORDER_TYPE:
      if (value == null) {
        unsetOrderType();
      } else {
        setOrderType((java.lang.String)value);
      }
      break;

    case TICKET_COUNT:
      if (value == null) {
        unsetTicketCount();
      } else {
        setTicketCount((java.lang.Long)value);
      }
      break;

    case DUE_SUM:
      if (value == null) {
        unsetDueSum();
      } else {
        setDueSum((java.lang.Long)value);
      }
      break;

    case REAL_SUM:
      if (value == null) {
        unsetRealSum();
      } else {
        setRealSum((java.lang.Long)value);
      }
      break;

    case REMARK:
      if (value == null) {
        unsetRemark();
      } else {
        setRemark((java.lang.String)value);
      }
      break;

    case PAY_STAT:
      if (value == null) {
        unsetPayStat();
      } else {
        setPayStat((java.lang.String)value);
      }
      break;

    case SALE_USER_ID:
      if (value == null) {
        unsetSaleUserId();
      } else {
        setSaleUserId((java.lang.String)value);
      }
      break;

    case SALE_TIME:
      if (value == null) {
        unsetSaleTime();
      } else {
        setSaleTime((java.lang.Long)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    case SL_PAY_TYPELIST:
      if (value == null) {
        unsetSlPayTypelist();
      } else {
        setSlPayTypelist((java.util.List<SL_PAY_TYPE>)value);
      }
      break;

    case SL_ORDER_DETAILLIST:
      if (value == null) {
        unsetSlOrderDetaillist();
      } else {
        setSlOrderDetaillist((java.util.List<SL_ORDER_DETAIL>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case ORDER_TYPE:
      return getOrderType();

    case TICKET_COUNT:
      return getTicketCount();

    case DUE_SUM:
      return getDueSum();

    case REAL_SUM:
      return getRealSum();

    case REMARK:
      return getRemark();

    case PAY_STAT:
      return getPayStat();

    case SALE_USER_ID:
      return getSaleUserId();

    case SALE_TIME:
      return getSaleTime();

    case VERSION_NO:
      return getVersionNo();

    case SL_PAY_TYPELIST:
      return getSlPayTypelist();

    case SL_ORDER_DETAILLIST:
      return getSlOrderDetaillist();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case ORDER_TYPE:
      return isSetOrderType();
    case TICKET_COUNT:
      return isSetTicketCount();
    case DUE_SUM:
      return isSetDueSum();
    case REAL_SUM:
      return isSetRealSum();
    case REMARK:
      return isSetRemark();
    case PAY_STAT:
      return isSetPayStat();
    case SALE_USER_ID:
      return isSetSaleUserId();
    case SALE_TIME:
      return isSetSaleTime();
    case VERSION_NO:
      return isSetVersionNo();
    case SL_PAY_TYPELIST:
      return isSetSlPayTypelist();
    case SL_ORDER_DETAILLIST:
      return isSetSlOrderDetaillist();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_ORDER)
      return this.equals((SL_ORDER)that);
    return false;
  }

  public boolean equals(SL_ORDER that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_orderType = true && this.isSetOrderType();
    boolean that_present_orderType = true && that.isSetOrderType();
    if (this_present_orderType || that_present_orderType) {
      if (!(this_present_orderType && that_present_orderType))
        return false;
      if (!this.orderType.equals(that.orderType))
        return false;
    }

    boolean this_present_ticketCount = true;
    boolean that_present_ticketCount = true;
    if (this_present_ticketCount || that_present_ticketCount) {
      if (!(this_present_ticketCount && that_present_ticketCount))
        return false;
      if (this.ticketCount != that.ticketCount)
        return false;
    }

    boolean this_present_dueSum = true;
    boolean that_present_dueSum = true;
    if (this_present_dueSum || that_present_dueSum) {
      if (!(this_present_dueSum && that_present_dueSum))
        return false;
      if (this.dueSum != that.dueSum)
        return false;
    }

    boolean this_present_realSum = true;
    boolean that_present_realSum = true;
    if (this_present_realSum || that_present_realSum) {
      if (!(this_present_realSum && that_present_realSum))
        return false;
      if (this.realSum != that.realSum)
        return false;
    }

    boolean this_present_remark = true && this.isSetRemark();
    boolean that_present_remark = true && that.isSetRemark();
    if (this_present_remark || that_present_remark) {
      if (!(this_present_remark && that_present_remark))
        return false;
      if (!this.remark.equals(that.remark))
        return false;
    }

    boolean this_present_payStat = true && this.isSetPayStat();
    boolean that_present_payStat = true && that.isSetPayStat();
    if (this_present_payStat || that_present_payStat) {
      if (!(this_present_payStat && that_present_payStat))
        return false;
      if (!this.payStat.equals(that.payStat))
        return false;
    }

    boolean this_present_saleUserId = true && this.isSetSaleUserId();
    boolean that_present_saleUserId = true && that.isSetSaleUserId();
    if (this_present_saleUserId || that_present_saleUserId) {
      if (!(this_present_saleUserId && that_present_saleUserId))
        return false;
      if (!this.saleUserId.equals(that.saleUserId))
        return false;
    }

    boolean this_present_saleTime = true;
    boolean that_present_saleTime = true;
    if (this_present_saleTime || that_present_saleTime) {
      if (!(this_present_saleTime && that_present_saleTime))
        return false;
      if (this.saleTime != that.saleTime)
        return false;
    }

    boolean this_present_versionNo = true;
    boolean that_present_versionNo = true;
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    boolean this_present_slPayTypelist = true && this.isSetSlPayTypelist();
    boolean that_present_slPayTypelist = true && that.isSetSlPayTypelist();
    if (this_present_slPayTypelist || that_present_slPayTypelist) {
      if (!(this_present_slPayTypelist && that_present_slPayTypelist))
        return false;
      if (!this.slPayTypelist.equals(that.slPayTypelist))
        return false;
    }

    boolean this_present_slOrderDetaillist = true && this.isSetSlOrderDetaillist();
    boolean that_present_slOrderDetaillist = true && that.isSetSlOrderDetaillist();
    if (this_present_slOrderDetaillist || that_present_slOrderDetaillist) {
      if (!(this_present_slOrderDetaillist && that_present_slOrderDetaillist))
        return false;
      if (!this.slOrderDetaillist.equals(that.slOrderDetaillist))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + orderId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderType()) ? 131071 : 524287);
    if (isSetOrderType())
      hashCode = hashCode * 8191 + orderType.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticketCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(dueSum);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(realSum);

    hashCode = hashCode * 8191 + ((isSetRemark()) ? 131071 : 524287);
    if (isSetRemark())
      hashCode = hashCode * 8191 + remark.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayStat()) ? 131071 : 524287);
    if (isSetPayStat())
      hashCode = hashCode * 8191 + payStat.hashCode();

    hashCode = hashCode * 8191 + ((isSetSaleUserId()) ? 131071 : 524287);
    if (isSetSaleUserId())
      hashCode = hashCode * 8191 + saleUserId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(saleTime);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    hashCode = hashCode * 8191 + ((isSetSlPayTypelist()) ? 131071 : 524287);
    if (isSetSlPayTypelist())
      hashCode = hashCode * 8191 + slPayTypelist.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlOrderDetaillist()) ? 131071 : 524287);
    if (isSetSlOrderDetaillist())
      hashCode = hashCode * 8191 + slOrderDetaillist.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SL_ORDER other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrderType()).compareTo(other.isSetOrderType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderType, other.orderType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketCount()).compareTo(other.isSetTicketCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketCount, other.ticketCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDueSum()).compareTo(other.isSetDueSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDueSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dueSum, other.dueSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRealSum()).compareTo(other.isSetRealSum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRealSum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.realSum, other.realSum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemark()).compareTo(other.isSetRemark());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemark()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remark, other.remark);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayStat()).compareTo(other.isSetPayStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payStat, other.payStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleUserId()).compareTo(other.isSetSaleUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleUserId, other.saleUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSaleTime()).compareTo(other.isSetSaleTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSaleTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.saleTime, other.saleTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlPayTypelist()).compareTo(other.isSetSlPayTypelist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlPayTypelist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slPayTypelist, other.slPayTypelist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlOrderDetaillist()).compareTo(other.isSetSlOrderDetaillist());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlOrderDetaillist()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slOrderDetaillist, other.slOrderDetaillist);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_ORDER(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderType:");
    if (this.orderType == null) {
      sb.append("null");
    } else {
      sb.append(this.orderType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketCount:");
    sb.append(this.ticketCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("dueSum:");
    sb.append(this.dueSum);
    first = false;
    if (!first) sb.append(", ");
    sb.append("realSum:");
    sb.append(this.realSum);
    first = false;
    if (isSetRemark()) {
      if (!first) sb.append(", ");
      sb.append("remark:");
      if (this.remark == null) {
        sb.append("null");
      } else {
        sb.append(this.remark);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("payStat:");
    if (this.payStat == null) {
      sb.append("null");
    } else {
      sb.append(this.payStat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("saleUserId:");
    if (this.saleUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.saleUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("saleTime:");
    sb.append(this.saleTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("versionNo:");
    sb.append(this.versionNo);
    first = false;
    if (isSetSlPayTypelist()) {
      if (!first) sb.append(", ");
      sb.append("slPayTypelist:");
      if (this.slPayTypelist == null) {
        sb.append("null");
      } else {
        sb.append(this.slPayTypelist);
      }
      first = false;
    }
    if (isSetSlOrderDetaillist()) {
      if (!first) sb.append(", ");
      sb.append("slOrderDetaillist:");
      if (this.slOrderDetaillist == null) {
        sb.append("null");
      } else {
        sb.append(this.slOrderDetaillist);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
    }
    if (orderType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ticketCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'dueSum' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'realSum' because it's a primitive and you chose the non-beans generator.
    if (payStat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'payStat' was not present! Struct: " + toString());
    }
    if (saleUserId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'saleUserId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'saleTime' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'versionNo' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_ORDERStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_ORDERStandardScheme getScheme() {
      return new SL_ORDERStandardScheme();
    }
  }

  private static class SL_ORDERStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_ORDER> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderType = iprot.readString();
              struct.setOrderTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketCount = iprot.readI64();
              struct.setTicketCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DUE_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.dueSum = iprot.readI64();
              struct.setDueSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REAL_SUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.realSum = iprot.readI64();
              struct.setRealSumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // REMARK
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.remark = iprot.readString();
              struct.setRemarkIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAY_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payStat = iprot.readString();
              struct.setPayStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // SALE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.saleUserId = iprot.readString();
              struct.setSaleUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SALE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.saleTime = iprot.readI64();
              struct.setSaleTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // SL_PAY_TYPELIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.slPayTypelist = new java.util.ArrayList<SL_PAY_TYPE>(_list24.size);
                SL_PAY_TYPE _elem25;
                for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                {
                  _elem25 = new SL_PAY_TYPE();
                  _elem25.read(iprot);
                  struct.slPayTypelist.add(_elem25);
                }
                iprot.readListEnd();
              }
              struct.setSlPayTypelistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // SL_ORDER_DETAILLIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                struct.slOrderDetaillist = new java.util.ArrayList<SL_ORDER_DETAIL>(_list27.size);
                SL_ORDER_DETAIL _elem28;
                for (int _i29 = 0; _i29 < _list27.size; ++_i29)
                {
                  _elem28 = new SL_ORDER_DETAIL();
                  _elem28.read(iprot);
                  struct.slOrderDetaillist.add(_elem28);
                }
                iprot.readListEnd();
              }
              struct.setSlOrderDetaillistIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTicketCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDueSum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'dueSum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetRealSum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'realSum' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSaleTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'saleTime' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVersionNo()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'versionNo' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_ORDER struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.orderType != null) {
        oprot.writeFieldBegin(ORDER_TYPE_FIELD_DESC);
        oprot.writeString(struct.orderType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKET_COUNT_FIELD_DESC);
      oprot.writeI64(struct.ticketCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DUE_SUM_FIELD_DESC);
      oprot.writeI64(struct.dueSum);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(REAL_SUM_FIELD_DESC);
      oprot.writeI64(struct.realSum);
      oprot.writeFieldEnd();
      if (struct.remark != null) {
        if (struct.isSetRemark()) {
          oprot.writeFieldBegin(REMARK_FIELD_DESC);
          oprot.writeString(struct.remark);
          oprot.writeFieldEnd();
        }
      }
      if (struct.payStat != null) {
        oprot.writeFieldBegin(PAY_STAT_FIELD_DESC);
        oprot.writeString(struct.payStat);
        oprot.writeFieldEnd();
      }
      if (struct.saleUserId != null) {
        oprot.writeFieldBegin(SALE_USER_ID_FIELD_DESC);
        oprot.writeString(struct.saleUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SALE_TIME_FIELD_DESC);
      oprot.writeI64(struct.saleTime);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
      oprot.writeI64(struct.versionNo);
      oprot.writeFieldEnd();
      if (struct.slPayTypelist != null) {
        if (struct.isSetSlPayTypelist()) {
          oprot.writeFieldBegin(SL_PAY_TYPELIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.slPayTypelist.size()));
            for (SL_PAY_TYPE _iter30 : struct.slPayTypelist)
            {
              _iter30.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.slOrderDetaillist != null) {
        if (struct.isSetSlOrderDetaillist()) {
          oprot.writeFieldBegin(SL_ORDER_DETAILLIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.slOrderDetaillist.size()));
            for (SL_ORDER_DETAIL _iter31 : struct.slOrderDetaillist)
            {
              _iter31.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_ORDERTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_ORDERTupleScheme getScheme() {
      return new SL_ORDERTupleScheme();
    }
  }

  private static class SL_ORDERTupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_ORDER> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.orderId);
      oprot.writeString(struct.orderType);
      oprot.writeI64(struct.ticketCount);
      oprot.writeI64(struct.dueSum);
      oprot.writeI64(struct.realSum);
      oprot.writeString(struct.payStat);
      oprot.writeString(struct.saleUserId);
      oprot.writeI64(struct.saleTime);
      oprot.writeI64(struct.versionNo);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRemark()) {
        optionals.set(0);
      }
      if (struct.isSetSlPayTypelist()) {
        optionals.set(1);
      }
      if (struct.isSetSlOrderDetaillist()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRemark()) {
        oprot.writeString(struct.remark);
      }
      if (struct.isSetSlPayTypelist()) {
        {
          oprot.writeI32(struct.slPayTypelist.size());
          for (SL_PAY_TYPE _iter32 : struct.slPayTypelist)
          {
            _iter32.write(oprot);
          }
        }
      }
      if (struct.isSetSlOrderDetaillist()) {
        {
          oprot.writeI32(struct.slOrderDetaillist.size());
          for (SL_ORDER_DETAIL _iter33 : struct.slOrderDetaillist)
          {
            _iter33.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.orderId = iprot.readString();
      struct.setOrderIdIsSet(true);
      struct.orderType = iprot.readString();
      struct.setOrderTypeIsSet(true);
      struct.ticketCount = iprot.readI64();
      struct.setTicketCountIsSet(true);
      struct.dueSum = iprot.readI64();
      struct.setDueSumIsSet(true);
      struct.realSum = iprot.readI64();
      struct.setRealSumIsSet(true);
      struct.payStat = iprot.readString();
      struct.setPayStatIsSet(true);
      struct.saleUserId = iprot.readString();
      struct.setSaleUserIdIsSet(true);
      struct.saleTime = iprot.readI64();
      struct.setSaleTimeIsSet(true);
      struct.versionNo = iprot.readI64();
      struct.setVersionNoIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.remark = iprot.readString();
        struct.setRemarkIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list34 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.slPayTypelist = new java.util.ArrayList<SL_PAY_TYPE>(_list34.size);
          SL_PAY_TYPE _elem35;
          for (int _i36 = 0; _i36 < _list34.size; ++_i36)
          {
            _elem35 = new SL_PAY_TYPE();
            _elem35.read(iprot);
            struct.slPayTypelist.add(_elem35);
          }
        }
        struct.setSlPayTypelistIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.slOrderDetaillist = new java.util.ArrayList<SL_ORDER_DETAIL>(_list37.size);
          SL_ORDER_DETAIL _elem38;
          for (int _i39 = 0; _i39 < _list37.size; ++_i39)
          {
            _elem38 = new SL_ORDER_DETAIL();
            _elem38.read(iprot);
            struct.slOrderDetaillist.add(_elem38);
          }
        }
        struct.setSlOrderDetaillistIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

