/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 当前登录用户信息
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class LOGIN_USER_INFO implements org.apache.thrift.TBase<LOGIN_USER_INFO, LOGIN_USER_INFO._Fields>, java.io.Serializable, Cloneable, Comparable<LOGIN_USER_INFO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LOGIN_USER_INFO");

  private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField USER_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("userName", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField USER_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("userStat", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField OUTLET_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("outletType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField POSITION_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("positionCode", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField DEPARTMENT_FIELD_DESC = new org.apache.thrift.protocol.TField("department", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField TOKEN_FIELD_DESC = new org.apache.thrift.protocol.TField("token", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField MENUS_FIELD_DESC = new org.apache.thrift.protocol.TField("menus", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField OUTLET_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("outletName", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField POSITION_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("positionName", org.apache.thrift.protocol.TType.STRING, (short)11);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LOGIN_USER_INFOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LOGIN_USER_INFOTupleSchemeFactory();

  /**
   * 用户编号
   */
  public java.lang.String userId; // required
  /**
   * 用户名称
   */
  public java.lang.String userName; // required
  /**
   * 用户状态(N停用Y启用)
   */
  public java.lang.String userStat; // required
  /**
   * 所属网点
   */
  public long outletId; // required
  /**
   * 网点类型(01-现场网点（包括网络代理）、02-自营网点、03-团队换票、04-票务处理、05-实体代理、06-签约社)
   */
  public java.lang.String outletType; // optional
  /**
   * 岗位
   */
  public java.lang.String positionCode; // required
  /**
   * 所属部门
   */
  public java.lang.String department; // optional
  /**
   * 授权码
   */
  public java.lang.String token; // required
  /**
   * 权限集,以逗分隔
   */
  public java.lang.String menus; // required
  /**
   * 所属网点名称
   */
  public java.lang.String outletName; // optional
  /**
   * 所属岗位名称
   */
  public java.lang.String positionName; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 用户编号
     */
    USER_ID((short)1, "userId"),
    /**
     * 用户名称
     */
    USER_NAME((short)2, "userName"),
    /**
     * 用户状态(N停用Y启用)
     */
    USER_STAT((short)3, "userStat"),
    /**
     * 所属网点
     */
    OUTLET_ID((short)4, "outletId"),
    /**
     * 网点类型(01-现场网点（包括网络代理）、02-自营网点、03-团队换票、04-票务处理、05-实体代理、06-签约社)
     */
    OUTLET_TYPE((short)5, "outletType"),
    /**
     * 岗位
     */
    POSITION_CODE((short)6, "positionCode"),
    /**
     * 所属部门
     */
    DEPARTMENT((short)7, "department"),
    /**
     * 授权码
     */
    TOKEN((short)8, "token"),
    /**
     * 权限集,以逗分隔
     */
    MENUS((short)9, "menus"),
    /**
     * 所属网点名称
     */
    OUTLET_NAME((short)10, "outletName"),
    /**
     * 所属岗位名称
     */
    POSITION_NAME((short)11, "positionName");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // USER_ID
          return USER_ID;
        case 2: // USER_NAME
          return USER_NAME;
        case 3: // USER_STAT
          return USER_STAT;
        case 4: // OUTLET_ID
          return OUTLET_ID;
        case 5: // OUTLET_TYPE
          return OUTLET_TYPE;
        case 6: // POSITION_CODE
          return POSITION_CODE;
        case 7: // DEPARTMENT
          return DEPARTMENT;
        case 8: // TOKEN
          return TOKEN;
        case 9: // MENUS
          return MENUS;
        case 10: // OUTLET_NAME
          return OUTLET_NAME;
        case 11: // POSITION_NAME
          return POSITION_NAME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OUTLETID_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.OUTLET_TYPE,_Fields.DEPARTMENT,_Fields.OUTLET_NAME,_Fields.POSITION_NAME};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_NAME, new org.apache.thrift.meta_data.FieldMetaData("userName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USER_STAT, new org.apache.thrift.meta_data.FieldMetaData("userStat", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OUTLET_TYPE, new org.apache.thrift.meta_data.FieldMetaData("outletType", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_CODE, new org.apache.thrift.meta_data.FieldMetaData("positionCode", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DEPARTMENT, new org.apache.thrift.meta_data.FieldMetaData("department", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TOKEN, new org.apache.thrift.meta_data.FieldMetaData("token", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.MENUS, new org.apache.thrift.meta_data.FieldMetaData("menus", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_NAME, new org.apache.thrift.meta_data.FieldMetaData("outletName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.POSITION_NAME, new org.apache.thrift.meta_data.FieldMetaData("positionName", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LOGIN_USER_INFO.class, metaDataMap);
  }

  public LOGIN_USER_INFO() {
  }

  public LOGIN_USER_INFO(
    java.lang.String userId,
    java.lang.String userName,
    java.lang.String userStat,
    long outletId,
    java.lang.String positionCode,
    java.lang.String token,
    java.lang.String menus)
  {
    this();
    this.userId = userId;
    this.userName = userName;
    this.userStat = userStat;
    this.outletId = outletId;
    setOutletIdIsSet(true);
    this.positionCode = positionCode;
    this.token = token;
    this.menus = menus;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LOGIN_USER_INFO(LOGIN_USER_INFO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetUserId()) {
      this.userId = other.userId;
    }
    if (other.isSetUserName()) {
      this.userName = other.userName;
    }
    if (other.isSetUserStat()) {
      this.userStat = other.userStat;
    }
    this.outletId = other.outletId;
    if (other.isSetOutletType()) {
      this.outletType = other.outletType;
    }
    if (other.isSetPositionCode()) {
      this.positionCode = other.positionCode;
    }
    if (other.isSetDepartment()) {
      this.department = other.department;
    }
    if (other.isSetToken()) {
      this.token = other.token;
    }
    if (other.isSetMenus()) {
      this.menus = other.menus;
    }
    if (other.isSetOutletName()) {
      this.outletName = other.outletName;
    }
    if (other.isSetPositionName()) {
      this.positionName = other.positionName;
    }
  }

  public LOGIN_USER_INFO deepCopy() {
    return new LOGIN_USER_INFO(this);
  }

  @Override
  public void clear() {
    this.userId = null;
    this.userName = null;
    this.userStat = null;
    setOutletIdIsSet(false);
    this.outletId = 0;
    this.outletType = null;
    this.positionCode = null;
    this.department = null;
    this.token = null;
    this.menus = null;
    this.outletName = null;
    this.positionName = null;
  }

  /**
   * 用户编号
   */
  public java.lang.String getUserId() {
    return this.userId;
  }

  /**
   * 用户编号
   */
  public LOGIN_USER_INFO setUserId(java.lang.String userId) {
    this.userId = userId;
    return this;
  }

  public void unsetUserId() {
    this.userId = null;
  }

  /** Returns true if field userId is set (has been assigned a value) and false otherwise */
  public boolean isSetUserId() {
    return this.userId != null;
  }

  public void setUserIdIsSet(boolean value) {
    if (!value) {
      this.userId = null;
    }
  }

  /**
   * 用户名称
   */
  public java.lang.String getUserName() {
    return this.userName;
  }

  /**
   * 用户名称
   */
  public LOGIN_USER_INFO setUserName(java.lang.String userName) {
    this.userName = userName;
    return this;
  }

  public void unsetUserName() {
    this.userName = null;
  }

  /** Returns true if field userName is set (has been assigned a value) and false otherwise */
  public boolean isSetUserName() {
    return this.userName != null;
  }

  public void setUserNameIsSet(boolean value) {
    if (!value) {
      this.userName = null;
    }
  }

  /**
   * 用户状态(N停用Y启用)
   */
  public java.lang.String getUserStat() {
    return this.userStat;
  }

  /**
   * 用户状态(N停用Y启用)
   */
  public LOGIN_USER_INFO setUserStat(java.lang.String userStat) {
    this.userStat = userStat;
    return this;
  }

  public void unsetUserStat() {
    this.userStat = null;
  }

  /** Returns true if field userStat is set (has been assigned a value) and false otherwise */
  public boolean isSetUserStat() {
    return this.userStat != null;
  }

  public void setUserStatIsSet(boolean value) {
    if (!value) {
      this.userStat = null;
    }
  }

  /**
   * 所属网点
   */
  public long getOutletId() {
    return this.outletId;
  }

  /**
   * 所属网点
   */
  public LOGIN_USER_INFO setOutletId(long outletId) {
    this.outletId = outletId;
    setOutletIdIsSet(true);
    return this;
  }

  public void unsetOutletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  public void setOutletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLETID_ISSET_ID, value);
  }

  /**
   * 网点类型(01-现场网点（包括网络代理）、02-自营网点、03-团队换票、04-票务处理、05-实体代理、06-签约社)
   */
  public java.lang.String getOutletType() {
    return this.outletType;
  }

  /**
   * 网点类型(01-现场网点（包括网络代理）、02-自营网点、03-团队换票、04-票务处理、05-实体代理、06-签约社)
   */
  public LOGIN_USER_INFO setOutletType(java.lang.String outletType) {
    this.outletType = outletType;
    return this;
  }

  public void unsetOutletType() {
    this.outletType = null;
  }

  /** Returns true if field outletType is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletType() {
    return this.outletType != null;
  }

  public void setOutletTypeIsSet(boolean value) {
    if (!value) {
      this.outletType = null;
    }
  }

  /**
   * 岗位
   */
  public java.lang.String getPositionCode() {
    return this.positionCode;
  }

  /**
   * 岗位
   */
  public LOGIN_USER_INFO setPositionCode(java.lang.String positionCode) {
    this.positionCode = positionCode;
    return this;
  }

  public void unsetPositionCode() {
    this.positionCode = null;
  }

  /** Returns true if field positionCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionCode() {
    return this.positionCode != null;
  }

  public void setPositionCodeIsSet(boolean value) {
    if (!value) {
      this.positionCode = null;
    }
  }

  /**
   * 所属部门
   */
  public java.lang.String getDepartment() {
    return this.department;
  }

  /**
   * 所属部门
   */
  public LOGIN_USER_INFO setDepartment(java.lang.String department) {
    this.department = department;
    return this;
  }

  public void unsetDepartment() {
    this.department = null;
  }

  /** Returns true if field department is set (has been assigned a value) and false otherwise */
  public boolean isSetDepartment() {
    return this.department != null;
  }

  public void setDepartmentIsSet(boolean value) {
    if (!value) {
      this.department = null;
    }
  }

  /**
   * 授权码
   */
  public java.lang.String getToken() {
    return this.token;
  }

  /**
   * 授权码
   */
  public LOGIN_USER_INFO setToken(java.lang.String token) {
    this.token = token;
    return this;
  }

  public void unsetToken() {
    this.token = null;
  }

  /** Returns true if field token is set (has been assigned a value) and false otherwise */
  public boolean isSetToken() {
    return this.token != null;
  }

  public void setTokenIsSet(boolean value) {
    if (!value) {
      this.token = null;
    }
  }

  /**
   * 权限集,以逗分隔
   */
  public java.lang.String getMenus() {
    return this.menus;
  }

  /**
   * 权限集,以逗分隔
   */
  public LOGIN_USER_INFO setMenus(java.lang.String menus) {
    this.menus = menus;
    return this;
  }

  public void unsetMenus() {
    this.menus = null;
  }

  /** Returns true if field menus is set (has been assigned a value) and false otherwise */
  public boolean isSetMenus() {
    return this.menus != null;
  }

  public void setMenusIsSet(boolean value) {
    if (!value) {
      this.menus = null;
    }
  }

  /**
   * 所属网点名称
   */
  public java.lang.String getOutletName() {
    return this.outletName;
  }

  /**
   * 所属网点名称
   */
  public LOGIN_USER_INFO setOutletName(java.lang.String outletName) {
    this.outletName = outletName;
    return this;
  }

  public void unsetOutletName() {
    this.outletName = null;
  }

  /** Returns true if field outletName is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletName() {
    return this.outletName != null;
  }

  public void setOutletNameIsSet(boolean value) {
    if (!value) {
      this.outletName = null;
    }
  }

  /**
   * 所属岗位名称
   */
  public java.lang.String getPositionName() {
    return this.positionName;
  }

  /**
   * 所属岗位名称
   */
  public LOGIN_USER_INFO setPositionName(java.lang.String positionName) {
    this.positionName = positionName;
    return this;
  }

  public void unsetPositionName() {
    this.positionName = null;
  }

  /** Returns true if field positionName is set (has been assigned a value) and false otherwise */
  public boolean isSetPositionName() {
    return this.positionName != null;
  }

  public void setPositionNameIsSet(boolean value) {
    if (!value) {
      this.positionName = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case USER_ID:
      if (value == null) {
        unsetUserId();
      } else {
        setUserId((java.lang.String)value);
      }
      break;

    case USER_NAME:
      if (value == null) {
        unsetUserName();
      } else {
        setUserName((java.lang.String)value);
      }
      break;

    case USER_STAT:
      if (value == null) {
        unsetUserStat();
      } else {
        setUserStat((java.lang.String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((java.lang.Long)value);
      }
      break;

    case OUTLET_TYPE:
      if (value == null) {
        unsetOutletType();
      } else {
        setOutletType((java.lang.String)value);
      }
      break;

    case POSITION_CODE:
      if (value == null) {
        unsetPositionCode();
      } else {
        setPositionCode((java.lang.String)value);
      }
      break;

    case DEPARTMENT:
      if (value == null) {
        unsetDepartment();
      } else {
        setDepartment((java.lang.String)value);
      }
      break;

    case TOKEN:
      if (value == null) {
        unsetToken();
      } else {
        setToken((java.lang.String)value);
      }
      break;

    case MENUS:
      if (value == null) {
        unsetMenus();
      } else {
        setMenus((java.lang.String)value);
      }
      break;

    case OUTLET_NAME:
      if (value == null) {
        unsetOutletName();
      } else {
        setOutletName((java.lang.String)value);
      }
      break;

    case POSITION_NAME:
      if (value == null) {
        unsetPositionName();
      } else {
        setPositionName((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case USER_ID:
      return getUserId();

    case USER_NAME:
      return getUserName();

    case USER_STAT:
      return getUserStat();

    case OUTLET_ID:
      return getOutletId();

    case OUTLET_TYPE:
      return getOutletType();

    case POSITION_CODE:
      return getPositionCode();

    case DEPARTMENT:
      return getDepartment();

    case TOKEN:
      return getToken();

    case MENUS:
      return getMenus();

    case OUTLET_NAME:
      return getOutletName();

    case POSITION_NAME:
      return getPositionName();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case USER_ID:
      return isSetUserId();
    case USER_NAME:
      return isSetUserName();
    case USER_STAT:
      return isSetUserStat();
    case OUTLET_ID:
      return isSetOutletId();
    case OUTLET_TYPE:
      return isSetOutletType();
    case POSITION_CODE:
      return isSetPositionCode();
    case DEPARTMENT:
      return isSetDepartment();
    case TOKEN:
      return isSetToken();
    case MENUS:
      return isSetMenus();
    case OUTLET_NAME:
      return isSetOutletName();
    case POSITION_NAME:
      return isSetPositionName();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LOGIN_USER_INFO)
      return this.equals((LOGIN_USER_INFO)that);
    return false;
  }

  public boolean equals(LOGIN_USER_INFO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_userId = true && this.isSetUserId();
    boolean that_present_userId = true && that.isSetUserId();
    if (this_present_userId || that_present_userId) {
      if (!(this_present_userId && that_present_userId))
        return false;
      if (!this.userId.equals(that.userId))
        return false;
    }

    boolean this_present_userName = true && this.isSetUserName();
    boolean that_present_userName = true && that.isSetUserName();
    if (this_present_userName || that_present_userName) {
      if (!(this_present_userName && that_present_userName))
        return false;
      if (!this.userName.equals(that.userName))
        return false;
    }

    boolean this_present_userStat = true && this.isSetUserStat();
    boolean that_present_userStat = true && that.isSetUserStat();
    if (this_present_userStat || that_present_userStat) {
      if (!(this_present_userStat && that_present_userStat))
        return false;
      if (!this.userStat.equals(that.userStat))
        return false;
    }

    boolean this_present_outletId = true;
    boolean that_present_outletId = true;
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (this.outletId != that.outletId)
        return false;
    }

    boolean this_present_outletType = true && this.isSetOutletType();
    boolean that_present_outletType = true && that.isSetOutletType();
    if (this_present_outletType || that_present_outletType) {
      if (!(this_present_outletType && that_present_outletType))
        return false;
      if (!this.outletType.equals(that.outletType))
        return false;
    }

    boolean this_present_positionCode = true && this.isSetPositionCode();
    boolean that_present_positionCode = true && that.isSetPositionCode();
    if (this_present_positionCode || that_present_positionCode) {
      if (!(this_present_positionCode && that_present_positionCode))
        return false;
      if (!this.positionCode.equals(that.positionCode))
        return false;
    }

    boolean this_present_department = true && this.isSetDepartment();
    boolean that_present_department = true && that.isSetDepartment();
    if (this_present_department || that_present_department) {
      if (!(this_present_department && that_present_department))
        return false;
      if (!this.department.equals(that.department))
        return false;
    }

    boolean this_present_token = true && this.isSetToken();
    boolean that_present_token = true && that.isSetToken();
    if (this_present_token || that_present_token) {
      if (!(this_present_token && that_present_token))
        return false;
      if (!this.token.equals(that.token))
        return false;
    }

    boolean this_present_menus = true && this.isSetMenus();
    boolean that_present_menus = true && that.isSetMenus();
    if (this_present_menus || that_present_menus) {
      if (!(this_present_menus && that_present_menus))
        return false;
      if (!this.menus.equals(that.menus))
        return false;
    }

    boolean this_present_outletName = true && this.isSetOutletName();
    boolean that_present_outletName = true && that.isSetOutletName();
    if (this_present_outletName || that_present_outletName) {
      if (!(this_present_outletName && that_present_outletName))
        return false;
      if (!this.outletName.equals(that.outletName))
        return false;
    }

    boolean this_present_positionName = true && this.isSetPositionName();
    boolean that_present_positionName = true && that.isSetPositionName();
    if (this_present_positionName || that_present_positionName) {
      if (!(this_present_positionName && that_present_positionName))
        return false;
      if (!this.positionName.equals(that.positionName))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
    if (isSetUserId())
      hashCode = hashCode * 8191 + userId.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserName()) ? 131071 : 524287);
    if (isSetUserName())
      hashCode = hashCode * 8191 + userName.hashCode();

    hashCode = hashCode * 8191 + ((isSetUserStat()) ? 131071 : 524287);
    if (isSetUserStat())
      hashCode = hashCode * 8191 + userStat.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outletId);

    hashCode = hashCode * 8191 + ((isSetOutletType()) ? 131071 : 524287);
    if (isSetOutletType())
      hashCode = hashCode * 8191 + outletType.hashCode();

    hashCode = hashCode * 8191 + ((isSetPositionCode()) ? 131071 : 524287);
    if (isSetPositionCode())
      hashCode = hashCode * 8191 + positionCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetDepartment()) ? 131071 : 524287);
    if (isSetDepartment())
      hashCode = hashCode * 8191 + department.hashCode();

    hashCode = hashCode * 8191 + ((isSetToken()) ? 131071 : 524287);
    if (isSetToken())
      hashCode = hashCode * 8191 + token.hashCode();

    hashCode = hashCode * 8191 + ((isSetMenus()) ? 131071 : 524287);
    if (isSetMenus())
      hashCode = hashCode * 8191 + menus.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutletName()) ? 131071 : 524287);
    if (isSetOutletName())
      hashCode = hashCode * 8191 + outletName.hashCode();

    hashCode = hashCode * 8191 + ((isSetPositionName()) ? 131071 : 524287);
    if (isSetPositionName())
      hashCode = hashCode * 8191 + positionName.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LOGIN_USER_INFO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserName()).compareTo(other.isSetUserName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userName, other.userName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUserStat()).compareTo(other.isSetUserStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUserStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userStat, other.userStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletType()).compareTo(other.isSetOutletType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletType, other.outletType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionCode()).compareTo(other.isSetPositionCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionCode, other.positionCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDepartment()).compareTo(other.isSetDepartment());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDepartment()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.department, other.department);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetToken()).compareTo(other.isSetToken());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetToken()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.token, other.token);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMenus()).compareTo(other.isSetMenus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMenus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.menus, other.menus);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletName()).compareTo(other.isSetOutletName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletName, other.outletName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPositionName()).compareTo(other.isSetPositionName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPositionName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.positionName, other.positionName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LOGIN_USER_INFO(");
    boolean first = true;

    sb.append("userId:");
    if (this.userId == null) {
      sb.append("null");
    } else {
      sb.append(this.userId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userName:");
    if (this.userName == null) {
      sb.append("null");
    } else {
      sb.append(this.userName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("userStat:");
    if (this.userStat == null) {
      sb.append("null");
    } else {
      sb.append(this.userStat);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outletId:");
    sb.append(this.outletId);
    first = false;
    if (isSetOutletType()) {
      if (!first) sb.append(", ");
      sb.append("outletType:");
      if (this.outletType == null) {
        sb.append("null");
      } else {
        sb.append(this.outletType);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("positionCode:");
    if (this.positionCode == null) {
      sb.append("null");
    } else {
      sb.append(this.positionCode);
    }
    first = false;
    if (isSetDepartment()) {
      if (!first) sb.append(", ");
      sb.append("department:");
      if (this.department == null) {
        sb.append("null");
      } else {
        sb.append(this.department);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("token:");
    if (this.token == null) {
      sb.append("null");
    } else {
      sb.append(this.token);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("menus:");
    if (this.menus == null) {
      sb.append("null");
    } else {
      sb.append(this.menus);
    }
    first = false;
    if (isSetOutletName()) {
      if (!first) sb.append(", ");
      sb.append("outletName:");
      if (this.outletName == null) {
        sb.append("null");
      } else {
        sb.append(this.outletName);
      }
      first = false;
    }
    if (isSetPositionName()) {
      if (!first) sb.append(", ");
      sb.append("positionName:");
      if (this.positionName == null) {
        sb.append("null");
      } else {
        sb.append(this.positionName);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (userId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userId' was not present! Struct: " + toString());
    }
    if (userName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userName' was not present! Struct: " + toString());
    }
    if (userStat == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'userStat' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'outletId' because it's a primitive and you chose the non-beans generator.
    if (positionCode == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'positionCode' was not present! Struct: " + toString());
    }
    if (token == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'token' was not present! Struct: " + toString());
    }
    if (menus == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'menus' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LOGIN_USER_INFOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LOGIN_USER_INFOStandardScheme getScheme() {
      return new LOGIN_USER_INFOStandardScheme();
    }
  }

  private static class LOGIN_USER_INFOStandardScheme extends org.apache.thrift.scheme.StandardScheme<LOGIN_USER_INFO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LOGIN_USER_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userId = iprot.readString();
              struct.setUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // USER_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userName = iprot.readString();
              struct.setUserNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // USER_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.userStat = iprot.readString();
              struct.setUserStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outletId = iprot.readI64();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OUTLET_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletType = iprot.readString();
              struct.setOutletTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // POSITION_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionCode = iprot.readString();
              struct.setPositionCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // DEPARTMENT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.department = iprot.readString();
              struct.setDepartmentIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // TOKEN
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.token = iprot.readString();
              struct.setTokenIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MENUS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.menus = iprot.readString();
              struct.setMenusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // OUTLET_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outletName = iprot.readString();
              struct.setOutletNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // POSITION_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.positionName = iprot.readString();
              struct.setPositionNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOutletId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'outletId' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LOGIN_USER_INFO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.userId != null) {
        oprot.writeFieldBegin(USER_ID_FIELD_DESC);
        oprot.writeString(struct.userId);
        oprot.writeFieldEnd();
      }
      if (struct.userName != null) {
        oprot.writeFieldBegin(USER_NAME_FIELD_DESC);
        oprot.writeString(struct.userName);
        oprot.writeFieldEnd();
      }
      if (struct.userStat != null) {
        oprot.writeFieldBegin(USER_STAT_FIELD_DESC);
        oprot.writeString(struct.userStat);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
      oprot.writeI64(struct.outletId);
      oprot.writeFieldEnd();
      if (struct.outletType != null) {
        if (struct.isSetOutletType()) {
          oprot.writeFieldBegin(OUTLET_TYPE_FIELD_DESC);
          oprot.writeString(struct.outletType);
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionCode != null) {
        oprot.writeFieldBegin(POSITION_CODE_FIELD_DESC);
        oprot.writeString(struct.positionCode);
        oprot.writeFieldEnd();
      }
      if (struct.department != null) {
        if (struct.isSetDepartment()) {
          oprot.writeFieldBegin(DEPARTMENT_FIELD_DESC);
          oprot.writeString(struct.department);
          oprot.writeFieldEnd();
        }
      }
      if (struct.token != null) {
        oprot.writeFieldBegin(TOKEN_FIELD_DESC);
        oprot.writeString(struct.token);
        oprot.writeFieldEnd();
      }
      if (struct.menus != null) {
        oprot.writeFieldBegin(MENUS_FIELD_DESC);
        oprot.writeString(struct.menus);
        oprot.writeFieldEnd();
      }
      if (struct.outletName != null) {
        if (struct.isSetOutletName()) {
          oprot.writeFieldBegin(OUTLET_NAME_FIELD_DESC);
          oprot.writeString(struct.outletName);
          oprot.writeFieldEnd();
        }
      }
      if (struct.positionName != null) {
        if (struct.isSetPositionName()) {
          oprot.writeFieldBegin(POSITION_NAME_FIELD_DESC);
          oprot.writeString(struct.positionName);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LOGIN_USER_INFOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LOGIN_USER_INFOTupleScheme getScheme() {
      return new LOGIN_USER_INFOTupleScheme();
    }
  }

  private static class LOGIN_USER_INFOTupleScheme extends org.apache.thrift.scheme.TupleScheme<LOGIN_USER_INFO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LOGIN_USER_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.userId);
      oprot.writeString(struct.userName);
      oprot.writeString(struct.userStat);
      oprot.writeI64(struct.outletId);
      oprot.writeString(struct.positionCode);
      oprot.writeString(struct.token);
      oprot.writeString(struct.menus);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetOutletType()) {
        optionals.set(0);
      }
      if (struct.isSetDepartment()) {
        optionals.set(1);
      }
      if (struct.isSetOutletName()) {
        optionals.set(2);
      }
      if (struct.isSetPositionName()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetOutletType()) {
        oprot.writeString(struct.outletType);
      }
      if (struct.isSetDepartment()) {
        oprot.writeString(struct.department);
      }
      if (struct.isSetOutletName()) {
        oprot.writeString(struct.outletName);
      }
      if (struct.isSetPositionName()) {
        oprot.writeString(struct.positionName);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LOGIN_USER_INFO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.userId = iprot.readString();
      struct.setUserIdIsSet(true);
      struct.userName = iprot.readString();
      struct.setUserNameIsSet(true);
      struct.userStat = iprot.readString();
      struct.setUserStatIsSet(true);
      struct.outletId = iprot.readI64();
      struct.setOutletIdIsSet(true);
      struct.positionCode = iprot.readString();
      struct.setPositionCodeIsSet(true);
      struct.token = iprot.readString();
      struct.setTokenIsSet(true);
      struct.menus = iprot.readString();
      struct.setMenusIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.outletType = iprot.readString();
        struct.setOutletTypeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.department = iprot.readString();
        struct.setDepartmentIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outletName = iprot.readString();
        struct.setOutletNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.positionName = iprot.readString();
        struct.setPositionNameIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

