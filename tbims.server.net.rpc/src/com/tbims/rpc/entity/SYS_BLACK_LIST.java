/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 黑名单表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SYS_BLACK_LIST implements org.apache.thrift.TBase<SYS_BLACK_LIST, SYS_BLACK_LIST._Fields>, java.io.Serializable, Cloneable, Comparable<SYS_BLACK_LIST> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SYS_BLACK_LIST");

  private static final org.apache.thrift.protocol.TField BLACK_LIST_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("blackListId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LOSS_DT_FIELD_DESC = new org.apache.thrift.protocol.TField("lossDt", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField CHIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chipId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField CARD_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("cardType", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField LOSS_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("lossReason", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SYS_BLACK_LISTStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SYS_BLACK_LISTTupleSchemeFactory();

  /**
   * 黑名单ID
   */
  public java.lang.String blackListId; // required
  /**
   * 挂失日期
   */
  public long lossDt; // required
  /**
   * 票号
   */
  public java.lang.String ticketId; // required
  /**
   * 芯片ID
   */
  public java.lang.String chipId; // optional
  /**
   * 类型(1-员工卡或2-票)
   */
  public java.lang.String cardType; // required
  /**
   * 挂失原因
   */
  public java.lang.String lossReason; // optional
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // optional
  /**
   * 操作时间
   */
  public long opeTime; // optional
  /**
   * 版本号
   */
  public long versionNo; // optional
  /**
   * 状态(Y启用N取消)
   */
  public java.lang.String stat; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 黑名单ID
     */
    BLACK_LIST_ID((short)1, "blackListId"),
    /**
     * 挂失日期
     */
    LOSS_DT((short)2, "lossDt"),
    /**
     * 票号
     */
    TICKET_ID((short)3, "ticketId"),
    /**
     * 芯片ID
     */
    CHIP_ID((short)4, "chipId"),
    /**
     * 类型(1-员工卡或2-票)
     */
    CARD_TYPE((short)5, "cardType"),
    /**
     * 挂失原因
     */
    LOSS_REASON((short)6, "lossReason"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)7, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)8, "opeTime"),
    /**
     * 版本号
     */
    VERSION_NO((short)9, "versionNo"),
    /**
     * 状态(Y启用N取消)
     */
    STAT((short)10, "stat");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // BLACK_LIST_ID
          return BLACK_LIST_ID;
        case 2: // LOSS_DT
          return LOSS_DT;
        case 3: // TICKET_ID
          return TICKET_ID;
        case 4: // CHIP_ID
          return CHIP_ID;
        case 5: // CARD_TYPE
          return CARD_TYPE;
        case 6: // LOSS_REASON
          return LOSS_REASON;
        case 7: // OPE_USER_ID
          return OPE_USER_ID;
        case 8: // OPE_TIME
          return OPE_TIME;
        case 9: // VERSION_NO
          return VERSION_NO;
        case 10: // STAT
          return STAT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LOSSDT_ISSET_ID = 0;
  private static final int __OPETIME_ISSET_ID = 1;
  private static final int __VERSIONNO_ISSET_ID = 2;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.CHIP_ID,_Fields.LOSS_REASON,_Fields.OPE_USER_ID,_Fields.OPE_TIME,_Fields.VERSION_NO,_Fields.STAT};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.BLACK_LIST_ID, new org.apache.thrift.meta_data.FieldMetaData("blackListId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOSS_DT, new org.apache.thrift.meta_data.FieldMetaData("lossDt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CHIP_ID, new org.apache.thrift.meta_data.FieldMetaData("chipId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CARD_TYPE, new org.apache.thrift.meta_data.FieldMetaData("cardType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.LOSS_REASON, new org.apache.thrift.meta_data.FieldMetaData("lossReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SYS_BLACK_LIST.class, metaDataMap);
  }

  public SYS_BLACK_LIST() {
  }

  public SYS_BLACK_LIST(
    java.lang.String blackListId,
    long lossDt,
    java.lang.String ticketId,
    java.lang.String cardType)
  {
    this();
    this.blackListId = blackListId;
    this.lossDt = lossDt;
    setLossDtIsSet(true);
    this.ticketId = ticketId;
    this.cardType = cardType;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SYS_BLACK_LIST(SYS_BLACK_LIST other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetBlackListId()) {
      this.blackListId = other.blackListId;
    }
    this.lossDt = other.lossDt;
    if (other.isSetTicketId()) {
      this.ticketId = other.ticketId;
    }
    if (other.isSetChipId()) {
      this.chipId = other.chipId;
    }
    if (other.isSetCardType()) {
      this.cardType = other.cardType;
    }
    if (other.isSetLossReason()) {
      this.lossReason = other.lossReason;
    }
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
    this.versionNo = other.versionNo;
    if (other.isSetStat()) {
      this.stat = other.stat;
    }
  }

  public SYS_BLACK_LIST deepCopy() {
    return new SYS_BLACK_LIST(this);
  }

  @Override
  public void clear() {
    this.blackListId = null;
    setLossDtIsSet(false);
    this.lossDt = 0;
    this.ticketId = null;
    this.chipId = null;
    this.cardType = null;
    this.lossReason = null;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
    setVersionNoIsSet(false);
    this.versionNo = 0;
    this.stat = null;
  }

  /**
   * 黑名单ID
   */
  public java.lang.String getBlackListId() {
    return this.blackListId;
  }

  /**
   * 黑名单ID
   */
  public SYS_BLACK_LIST setBlackListId(java.lang.String blackListId) {
    this.blackListId = blackListId;
    return this;
  }

  public void unsetBlackListId() {
    this.blackListId = null;
  }

  /** Returns true if field blackListId is set (has been assigned a value) and false otherwise */
  public boolean isSetBlackListId() {
    return this.blackListId != null;
  }

  public void setBlackListIdIsSet(boolean value) {
    if (!value) {
      this.blackListId = null;
    }
  }

  /**
   * 挂失日期
   */
  public long getLossDt() {
    return this.lossDt;
  }

  /**
   * 挂失日期
   */
  public SYS_BLACK_LIST setLossDt(long lossDt) {
    this.lossDt = lossDt;
    setLossDtIsSet(true);
    return this;
  }

  public void unsetLossDt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LOSSDT_ISSET_ID);
  }

  /** Returns true if field lossDt is set (has been assigned a value) and false otherwise */
  public boolean isSetLossDt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LOSSDT_ISSET_ID);
  }

  public void setLossDtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LOSSDT_ISSET_ID, value);
  }

  /**
   * 票号
   */
  public java.lang.String getTicketId() {
    return this.ticketId;
  }

  /**
   * 票号
   */
  public SYS_BLACK_LIST setTicketId(java.lang.String ticketId) {
    this.ticketId = ticketId;
    return this;
  }

  public void unsetTicketId() {
    this.ticketId = null;
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return this.ticketId != null;
  }

  public void setTicketIdIsSet(boolean value) {
    if (!value) {
      this.ticketId = null;
    }
  }

  /**
   * 芯片ID
   */
  public java.lang.String getChipId() {
    return this.chipId;
  }

  /**
   * 芯片ID
   */
  public SYS_BLACK_LIST setChipId(java.lang.String chipId) {
    this.chipId = chipId;
    return this;
  }

  public void unsetChipId() {
    this.chipId = null;
  }

  /** Returns true if field chipId is set (has been assigned a value) and false otherwise */
  public boolean isSetChipId() {
    return this.chipId != null;
  }

  public void setChipIdIsSet(boolean value) {
    if (!value) {
      this.chipId = null;
    }
  }

  /**
   * 类型(1-员工卡或2-票)
   */
  public java.lang.String getCardType() {
    return this.cardType;
  }

  /**
   * 类型(1-员工卡或2-票)
   */
  public SYS_BLACK_LIST setCardType(java.lang.String cardType) {
    this.cardType = cardType;
    return this;
  }

  public void unsetCardType() {
    this.cardType = null;
  }

  /** Returns true if field cardType is set (has been assigned a value) and false otherwise */
  public boolean isSetCardType() {
    return this.cardType != null;
  }

  public void setCardTypeIsSet(boolean value) {
    if (!value) {
      this.cardType = null;
    }
  }

  /**
   * 挂失原因
   */
  public java.lang.String getLossReason() {
    return this.lossReason;
  }

  /**
   * 挂失原因
   */
  public SYS_BLACK_LIST setLossReason(java.lang.String lossReason) {
    this.lossReason = lossReason;
    return this;
  }

  public void unsetLossReason() {
    this.lossReason = null;
  }

  /** Returns true if field lossReason is set (has been assigned a value) and false otherwise */
  public boolean isSetLossReason() {
    return this.lossReason != null;
  }

  public void setLossReasonIsSet(boolean value) {
    if (!value) {
      this.lossReason = null;
    }
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SYS_BLACK_LIST setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SYS_BLACK_LIST setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SYS_BLACK_LIST setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  /**
   * 状态(Y启用N取消)
   */
  public java.lang.String getStat() {
    return this.stat;
  }

  /**
   * 状态(Y启用N取消)
   */
  public SYS_BLACK_LIST setStat(java.lang.String stat) {
    this.stat = stat;
    return this;
  }

  public void unsetStat() {
    this.stat = null;
  }

  /** Returns true if field stat is set (has been assigned a value) and false otherwise */
  public boolean isSetStat() {
    return this.stat != null;
  }

  public void setStatIsSet(boolean value) {
    if (!value) {
      this.stat = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case BLACK_LIST_ID:
      if (value == null) {
        unsetBlackListId();
      } else {
        setBlackListId((java.lang.String)value);
      }
      break;

    case LOSS_DT:
      if (value == null) {
        unsetLossDt();
      } else {
        setLossDt((java.lang.Long)value);
      }
      break;

    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((java.lang.String)value);
      }
      break;

    case CHIP_ID:
      if (value == null) {
        unsetChipId();
      } else {
        setChipId((java.lang.String)value);
      }
      break;

    case CARD_TYPE:
      if (value == null) {
        unsetCardType();
      } else {
        setCardType((java.lang.String)value);
      }
      break;

    case LOSS_REASON:
      if (value == null) {
        unsetLossReason();
      } else {
        setLossReason((java.lang.String)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case BLACK_LIST_ID:
      return getBlackListId();

    case LOSS_DT:
      return getLossDt();

    case TICKET_ID:
      return getTicketId();

    case CHIP_ID:
      return getChipId();

    case CARD_TYPE:
      return getCardType();

    case LOSS_REASON:
      return getLossReason();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    case VERSION_NO:
      return getVersionNo();

    case STAT:
      return getStat();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case BLACK_LIST_ID:
      return isSetBlackListId();
    case LOSS_DT:
      return isSetLossDt();
    case TICKET_ID:
      return isSetTicketId();
    case CHIP_ID:
      return isSetChipId();
    case CARD_TYPE:
      return isSetCardType();
    case LOSS_REASON:
      return isSetLossReason();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    case VERSION_NO:
      return isSetVersionNo();
    case STAT:
      return isSetStat();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SYS_BLACK_LIST)
      return this.equals((SYS_BLACK_LIST)that);
    return false;
  }

  public boolean equals(SYS_BLACK_LIST that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_blackListId = true && this.isSetBlackListId();
    boolean that_present_blackListId = true && that.isSetBlackListId();
    if (this_present_blackListId || that_present_blackListId) {
      if (!(this_present_blackListId && that_present_blackListId))
        return false;
      if (!this.blackListId.equals(that.blackListId))
        return false;
    }

    boolean this_present_lossDt = true;
    boolean that_present_lossDt = true;
    if (this_present_lossDt || that_present_lossDt) {
      if (!(this_present_lossDt && that_present_lossDt))
        return false;
      if (this.lossDt != that.lossDt)
        return false;
    }

    boolean this_present_ticketId = true && this.isSetTicketId();
    boolean that_present_ticketId = true && that.isSetTicketId();
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (!this.ticketId.equals(that.ticketId))
        return false;
    }

    boolean this_present_chipId = true && this.isSetChipId();
    boolean that_present_chipId = true && that.isSetChipId();
    if (this_present_chipId || that_present_chipId) {
      if (!(this_present_chipId && that_present_chipId))
        return false;
      if (!this.chipId.equals(that.chipId))
        return false;
    }

    boolean this_present_cardType = true && this.isSetCardType();
    boolean that_present_cardType = true && that.isSetCardType();
    if (this_present_cardType || that_present_cardType) {
      if (!(this_present_cardType && that_present_cardType))
        return false;
      if (!this.cardType.equals(that.cardType))
        return false;
    }

    boolean this_present_lossReason = true && this.isSetLossReason();
    boolean that_present_lossReason = true && that.isSetLossReason();
    if (this_present_lossReason || that_present_lossReason) {
      if (!(this_present_lossReason && that_present_lossReason))
        return false;
      if (!this.lossReason.equals(that.lossReason))
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true && this.isSetOpeTime();
    boolean that_present_opeTime = true && that.isSetOpeTime();
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    boolean this_present_stat = true && this.isSetStat();
    boolean that_present_stat = true && that.isSetStat();
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!this.stat.equals(that.stat))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetBlackListId()) ? 131071 : 524287);
    if (isSetBlackListId())
      hashCode = hashCode * 8191 + blackListId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lossDt);

    hashCode = hashCode * 8191 + ((isSetTicketId()) ? 131071 : 524287);
    if (isSetTicketId())
      hashCode = hashCode * 8191 + ticketId.hashCode();

    hashCode = hashCode * 8191 + ((isSetChipId()) ? 131071 : 524287);
    if (isSetChipId())
      hashCode = hashCode * 8191 + chipId.hashCode();

    hashCode = hashCode * 8191 + ((isSetCardType()) ? 131071 : 524287);
    if (isSetCardType())
      hashCode = hashCode * 8191 + cardType.hashCode();

    hashCode = hashCode * 8191 + ((isSetLossReason()) ? 131071 : 524287);
    if (isSetLossReason())
      hashCode = hashCode * 8191 + lossReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeTime()) ? 131071 : 524287);
    if (isSetOpeTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
    if (isSetStat())
      hashCode = hashCode * 8191 + stat.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SYS_BLACK_LIST other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetBlackListId()).compareTo(other.isSetBlackListId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetBlackListId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.blackListId, other.blackListId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLossDt()).compareTo(other.isSetLossDt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLossDt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lossDt, other.lossDt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetChipId()).compareTo(other.isSetChipId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetChipId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chipId, other.chipId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCardType()).compareTo(other.isSetCardType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCardType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cardType, other.cardType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLossReason()).compareTo(other.isSetLossReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLossReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lossReason, other.lossReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SYS_BLACK_LIST(");
    boolean first = true;

    sb.append("blackListId:");
    if (this.blackListId == null) {
      sb.append("null");
    } else {
      sb.append(this.blackListId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("lossDt:");
    sb.append(this.lossDt);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketId:");
    if (this.ticketId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketId);
    }
    first = false;
    if (isSetChipId()) {
      if (!first) sb.append(", ");
      sb.append("chipId:");
      if (this.chipId == null) {
        sb.append("null");
      } else {
        sb.append(this.chipId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("cardType:");
    if (this.cardType == null) {
      sb.append("null");
    } else {
      sb.append(this.cardType);
    }
    first = false;
    if (isSetLossReason()) {
      if (!first) sb.append(", ");
      sb.append("lossReason:");
      if (this.lossReason == null) {
        sb.append("null");
      } else {
        sb.append(this.lossReason);
      }
      first = false;
    }
    if (isSetOpeUserId()) {
      if (!first) sb.append(", ");
      sb.append("opeUserId:");
      if (this.opeUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.opeUserId);
      }
      first = false;
    }
    if (isSetOpeTime()) {
      if (!first) sb.append(", ");
      sb.append("opeTime:");
      sb.append(this.opeTime);
      first = false;
    }
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    if (isSetStat()) {
      if (!first) sb.append(", ");
      sb.append("stat:");
      if (this.stat == null) {
        sb.append("null");
      } else {
        sb.append(this.stat);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (blackListId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'blackListId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'lossDt' because it's a primitive and you chose the non-beans generator.
    if (ticketId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketId' was not present! Struct: " + toString());
    }
    if (cardType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'cardType' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SYS_BLACK_LISTStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_BLACK_LISTStandardScheme getScheme() {
      return new SYS_BLACK_LISTStandardScheme();
    }
  }

  private static class SYS_BLACK_LISTStandardScheme extends org.apache.thrift.scheme.StandardScheme<SYS_BLACK_LIST> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SYS_BLACK_LIST struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // BLACK_LIST_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.blackListId = iprot.readString();
              struct.setBlackListIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LOSS_DT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lossDt = iprot.readI64();
              struct.setLossDtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketId = iprot.readString();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // CHIP_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.chipId = iprot.readString();
              struct.setChipIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // CARD_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.cardType = iprot.readString();
              struct.setCardTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // LOSS_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.lossReason = iprot.readString();
              struct.setLossReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stat = iprot.readString();
              struct.setStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetLossDt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'lossDt' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SYS_BLACK_LIST struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.blackListId != null) {
        oprot.writeFieldBegin(BLACK_LIST_ID_FIELD_DESC);
        oprot.writeString(struct.blackListId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LOSS_DT_FIELD_DESC);
      oprot.writeI64(struct.lossDt);
      oprot.writeFieldEnd();
      if (struct.ticketId != null) {
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeString(struct.ticketId);
        oprot.writeFieldEnd();
      }
      if (struct.chipId != null) {
        if (struct.isSetChipId()) {
          oprot.writeFieldBegin(CHIP_ID_FIELD_DESC);
          oprot.writeString(struct.chipId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.cardType != null) {
        oprot.writeFieldBegin(CARD_TYPE_FIELD_DESC);
        oprot.writeString(struct.cardType);
        oprot.writeFieldEnd();
      }
      if (struct.lossReason != null) {
        if (struct.isSetLossReason()) {
          oprot.writeFieldBegin(LOSS_REASON_FIELD_DESC);
          oprot.writeString(struct.lossReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.opeUserId != null) {
        if (struct.isSetOpeUserId()) {
          oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
          oprot.writeString(struct.opeUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOpeTime()) {
        oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
        oprot.writeI64(struct.opeTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      if (struct.stat != null) {
        if (struct.isSetStat()) {
          oprot.writeFieldBegin(STAT_FIELD_DESC);
          oprot.writeString(struct.stat);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SYS_BLACK_LISTTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_BLACK_LISTTupleScheme getScheme() {
      return new SYS_BLACK_LISTTupleScheme();
    }
  }

  private static class SYS_BLACK_LISTTupleScheme extends org.apache.thrift.scheme.TupleScheme<SYS_BLACK_LIST> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SYS_BLACK_LIST struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.blackListId);
      oprot.writeI64(struct.lossDt);
      oprot.writeString(struct.ticketId);
      oprot.writeString(struct.cardType);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetChipId()) {
        optionals.set(0);
      }
      if (struct.isSetLossReason()) {
        optionals.set(1);
      }
      if (struct.isSetOpeUserId()) {
        optionals.set(2);
      }
      if (struct.isSetOpeTime()) {
        optionals.set(3);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(4);
      }
      if (struct.isSetStat()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetChipId()) {
        oprot.writeString(struct.chipId);
      }
      if (struct.isSetLossReason()) {
        oprot.writeString(struct.lossReason);
      }
      if (struct.isSetOpeUserId()) {
        oprot.writeString(struct.opeUserId);
      }
      if (struct.isSetOpeTime()) {
        oprot.writeI64(struct.opeTime);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
      if (struct.isSetStat()) {
        oprot.writeString(struct.stat);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SYS_BLACK_LIST struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.blackListId = iprot.readString();
      struct.setBlackListIdIsSet(true);
      struct.lossDt = iprot.readI64();
      struct.setLossDtIsSet(true);
      struct.ticketId = iprot.readString();
      struct.setTicketIdIsSet(true);
      struct.cardType = iprot.readString();
      struct.setCardTypeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.chipId = iprot.readString();
        struct.setChipIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.lossReason = iprot.readString();
        struct.setLossReasonIsSet(true);
      }
      if (incoming.get(2)) {
        struct.opeUserId = iprot.readString();
        struct.setOpeUserIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.opeTime = iprot.readI64();
        struct.setOpeTimeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
      if (incoming.get(5)) {
        struct.stat = iprot.readString();
        struct.setStatIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

