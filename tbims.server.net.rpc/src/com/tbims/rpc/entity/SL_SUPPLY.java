/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 补票表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SL_SUPPLY implements org.apache.thrift.TBase<SL_SUPPLY, SL_SUPPLY._Fields>, java.io.Serializable, Cloneable, Comparable<SL_SUPPLY> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_SUPPLY");

  private static final org.apache.thrift.protocol.TField SUPPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("supplyId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField NEW_TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("newTicketId", org.apache.thrift.protocol.TType.I64, (short)2);
  private static final org.apache.thrift.protocol.TField OLD_TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("oldTicketId", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField NEW_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("newPrice", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField OLD_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("oldPrice", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField SL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("slOrder", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField SL_USELESS_TICKET_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("slUselessTicketInfo", org.apache.thrift.protocol.TType.STRUCT, (short)10);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_SUPPLYStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_SUPPLYTupleSchemeFactory();

  /**
   * 销售单号
   */
  public java.lang.String supplyId; // required
  /**
   * 新票号
   */
  public long newTicketId; // required
  /**
   * 旧票号
   */
  public long oldTicketId; // required
  /**
   * 新票价
   */
  public long newPrice; // required
  /**
   * 旧票价
   */
  public long oldPrice; // required
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // required
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // required
  /**
   * 操作时间
   */
  public long opeTime; // required
  /**
   * 销售信息
   */
  public SL_ORDER slOrder; // required
  /**
   * 废票信息
   */
  public SL_USELESS_TICKET_INFO slUselessTicketInfo; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 销售单号
     */
    SUPPLY_ID((short)1, "supplyId"),
    /**
     * 新票号
     */
    NEW_TICKET_ID((short)2, "newTicketId"),
    /**
     * 旧票号
     */
    OLD_TICKET_ID((short)3, "oldTicketId"),
    /**
     * 新票价
     */
    NEW_PRICE((short)4, "newPrice"),
    /**
     * 旧票价
     */
    OLD_PRICE((short)5, "oldPrice"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)6, "ticketTypeId"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)7, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)8, "opeTime"),
    /**
     * 销售信息
     */
    SL_ORDER((short)9, "slOrder"),
    /**
     * 废票信息
     */
    SL_USELESS_TICKET_INFO((short)10, "slUselessTicketInfo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SUPPLY_ID
          return SUPPLY_ID;
        case 2: // NEW_TICKET_ID
          return NEW_TICKET_ID;
        case 3: // OLD_TICKET_ID
          return OLD_TICKET_ID;
        case 4: // NEW_PRICE
          return NEW_PRICE;
        case 5: // OLD_PRICE
          return OLD_PRICE;
        case 6: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 7: // OPE_USER_ID
          return OPE_USER_ID;
        case 8: // OPE_TIME
          return OPE_TIME;
        case 9: // SL_ORDER
          return SL_ORDER;
        case 10: // SL_USELESS_TICKET_INFO
          return SL_USELESS_TICKET_INFO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __NEWTICKETID_ISSET_ID = 0;
  private static final int __OLDTICKETID_ISSET_ID = 1;
  private static final int __NEWPRICE_ISSET_ID = 2;
  private static final int __OLDPRICE_ISSET_ID = 3;
  private static final int __OPETIME_ISSET_ID = 4;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SUPPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("supplyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NEW_TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("newTicketId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OLD_TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("oldTicketId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.NEW_PRICE, new org.apache.thrift.meta_data.FieldMetaData("newPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OLD_PRICE, new org.apache.thrift.meta_data.FieldMetaData("oldPrice", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("slOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SL_ORDER.class)));
    tmpMap.put(_Fields.SL_USELESS_TICKET_INFO, new org.apache.thrift.meta_data.FieldMetaData("slUselessTicketInfo", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "SL_USELESS_TICKET_INFO")));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_SUPPLY.class, metaDataMap);
  }

  public SL_SUPPLY() {
  }

  public SL_SUPPLY(
    java.lang.String supplyId,
    long newTicketId,
    long oldTicketId,
    long newPrice,
    long oldPrice,
    java.lang.String ticketTypeId,
    java.lang.String opeUserId,
    long opeTime,
    SL_ORDER slOrder,
    SL_USELESS_TICKET_INFO slUselessTicketInfo)
  {
    this();
    this.supplyId = supplyId;
    this.newTicketId = newTicketId;
    setNewTicketIdIsSet(true);
    this.oldTicketId = oldTicketId;
    setOldTicketIdIsSet(true);
    this.newPrice = newPrice;
    setNewPriceIsSet(true);
    this.oldPrice = oldPrice;
    setOldPriceIsSet(true);
    this.ticketTypeId = ticketTypeId;
    this.opeUserId = opeUserId;
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    this.slOrder = slOrder;
    this.slUselessTicketInfo = slUselessTicketInfo;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_SUPPLY(SL_SUPPLY other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSupplyId()) {
      this.supplyId = other.supplyId;
    }
    this.newTicketId = other.newTicketId;
    this.oldTicketId = other.oldTicketId;
    this.newPrice = other.newPrice;
    this.oldPrice = other.oldPrice;
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
    if (other.isSetSlOrder()) {
      this.slOrder = new SL_ORDER(other.slOrder);
    }
    if (other.isSetSlUselessTicketInfo()) {
      this.slUselessTicketInfo = new SL_USELESS_TICKET_INFO(other.slUselessTicketInfo);
    }
  }

  public SL_SUPPLY deepCopy() {
    return new SL_SUPPLY(this);
  }

  @Override
  public void clear() {
    this.supplyId = null;
    setNewTicketIdIsSet(false);
    this.newTicketId = 0;
    setOldTicketIdIsSet(false);
    this.oldTicketId = 0;
    setNewPriceIsSet(false);
    this.newPrice = 0;
    setOldPriceIsSet(false);
    this.oldPrice = 0;
    this.ticketTypeId = null;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
    this.slOrder = null;
    this.slUselessTicketInfo = null;
  }

  /**
   * 销售单号
   */
  public java.lang.String getSupplyId() {
    return this.supplyId;
  }

  /**
   * 销售单号
   */
  public SL_SUPPLY setSupplyId(java.lang.String supplyId) {
    this.supplyId = supplyId;
    return this;
  }

  public void unsetSupplyId() {
    this.supplyId = null;
  }

  /** Returns true if field supplyId is set (has been assigned a value) and false otherwise */
  public boolean isSetSupplyId() {
    return this.supplyId != null;
  }

  public void setSupplyIdIsSet(boolean value) {
    if (!value) {
      this.supplyId = null;
    }
  }

  /**
   * 新票号
   */
  public long getNewTicketId() {
    return this.newTicketId;
  }

  /**
   * 新票号
   */
  public SL_SUPPLY setNewTicketId(long newTicketId) {
    this.newTicketId = newTicketId;
    setNewTicketIdIsSet(true);
    return this;
  }

  public void unsetNewTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEWTICKETID_ISSET_ID);
  }

  /** Returns true if field newTicketId is set (has been assigned a value) and false otherwise */
  public boolean isSetNewTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEWTICKETID_ISSET_ID);
  }

  public void setNewTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEWTICKETID_ISSET_ID, value);
  }

  /**
   * 旧票号
   */
  public long getOldTicketId() {
    return this.oldTicketId;
  }

  /**
   * 旧票号
   */
  public SL_SUPPLY setOldTicketId(long oldTicketId) {
    this.oldTicketId = oldTicketId;
    setOldTicketIdIsSet(true);
    return this;
  }

  public void unsetOldTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OLDTICKETID_ISSET_ID);
  }

  /** Returns true if field oldTicketId is set (has been assigned a value) and false otherwise */
  public boolean isSetOldTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OLDTICKETID_ISSET_ID);
  }

  public void setOldTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OLDTICKETID_ISSET_ID, value);
  }

  /**
   * 新票价
   */
  public long getNewPrice() {
    return this.newPrice;
  }

  /**
   * 新票价
   */
  public SL_SUPPLY setNewPrice(long newPrice) {
    this.newPrice = newPrice;
    setNewPriceIsSet(true);
    return this;
  }

  public void unsetNewPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEWPRICE_ISSET_ID);
  }

  /** Returns true if field newPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetNewPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEWPRICE_ISSET_ID);
  }

  public void setNewPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEWPRICE_ISSET_ID, value);
  }

  /**
   * 旧票价
   */
  public long getOldPrice() {
    return this.oldPrice;
  }

  /**
   * 旧票价
   */
  public SL_SUPPLY setOldPrice(long oldPrice) {
    this.oldPrice = oldPrice;
    setOldPriceIsSet(true);
    return this;
  }

  public void unsetOldPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OLDPRICE_ISSET_ID);
  }

  /** Returns true if field oldPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOldPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OLDPRICE_ISSET_ID);
  }

  public void setOldPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OLDPRICE_ISSET_ID, value);
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public SL_SUPPLY setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SL_SUPPLY setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SL_SUPPLY setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  /**
   * 销售信息
   */
  public SL_ORDER getSlOrder() {
    return this.slOrder;
  }

  /**
   * 销售信息
   */
  public SL_SUPPLY setSlOrder(SL_ORDER slOrder) {
    this.slOrder = slOrder;
    return this;
  }

  public void unsetSlOrder() {
    this.slOrder = null;
  }

  /** Returns true if field slOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSlOrder() {
    return this.slOrder != null;
  }

  public void setSlOrderIsSet(boolean value) {
    if (!value) {
      this.slOrder = null;
    }
  }

  /**
   * 废票信息
   */
  public SL_USELESS_TICKET_INFO getSlUselessTicketInfo() {
    return this.slUselessTicketInfo;
  }

  /**
   * 废票信息
   */
  public SL_SUPPLY setSlUselessTicketInfo(SL_USELESS_TICKET_INFO slUselessTicketInfo) {
    this.slUselessTicketInfo = slUselessTicketInfo;
    return this;
  }

  public void unsetSlUselessTicketInfo() {
    this.slUselessTicketInfo = null;
  }

  /** Returns true if field slUselessTicketInfo is set (has been assigned a value) and false otherwise */
  public boolean isSetSlUselessTicketInfo() {
    return this.slUselessTicketInfo != null;
  }

  public void setSlUselessTicketInfoIsSet(boolean value) {
    if (!value) {
      this.slUselessTicketInfo = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case SUPPLY_ID:
      if (value == null) {
        unsetSupplyId();
      } else {
        setSupplyId((java.lang.String)value);
      }
      break;

    case NEW_TICKET_ID:
      if (value == null) {
        unsetNewTicketId();
      } else {
        setNewTicketId((java.lang.Long)value);
      }
      break;

    case OLD_TICKET_ID:
      if (value == null) {
        unsetOldTicketId();
      } else {
        setOldTicketId((java.lang.Long)value);
      }
      break;

    case NEW_PRICE:
      if (value == null) {
        unsetNewPrice();
      } else {
        setNewPrice((java.lang.Long)value);
      }
      break;

    case OLD_PRICE:
      if (value == null) {
        unsetOldPrice();
      } else {
        setOldPrice((java.lang.Long)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    case SL_ORDER:
      if (value == null) {
        unsetSlOrder();
      } else {
        setSlOrder((SL_ORDER)value);
      }
      break;

    case SL_USELESS_TICKET_INFO:
      if (value == null) {
        unsetSlUselessTicketInfo();
      } else {
        setSlUselessTicketInfo((SL_USELESS_TICKET_INFO)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case SUPPLY_ID:
      return getSupplyId();

    case NEW_TICKET_ID:
      return getNewTicketId();

    case OLD_TICKET_ID:
      return getOldTicketId();

    case NEW_PRICE:
      return getNewPrice();

    case OLD_PRICE:
      return getOldPrice();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    case SL_ORDER:
      return getSlOrder();

    case SL_USELESS_TICKET_INFO:
      return getSlUselessTicketInfo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case SUPPLY_ID:
      return isSetSupplyId();
    case NEW_TICKET_ID:
      return isSetNewTicketId();
    case OLD_TICKET_ID:
      return isSetOldTicketId();
    case NEW_PRICE:
      return isSetNewPrice();
    case OLD_PRICE:
      return isSetOldPrice();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    case SL_ORDER:
      return isSetSlOrder();
    case SL_USELESS_TICKET_INFO:
      return isSetSlUselessTicketInfo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_SUPPLY)
      return this.equals((SL_SUPPLY)that);
    return false;
  }

  public boolean equals(SL_SUPPLY that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_supplyId = true && this.isSetSupplyId();
    boolean that_present_supplyId = true && that.isSetSupplyId();
    if (this_present_supplyId || that_present_supplyId) {
      if (!(this_present_supplyId && that_present_supplyId))
        return false;
      if (!this.supplyId.equals(that.supplyId))
        return false;
    }

    boolean this_present_newTicketId = true;
    boolean that_present_newTicketId = true;
    if (this_present_newTicketId || that_present_newTicketId) {
      if (!(this_present_newTicketId && that_present_newTicketId))
        return false;
      if (this.newTicketId != that.newTicketId)
        return false;
    }

    boolean this_present_oldTicketId = true;
    boolean that_present_oldTicketId = true;
    if (this_present_oldTicketId || that_present_oldTicketId) {
      if (!(this_present_oldTicketId && that_present_oldTicketId))
        return false;
      if (this.oldTicketId != that.oldTicketId)
        return false;
    }

    boolean this_present_newPrice = true;
    boolean that_present_newPrice = true;
    if (this_present_newPrice || that_present_newPrice) {
      if (!(this_present_newPrice && that_present_newPrice))
        return false;
      if (this.newPrice != that.newPrice)
        return false;
    }

    boolean this_present_oldPrice = true;
    boolean that_present_oldPrice = true;
    if (this_present_oldPrice || that_present_oldPrice) {
      if (!(this_present_oldPrice && that_present_oldPrice))
        return false;
      if (this.oldPrice != that.oldPrice)
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true;
    boolean that_present_opeTime = true;
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    boolean this_present_slOrder = true && this.isSetSlOrder();
    boolean that_present_slOrder = true && that.isSetSlOrder();
    if (this_present_slOrder || that_present_slOrder) {
      if (!(this_present_slOrder && that_present_slOrder))
        return false;
      if (!this.slOrder.equals(that.slOrder))
        return false;
    }

    boolean this_present_slUselessTicketInfo = true && this.isSetSlUselessTicketInfo();
    boolean that_present_slUselessTicketInfo = true && that.isSetSlUselessTicketInfo();
    if (this_present_slUselessTicketInfo || that_present_slUselessTicketInfo) {
      if (!(this_present_slUselessTicketInfo && that_present_slUselessTicketInfo))
        return false;
      if (!this.slUselessTicketInfo.equals(that.slUselessTicketInfo))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetSupplyId()) ? 131071 : 524287);
    if (isSetSupplyId())
      hashCode = hashCode * 8191 + supplyId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(newTicketId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(oldTicketId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(newPrice);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(oldPrice);

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    hashCode = hashCode * 8191 + ((isSetSlOrder()) ? 131071 : 524287);
    if (isSetSlOrder())
      hashCode = hashCode * 8191 + slOrder.hashCode();

    hashCode = hashCode * 8191 + ((isSetSlUselessTicketInfo()) ? 131071 : 524287);
    if (isSetSlUselessTicketInfo())
      hashCode = hashCode * 8191 + slUselessTicketInfo.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SL_SUPPLY other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetSupplyId()).compareTo(other.isSetSupplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSupplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.supplyId, other.supplyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewTicketId()).compareTo(other.isSetNewTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newTicketId, other.newTicketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOldTicketId()).compareTo(other.isSetOldTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldTicketId, other.oldTicketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNewPrice()).compareTo(other.isSetNewPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNewPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newPrice, other.newPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOldPrice()).compareTo(other.isSetOldPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOldPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.oldPrice, other.oldPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlOrder()).compareTo(other.isSetSlOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slOrder, other.slOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlUselessTicketInfo()).compareTo(other.isSetSlUselessTicketInfo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlUselessTicketInfo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slUselessTicketInfo, other.slUselessTicketInfo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_SUPPLY(");
    boolean first = true;

    sb.append("supplyId:");
    if (this.supplyId == null) {
      sb.append("null");
    } else {
      sb.append(this.supplyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("newTicketId:");
    sb.append(this.newTicketId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldTicketId:");
    sb.append(this.oldTicketId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("newPrice:");
    sb.append(this.newPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("oldPrice:");
    sb.append(this.oldPrice);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketTypeId:");
    if (this.ticketTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opeUserId:");
    if (this.opeUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.opeUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opeTime:");
    sb.append(this.opeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slOrder:");
    if (this.slOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.slOrder);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("slUselessTicketInfo:");
    if (this.slUselessTicketInfo == null) {
      sb.append("null");
    } else {
      sb.append(this.slUselessTicketInfo);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (supplyId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'supplyId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'newTicketId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'oldTicketId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'newPrice' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'oldPrice' because it's a primitive and you chose the non-beans generator.
    if (ticketTypeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketTypeId' was not present! Struct: " + toString());
    }
    if (opeUserId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'opeUserId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'opeTime' because it's a primitive and you chose the non-beans generator.
    if (slOrder == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slOrder' was not present! Struct: " + toString());
    }
    if (slUselessTicketInfo == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slUselessTicketInfo' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (slOrder != null) {
      slOrder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_SUPPLYStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_SUPPLYStandardScheme getScheme() {
      return new SL_SUPPLYStandardScheme();
    }
  }

  private static class SL_SUPPLYStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_SUPPLY> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_SUPPLY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SUPPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.supplyId = iprot.readString();
              struct.setSupplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // NEW_TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.newTicketId = iprot.readI64();
              struct.setNewTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OLD_TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.oldTicketId = iprot.readI64();
              struct.setOldTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // NEW_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.newPrice = iprot.readI64();
              struct.setNewPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OLD_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.oldPrice = iprot.readI64();
              struct.setOldPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // SL_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slOrder = new SL_ORDER();
              struct.slOrder.read(iprot);
              struct.setSlOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SL_USELESS_TICKET_INFO
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slUselessTicketInfo = new SL_USELESS_TICKET_INFO();
              struct.slUselessTicketInfo.read(iprot);
              struct.setSlUselessTicketInfoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetNewTicketId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'newTicketId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOldTicketId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'oldTicketId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetNewPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'newPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOldPrice()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'oldPrice' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOpeTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'opeTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_SUPPLY struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.supplyId != null) {
        oprot.writeFieldBegin(SUPPLY_ID_FIELD_DESC);
        oprot.writeString(struct.supplyId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(NEW_TICKET_ID_FIELD_DESC);
      oprot.writeI64(struct.newTicketId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_TICKET_ID_FIELD_DESC);
      oprot.writeI64(struct.oldTicketId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NEW_PRICE_FIELD_DESC);
      oprot.writeI64(struct.newPrice);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OLD_PRICE_FIELD_DESC);
      oprot.writeI64(struct.oldPrice);
      oprot.writeFieldEnd();
      if (struct.ticketTypeId != null) {
        oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.ticketTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.opeUserId != null) {
        oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
        oprot.writeString(struct.opeUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
      oprot.writeI64(struct.opeTime);
      oprot.writeFieldEnd();
      if (struct.slOrder != null) {
        oprot.writeFieldBegin(SL_ORDER_FIELD_DESC);
        struct.slOrder.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.slUselessTicketInfo != null) {
        oprot.writeFieldBegin(SL_USELESS_TICKET_INFO_FIELD_DESC);
        struct.slUselessTicketInfo.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_SUPPLYTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_SUPPLYTupleScheme getScheme() {
      return new SL_SUPPLYTupleScheme();
    }
  }

  private static class SL_SUPPLYTupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_SUPPLY> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_SUPPLY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.supplyId);
      oprot.writeI64(struct.newTicketId);
      oprot.writeI64(struct.oldTicketId);
      oprot.writeI64(struct.newPrice);
      oprot.writeI64(struct.oldPrice);
      oprot.writeString(struct.ticketTypeId);
      oprot.writeString(struct.opeUserId);
      oprot.writeI64(struct.opeTime);
      struct.slOrder.write(oprot);
      struct.slUselessTicketInfo.write(oprot);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_SUPPLY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.supplyId = iprot.readString();
      struct.setSupplyIdIsSet(true);
      struct.newTicketId = iprot.readI64();
      struct.setNewTicketIdIsSet(true);
      struct.oldTicketId = iprot.readI64();
      struct.setOldTicketIdIsSet(true);
      struct.newPrice = iprot.readI64();
      struct.setNewPriceIsSet(true);
      struct.oldPrice = iprot.readI64();
      struct.setOldPriceIsSet(true);
      struct.ticketTypeId = iprot.readString();
      struct.setTicketTypeIdIsSet(true);
      struct.opeUserId = iprot.readString();
      struct.setOpeUserIdIsSet(true);
      struct.opeTime = iprot.readI64();
      struct.setOpeTimeIsSet(true);
      struct.slOrder = new SL_ORDER();
      struct.slOrder.read(iprot);
      struct.setSlOrderIsSet(true);
      struct.slUselessTicketInfo = new SL_USELESS_TICKET_INFO();
      struct.slUselessTicketInfo.read(iprot);
      struct.setSlUselessTicketInfoIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

