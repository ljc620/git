/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 字典表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SYS_DICTIONARY implements org.apache.thrift.TBase<SYS_DICTIONARY, SYS_DICTIONARY._Fields>, java.io.Serializable, Cloneable, Comparable<SYS_DICTIONARY> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SYS_DICTIONARY");

  private static final org.apache.thrift.protocol.TField DICTIONARY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dictionaryId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField KEY_CD_FIELD_DESC = new org.apache.thrift.protocol.TField("keyCd", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField KEY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("keyName", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField ITEM_CD_FIELD_DESC = new org.apache.thrift.protocol.TField("itemCd", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ITEM_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("itemName", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField ITEM_VAL_FIELD_DESC = new org.apache.thrift.protocol.TField("itemVal", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("orderNum", org.apache.thrift.protocol.TType.I64, (short)8);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)9);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SYS_DICTIONARYStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SYS_DICTIONARYTupleSchemeFactory();

  /**
   * 字典编号
   */
  public java.lang.String dictionaryId; // required
  /**
   * 字段名
   */
  public java.lang.String keyCd; // required
  /**
   * 字段中文名
   */
  public java.lang.String keyName; // required
  /**
   * 数据项代码
   */
  public java.lang.String itemCd; // required
  /**
   * 数据项名称
   */
  public java.lang.String itemName; // required
  /**
   * 数据项值
   */
  public java.lang.String itemVal; // optional
  /**
   * 状态
   */
  public java.lang.String stat; // optional
  /**
   * 序号
   */
  public long orderNum; // optional
  /**
   * 版本号
   */
  public long versionNo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 字典编号
     */
    DICTIONARY_ID((short)1, "dictionaryId"),
    /**
     * 字段名
     */
    KEY_CD((short)2, "keyCd"),
    /**
     * 字段中文名
     */
    KEY_NAME((short)3, "keyName"),
    /**
     * 数据项代码
     */
    ITEM_CD((short)4, "itemCd"),
    /**
     * 数据项名称
     */
    ITEM_NAME((short)5, "itemName"),
    /**
     * 数据项值
     */
    ITEM_VAL((short)6, "itemVal"),
    /**
     * 状态
     */
    STAT((short)7, "stat"),
    /**
     * 序号
     */
    ORDER_NUM((short)8, "orderNum"),
    /**
     * 版本号
     */
    VERSION_NO((short)9, "versionNo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DICTIONARY_ID
          return DICTIONARY_ID;
        case 2: // KEY_CD
          return KEY_CD;
        case 3: // KEY_NAME
          return KEY_NAME;
        case 4: // ITEM_CD
          return ITEM_CD;
        case 5: // ITEM_NAME
          return ITEM_NAME;
        case 6: // ITEM_VAL
          return ITEM_VAL;
        case 7: // STAT
          return STAT;
        case 8: // ORDER_NUM
          return ORDER_NUM;
        case 9: // VERSION_NO
          return VERSION_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __ORDERNUM_ISSET_ID = 0;
  private static final int __VERSIONNO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.ITEM_VAL,_Fields.STAT,_Fields.ORDER_NUM,_Fields.VERSION_NO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DICTIONARY_ID, new org.apache.thrift.meta_data.FieldMetaData("dictionaryId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_CD, new org.apache.thrift.meta_data.FieldMetaData("keyCd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEY_NAME, new org.apache.thrift.meta_data.FieldMetaData("keyName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_CD, new org.apache.thrift.meta_data.FieldMetaData("itemCd", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_NAME, new org.apache.thrift.meta_data.FieldMetaData("itemName", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ITEM_VAL, new org.apache.thrift.meta_data.FieldMetaData("itemVal", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("orderNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SYS_DICTIONARY.class, metaDataMap);
  }

  public SYS_DICTIONARY() {
  }

  public SYS_DICTIONARY(
    java.lang.String dictionaryId,
    java.lang.String keyCd,
    java.lang.String keyName,
    java.lang.String itemCd,
    java.lang.String itemName)
  {
    this();
    this.dictionaryId = dictionaryId;
    this.keyCd = keyCd;
    this.keyName = keyName;
    this.itemCd = itemCd;
    this.itemName = itemName;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SYS_DICTIONARY(SYS_DICTIONARY other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetDictionaryId()) {
      this.dictionaryId = other.dictionaryId;
    }
    if (other.isSetKeyCd()) {
      this.keyCd = other.keyCd;
    }
    if (other.isSetKeyName()) {
      this.keyName = other.keyName;
    }
    if (other.isSetItemCd()) {
      this.itemCd = other.itemCd;
    }
    if (other.isSetItemName()) {
      this.itemName = other.itemName;
    }
    if (other.isSetItemVal()) {
      this.itemVal = other.itemVal;
    }
    if (other.isSetStat()) {
      this.stat = other.stat;
    }
    this.orderNum = other.orderNum;
    this.versionNo = other.versionNo;
  }

  public SYS_DICTIONARY deepCopy() {
    return new SYS_DICTIONARY(this);
  }

  @Override
  public void clear() {
    this.dictionaryId = null;
    this.keyCd = null;
    this.keyName = null;
    this.itemCd = null;
    this.itemName = null;
    this.itemVal = null;
    this.stat = null;
    setOrderNumIsSet(false);
    this.orderNum = 0;
    setVersionNoIsSet(false);
    this.versionNo = 0;
  }

  /**
   * 字典编号
   */
  public java.lang.String getDictionaryId() {
    return this.dictionaryId;
  }

  /**
   * 字典编号
   */
  public SYS_DICTIONARY setDictionaryId(java.lang.String dictionaryId) {
    this.dictionaryId = dictionaryId;
    return this;
  }

  public void unsetDictionaryId() {
    this.dictionaryId = null;
  }

  /** Returns true if field dictionaryId is set (has been assigned a value) and false otherwise */
  public boolean isSetDictionaryId() {
    return this.dictionaryId != null;
  }

  public void setDictionaryIdIsSet(boolean value) {
    if (!value) {
      this.dictionaryId = null;
    }
  }

  /**
   * 字段名
   */
  public java.lang.String getKeyCd() {
    return this.keyCd;
  }

  /**
   * 字段名
   */
  public SYS_DICTIONARY setKeyCd(java.lang.String keyCd) {
    this.keyCd = keyCd;
    return this;
  }

  public void unsetKeyCd() {
    this.keyCd = null;
  }

  /** Returns true if field keyCd is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyCd() {
    return this.keyCd != null;
  }

  public void setKeyCdIsSet(boolean value) {
    if (!value) {
      this.keyCd = null;
    }
  }

  /**
   * 字段中文名
   */
  public java.lang.String getKeyName() {
    return this.keyName;
  }

  /**
   * 字段中文名
   */
  public SYS_DICTIONARY setKeyName(java.lang.String keyName) {
    this.keyName = keyName;
    return this;
  }

  public void unsetKeyName() {
    this.keyName = null;
  }

  /** Returns true if field keyName is set (has been assigned a value) and false otherwise */
  public boolean isSetKeyName() {
    return this.keyName != null;
  }

  public void setKeyNameIsSet(boolean value) {
    if (!value) {
      this.keyName = null;
    }
  }

  /**
   * 数据项代码
   */
  public java.lang.String getItemCd() {
    return this.itemCd;
  }

  /**
   * 数据项代码
   */
  public SYS_DICTIONARY setItemCd(java.lang.String itemCd) {
    this.itemCd = itemCd;
    return this;
  }

  public void unsetItemCd() {
    this.itemCd = null;
  }

  /** Returns true if field itemCd is set (has been assigned a value) and false otherwise */
  public boolean isSetItemCd() {
    return this.itemCd != null;
  }

  public void setItemCdIsSet(boolean value) {
    if (!value) {
      this.itemCd = null;
    }
  }

  /**
   * 数据项名称
   */
  public java.lang.String getItemName() {
    return this.itemName;
  }

  /**
   * 数据项名称
   */
  public SYS_DICTIONARY setItemName(java.lang.String itemName) {
    this.itemName = itemName;
    return this;
  }

  public void unsetItemName() {
    this.itemName = null;
  }

  /** Returns true if field itemName is set (has been assigned a value) and false otherwise */
  public boolean isSetItemName() {
    return this.itemName != null;
  }

  public void setItemNameIsSet(boolean value) {
    if (!value) {
      this.itemName = null;
    }
  }

  /**
   * 数据项值
   */
  public java.lang.String getItemVal() {
    return this.itemVal;
  }

  /**
   * 数据项值
   */
  public SYS_DICTIONARY setItemVal(java.lang.String itemVal) {
    this.itemVal = itemVal;
    return this;
  }

  public void unsetItemVal() {
    this.itemVal = null;
  }

  /** Returns true if field itemVal is set (has been assigned a value) and false otherwise */
  public boolean isSetItemVal() {
    return this.itemVal != null;
  }

  public void setItemValIsSet(boolean value) {
    if (!value) {
      this.itemVal = null;
    }
  }

  /**
   * 状态
   */
  public java.lang.String getStat() {
    return this.stat;
  }

  /**
   * 状态
   */
  public SYS_DICTIONARY setStat(java.lang.String stat) {
    this.stat = stat;
    return this;
  }

  public void unsetStat() {
    this.stat = null;
  }

  /** Returns true if field stat is set (has been assigned a value) and false otherwise */
  public boolean isSetStat() {
    return this.stat != null;
  }

  public void setStatIsSet(boolean value) {
    if (!value) {
      this.stat = null;
    }
  }

  /**
   * 序号
   */
  public long getOrderNum() {
    return this.orderNum;
  }

  /**
   * 序号
   */
  public SYS_DICTIONARY setOrderNum(long orderNum) {
    this.orderNum = orderNum;
    setOrderNumIsSet(true);
    return this;
  }

  public void unsetOrderNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORDERNUM_ISSET_ID);
  }

  /** Returns true if field orderNum is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORDERNUM_ISSET_ID);
  }

  public void setOrderNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORDERNUM_ISSET_ID, value);
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SYS_DICTIONARY setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case DICTIONARY_ID:
      if (value == null) {
        unsetDictionaryId();
      } else {
        setDictionaryId((java.lang.String)value);
      }
      break;

    case KEY_CD:
      if (value == null) {
        unsetKeyCd();
      } else {
        setKeyCd((java.lang.String)value);
      }
      break;

    case KEY_NAME:
      if (value == null) {
        unsetKeyName();
      } else {
        setKeyName((java.lang.String)value);
      }
      break;

    case ITEM_CD:
      if (value == null) {
        unsetItemCd();
      } else {
        setItemCd((java.lang.String)value);
      }
      break;

    case ITEM_NAME:
      if (value == null) {
        unsetItemName();
      } else {
        setItemName((java.lang.String)value);
      }
      break;

    case ITEM_VAL:
      if (value == null) {
        unsetItemVal();
      } else {
        setItemVal((java.lang.String)value);
      }
      break;

    case STAT:
      if (value == null) {
        unsetStat();
      } else {
        setStat((java.lang.String)value);
      }
      break;

    case ORDER_NUM:
      if (value == null) {
        unsetOrderNum();
      } else {
        setOrderNum((java.lang.Long)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case DICTIONARY_ID:
      return getDictionaryId();

    case KEY_CD:
      return getKeyCd();

    case KEY_NAME:
      return getKeyName();

    case ITEM_CD:
      return getItemCd();

    case ITEM_NAME:
      return getItemName();

    case ITEM_VAL:
      return getItemVal();

    case STAT:
      return getStat();

    case ORDER_NUM:
      return getOrderNum();

    case VERSION_NO:
      return getVersionNo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case DICTIONARY_ID:
      return isSetDictionaryId();
    case KEY_CD:
      return isSetKeyCd();
    case KEY_NAME:
      return isSetKeyName();
    case ITEM_CD:
      return isSetItemCd();
    case ITEM_NAME:
      return isSetItemName();
    case ITEM_VAL:
      return isSetItemVal();
    case STAT:
      return isSetStat();
    case ORDER_NUM:
      return isSetOrderNum();
    case VERSION_NO:
      return isSetVersionNo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SYS_DICTIONARY)
      return this.equals((SYS_DICTIONARY)that);
    return false;
  }

  public boolean equals(SYS_DICTIONARY that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_dictionaryId = true && this.isSetDictionaryId();
    boolean that_present_dictionaryId = true && that.isSetDictionaryId();
    if (this_present_dictionaryId || that_present_dictionaryId) {
      if (!(this_present_dictionaryId && that_present_dictionaryId))
        return false;
      if (!this.dictionaryId.equals(that.dictionaryId))
        return false;
    }

    boolean this_present_keyCd = true && this.isSetKeyCd();
    boolean that_present_keyCd = true && that.isSetKeyCd();
    if (this_present_keyCd || that_present_keyCd) {
      if (!(this_present_keyCd && that_present_keyCd))
        return false;
      if (!this.keyCd.equals(that.keyCd))
        return false;
    }

    boolean this_present_keyName = true && this.isSetKeyName();
    boolean that_present_keyName = true && that.isSetKeyName();
    if (this_present_keyName || that_present_keyName) {
      if (!(this_present_keyName && that_present_keyName))
        return false;
      if (!this.keyName.equals(that.keyName))
        return false;
    }

    boolean this_present_itemCd = true && this.isSetItemCd();
    boolean that_present_itemCd = true && that.isSetItemCd();
    if (this_present_itemCd || that_present_itemCd) {
      if (!(this_present_itemCd && that_present_itemCd))
        return false;
      if (!this.itemCd.equals(that.itemCd))
        return false;
    }

    boolean this_present_itemName = true && this.isSetItemName();
    boolean that_present_itemName = true && that.isSetItemName();
    if (this_present_itemName || that_present_itemName) {
      if (!(this_present_itemName && that_present_itemName))
        return false;
      if (!this.itemName.equals(that.itemName))
        return false;
    }

    boolean this_present_itemVal = true && this.isSetItemVal();
    boolean that_present_itemVal = true && that.isSetItemVal();
    if (this_present_itemVal || that_present_itemVal) {
      if (!(this_present_itemVal && that_present_itemVal))
        return false;
      if (!this.itemVal.equals(that.itemVal))
        return false;
    }

    boolean this_present_stat = true && this.isSetStat();
    boolean that_present_stat = true && that.isSetStat();
    if (this_present_stat || that_present_stat) {
      if (!(this_present_stat && that_present_stat))
        return false;
      if (!this.stat.equals(that.stat))
        return false;
    }

    boolean this_present_orderNum = true && this.isSetOrderNum();
    boolean that_present_orderNum = true && that.isSetOrderNum();
    if (this_present_orderNum || that_present_orderNum) {
      if (!(this_present_orderNum && that_present_orderNum))
        return false;
      if (this.orderNum != that.orderNum)
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetDictionaryId()) ? 131071 : 524287);
    if (isSetDictionaryId())
      hashCode = hashCode * 8191 + dictionaryId.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyCd()) ? 131071 : 524287);
    if (isSetKeyCd())
      hashCode = hashCode * 8191 + keyCd.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeyName()) ? 131071 : 524287);
    if (isSetKeyName())
      hashCode = hashCode * 8191 + keyName.hashCode();

    hashCode = hashCode * 8191 + ((isSetItemCd()) ? 131071 : 524287);
    if (isSetItemCd())
      hashCode = hashCode * 8191 + itemCd.hashCode();

    hashCode = hashCode * 8191 + ((isSetItemName()) ? 131071 : 524287);
    if (isSetItemName())
      hashCode = hashCode * 8191 + itemName.hashCode();

    hashCode = hashCode * 8191 + ((isSetItemVal()) ? 131071 : 524287);
    if (isSetItemVal())
      hashCode = hashCode * 8191 + itemVal.hashCode();

    hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
    if (isSetStat())
      hashCode = hashCode * 8191 + stat.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderNum()) ? 131071 : 524287);
    if (isSetOrderNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(orderNum);

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    return hashCode;
  }

  @Override
  public int compareTo(SYS_DICTIONARY other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetDictionaryId()).compareTo(other.isSetDictionaryId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDictionaryId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dictionaryId, other.dictionaryId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyCd()).compareTo(other.isSetKeyCd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyCd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyCd, other.keyCd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeyName()).compareTo(other.isSetKeyName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeyName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keyName, other.keyName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItemCd()).compareTo(other.isSetItemCd());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemCd()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemCd, other.itemCd);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItemName()).compareTo(other.isSetItemName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemName, other.itemName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetItemVal()).compareTo(other.isSetItemVal());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetItemVal()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.itemVal, other.itemVal);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrderNum()).compareTo(other.isSetOrderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderNum, other.orderNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SYS_DICTIONARY(");
    boolean first = true;

    sb.append("dictionaryId:");
    if (this.dictionaryId == null) {
      sb.append("null");
    } else {
      sb.append(this.dictionaryId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyCd:");
    if (this.keyCd == null) {
      sb.append("null");
    } else {
      sb.append(this.keyCd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keyName:");
    if (this.keyName == null) {
      sb.append("null");
    } else {
      sb.append(this.keyName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemCd:");
    if (this.itemCd == null) {
      sb.append("null");
    } else {
      sb.append(this.itemCd);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("itemName:");
    if (this.itemName == null) {
      sb.append("null");
    } else {
      sb.append(this.itemName);
    }
    first = false;
    if (isSetItemVal()) {
      if (!first) sb.append(", ");
      sb.append("itemVal:");
      if (this.itemVal == null) {
        sb.append("null");
      } else {
        sb.append(this.itemVal);
      }
      first = false;
    }
    if (isSetStat()) {
      if (!first) sb.append(", ");
      sb.append("stat:");
      if (this.stat == null) {
        sb.append("null");
      } else {
        sb.append(this.stat);
      }
      first = false;
    }
    if (isSetOrderNum()) {
      if (!first) sb.append(", ");
      sb.append("orderNum:");
      sb.append(this.orderNum);
      first = false;
    }
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (dictionaryId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'dictionaryId' was not present! Struct: " + toString());
    }
    if (keyCd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyCd' was not present! Struct: " + toString());
    }
    if (keyName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'keyName' was not present! Struct: " + toString());
    }
    if (itemCd == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemCd' was not present! Struct: " + toString());
    }
    if (itemName == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'itemName' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SYS_DICTIONARYStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_DICTIONARYStandardScheme getScheme() {
      return new SYS_DICTIONARYStandardScheme();
    }
  }

  private static class SYS_DICTIONARYStandardScheme extends org.apache.thrift.scheme.StandardScheme<SYS_DICTIONARY> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SYS_DICTIONARY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DICTIONARY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.dictionaryId = iprot.readString();
              struct.setDictionaryIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // KEY_CD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyCd = iprot.readString();
              struct.setKeyCdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // KEY_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keyName = iprot.readString();
              struct.setKeyNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // ITEM_CD
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemCd = iprot.readString();
              struct.setItemCdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ITEM_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemName = iprot.readString();
              struct.setItemNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // ITEM_VAL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.itemVal = iprot.readString();
              struct.setItemValIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.stat = iprot.readString();
              struct.setStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // ORDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.orderNum = iprot.readI64();
              struct.setOrderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SYS_DICTIONARY struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.dictionaryId != null) {
        oprot.writeFieldBegin(DICTIONARY_ID_FIELD_DESC);
        oprot.writeString(struct.dictionaryId);
        oprot.writeFieldEnd();
      }
      if (struct.keyCd != null) {
        oprot.writeFieldBegin(KEY_CD_FIELD_DESC);
        oprot.writeString(struct.keyCd);
        oprot.writeFieldEnd();
      }
      if (struct.keyName != null) {
        oprot.writeFieldBegin(KEY_NAME_FIELD_DESC);
        oprot.writeString(struct.keyName);
        oprot.writeFieldEnd();
      }
      if (struct.itemCd != null) {
        oprot.writeFieldBegin(ITEM_CD_FIELD_DESC);
        oprot.writeString(struct.itemCd);
        oprot.writeFieldEnd();
      }
      if (struct.itemName != null) {
        oprot.writeFieldBegin(ITEM_NAME_FIELD_DESC);
        oprot.writeString(struct.itemName);
        oprot.writeFieldEnd();
      }
      if (struct.itemVal != null) {
        if (struct.isSetItemVal()) {
          oprot.writeFieldBegin(ITEM_VAL_FIELD_DESC);
          oprot.writeString(struct.itemVal);
          oprot.writeFieldEnd();
        }
      }
      if (struct.stat != null) {
        if (struct.isSetStat()) {
          oprot.writeFieldBegin(STAT_FIELD_DESC);
          oprot.writeString(struct.stat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOrderNum()) {
        oprot.writeFieldBegin(ORDER_NUM_FIELD_DESC);
        oprot.writeI64(struct.orderNum);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SYS_DICTIONARYTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SYS_DICTIONARYTupleScheme getScheme() {
      return new SYS_DICTIONARYTupleScheme();
    }
  }

  private static class SYS_DICTIONARYTupleScheme extends org.apache.thrift.scheme.TupleScheme<SYS_DICTIONARY> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SYS_DICTIONARY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.dictionaryId);
      oprot.writeString(struct.keyCd);
      oprot.writeString(struct.keyName);
      oprot.writeString(struct.itemCd);
      oprot.writeString(struct.itemName);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetItemVal()) {
        optionals.set(0);
      }
      if (struct.isSetStat()) {
        optionals.set(1);
      }
      if (struct.isSetOrderNum()) {
        optionals.set(2);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetItemVal()) {
        oprot.writeString(struct.itemVal);
      }
      if (struct.isSetStat()) {
        oprot.writeString(struct.stat);
      }
      if (struct.isSetOrderNum()) {
        oprot.writeI64(struct.orderNum);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SYS_DICTIONARY struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.dictionaryId = iprot.readString();
      struct.setDictionaryIdIsSet(true);
      struct.keyCd = iprot.readString();
      struct.setKeyCdIsSet(true);
      struct.keyName = iprot.readString();
      struct.setKeyNameIsSet(true);
      struct.itemCd = iprot.readString();
      struct.setItemCdIsSet(true);
      struct.itemName = iprot.readString();
      struct.setItemNameIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.itemVal = iprot.readString();
        struct.setItemValIsSet(true);
      }
      if (incoming.get(1)) {
        struct.stat = iprot.readString();
        struct.setStatIsSet(true);
      }
      if (incoming.get(2)) {
        struct.orderNum = iprot.readI64();
        struct.setOrderNumIsSet(true);
      }
      if (incoming.get(3)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

