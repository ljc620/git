/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 网络代理订单表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SL_NETAGENT_ORDER implements org.apache.thrift.TBase<SL_NETAGENT_ORDER, SL_NETAGENT_ORDER._Fields>, java.io.Serializable, Cloneable, Comparable<SL_NETAGENT_ORDER> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_NETAGENT_ORDER");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField THIRD_ORDER_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("thirdOrderNum", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField ORG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orgId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TICKET_SERVICE_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ticket_service_code", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField OPE_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("opeUserId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField SL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("slOrder", org.apache.thrift.protocol.TType.STRUCT, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_NETAGENT_ORDERStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_NETAGENT_ORDERTupleSchemeFactory();

  /**
   * 按销售类型等规则
   */
  public java.lang.String orderId; // required
  /**
   * 第三方单号
   */
  public java.lang.String thirdOrderNum; // required
  /**
   * 组织机构代码
   */
  public java.lang.String orgId; // required
  /**
   * 取票码
   */
  public java.lang.String ticket_service_code; // optional
  /**
   * 操作人
   */
  public java.lang.String opeUserId; // required
  /**
   * 操作时间
   */
  public long opeTime; // required
  /**
   * 销售明细
   */
  public SL_ORDER slOrder; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 按销售类型等规则
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 第三方单号
     */
    THIRD_ORDER_NUM((short)4, "thirdOrderNum"),
    /**
     * 组织机构代码
     */
    ORG_ID((short)5, "orgId"),
    /**
     * 取票码
     */
    TICKET_SERVICE_CODE((short)6, "ticket_service_code"),
    /**
     * 操作人
     */
    OPE_USER_ID((short)2, "opeUserId"),
    /**
     * 操作时间
     */
    OPE_TIME((short)3, "opeTime"),
    /**
     * 销售明细
     */
    SL_ORDER((short)7, "slOrder");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 4: // THIRD_ORDER_NUM
          return THIRD_ORDER_NUM;
        case 5: // ORG_ID
          return ORG_ID;
        case 6: // TICKET_SERVICE_CODE
          return TICKET_SERVICE_CODE;
        case 2: // OPE_USER_ID
          return OPE_USER_ID;
        case 3: // OPE_TIME
          return OPE_TIME;
        case 7: // SL_ORDER
          return SL_ORDER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OPETIME_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TICKET_SERVICE_CODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.THIRD_ORDER_NUM, new org.apache.thrift.meta_data.FieldMetaData("thirdOrderNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORG_ID, new org.apache.thrift.meta_data.FieldMetaData("orgId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_SERVICE_CODE, new org.apache.thrift.meta_data.FieldMetaData("ticket_service_code", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("opeUserId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("slOrder", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, SL_ORDER.class)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_NETAGENT_ORDER.class, metaDataMap);
  }

  public SL_NETAGENT_ORDER() {
  }

  public SL_NETAGENT_ORDER(
    java.lang.String orderId,
    java.lang.String thirdOrderNum,
    java.lang.String orgId,
    java.lang.String opeUserId,
    long opeTime,
    SL_ORDER slOrder)
  {
    this();
    this.orderId = orderId;
    this.thirdOrderNum = thirdOrderNum;
    this.orgId = orgId;
    this.opeUserId = opeUserId;
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    this.slOrder = slOrder;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_NETAGENT_ORDER(SL_NETAGENT_ORDER other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetThirdOrderNum()) {
      this.thirdOrderNum = other.thirdOrderNum;
    }
    if (other.isSetOrgId()) {
      this.orgId = other.orgId;
    }
    if (other.isSetTicket_service_code()) {
      this.ticket_service_code = other.ticket_service_code;
    }
    if (other.isSetOpeUserId()) {
      this.opeUserId = other.opeUserId;
    }
    this.opeTime = other.opeTime;
    if (other.isSetSlOrder()) {
      this.slOrder = new SL_ORDER(other.slOrder);
    }
  }

  public SL_NETAGENT_ORDER deepCopy() {
    return new SL_NETAGENT_ORDER(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.thirdOrderNum = null;
    this.orgId = null;
    this.ticket_service_code = null;
    this.opeUserId = null;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
    this.slOrder = null;
  }

  /**
   * 按销售类型等规则
   */
  public java.lang.String getOrderId() {
    return this.orderId;
  }

  /**
   * 按销售类型等规则
   */
  public SL_NETAGENT_ORDER setOrderId(java.lang.String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 第三方单号
   */
  public java.lang.String getThirdOrderNum() {
    return this.thirdOrderNum;
  }

  /**
   * 第三方单号
   */
  public SL_NETAGENT_ORDER setThirdOrderNum(java.lang.String thirdOrderNum) {
    this.thirdOrderNum = thirdOrderNum;
    return this;
  }

  public void unsetThirdOrderNum() {
    this.thirdOrderNum = null;
  }

  /** Returns true if field thirdOrderNum is set (has been assigned a value) and false otherwise */
  public boolean isSetThirdOrderNum() {
    return this.thirdOrderNum != null;
  }

  public void setThirdOrderNumIsSet(boolean value) {
    if (!value) {
      this.thirdOrderNum = null;
    }
  }

  /**
   * 组织机构代码
   */
  public java.lang.String getOrgId() {
    return this.orgId;
  }

  /**
   * 组织机构代码
   */
  public SL_NETAGENT_ORDER setOrgId(java.lang.String orgId) {
    this.orgId = orgId;
    return this;
  }

  public void unsetOrgId() {
    this.orgId = null;
  }

  /** Returns true if field orgId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrgId() {
    return this.orgId != null;
  }

  public void setOrgIdIsSet(boolean value) {
    if (!value) {
      this.orgId = null;
    }
  }

  /**
   * 取票码
   */
  public java.lang.String getTicket_service_code() {
    return this.ticket_service_code;
  }

  /**
   * 取票码
   */
  public SL_NETAGENT_ORDER setTicket_service_code(java.lang.String ticket_service_code) {
    this.ticket_service_code = ticket_service_code;
    return this;
  }

  public void unsetTicket_service_code() {
    this.ticket_service_code = null;
  }

  /** Returns true if field ticket_service_code is set (has been assigned a value) and false otherwise */
  public boolean isSetTicket_service_code() {
    return this.ticket_service_code != null;
  }

  public void setTicket_service_codeIsSet(boolean value) {
    if (!value) {
      this.ticket_service_code = null;
    }
  }

  /**
   * 操作人
   */
  public java.lang.String getOpeUserId() {
    return this.opeUserId;
  }

  /**
   * 操作人
   */
  public SL_NETAGENT_ORDER setOpeUserId(java.lang.String opeUserId) {
    this.opeUserId = opeUserId;
    return this;
  }

  public void unsetOpeUserId() {
    this.opeUserId = null;
  }

  /** Returns true if field opeUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeUserId() {
    return this.opeUserId != null;
  }

  public void setOpeUserIdIsSet(boolean value) {
    if (!value) {
      this.opeUserId = null;
    }
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SL_NETAGENT_ORDER setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  /**
   * 销售明细
   */
  public SL_ORDER getSlOrder() {
    return this.slOrder;
  }

  /**
   * 销售明细
   */
  public SL_NETAGENT_ORDER setSlOrder(SL_ORDER slOrder) {
    this.slOrder = slOrder;
    return this;
  }

  public void unsetSlOrder() {
    this.slOrder = null;
  }

  /** Returns true if field slOrder is set (has been assigned a value) and false otherwise */
  public boolean isSetSlOrder() {
    return this.slOrder != null;
  }

  public void setSlOrderIsSet(boolean value) {
    if (!value) {
      this.slOrder = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((java.lang.String)value);
      }
      break;

    case THIRD_ORDER_NUM:
      if (value == null) {
        unsetThirdOrderNum();
      } else {
        setThirdOrderNum((java.lang.String)value);
      }
      break;

    case ORG_ID:
      if (value == null) {
        unsetOrgId();
      } else {
        setOrgId((java.lang.String)value);
      }
      break;

    case TICKET_SERVICE_CODE:
      if (value == null) {
        unsetTicket_service_code();
      } else {
        setTicket_service_code((java.lang.String)value);
      }
      break;

    case OPE_USER_ID:
      if (value == null) {
        unsetOpeUserId();
      } else {
        setOpeUserId((java.lang.String)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    case SL_ORDER:
      if (value == null) {
        unsetSlOrder();
      } else {
        setSlOrder((SL_ORDER)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case THIRD_ORDER_NUM:
      return getThirdOrderNum();

    case ORG_ID:
      return getOrgId();

    case TICKET_SERVICE_CODE:
      return getTicket_service_code();

    case OPE_USER_ID:
      return getOpeUserId();

    case OPE_TIME:
      return getOpeTime();

    case SL_ORDER:
      return getSlOrder();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case THIRD_ORDER_NUM:
      return isSetThirdOrderNum();
    case ORG_ID:
      return isSetOrgId();
    case TICKET_SERVICE_CODE:
      return isSetTicket_service_code();
    case OPE_USER_ID:
      return isSetOpeUserId();
    case OPE_TIME:
      return isSetOpeTime();
    case SL_ORDER:
      return isSetSlOrder();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_NETAGENT_ORDER)
      return this.equals((SL_NETAGENT_ORDER)that);
    return false;
  }

  public boolean equals(SL_NETAGENT_ORDER that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_thirdOrderNum = true && this.isSetThirdOrderNum();
    boolean that_present_thirdOrderNum = true && that.isSetThirdOrderNum();
    if (this_present_thirdOrderNum || that_present_thirdOrderNum) {
      if (!(this_present_thirdOrderNum && that_present_thirdOrderNum))
        return false;
      if (!this.thirdOrderNum.equals(that.thirdOrderNum))
        return false;
    }

    boolean this_present_orgId = true && this.isSetOrgId();
    boolean that_present_orgId = true && that.isSetOrgId();
    if (this_present_orgId || that_present_orgId) {
      if (!(this_present_orgId && that_present_orgId))
        return false;
      if (!this.orgId.equals(that.orgId))
        return false;
    }

    boolean this_present_ticket_service_code = true && this.isSetTicket_service_code();
    boolean that_present_ticket_service_code = true && that.isSetTicket_service_code();
    if (this_present_ticket_service_code || that_present_ticket_service_code) {
      if (!(this_present_ticket_service_code && that_present_ticket_service_code))
        return false;
      if (!this.ticket_service_code.equals(that.ticket_service_code))
        return false;
    }

    boolean this_present_opeUserId = true && this.isSetOpeUserId();
    boolean that_present_opeUserId = true && that.isSetOpeUserId();
    if (this_present_opeUserId || that_present_opeUserId) {
      if (!(this_present_opeUserId && that_present_opeUserId))
        return false;
      if (!this.opeUserId.equals(that.opeUserId))
        return false;
    }

    boolean this_present_opeTime = true;
    boolean that_present_opeTime = true;
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    boolean this_present_slOrder = true && this.isSetSlOrder();
    boolean that_present_slOrder = true && that.isSetSlOrder();
    if (this_present_slOrder || that_present_slOrder) {
      if (!(this_present_slOrder && that_present_slOrder))
        return false;
      if (!this.slOrder.equals(that.slOrder))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + orderId.hashCode();

    hashCode = hashCode * 8191 + ((isSetThirdOrderNum()) ? 131071 : 524287);
    if (isSetThirdOrderNum())
      hashCode = hashCode * 8191 + thirdOrderNum.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrgId()) ? 131071 : 524287);
    if (isSetOrgId())
      hashCode = hashCode * 8191 + orgId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicket_service_code()) ? 131071 : 524287);
    if (isSetTicket_service_code())
      hashCode = hashCode * 8191 + ticket_service_code.hashCode();

    hashCode = hashCode * 8191 + ((isSetOpeUserId()) ? 131071 : 524287);
    if (isSetOpeUserId())
      hashCode = hashCode * 8191 + opeUserId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    hashCode = hashCode * 8191 + ((isSetSlOrder()) ? 131071 : 524287);
    if (isSetSlOrder())
      hashCode = hashCode * 8191 + slOrder.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SL_NETAGENT_ORDER other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetThirdOrderNum()).compareTo(other.isSetThirdOrderNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetThirdOrderNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.thirdOrderNum, other.thirdOrderNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrgId()).compareTo(other.isSetOrgId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrgId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgId, other.orgId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicket_service_code()).compareTo(other.isSetTicket_service_code());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicket_service_code()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticket_service_code, other.ticket_service_code);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeUserId()).compareTo(other.isSetOpeUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeUserId, other.opeUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSlOrder()).compareTo(other.isSetSlOrder());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSlOrder()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.slOrder, other.slOrder);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_NETAGENT_ORDER(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("thirdOrderNum:");
    if (this.thirdOrderNum == null) {
      sb.append("null");
    } else {
      sb.append(this.thirdOrderNum);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orgId:");
    if (this.orgId == null) {
      sb.append("null");
    } else {
      sb.append(this.orgId);
    }
    first = false;
    if (isSetTicket_service_code()) {
      if (!first) sb.append(", ");
      sb.append("ticket_service_code:");
      if (this.ticket_service_code == null) {
        sb.append("null");
      } else {
        sb.append(this.ticket_service_code);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("opeUserId:");
    if (this.opeUserId == null) {
      sb.append("null");
    } else {
      sb.append(this.opeUserId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("opeTime:");
    sb.append(this.opeTime);
    first = false;
    if (!first) sb.append(", ");
    sb.append("slOrder:");
    if (this.slOrder == null) {
      sb.append("null");
    } else {
      sb.append(this.slOrder);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
    }
    if (thirdOrderNum == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'thirdOrderNum' was not present! Struct: " + toString());
    }
    if (orgId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orgId' was not present! Struct: " + toString());
    }
    if (opeUserId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'opeUserId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'opeTime' because it's a primitive and you chose the non-beans generator.
    if (slOrder == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'slOrder' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
    if (slOrder != null) {
      slOrder.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_NETAGENT_ORDERStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_NETAGENT_ORDERStandardScheme getScheme() {
      return new SL_NETAGENT_ORDERStandardScheme();
    }
  }

  private static class SL_NETAGENT_ORDERStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_NETAGENT_ORDER> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_NETAGENT_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // THIRD_ORDER_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.thirdOrderNum = iprot.readString();
              struct.setThirdOrderNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // ORG_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orgId = iprot.readString();
              struct.setOrgIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TICKET_SERVICE_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticket_service_code = iprot.readString();
              struct.setTicket_service_codeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // OPE_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.opeUserId = iprot.readString();
              struct.setOpeUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // SL_ORDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.slOrder = new SL_ORDER();
              struct.slOrder.read(iprot);
              struct.setSlOrderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetOpeTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'opeTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_NETAGENT_ORDER struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.opeUserId != null) {
        oprot.writeFieldBegin(OPE_USER_ID_FIELD_DESC);
        oprot.writeString(struct.opeUserId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
      oprot.writeI64(struct.opeTime);
      oprot.writeFieldEnd();
      if (struct.thirdOrderNum != null) {
        oprot.writeFieldBegin(THIRD_ORDER_NUM_FIELD_DESC);
        oprot.writeString(struct.thirdOrderNum);
        oprot.writeFieldEnd();
      }
      if (struct.orgId != null) {
        oprot.writeFieldBegin(ORG_ID_FIELD_DESC);
        oprot.writeString(struct.orgId);
        oprot.writeFieldEnd();
      }
      if (struct.ticket_service_code != null) {
        if (struct.isSetTicket_service_code()) {
          oprot.writeFieldBegin(TICKET_SERVICE_CODE_FIELD_DESC);
          oprot.writeString(struct.ticket_service_code);
          oprot.writeFieldEnd();
        }
      }
      if (struct.slOrder != null) {
        oprot.writeFieldBegin(SL_ORDER_FIELD_DESC);
        struct.slOrder.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_NETAGENT_ORDERTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_NETAGENT_ORDERTupleScheme getScheme() {
      return new SL_NETAGENT_ORDERTupleScheme();
    }
  }

  private static class SL_NETAGENT_ORDERTupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_NETAGENT_ORDER> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_NETAGENT_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.orderId);
      oprot.writeString(struct.thirdOrderNum);
      oprot.writeString(struct.orgId);
      oprot.writeString(struct.opeUserId);
      oprot.writeI64(struct.opeTime);
      struct.slOrder.write(oprot);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTicket_service_code()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetTicket_service_code()) {
        oprot.writeString(struct.ticket_service_code);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_NETAGENT_ORDER struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.orderId = iprot.readString();
      struct.setOrderIdIsSet(true);
      struct.thirdOrderNum = iprot.readString();
      struct.setThirdOrderNumIsSet(true);
      struct.orgId = iprot.readString();
      struct.setOrgIdIsSet(true);
      struct.opeUserId = iprot.readString();
      struct.setOpeUserIdIsSet(true);
      struct.opeTime = iprot.readI64();
      struct.setOpeTimeIsSet(true);
      struct.slOrder = new SL_ORDER();
      struct.slOrder.read(iprot);
      struct.setSlOrderIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.ticket_service_code = iprot.readString();
        struct.setTicket_service_codeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

