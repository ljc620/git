/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 销售单票种明细表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SL_ORDER_TICKETTYPE_DETAIL implements org.apache.thrift.TBase<SL_ORDER_TICKETTYPE_DETAIL, SL_ORDER_TICKETTYPE_DETAIL._Fields>, java.io.Serializable, Cloneable, Comparable<SL_ORDER_TICKETTYPE_DETAIL> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_ORDER_TICKETTYPE_DETAIL");

  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketCount", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField EJECT_TICKET_COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("ejectTicketCount", org.apache.thrift.protocol.TType.I64, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_ORDER_TICKETTYPE_DETAILStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_ORDER_TICKETTYPE_DETAILTupleSchemeFactory();

  /**
   * 销售单号
   */
  public java.lang.String orderId; // required
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // required
  /**
   * 销售张数
   */
  public long ticketCount; // required
  /**
   * 出票张数
   */
  public long ejectTicketCount; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 销售单号
     */
    ORDER_ID((short)1, "orderId"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)2, "ticketTypeId"),
    /**
     * 销售张数
     */
    TICKET_COUNT((short)3, "ticketCount"),
    /**
     * 出票张数
     */
    EJECT_TICKET_COUNT((short)4, "ejectTicketCount");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_ID
          return ORDER_ID;
        case 2: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 3: // TICKET_COUNT
          return TICKET_COUNT;
        case 4: // EJECT_TICKET_COUNT
          return EJECT_TICKET_COUNT;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKETCOUNT_ISSET_ID = 0;
  private static final int __EJECTTICKETCOUNT_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ticketCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EJECT_TICKET_COUNT, new org.apache.thrift.meta_data.FieldMetaData("ejectTicketCount", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_ORDER_TICKETTYPE_DETAIL.class, metaDataMap);
  }

  public SL_ORDER_TICKETTYPE_DETAIL() {
  }

  public SL_ORDER_TICKETTYPE_DETAIL(
    java.lang.String orderId,
    java.lang.String ticketTypeId,
    long ticketCount,
    long ejectTicketCount)
  {
    this();
    this.orderId = orderId;
    this.ticketTypeId = ticketTypeId;
    this.ticketCount = ticketCount;
    setTicketCountIsSet(true);
    this.ejectTicketCount = ejectTicketCount;
    setEjectTicketCountIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_ORDER_TICKETTYPE_DETAIL(SL_ORDER_TICKETTYPE_DETAIL other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    this.ticketCount = other.ticketCount;
    this.ejectTicketCount = other.ejectTicketCount;
  }

  public SL_ORDER_TICKETTYPE_DETAIL deepCopy() {
    return new SL_ORDER_TICKETTYPE_DETAIL(this);
  }

  @Override
  public void clear() {
    this.orderId = null;
    this.ticketTypeId = null;
    setTicketCountIsSet(false);
    this.ticketCount = 0;
    setEjectTicketCountIsSet(false);
    this.ejectTicketCount = 0;
  }

  /**
   * 销售单号
   */
  public java.lang.String getOrderId() {
    return this.orderId;
  }

  /**
   * 销售单号
   */
  public SL_ORDER_TICKETTYPE_DETAIL setOrderId(java.lang.String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public SL_ORDER_TICKETTYPE_DETAIL setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 销售张数
   */
  public long getTicketCount() {
    return this.ticketCount;
  }

  /**
   * 销售张数
   */
  public SL_ORDER_TICKETTYPE_DETAIL setTicketCount(long ticketCount) {
    this.ticketCount = ticketCount;
    setTicketCountIsSet(true);
    return this;
  }

  public void unsetTicketCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID);
  }

  /** Returns true if field ticketCount is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID);
  }

  public void setTicketCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKETCOUNT_ISSET_ID, value);
  }

  /**
   * 出票张数
   */
  public long getEjectTicketCount() {
    return this.ejectTicketCount;
  }

  /**
   * 出票张数
   */
  public SL_ORDER_TICKETTYPE_DETAIL setEjectTicketCount(long ejectTicketCount) {
    this.ejectTicketCount = ejectTicketCount;
    setEjectTicketCountIsSet(true);
    return this;
  }

  public void unsetEjectTicketCount() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EJECTTICKETCOUNT_ISSET_ID);
  }

  /** Returns true if field ejectTicketCount is set (has been assigned a value) and false otherwise */
  public boolean isSetEjectTicketCount() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EJECTTICKETCOUNT_ISSET_ID);
  }

  public void setEjectTicketCountIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EJECTTICKETCOUNT_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_COUNT:
      if (value == null) {
        unsetTicketCount();
      } else {
        setTicketCount((java.lang.Long)value);
      }
      break;

    case EJECT_TICKET_COUNT:
      if (value == null) {
        unsetEjectTicketCount();
      } else {
        setEjectTicketCount((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_ID:
      return getOrderId();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_COUNT:
      return getTicketCount();

    case EJECT_TICKET_COUNT:
      return getEjectTicketCount();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORDER_ID:
      return isSetOrderId();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_COUNT:
      return isSetTicketCount();
    case EJECT_TICKET_COUNT:
      return isSetEjectTicketCount();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_ORDER_TICKETTYPE_DETAIL)
      return this.equals((SL_ORDER_TICKETTYPE_DETAIL)that);
    return false;
  }

  public boolean equals(SL_ORDER_TICKETTYPE_DETAIL that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketCount = true;
    boolean that_present_ticketCount = true;
    if (this_present_ticketCount || that_present_ticketCount) {
      if (!(this_present_ticketCount && that_present_ticketCount))
        return false;
      if (this.ticketCount != that.ticketCount)
        return false;
    }

    boolean this_present_ejectTicketCount = true;
    boolean that_present_ejectTicketCount = true;
    if (this_present_ejectTicketCount || that_present_ejectTicketCount) {
      if (!(this_present_ejectTicketCount && that_present_ejectTicketCount))
        return false;
      if (this.ejectTicketCount != that.ejectTicketCount)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + orderId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticketCount);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ejectTicketCount);

    return hashCode;
  }

  @Override
  public int compareTo(SL_ORDER_TICKETTYPE_DETAIL other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketCount()).compareTo(other.isSetTicketCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketCount, other.ticketCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEjectTicketCount()).compareTo(other.isSetEjectTicketCount());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEjectTicketCount()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ejectTicketCount, other.ejectTicketCount);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_ORDER_TICKETTYPE_DETAIL(");
    boolean first = true;

    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketTypeId:");
    if (this.ticketTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketCount:");
    sb.append(this.ticketCount);
    first = false;
    if (!first) sb.append(", ");
    sb.append("ejectTicketCount:");
    sb.append(this.ejectTicketCount);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
    }
    if (ticketTypeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketTypeId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ticketCount' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'ejectTicketCount' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_ORDER_TICKETTYPE_DETAILStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_ORDER_TICKETTYPE_DETAILStandardScheme getScheme() {
      return new SL_ORDER_TICKETTYPE_DETAILStandardScheme();
    }
  }

  private static class SL_ORDER_TICKETTYPE_DETAILStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_ORDER_TICKETTYPE_DETAIL> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_ORDER_TICKETTYPE_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketCount = iprot.readI64();
              struct.setTicketCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // EJECT_TICKET_COUNT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ejectTicketCount = iprot.readI64();
              struct.setEjectTicketCountIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTicketCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketCount' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetEjectTicketCount()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ejectTicketCount' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_ORDER_TICKETTYPE_DETAIL struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketTypeId != null) {
        oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.ticketTypeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(TICKET_COUNT_FIELD_DESC);
      oprot.writeI64(struct.ticketCount);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(EJECT_TICKET_COUNT_FIELD_DESC);
      oprot.writeI64(struct.ejectTicketCount);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_ORDER_TICKETTYPE_DETAILTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_ORDER_TICKETTYPE_DETAILTupleScheme getScheme() {
      return new SL_ORDER_TICKETTYPE_DETAILTupleScheme();
    }
  }

  private static class SL_ORDER_TICKETTYPE_DETAILTupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_ORDER_TICKETTYPE_DETAIL> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_ORDER_TICKETTYPE_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.orderId);
      oprot.writeString(struct.ticketTypeId);
      oprot.writeI64(struct.ticketCount);
      oprot.writeI64(struct.ejectTicketCount);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_ORDER_TICKETTYPE_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.orderId = iprot.readString();
      struct.setOrderIdIsSet(true);
      struct.ticketTypeId = iprot.readString();
      struct.setTicketTypeIdIsSet(true);
      struct.ticketCount = iprot.readI64();
      struct.setTicketCountIsSet(true);
      struct.ejectTicketCount = iprot.readI64();
      struct.setEjectTicketCountIsSet(true);
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

