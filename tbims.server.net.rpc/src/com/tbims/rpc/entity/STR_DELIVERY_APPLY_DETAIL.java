/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 配送申请审核明细表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class STR_DELIVERY_APPLY_DETAIL implements org.apache.thrift.TBase<STR_DELIVERY_APPLY_DETAIL, STR_DELIVERY_APPLY_DETAIL._Fields>, java.io.Serializable, Cloneable, Comparable<STR_DELIVERY_APPLY_DETAIL> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("STR_DELIVERY_APPLY_DETAIL");

  private static final org.apache.thrift.protocol.TField APPLY_EXAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyExamId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField APPLY_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("applyNum", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField EXAM_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("examNum", org.apache.thrift.protocol.TType.I64, (short)5);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new STR_DELIVERY_APPLY_DETAILStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new STR_DELIVERY_APPLY_DETAILTupleSchemeFactory();

  /**
   * 申请审核明细主键
   */
  public java.lang.String applyExamId; // required
  /**
   * 申请编号
   */
  public java.lang.String applyId; // required
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // required
  /**
   * 申请数量
   */
  public long applyNum; // required
  /**
   * 审核数量
   */
  public long examNum; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 申请审核明细主键
     */
    APPLY_EXAM_ID((short)1, "applyExamId"),
    /**
     * 申请编号
     */
    APPLY_ID((short)2, "applyId"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)3, "ticketTypeId"),
    /**
     * 申请数量
     */
    APPLY_NUM((short)4, "applyNum"),
    /**
     * 审核数量
     */
    EXAM_NUM((short)5, "examNum");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // APPLY_EXAM_ID
          return APPLY_EXAM_ID;
        case 2: // APPLY_ID
          return APPLY_ID;
        case 3: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 4: // APPLY_NUM
          return APPLY_NUM;
        case 5: // EXAM_NUM
          return EXAM_NUM;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __APPLYNUM_ISSET_ID = 0;
  private static final int __EXAMNUM_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.EXAM_NUM};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.APPLY_EXAM_ID, new org.apache.thrift.meta_data.FieldMetaData("applyExamId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.APPLY_NUM, new org.apache.thrift.meta_data.FieldMetaData("applyNum", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EXAM_NUM, new org.apache.thrift.meta_data.FieldMetaData("examNum", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(STR_DELIVERY_APPLY_DETAIL.class, metaDataMap);
  }

  public STR_DELIVERY_APPLY_DETAIL() {
  }

  public STR_DELIVERY_APPLY_DETAIL(
    java.lang.String applyExamId,
    java.lang.String applyId,
    java.lang.String ticketTypeId,
    long applyNum)
  {
    this();
    this.applyExamId = applyExamId;
    this.applyId = applyId;
    this.ticketTypeId = ticketTypeId;
    this.applyNum = applyNum;
    setApplyNumIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public STR_DELIVERY_APPLY_DETAIL(STR_DELIVERY_APPLY_DETAIL other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetApplyExamId()) {
      this.applyExamId = other.applyExamId;
    }
    if (other.isSetApplyId()) {
      this.applyId = other.applyId;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    this.applyNum = other.applyNum;
    this.examNum = other.examNum;
  }

  public STR_DELIVERY_APPLY_DETAIL deepCopy() {
    return new STR_DELIVERY_APPLY_DETAIL(this);
  }

  @Override
  public void clear() {
    this.applyExamId = null;
    this.applyId = null;
    this.ticketTypeId = null;
    setApplyNumIsSet(false);
    this.applyNum = 0;
    setExamNumIsSet(false);
    this.examNum = 0;
  }

  /**
   * 申请审核明细主键
   */
  public java.lang.String getApplyExamId() {
    return this.applyExamId;
  }

  /**
   * 申请审核明细主键
   */
  public STR_DELIVERY_APPLY_DETAIL setApplyExamId(java.lang.String applyExamId) {
    this.applyExamId = applyExamId;
    return this;
  }

  public void unsetApplyExamId() {
    this.applyExamId = null;
  }

  /** Returns true if field applyExamId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyExamId() {
    return this.applyExamId != null;
  }

  public void setApplyExamIdIsSet(boolean value) {
    if (!value) {
      this.applyExamId = null;
    }
  }

  /**
   * 申请编号
   */
  public java.lang.String getApplyId() {
    return this.applyId;
  }

  /**
   * 申请编号
   */
  public STR_DELIVERY_APPLY_DETAIL setApplyId(java.lang.String applyId) {
    this.applyId = applyId;
    return this;
  }

  public void unsetApplyId() {
    this.applyId = null;
  }

  /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyId() {
    return this.applyId != null;
  }

  public void setApplyIdIsSet(boolean value) {
    if (!value) {
      this.applyId = null;
    }
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public STR_DELIVERY_APPLY_DETAIL setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 申请数量
   */
  public long getApplyNum() {
    return this.applyNum;
  }

  /**
   * 申请数量
   */
  public STR_DELIVERY_APPLY_DETAIL setApplyNum(long applyNum) {
    this.applyNum = applyNum;
    setApplyNumIsSet(true);
    return this;
  }

  public void unsetApplyNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APPLYNUM_ISSET_ID);
  }

  /** Returns true if field applyNum is set (has been assigned a value) and false otherwise */
  public boolean isSetApplyNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APPLYNUM_ISSET_ID);
  }

  public void setApplyNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APPLYNUM_ISSET_ID, value);
  }

  /**
   * 审核数量
   */
  public long getExamNum() {
    return this.examNum;
  }

  /**
   * 审核数量
   */
  public STR_DELIVERY_APPLY_DETAIL setExamNum(long examNum) {
    this.examNum = examNum;
    setExamNumIsSet(true);
    return this;
  }

  public void unsetExamNum() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EXAMNUM_ISSET_ID);
  }

  /** Returns true if field examNum is set (has been assigned a value) and false otherwise */
  public boolean isSetExamNum() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EXAMNUM_ISSET_ID);
  }

  public void setExamNumIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EXAMNUM_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case APPLY_EXAM_ID:
      if (value == null) {
        unsetApplyExamId();
      } else {
        setApplyExamId((java.lang.String)value);
      }
      break;

    case APPLY_ID:
      if (value == null) {
        unsetApplyId();
      } else {
        setApplyId((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case APPLY_NUM:
      if (value == null) {
        unsetApplyNum();
      } else {
        setApplyNum((java.lang.Long)value);
      }
      break;

    case EXAM_NUM:
      if (value == null) {
        unsetExamNum();
      } else {
        setExamNum((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case APPLY_EXAM_ID:
      return getApplyExamId();

    case APPLY_ID:
      return getApplyId();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case APPLY_NUM:
      return getApplyNum();

    case EXAM_NUM:
      return getExamNum();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case APPLY_EXAM_ID:
      return isSetApplyExamId();
    case APPLY_ID:
      return isSetApplyId();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case APPLY_NUM:
      return isSetApplyNum();
    case EXAM_NUM:
      return isSetExamNum();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof STR_DELIVERY_APPLY_DETAIL)
      return this.equals((STR_DELIVERY_APPLY_DETAIL)that);
    return false;
  }

  public boolean equals(STR_DELIVERY_APPLY_DETAIL that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_applyExamId = true && this.isSetApplyExamId();
    boolean that_present_applyExamId = true && that.isSetApplyExamId();
    if (this_present_applyExamId || that_present_applyExamId) {
      if (!(this_present_applyExamId && that_present_applyExamId))
        return false;
      if (!this.applyExamId.equals(that.applyExamId))
        return false;
    }

    boolean this_present_applyId = true && this.isSetApplyId();
    boolean that_present_applyId = true && that.isSetApplyId();
    if (this_present_applyId || that_present_applyId) {
      if (!(this_present_applyId && that_present_applyId))
        return false;
      if (!this.applyId.equals(that.applyId))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_applyNum = true;
    boolean that_present_applyNum = true;
    if (this_present_applyNum || that_present_applyNum) {
      if (!(this_present_applyNum && that_present_applyNum))
        return false;
      if (this.applyNum != that.applyNum)
        return false;
    }

    boolean this_present_examNum = true && this.isSetExamNum();
    boolean that_present_examNum = true && that.isSetExamNum();
    if (this_present_examNum || that_present_examNum) {
      if (!(this_present_examNum && that_present_examNum))
        return false;
      if (this.examNum != that.examNum)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetApplyExamId()) ? 131071 : 524287);
    if (isSetApplyExamId())
      hashCode = hashCode * 8191 + applyExamId.hashCode();

    hashCode = hashCode * 8191 + ((isSetApplyId()) ? 131071 : 524287);
    if (isSetApplyId())
      hashCode = hashCode * 8191 + applyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(applyNum);

    hashCode = hashCode * 8191 + ((isSetExamNum()) ? 131071 : 524287);
    if (isSetExamNum())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(examNum);

    return hashCode;
  }

  @Override
  public int compareTo(STR_DELIVERY_APPLY_DETAIL other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetApplyExamId()).compareTo(other.isSetApplyExamId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyExamId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyExamId, other.applyExamId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetApplyNum()).compareTo(other.isSetApplyNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetApplyNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyNum, other.applyNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetExamNum()).compareTo(other.isSetExamNum());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetExamNum()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.examNum, other.examNum);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("STR_DELIVERY_APPLY_DETAIL(");
    boolean first = true;

    sb.append("applyExamId:");
    if (this.applyExamId == null) {
      sb.append("null");
    } else {
      sb.append(this.applyExamId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyId:");
    if (this.applyId == null) {
      sb.append("null");
    } else {
      sb.append(this.applyId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketTypeId:");
    if (this.ticketTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("applyNum:");
    sb.append(this.applyNum);
    first = false;
    if (isSetExamNum()) {
      if (!first) sb.append(", ");
      sb.append("examNum:");
      sb.append(this.examNum);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (applyExamId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applyExamId' was not present! Struct: " + toString());
    }
    if (applyId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'applyId' was not present! Struct: " + toString());
    }
    if (ticketTypeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketTypeId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'applyNum' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class STR_DELIVERY_APPLY_DETAILStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STR_DELIVERY_APPLY_DETAILStandardScheme getScheme() {
      return new STR_DELIVERY_APPLY_DETAILStandardScheme();
    }
  }

  private static class STR_DELIVERY_APPLY_DETAILStandardScheme extends org.apache.thrift.scheme.StandardScheme<STR_DELIVERY_APPLY_DETAIL> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, STR_DELIVERY_APPLY_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // APPLY_EXAM_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyExamId = iprot.readString();
              struct.setApplyExamIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // APPLY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.applyId = iprot.readString();
              struct.setApplyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // APPLY_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.applyNum = iprot.readI64();
              struct.setApplyNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // EXAM_NUM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.examNum = iprot.readI64();
              struct.setExamNumIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetApplyNum()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'applyNum' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, STR_DELIVERY_APPLY_DETAIL struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.applyExamId != null) {
        oprot.writeFieldBegin(APPLY_EXAM_ID_FIELD_DESC);
        oprot.writeString(struct.applyExamId);
        oprot.writeFieldEnd();
      }
      if (struct.applyId != null) {
        oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
        oprot.writeString(struct.applyId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketTypeId != null) {
        oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.ticketTypeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(APPLY_NUM_FIELD_DESC);
      oprot.writeI64(struct.applyNum);
      oprot.writeFieldEnd();
      if (struct.isSetExamNum()) {
        oprot.writeFieldBegin(EXAM_NUM_FIELD_DESC);
        oprot.writeI64(struct.examNum);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class STR_DELIVERY_APPLY_DETAILTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public STR_DELIVERY_APPLY_DETAILTupleScheme getScheme() {
      return new STR_DELIVERY_APPLY_DETAILTupleScheme();
    }
  }

  private static class STR_DELIVERY_APPLY_DETAILTupleScheme extends org.apache.thrift.scheme.TupleScheme<STR_DELIVERY_APPLY_DETAIL> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, STR_DELIVERY_APPLY_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.applyExamId);
      oprot.writeString(struct.applyId);
      oprot.writeString(struct.ticketTypeId);
      oprot.writeI64(struct.applyNum);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetExamNum()) {
        optionals.set(0);
      }
      oprot.writeBitSet(optionals, 1);
      if (struct.isSetExamNum()) {
        oprot.writeI64(struct.examNum);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, STR_DELIVERY_APPLY_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.applyExamId = iprot.readString();
      struct.setApplyExamIdIsSet(true);
      struct.applyId = iprot.readString();
      struct.setApplyIdIsSet(true);
      struct.ticketTypeId = iprot.readString();
      struct.setTicketTypeIdIsSet(true);
      struct.applyNum = iprot.readI64();
      struct.setApplyNumIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(1);
      if (incoming.get(0)) {
        struct.examNum = iprot.readI64();
        struct.setExamNumIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

