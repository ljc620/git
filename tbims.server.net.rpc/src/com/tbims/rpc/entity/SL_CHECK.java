/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 检票表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SL_CHECK implements org.apache.thrift.TBase<SL_CHECK, SL_CHECK._Fields>, java.io.Serializable, Cloneable, Comparable<SL_CHECK> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_CHECK");

  private static final org.apache.thrift.protocol.TField CHECK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("checkId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField TICKET_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketClass", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TICKET_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketUid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VENUE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("venueId", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField PASS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("passFlag", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ERROR_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("errorCode", org.apache.thrift.protocol.TType.STRING, (short)9);
  private static final org.apache.thrift.protocol.TField NOPASS_REASON_FIELD_DESC = new org.apache.thrift.protocol.TField("nopassReason", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField REMAIN_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("remainTimes", org.apache.thrift.protocol.TType.I64, (short)11);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)12);
  private static final org.apache.thrift.protocol.TField OPE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("opeTime", org.apache.thrift.protocol.TType.I64, (short)13);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_CHECKStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_CHECKTupleSchemeFactory();

  /**
   * 检票表id
   */
  public java.lang.String checkId; // required
  /**
   * 门票类型(1-FRID、2-身份证、3-二维码 4-员工卡)
   */
  public java.lang.String ticketClass; // required
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // optional
  /**
   * 票号
   */
  public long ticketId; // required
  /**
   * 票据唯一号
   */
  public java.lang.String ticketUid; // optional
  /**
   * 场馆编号
   */
  public long venueId; // required
  /**
   * 终端编号
   */
  public long clientId; // required
  /**
   * 是否通过(Y是N否)
   */
  public java.lang.String passFlag; // optional
  /**
   * 错误码
   */
  public java.lang.String errorCode; // optional
  /**
   * 未通过原因
   */
  public java.lang.String nopassReason; // optional
  /**
   * 剩余次数
   */
  public long remainTimes; // optional
  /**
   * 版本号
   */
  public long versionNo; // optional
  /**
   * 操作时间
   */
  public long opeTime; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 检票表id
     */
    CHECK_ID((short)1, "checkId"),
    /**
     * 门票类型(1-FRID、2-身份证、3-二维码 4-员工卡)
     */
    TICKET_CLASS((short)2, "ticketClass"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)3, "ticketTypeId"),
    /**
     * 票号
     */
    TICKET_ID((short)4, "ticketId"),
    /**
     * 票据唯一号
     */
    TICKET_UID((short)5, "ticketUid"),
    /**
     * 场馆编号
     */
    VENUE_ID((short)6, "venueId"),
    /**
     * 终端编号
     */
    CLIENT_ID((short)7, "clientId"),
    /**
     * 是否通过(Y是N否)
     */
    PASS_FLAG((short)8, "passFlag"),
    /**
     * 错误码
     */
    ERROR_CODE((short)9, "errorCode"),
    /**
     * 未通过原因
     */
    NOPASS_REASON((short)10, "nopassReason"),
    /**
     * 剩余次数
     */
    REMAIN_TIMES((short)11, "remainTimes"),
    /**
     * 版本号
     */
    VERSION_NO((short)12, "versionNo"),
    /**
     * 操作时间
     */
    OPE_TIME((short)13, "opeTime");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // CHECK_ID
          return CHECK_ID;
        case 2: // TICKET_CLASS
          return TICKET_CLASS;
        case 3: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 4: // TICKET_ID
          return TICKET_ID;
        case 5: // TICKET_UID
          return TICKET_UID;
        case 6: // VENUE_ID
          return VENUE_ID;
        case 7: // CLIENT_ID
          return CLIENT_ID;
        case 8: // PASS_FLAG
          return PASS_FLAG;
        case 9: // ERROR_CODE
          return ERROR_CODE;
        case 10: // NOPASS_REASON
          return NOPASS_REASON;
        case 11: // REMAIN_TIMES
          return REMAIN_TIMES;
        case 12: // VERSION_NO
          return VERSION_NO;
        case 13: // OPE_TIME
          return OPE_TIME;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKETID_ISSET_ID = 0;
  private static final int __VENUEID_ISSET_ID = 1;
  private static final int __CLIENTID_ISSET_ID = 2;
  private static final int __REMAINTIMES_ISSET_ID = 3;
  private static final int __VERSIONNO_ISSET_ID = 4;
  private static final int __OPETIME_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TICKET_TYPE_ID,_Fields.TICKET_UID,_Fields.PASS_FLAG,_Fields.ERROR_CODE,_Fields.NOPASS_REASON,_Fields.REMAIN_TIMES,_Fields.VERSION_NO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.CHECK_ID, new org.apache.thrift.meta_data.FieldMetaData("checkId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_CLASS, new org.apache.thrift.meta_data.FieldMetaData("ticketClass", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_UID, new org.apache.thrift.meta_data.FieldMetaData("ticketUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VENUE_ID, new org.apache.thrift.meta_data.FieldMetaData("venueId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PASS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("passFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ERROR_CODE, new org.apache.thrift.meta_data.FieldMetaData("errorCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.NOPASS_REASON, new org.apache.thrift.meta_data.FieldMetaData("nopassReason", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REMAIN_TIMES, new org.apache.thrift.meta_data.FieldMetaData("remainTimes", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.OPE_TIME, new org.apache.thrift.meta_data.FieldMetaData("opeTime", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_CHECK.class, metaDataMap);
  }

  public SL_CHECK() {
  }

  public SL_CHECK(
    java.lang.String checkId,
    java.lang.String ticketClass,
    long ticketId,
    long venueId,
    long clientId,
    long opeTime)
  {
    this();
    this.checkId = checkId;
    this.ticketClass = ticketClass;
    this.ticketId = ticketId;
    setTicketIdIsSet(true);
    this.venueId = venueId;
    setVenueIdIsSet(true);
    this.clientId = clientId;
    setClientIdIsSet(true);
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_CHECK(SL_CHECK other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetCheckId()) {
      this.checkId = other.checkId;
    }
    if (other.isSetTicketClass()) {
      this.ticketClass = other.ticketClass;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    this.ticketId = other.ticketId;
    if (other.isSetTicketUid()) {
      this.ticketUid = other.ticketUid;
    }
    this.venueId = other.venueId;
    this.clientId = other.clientId;
    if (other.isSetPassFlag()) {
      this.passFlag = other.passFlag;
    }
    if (other.isSetErrorCode()) {
      this.errorCode = other.errorCode;
    }
    if (other.isSetNopassReason()) {
      this.nopassReason = other.nopassReason;
    }
    this.remainTimes = other.remainTimes;
    this.versionNo = other.versionNo;
    this.opeTime = other.opeTime;
  }

  public SL_CHECK deepCopy() {
    return new SL_CHECK(this);
  }

  @Override
  public void clear() {
    this.checkId = null;
    this.ticketClass = null;
    this.ticketTypeId = null;
    setTicketIdIsSet(false);
    this.ticketId = 0;
    this.ticketUid = null;
    setVenueIdIsSet(false);
    this.venueId = 0;
    setClientIdIsSet(false);
    this.clientId = 0;
    this.passFlag = null;
    this.errorCode = null;
    this.nopassReason = null;
    setRemainTimesIsSet(false);
    this.remainTimes = 0;
    setVersionNoIsSet(false);
    this.versionNo = 0;
    setOpeTimeIsSet(false);
    this.opeTime = 0;
  }

  /**
   * 检票表id
   */
  public java.lang.String getCheckId() {
    return this.checkId;
  }

  /**
   * 检票表id
   */
  public SL_CHECK setCheckId(java.lang.String checkId) {
    this.checkId = checkId;
    return this;
  }

  public void unsetCheckId() {
    this.checkId = null;
  }

  /** Returns true if field checkId is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckId() {
    return this.checkId != null;
  }

  public void setCheckIdIsSet(boolean value) {
    if (!value) {
      this.checkId = null;
    }
  }

  /**
   * 门票类型(1-FRID、2-身份证、3-二维码 4-员工卡)
   */
  public java.lang.String getTicketClass() {
    return this.ticketClass;
  }

  /**
   * 门票类型(1-FRID、2-身份证、3-二维码 4-员工卡)
   */
  public SL_CHECK setTicketClass(java.lang.String ticketClass) {
    this.ticketClass = ticketClass;
    return this;
  }

  public void unsetTicketClass() {
    this.ticketClass = null;
  }

  /** Returns true if field ticketClass is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketClass() {
    return this.ticketClass != null;
  }

  public void setTicketClassIsSet(boolean value) {
    if (!value) {
      this.ticketClass = null;
    }
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public SL_CHECK setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 票号
   */
  public long getTicketId() {
    return this.ticketId;
  }

  /**
   * 票号
   */
  public SL_CHECK setTicketId(long ticketId) {
    this.ticketId = ticketId;
    setTicketIdIsSet(true);
    return this;
  }

  public void unsetTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  public void setTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKETID_ISSET_ID, value);
  }

  /**
   * 票据唯一号
   */
  public java.lang.String getTicketUid() {
    return this.ticketUid;
  }

  /**
   * 票据唯一号
   */
  public SL_CHECK setTicketUid(java.lang.String ticketUid) {
    this.ticketUid = ticketUid;
    return this;
  }

  public void unsetTicketUid() {
    this.ticketUid = null;
  }

  /** Returns true if field ticketUid is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketUid() {
    return this.ticketUid != null;
  }

  public void setTicketUidIsSet(boolean value) {
    if (!value) {
      this.ticketUid = null;
    }
  }

  /**
   * 场馆编号
   */
  public long getVenueId() {
    return this.venueId;
  }

  /**
   * 场馆编号
   */
  public SL_CHECK setVenueId(long venueId) {
    this.venueId = venueId;
    setVenueIdIsSet(true);
    return this;
  }

  public void unsetVenueId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VENUEID_ISSET_ID);
  }

  /** Returns true if field venueId is set (has been assigned a value) and false otherwise */
  public boolean isSetVenueId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VENUEID_ISSET_ID);
  }

  public void setVenueIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VENUEID_ISSET_ID, value);
  }

  /**
   * 终端编号
   */
  public long getClientId() {
    return this.clientId;
  }

  /**
   * 终端编号
   */
  public SL_CHECK setClientId(long clientId) {
    this.clientId = clientId;
    setClientIdIsSet(true);
    return this;
  }

  public void unsetClientId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  public void setClientIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
  }

  /**
   * 是否通过(Y是N否)
   */
  public java.lang.String getPassFlag() {
    return this.passFlag;
  }

  /**
   * 是否通过(Y是N否)
   */
  public SL_CHECK setPassFlag(java.lang.String passFlag) {
    this.passFlag = passFlag;
    return this;
  }

  public void unsetPassFlag() {
    this.passFlag = null;
  }

  /** Returns true if field passFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetPassFlag() {
    return this.passFlag != null;
  }

  public void setPassFlagIsSet(boolean value) {
    if (!value) {
      this.passFlag = null;
    }
  }

  /**
   * 错误码
   */
  public java.lang.String getErrorCode() {
    return this.errorCode;
  }

  /**
   * 错误码
   */
  public SL_CHECK setErrorCode(java.lang.String errorCode) {
    this.errorCode = errorCode;
    return this;
  }

  public void unsetErrorCode() {
    this.errorCode = null;
  }

  /** Returns true if field errorCode is set (has been assigned a value) and false otherwise */
  public boolean isSetErrorCode() {
    return this.errorCode != null;
  }

  public void setErrorCodeIsSet(boolean value) {
    if (!value) {
      this.errorCode = null;
    }
  }

  /**
   * 未通过原因
   */
  public java.lang.String getNopassReason() {
    return this.nopassReason;
  }

  /**
   * 未通过原因
   */
  public SL_CHECK setNopassReason(java.lang.String nopassReason) {
    this.nopassReason = nopassReason;
    return this;
  }

  public void unsetNopassReason() {
    this.nopassReason = null;
  }

  /** Returns true if field nopassReason is set (has been assigned a value) and false otherwise */
  public boolean isSetNopassReason() {
    return this.nopassReason != null;
  }

  public void setNopassReasonIsSet(boolean value) {
    if (!value) {
      this.nopassReason = null;
    }
  }

  /**
   * 剩余次数
   */
  public long getRemainTimes() {
    return this.remainTimes;
  }

  /**
   * 剩余次数
   */
  public SL_CHECK setRemainTimes(long remainTimes) {
    this.remainTimes = remainTimes;
    setRemainTimesIsSet(true);
    return this;
  }

  public void unsetRemainTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REMAINTIMES_ISSET_ID);
  }

  /** Returns true if field remainTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetRemainTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REMAINTIMES_ISSET_ID);
  }

  public void setRemainTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REMAINTIMES_ISSET_ID, value);
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SL_CHECK setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  /**
   * 操作时间
   */
  public long getOpeTime() {
    return this.opeTime;
  }

  /**
   * 操作时间
   */
  public SL_CHECK setOpeTime(long opeTime) {
    this.opeTime = opeTime;
    setOpeTimeIsSet(true);
    return this;
  }

  public void unsetOpeTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  /** Returns true if field opeTime is set (has been assigned a value) and false otherwise */
  public boolean isSetOpeTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OPETIME_ISSET_ID);
  }

  public void setOpeTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OPETIME_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case CHECK_ID:
      if (value == null) {
        unsetCheckId();
      } else {
        setCheckId((java.lang.String)value);
      }
      break;

    case TICKET_CLASS:
      if (value == null) {
        unsetTicketClass();
      } else {
        setTicketClass((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((java.lang.Long)value);
      }
      break;

    case TICKET_UID:
      if (value == null) {
        unsetTicketUid();
      } else {
        setTicketUid((java.lang.String)value);
      }
      break;

    case VENUE_ID:
      if (value == null) {
        unsetVenueId();
      } else {
        setVenueId((java.lang.Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((java.lang.Long)value);
      }
      break;

    case PASS_FLAG:
      if (value == null) {
        unsetPassFlag();
      } else {
        setPassFlag((java.lang.String)value);
      }
      break;

    case ERROR_CODE:
      if (value == null) {
        unsetErrorCode();
      } else {
        setErrorCode((java.lang.String)value);
      }
      break;

    case NOPASS_REASON:
      if (value == null) {
        unsetNopassReason();
      } else {
        setNopassReason((java.lang.String)value);
      }
      break;

    case REMAIN_TIMES:
      if (value == null) {
        unsetRemainTimes();
      } else {
        setRemainTimes((java.lang.Long)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    case OPE_TIME:
      if (value == null) {
        unsetOpeTime();
      } else {
        setOpeTime((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case CHECK_ID:
      return getCheckId();

    case TICKET_CLASS:
      return getTicketClass();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case TICKET_ID:
      return getTicketId();

    case TICKET_UID:
      return getTicketUid();

    case VENUE_ID:
      return getVenueId();

    case CLIENT_ID:
      return getClientId();

    case PASS_FLAG:
      return getPassFlag();

    case ERROR_CODE:
      return getErrorCode();

    case NOPASS_REASON:
      return getNopassReason();

    case REMAIN_TIMES:
      return getRemainTimes();

    case VERSION_NO:
      return getVersionNo();

    case OPE_TIME:
      return getOpeTime();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case CHECK_ID:
      return isSetCheckId();
    case TICKET_CLASS:
      return isSetTicketClass();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case TICKET_ID:
      return isSetTicketId();
    case TICKET_UID:
      return isSetTicketUid();
    case VENUE_ID:
      return isSetVenueId();
    case CLIENT_ID:
      return isSetClientId();
    case PASS_FLAG:
      return isSetPassFlag();
    case ERROR_CODE:
      return isSetErrorCode();
    case NOPASS_REASON:
      return isSetNopassReason();
    case REMAIN_TIMES:
      return isSetRemainTimes();
    case VERSION_NO:
      return isSetVersionNo();
    case OPE_TIME:
      return isSetOpeTime();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_CHECK)
      return this.equals((SL_CHECK)that);
    return false;
  }

  public boolean equals(SL_CHECK that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_checkId = true && this.isSetCheckId();
    boolean that_present_checkId = true && that.isSetCheckId();
    if (this_present_checkId || that_present_checkId) {
      if (!(this_present_checkId && that_present_checkId))
        return false;
      if (!this.checkId.equals(that.checkId))
        return false;
    }

    boolean this_present_ticketClass = true && this.isSetTicketClass();
    boolean that_present_ticketClass = true && that.isSetTicketClass();
    if (this_present_ticketClass || that_present_ticketClass) {
      if (!(this_present_ticketClass && that_present_ticketClass))
        return false;
      if (!this.ticketClass.equals(that.ticketClass))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_ticketId = true;
    boolean that_present_ticketId = true;
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (this.ticketId != that.ticketId)
        return false;
    }

    boolean this_present_ticketUid = true && this.isSetTicketUid();
    boolean that_present_ticketUid = true && that.isSetTicketUid();
    if (this_present_ticketUid || that_present_ticketUid) {
      if (!(this_present_ticketUid && that_present_ticketUid))
        return false;
      if (!this.ticketUid.equals(that.ticketUid))
        return false;
    }

    boolean this_present_venueId = true;
    boolean that_present_venueId = true;
    if (this_present_venueId || that_present_venueId) {
      if (!(this_present_venueId && that_present_venueId))
        return false;
      if (this.venueId != that.venueId)
        return false;
    }

    boolean this_present_clientId = true;
    boolean that_present_clientId = true;
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (this.clientId != that.clientId)
        return false;
    }

    boolean this_present_passFlag = true && this.isSetPassFlag();
    boolean that_present_passFlag = true && that.isSetPassFlag();
    if (this_present_passFlag || that_present_passFlag) {
      if (!(this_present_passFlag && that_present_passFlag))
        return false;
      if (!this.passFlag.equals(that.passFlag))
        return false;
    }

    boolean this_present_errorCode = true && this.isSetErrorCode();
    boolean that_present_errorCode = true && that.isSetErrorCode();
    if (this_present_errorCode || that_present_errorCode) {
      if (!(this_present_errorCode && that_present_errorCode))
        return false;
      if (!this.errorCode.equals(that.errorCode))
        return false;
    }

    boolean this_present_nopassReason = true && this.isSetNopassReason();
    boolean that_present_nopassReason = true && that.isSetNopassReason();
    if (this_present_nopassReason || that_present_nopassReason) {
      if (!(this_present_nopassReason && that_present_nopassReason))
        return false;
      if (!this.nopassReason.equals(that.nopassReason))
        return false;
    }

    boolean this_present_remainTimes = true && this.isSetRemainTimes();
    boolean that_present_remainTimes = true && that.isSetRemainTimes();
    if (this_present_remainTimes || that_present_remainTimes) {
      if (!(this_present_remainTimes && that_present_remainTimes))
        return false;
      if (this.remainTimes != that.remainTimes)
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    boolean this_present_opeTime = true;
    boolean that_present_opeTime = true;
    if (this_present_opeTime || that_present_opeTime) {
      if (!(this_present_opeTime && that_present_opeTime))
        return false;
      if (this.opeTime != that.opeTime)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetCheckId()) ? 131071 : 524287);
    if (isSetCheckId())
      hashCode = hashCode * 8191 + checkId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketClass()) ? 131071 : 524287);
    if (isSetTicketClass())
      hashCode = hashCode * 8191 + ticketClass.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticketId);

    hashCode = hashCode * 8191 + ((isSetTicketUid()) ? 131071 : 524287);
    if (isSetTicketUid())
      hashCode = hashCode * 8191 + ticketUid.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(venueId);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clientId);

    hashCode = hashCode * 8191 + ((isSetPassFlag()) ? 131071 : 524287);
    if (isSetPassFlag())
      hashCode = hashCode * 8191 + passFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetErrorCode()) ? 131071 : 524287);
    if (isSetErrorCode())
      hashCode = hashCode * 8191 + errorCode.hashCode();

    hashCode = hashCode * 8191 + ((isSetNopassReason()) ? 131071 : 524287);
    if (isSetNopassReason())
      hashCode = hashCode * 8191 + nopassReason.hashCode();

    hashCode = hashCode * 8191 + ((isSetRemainTimes()) ? 131071 : 524287);
    if (isSetRemainTimes())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(remainTimes);

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(opeTime);

    return hashCode;
  }

  @Override
  public int compareTo(SL_CHECK other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetCheckId()).compareTo(other.isSetCheckId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkId, other.checkId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketClass()).compareTo(other.isSetTicketClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketClass, other.ticketClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketUid()).compareTo(other.isSetTicketUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketUid, other.ticketUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVenueId()).compareTo(other.isSetVenueId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVenueId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.venueId, other.venueId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPassFlag()).compareTo(other.isSetPassFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPassFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.passFlag, other.passFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetErrorCode()).compareTo(other.isSetErrorCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetErrorCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.errorCode, other.errorCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNopassReason()).compareTo(other.isSetNopassReason());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNopassReason()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nopassReason, other.nopassReason);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRemainTimes()).compareTo(other.isSetRemainTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRemainTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.remainTimes, other.remainTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOpeTime()).compareTo(other.isSetOpeTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOpeTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.opeTime, other.opeTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_CHECK(");
    boolean first = true;

    sb.append("checkId:");
    if (this.checkId == null) {
      sb.append("null");
    } else {
      sb.append(this.checkId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("ticketClass:");
    if (this.ticketClass == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketClass);
    }
    first = false;
    if (isSetTicketTypeId()) {
      if (!first) sb.append(", ");
      sb.append("ticketTypeId:");
      if (this.ticketTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketTypeId);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ticketId:");
    sb.append(this.ticketId);
    first = false;
    if (isSetTicketUid()) {
      if (!first) sb.append(", ");
      sb.append("ticketUid:");
      if (this.ticketUid == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketUid);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("venueId:");
    sb.append(this.venueId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clientId:");
    sb.append(this.clientId);
    first = false;
    if (isSetPassFlag()) {
      if (!first) sb.append(", ");
      sb.append("passFlag:");
      if (this.passFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.passFlag);
      }
      first = false;
    }
    if (isSetErrorCode()) {
      if (!first) sb.append(", ");
      sb.append("errorCode:");
      if (this.errorCode == null) {
        sb.append("null");
      } else {
        sb.append(this.errorCode);
      }
      first = false;
    }
    if (isSetNopassReason()) {
      if (!first) sb.append(", ");
      sb.append("nopassReason:");
      if (this.nopassReason == null) {
        sb.append("null");
      } else {
        sb.append(this.nopassReason);
      }
      first = false;
    }
    if (isSetRemainTimes()) {
      if (!first) sb.append(", ");
      sb.append("remainTimes:");
      sb.append(this.remainTimes);
      first = false;
    }
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("opeTime:");
    sb.append(this.opeTime);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (checkId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'checkId' was not present! Struct: " + toString());
    }
    if (ticketClass == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketClass' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ticketId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'venueId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'clientId' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'opeTime' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_CHECKStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_CHECKStandardScheme getScheme() {
      return new SL_CHECKStandardScheme();
    }
  }

  private static class SL_CHECKStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_CHECK> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_CHECK struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // CHECK_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkId = iprot.readString();
              struct.setCheckIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // TICKET_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketClass = iprot.readString();
              struct.setTicketClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketId = iprot.readI64();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TICKET_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketUid = iprot.readString();
              struct.setTicketUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VENUE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.venueId = iprot.readI64();
              struct.setVenueIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clientId = iprot.readI64();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // PASS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.passFlag = iprot.readString();
              struct.setPassFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ERROR_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.errorCode = iprot.readString();
              struct.setErrorCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // NOPASS_REASON
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.nopassReason = iprot.readString();
              struct.setNopassReasonIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // REMAIN_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.remainTimes = iprot.readI64();
              struct.setRemainTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OPE_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.opeTime = iprot.readI64();
              struct.setOpeTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTicketId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetVenueId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'venueId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetClientId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'clientId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetOpeTime()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'opeTime' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_CHECK struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.checkId != null) {
        oprot.writeFieldBegin(CHECK_ID_FIELD_DESC);
        oprot.writeString(struct.checkId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketClass != null) {
        oprot.writeFieldBegin(TICKET_CLASS_FIELD_DESC);
        oprot.writeString(struct.ticketClass);
        oprot.writeFieldEnd();
      }
      if (struct.ticketTypeId != null) {
        if (struct.isSetTicketTypeId()) {
          oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.ticketTypeId);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
      oprot.writeI64(struct.ticketId);
      oprot.writeFieldEnd();
      if (struct.ticketUid != null) {
        if (struct.isSetTicketUid()) {
          oprot.writeFieldBegin(TICKET_UID_FIELD_DESC);
          oprot.writeString(struct.ticketUid);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(VENUE_ID_FIELD_DESC);
      oprot.writeI64(struct.venueId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
      oprot.writeI64(struct.clientId);
      oprot.writeFieldEnd();
      if (struct.passFlag != null) {
        if (struct.isSetPassFlag()) {
          oprot.writeFieldBegin(PASS_FLAG_FIELD_DESC);
          oprot.writeString(struct.passFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.errorCode != null) {
        if (struct.isSetErrorCode()) {
          oprot.writeFieldBegin(ERROR_CODE_FIELD_DESC);
          oprot.writeString(struct.errorCode);
          oprot.writeFieldEnd();
        }
      }
      if (struct.nopassReason != null) {
        if (struct.isSetNopassReason()) {
          oprot.writeFieldBegin(NOPASS_REASON_FIELD_DESC);
          oprot.writeString(struct.nopassReason);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetRemainTimes()) {
        oprot.writeFieldBegin(REMAIN_TIMES_FIELD_DESC);
        oprot.writeI64(struct.remainTimes);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OPE_TIME_FIELD_DESC);
      oprot.writeI64(struct.opeTime);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_CHECKTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_CHECKTupleScheme getScheme() {
      return new SL_CHECKTupleScheme();
    }
  }

  private static class SL_CHECKTupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_CHECK> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_CHECK struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.checkId);
      oprot.writeString(struct.ticketClass);
      oprot.writeI64(struct.ticketId);
      oprot.writeI64(struct.venueId);
      oprot.writeI64(struct.clientId);
      oprot.writeI64(struct.opeTime);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTicketTypeId()) {
        optionals.set(0);
      }
      if (struct.isSetTicketUid()) {
        optionals.set(1);
      }
      if (struct.isSetPassFlag()) {
        optionals.set(2);
      }
      if (struct.isSetErrorCode()) {
        optionals.set(3);
      }
      if (struct.isSetNopassReason()) {
        optionals.set(4);
      }
      if (struct.isSetRemainTimes()) {
        optionals.set(5);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTicketTypeId()) {
        oprot.writeString(struct.ticketTypeId);
      }
      if (struct.isSetTicketUid()) {
        oprot.writeString(struct.ticketUid);
      }
      if (struct.isSetPassFlag()) {
        oprot.writeString(struct.passFlag);
      }
      if (struct.isSetErrorCode()) {
        oprot.writeString(struct.errorCode);
      }
      if (struct.isSetNopassReason()) {
        oprot.writeString(struct.nopassReason);
      }
      if (struct.isSetRemainTimes()) {
        oprot.writeI64(struct.remainTimes);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_CHECK struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.checkId = iprot.readString();
      struct.setCheckIdIsSet(true);
      struct.ticketClass = iprot.readString();
      struct.setTicketClassIsSet(true);
      struct.ticketId = iprot.readI64();
      struct.setTicketIdIsSet(true);
      struct.venueId = iprot.readI64();
      struct.setVenueIdIsSet(true);
      struct.clientId = iprot.readI64();
      struct.setClientIdIsSet(true);
      struct.opeTime = iprot.readI64();
      struct.setOpeTimeIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.ticketTypeId = iprot.readString();
        struct.setTicketTypeIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ticketUid = iprot.readString();
        struct.setTicketUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.passFlag = iprot.readString();
        struct.setPassFlagIsSet(true);
      }
      if (incoming.get(3)) {
        struct.errorCode = iprot.readString();
        struct.setErrorCodeIsSet(true);
      }
      if (incoming.get(4)) {
        struct.nopassReason = iprot.readString();
        struct.setNopassReasonIsSet(true);
      }
      if (incoming.get(5)) {
        struct.remainTimes = iprot.readI64();
        struct.setRemainTimesIsSet(true);
      }
      if (incoming.get(6)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

