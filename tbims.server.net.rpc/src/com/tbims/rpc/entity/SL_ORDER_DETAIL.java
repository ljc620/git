/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 销售明细表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SL_ORDER_DETAIL implements org.apache.thrift.TBase<SL_ORDER_DETAIL, SL_ORDER_DETAIL._Fields>, java.io.Serializable, Cloneable, Comparable<SL_ORDER_DETAIL> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_ORDER_DETAIL");

  private static final org.apache.thrift.protocol.TField ORDER_DETAIL_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderDetailId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField TICKET_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketClass", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketId", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField TICKET_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketUid", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField TICKET_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketTypeId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField VALIDATE_TIMES_FIELD_DESC = new org.apache.thrift.protocol.TField("validateTimes", org.apache.thrift.protocol.TType.I64, (short)7);
  private static final org.apache.thrift.protocol.TField IDENTTY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("identtyId", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField ORIGINAL_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("originalPrice", org.apache.thrift.protocol.TType.I64, (short)9);
  private static final org.apache.thrift.protocol.TField SALE_PRICE_FIELD_DESC = new org.apache.thrift.protocol.TField("salePrice", org.apache.thrift.protocol.TType.I64, (short)10);
  private static final org.apache.thrift.protocol.TField CHECK_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("checkFlag", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField USELESS_FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("uselessFlag", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.I64, (short)13);
  private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.I64, (short)14);
  private static final org.apache.thrift.protocol.TField EJECT_USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ejectUserId", org.apache.thrift.protocol.TType.STRING, (short)15);
  private static final org.apache.thrift.protocol.TField EJECT_TICKET_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("ejectTicketStat", org.apache.thrift.protocol.TType.STRING, (short)16);
  private static final org.apache.thrift.protocol.TField EJECT_TICKET_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("ejectTicketTime", org.apache.thrift.protocol.TType.I64, (short)17);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)18);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_ORDER_DETAILStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_ORDER_DETAILTupleSchemeFactory();

  /**
   * 销售明细表ID
   */
  public java.lang.String orderDetailId; // required
  /**
   * 销售单号
   */
  public java.lang.String orderId; // required
  /**
   * 门票类型(1-FRID、2-身份证、3-二维码)
   */
  public java.lang.String ticketClass; // optional
  /**
   * 票号
   */
  public long ticketId; // required
  /**
   * 票据唯一号
   */
  public java.lang.String ticketUid; // optional
  /**
   * 票种编号
   */
  public java.lang.String ticketTypeId; // required
  /**
   * 可用次数
   */
  public long validateTimes; // required
  /**
   * 身份证号码
   */
  public java.lang.String identtyId; // optional
  /**
   * 原单价
   */
  public long originalPrice; // optional
  /**
   * 销售价
   */
  public long salePrice; // optional
  /**
   * 是否检票(Y是N否)
   */
  public java.lang.String checkFlag; // optional
  /**
   * 是否作废(Y是N否)
   */
  public java.lang.String uselessFlag; // optional
  /**
   * 出票网点编号
   */
  public long outletId; // optional
  /**
   * 出票终端编号
   */
  public long clientId; // optional
  /**
   * 出票人
   */
  public java.lang.String ejectUserId; // optional
  /**
   * 出票状态(1-待出票 2-已出票)
   */
  public java.lang.String ejectTicketStat; // optional
  /**
   * 出票时间
   */
  public long ejectTicketTime; // optional
  /**
   * 版本号
   */
  public long versionNo; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 销售明细表ID
     */
    ORDER_DETAIL_ID((short)1, "orderDetailId"),
    /**
     * 销售单号
     */
    ORDER_ID((short)2, "orderId"),
    /**
     * 门票类型(1-FRID、2-身份证、3-二维码)
     */
    TICKET_CLASS((short)3, "ticketClass"),
    /**
     * 票号
     */
    TICKET_ID((short)4, "ticketId"),
    /**
     * 票据唯一号
     */
    TICKET_UID((short)5, "ticketUid"),
    /**
     * 票种编号
     */
    TICKET_TYPE_ID((short)6, "ticketTypeId"),
    /**
     * 可用次数
     */
    VALIDATE_TIMES((short)7, "validateTimes"),
    /**
     * 身份证号码
     */
    IDENTTY_ID((short)8, "identtyId"),
    /**
     * 原单价
     */
    ORIGINAL_PRICE((short)9, "originalPrice"),
    /**
     * 销售价
     */
    SALE_PRICE((short)10, "salePrice"),
    /**
     * 是否检票(Y是N否)
     */
    CHECK_FLAG((short)11, "checkFlag"),
    /**
     * 是否作废(Y是N否)
     */
    USELESS_FLAG((short)12, "uselessFlag"),
    /**
     * 出票网点编号
     */
    OUTLET_ID((short)13, "outletId"),
    /**
     * 出票终端编号
     */
    CLIENT_ID((short)14, "clientId"),
    /**
     * 出票人
     */
    EJECT_USER_ID((short)15, "ejectUserId"),
    /**
     * 出票状态(1-待出票 2-已出票)
     */
    EJECT_TICKET_STAT((short)16, "ejectTicketStat"),
    /**
     * 出票时间
     */
    EJECT_TICKET_TIME((short)17, "ejectTicketTime"),
    /**
     * 版本号
     */
    VERSION_NO((short)18, "versionNo");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ORDER_DETAIL_ID
          return ORDER_DETAIL_ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // TICKET_CLASS
          return TICKET_CLASS;
        case 4: // TICKET_ID
          return TICKET_ID;
        case 5: // TICKET_UID
          return TICKET_UID;
        case 6: // TICKET_TYPE_ID
          return TICKET_TYPE_ID;
        case 7: // VALIDATE_TIMES
          return VALIDATE_TIMES;
        case 8: // IDENTTY_ID
          return IDENTTY_ID;
        case 9: // ORIGINAL_PRICE
          return ORIGINAL_PRICE;
        case 10: // SALE_PRICE
          return SALE_PRICE;
        case 11: // CHECK_FLAG
          return CHECK_FLAG;
        case 12: // USELESS_FLAG
          return USELESS_FLAG;
        case 13: // OUTLET_ID
          return OUTLET_ID;
        case 14: // CLIENT_ID
          return CLIENT_ID;
        case 15: // EJECT_USER_ID
          return EJECT_USER_ID;
        case 16: // EJECT_TICKET_STAT
          return EJECT_TICKET_STAT;
        case 17: // EJECT_TICKET_TIME
          return EJECT_TICKET_TIME;
        case 18: // VERSION_NO
          return VERSION_NO;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TICKETID_ISSET_ID = 0;
  private static final int __VALIDATETIMES_ISSET_ID = 1;
  private static final int __ORIGINALPRICE_ISSET_ID = 2;
  private static final int __SALEPRICE_ISSET_ID = 3;
  private static final int __OUTLETID_ISSET_ID = 4;
  private static final int __CLIENTID_ISSET_ID = 5;
  private static final int __EJECTTICKETTIME_ISSET_ID = 6;
  private static final int __VERSIONNO_ISSET_ID = 7;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.TICKET_CLASS,_Fields.TICKET_UID,_Fields.IDENTTY_ID,_Fields.ORIGINAL_PRICE,_Fields.SALE_PRICE,_Fields.CHECK_FLAG,_Fields.USELESS_FLAG,_Fields.OUTLET_ID,_Fields.CLIENT_ID,_Fields.EJECT_USER_ID,_Fields.EJECT_TICKET_STAT,_Fields.EJECT_TICKET_TIME,_Fields.VERSION_NO};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ORDER_DETAIL_ID, new org.apache.thrift.meta_data.FieldMetaData("orderDetailId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_CLASS, new org.apache.thrift.meta_data.FieldMetaData("ticketClass", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.TICKET_UID, new org.apache.thrift.meta_data.FieldMetaData("ticketUid", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.TICKET_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("ticketTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VALIDATE_TIMES, new org.apache.thrift.meta_data.FieldMetaData("validateTimes", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.IDENTTY_ID, new org.apache.thrift.meta_data.FieldMetaData("identtyId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORIGINAL_PRICE, new org.apache.thrift.meta_data.FieldMetaData("originalPrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.SALE_PRICE, new org.apache.thrift.meta_data.FieldMetaData("salePrice", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CHECK_FLAG, new org.apache.thrift.meta_data.FieldMetaData("checkFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.USELESS_FLAG, new org.apache.thrift.meta_data.FieldMetaData("uselessFlag", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.EJECT_USER_ID, new org.apache.thrift.meta_data.FieldMetaData("ejectUserId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EJECT_TICKET_STAT, new org.apache.thrift.meta_data.FieldMetaData("ejectTicketStat", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.EJECT_TICKET_TIME, new org.apache.thrift.meta_data.FieldMetaData("ejectTicketTime", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_ORDER_DETAIL.class, metaDataMap);
  }

  public SL_ORDER_DETAIL() {
  }

  public SL_ORDER_DETAIL(
    java.lang.String orderDetailId,
    java.lang.String orderId,
    long ticketId,
    java.lang.String ticketTypeId,
    long validateTimes)
  {
    this();
    this.orderDetailId = orderDetailId;
    this.orderId = orderId;
    this.ticketId = ticketId;
    setTicketIdIsSet(true);
    this.ticketTypeId = ticketTypeId;
    this.validateTimes = validateTimes;
    setValidateTimesIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_ORDER_DETAIL(SL_ORDER_DETAIL other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOrderDetailId()) {
      this.orderDetailId = other.orderDetailId;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetTicketClass()) {
      this.ticketClass = other.ticketClass;
    }
    this.ticketId = other.ticketId;
    if (other.isSetTicketUid()) {
      this.ticketUid = other.ticketUid;
    }
    if (other.isSetTicketTypeId()) {
      this.ticketTypeId = other.ticketTypeId;
    }
    this.validateTimes = other.validateTimes;
    if (other.isSetIdenttyId()) {
      this.identtyId = other.identtyId;
    }
    this.originalPrice = other.originalPrice;
    this.salePrice = other.salePrice;
    if (other.isSetCheckFlag()) {
      this.checkFlag = other.checkFlag;
    }
    if (other.isSetUselessFlag()) {
      this.uselessFlag = other.uselessFlag;
    }
    this.outletId = other.outletId;
    this.clientId = other.clientId;
    if (other.isSetEjectUserId()) {
      this.ejectUserId = other.ejectUserId;
    }
    if (other.isSetEjectTicketStat()) {
      this.ejectTicketStat = other.ejectTicketStat;
    }
    this.ejectTicketTime = other.ejectTicketTime;
    this.versionNo = other.versionNo;
  }

  public SL_ORDER_DETAIL deepCopy() {
    return new SL_ORDER_DETAIL(this);
  }

  @Override
  public void clear() {
    this.orderDetailId = null;
    this.orderId = null;
    this.ticketClass = null;
    setTicketIdIsSet(false);
    this.ticketId = 0;
    this.ticketUid = null;
    this.ticketTypeId = null;
    setValidateTimesIsSet(false);
    this.validateTimes = 0;
    this.identtyId = null;
    setOriginalPriceIsSet(false);
    this.originalPrice = 0;
    setSalePriceIsSet(false);
    this.salePrice = 0;
    this.checkFlag = null;
    this.uselessFlag = null;
    setOutletIdIsSet(false);
    this.outletId = 0;
    setClientIdIsSet(false);
    this.clientId = 0;
    this.ejectUserId = null;
    this.ejectTicketStat = null;
    setEjectTicketTimeIsSet(false);
    this.ejectTicketTime = 0;
    setVersionNoIsSet(false);
    this.versionNo = 0;
  }

  /**
   * 销售明细表ID
   */
  public java.lang.String getOrderDetailId() {
    return this.orderDetailId;
  }

  /**
   * 销售明细表ID
   */
  public SL_ORDER_DETAIL setOrderDetailId(java.lang.String orderDetailId) {
    this.orderDetailId = orderDetailId;
    return this;
  }

  public void unsetOrderDetailId() {
    this.orderDetailId = null;
  }

  /** Returns true if field orderDetailId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderDetailId() {
    return this.orderDetailId != null;
  }

  public void setOrderDetailIdIsSet(boolean value) {
    if (!value) {
      this.orderDetailId = null;
    }
  }

  /**
   * 销售单号
   */
  public java.lang.String getOrderId() {
    return this.orderId;
  }

  /**
   * 销售单号
   */
  public SL_ORDER_DETAIL setOrderId(java.lang.String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 门票类型(1-FRID、2-身份证、3-二维码)
   */
  public java.lang.String getTicketClass() {
    return this.ticketClass;
  }

  /**
   * 门票类型(1-FRID、2-身份证、3-二维码)
   */
  public SL_ORDER_DETAIL setTicketClass(java.lang.String ticketClass) {
    this.ticketClass = ticketClass;
    return this;
  }

  public void unsetTicketClass() {
    this.ticketClass = null;
  }

  /** Returns true if field ticketClass is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketClass() {
    return this.ticketClass != null;
  }

  public void setTicketClassIsSet(boolean value) {
    if (!value) {
      this.ticketClass = null;
    }
  }

  /**
   * 票号
   */
  public long getTicketId() {
    return this.ticketId;
  }

  /**
   * 票号
   */
  public SL_ORDER_DETAIL setTicketId(long ticketId) {
    this.ticketId = ticketId;
    setTicketIdIsSet(true);
    return this;
  }

  public void unsetTicketId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  /** Returns true if field ticketId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKETID_ISSET_ID);
  }

  public void setTicketIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKETID_ISSET_ID, value);
  }

  /**
   * 票据唯一号
   */
  public java.lang.String getTicketUid() {
    return this.ticketUid;
  }

  /**
   * 票据唯一号
   */
  public SL_ORDER_DETAIL setTicketUid(java.lang.String ticketUid) {
    this.ticketUid = ticketUid;
    return this;
  }

  public void unsetTicketUid() {
    this.ticketUid = null;
  }

  /** Returns true if field ticketUid is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketUid() {
    return this.ticketUid != null;
  }

  public void setTicketUidIsSet(boolean value) {
    if (!value) {
      this.ticketUid = null;
    }
  }

  /**
   * 票种编号
   */
  public java.lang.String getTicketTypeId() {
    return this.ticketTypeId;
  }

  /**
   * 票种编号
   */
  public SL_ORDER_DETAIL setTicketTypeId(java.lang.String ticketTypeId) {
    this.ticketTypeId = ticketTypeId;
    return this;
  }

  public void unsetTicketTypeId() {
    this.ticketTypeId = null;
  }

  /** Returns true if field ticketTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetTicketTypeId() {
    return this.ticketTypeId != null;
  }

  public void setTicketTypeIdIsSet(boolean value) {
    if (!value) {
      this.ticketTypeId = null;
    }
  }

  /**
   * 可用次数
   */
  public long getValidateTimes() {
    return this.validateTimes;
  }

  /**
   * 可用次数
   */
  public SL_ORDER_DETAIL setValidateTimes(long validateTimes) {
    this.validateTimes = validateTimes;
    setValidateTimesIsSet(true);
    return this;
  }

  public void unsetValidateTimes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VALIDATETIMES_ISSET_ID);
  }

  /** Returns true if field validateTimes is set (has been assigned a value) and false otherwise */
  public boolean isSetValidateTimes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VALIDATETIMES_ISSET_ID);
  }

  public void setValidateTimesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VALIDATETIMES_ISSET_ID, value);
  }

  /**
   * 身份证号码
   */
  public java.lang.String getIdenttyId() {
    return this.identtyId;
  }

  /**
   * 身份证号码
   */
  public SL_ORDER_DETAIL setIdenttyId(java.lang.String identtyId) {
    this.identtyId = identtyId;
    return this;
  }

  public void unsetIdenttyId() {
    this.identtyId = null;
  }

  /** Returns true if field identtyId is set (has been assigned a value) and false otherwise */
  public boolean isSetIdenttyId() {
    return this.identtyId != null;
  }

  public void setIdenttyIdIsSet(boolean value) {
    if (!value) {
      this.identtyId = null;
    }
  }

  /**
   * 原单价
   */
  public long getOriginalPrice() {
    return this.originalPrice;
  }

  /**
   * 原单价
   */
  public SL_ORDER_DETAIL setOriginalPrice(long originalPrice) {
    this.originalPrice = originalPrice;
    setOriginalPriceIsSet(true);
    return this;
  }

  public void unsetOriginalPrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ORIGINALPRICE_ISSET_ID);
  }

  /** Returns true if field originalPrice is set (has been assigned a value) and false otherwise */
  public boolean isSetOriginalPrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ORIGINALPRICE_ISSET_ID);
  }

  public void setOriginalPriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ORIGINALPRICE_ISSET_ID, value);
  }

  /**
   * 销售价
   */
  public long getSalePrice() {
    return this.salePrice;
  }

  /**
   * 销售价
   */
  public SL_ORDER_DETAIL setSalePrice(long salePrice) {
    this.salePrice = salePrice;
    setSalePriceIsSet(true);
    return this;
  }

  public void unsetSalePrice() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  /** Returns true if field salePrice is set (has been assigned a value) and false otherwise */
  public boolean isSetSalePrice() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SALEPRICE_ISSET_ID);
  }

  public void setSalePriceIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SALEPRICE_ISSET_ID, value);
  }

  /**
   * 是否检票(Y是N否)
   */
  public java.lang.String getCheckFlag() {
    return this.checkFlag;
  }

  /**
   * 是否检票(Y是N否)
   */
  public SL_ORDER_DETAIL setCheckFlag(java.lang.String checkFlag) {
    this.checkFlag = checkFlag;
    return this;
  }

  public void unsetCheckFlag() {
    this.checkFlag = null;
  }

  /** Returns true if field checkFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetCheckFlag() {
    return this.checkFlag != null;
  }

  public void setCheckFlagIsSet(boolean value) {
    if (!value) {
      this.checkFlag = null;
    }
  }

  /**
   * 是否作废(Y是N否)
   */
  public java.lang.String getUselessFlag() {
    return this.uselessFlag;
  }

  /**
   * 是否作废(Y是N否)
   */
  public SL_ORDER_DETAIL setUselessFlag(java.lang.String uselessFlag) {
    this.uselessFlag = uselessFlag;
    return this;
  }

  public void unsetUselessFlag() {
    this.uselessFlag = null;
  }

  /** Returns true if field uselessFlag is set (has been assigned a value) and false otherwise */
  public boolean isSetUselessFlag() {
    return this.uselessFlag != null;
  }

  public void setUselessFlagIsSet(boolean value) {
    if (!value) {
      this.uselessFlag = null;
    }
  }

  /**
   * 出票网点编号
   */
  public long getOutletId() {
    return this.outletId;
  }

  /**
   * 出票网点编号
   */
  public SL_ORDER_DETAIL setOutletId(long outletId) {
    this.outletId = outletId;
    setOutletIdIsSet(true);
    return this;
  }

  public void unsetOutletId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
  public boolean isSetOutletId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLETID_ISSET_ID);
  }

  public void setOutletIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLETID_ISSET_ID, value);
  }

  /**
   * 出票终端编号
   */
  public long getClientId() {
    return this.clientId;
  }

  /**
   * 出票终端编号
   */
  public SL_ORDER_DETAIL setClientId(long clientId) {
    this.clientId = clientId;
    setClientIdIsSet(true);
    return this;
  }

  public void unsetClientId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
  public boolean isSetClientId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
  }

  public void setClientIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
  }

  /**
   * 出票人
   */
  public java.lang.String getEjectUserId() {
    return this.ejectUserId;
  }

  /**
   * 出票人
   */
  public SL_ORDER_DETAIL setEjectUserId(java.lang.String ejectUserId) {
    this.ejectUserId = ejectUserId;
    return this;
  }

  public void unsetEjectUserId() {
    this.ejectUserId = null;
  }

  /** Returns true if field ejectUserId is set (has been assigned a value) and false otherwise */
  public boolean isSetEjectUserId() {
    return this.ejectUserId != null;
  }

  public void setEjectUserIdIsSet(boolean value) {
    if (!value) {
      this.ejectUserId = null;
    }
  }

  /**
   * 出票状态(1-待出票 2-已出票)
   */
  public java.lang.String getEjectTicketStat() {
    return this.ejectTicketStat;
  }

  /**
   * 出票状态(1-待出票 2-已出票)
   */
  public SL_ORDER_DETAIL setEjectTicketStat(java.lang.String ejectTicketStat) {
    this.ejectTicketStat = ejectTicketStat;
    return this;
  }

  public void unsetEjectTicketStat() {
    this.ejectTicketStat = null;
  }

  /** Returns true if field ejectTicketStat is set (has been assigned a value) and false otherwise */
  public boolean isSetEjectTicketStat() {
    return this.ejectTicketStat != null;
  }

  public void setEjectTicketStatIsSet(boolean value) {
    if (!value) {
      this.ejectTicketStat = null;
    }
  }

  /**
   * 出票时间
   */
  public long getEjectTicketTime() {
    return this.ejectTicketTime;
  }

  /**
   * 出票时间
   */
  public SL_ORDER_DETAIL setEjectTicketTime(long ejectTicketTime) {
    this.ejectTicketTime = ejectTicketTime;
    setEjectTicketTimeIsSet(true);
    return this;
  }

  public void unsetEjectTicketTime() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EJECTTICKETTIME_ISSET_ID);
  }

  /** Returns true if field ejectTicketTime is set (has been assigned a value) and false otherwise */
  public boolean isSetEjectTicketTime() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EJECTTICKETTIME_ISSET_ID);
  }

  public void setEjectTicketTimeIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EJECTTICKETTIME_ISSET_ID, value);
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SL_ORDER_DETAIL setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ORDER_DETAIL_ID:
      if (value == null) {
        unsetOrderDetailId();
      } else {
        setOrderDetailId((java.lang.String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((java.lang.String)value);
      }
      break;

    case TICKET_CLASS:
      if (value == null) {
        unsetTicketClass();
      } else {
        setTicketClass((java.lang.String)value);
      }
      break;

    case TICKET_ID:
      if (value == null) {
        unsetTicketId();
      } else {
        setTicketId((java.lang.Long)value);
      }
      break;

    case TICKET_UID:
      if (value == null) {
        unsetTicketUid();
      } else {
        setTicketUid((java.lang.String)value);
      }
      break;

    case TICKET_TYPE_ID:
      if (value == null) {
        unsetTicketTypeId();
      } else {
        setTicketTypeId((java.lang.String)value);
      }
      break;

    case VALIDATE_TIMES:
      if (value == null) {
        unsetValidateTimes();
      } else {
        setValidateTimes((java.lang.Long)value);
      }
      break;

    case IDENTTY_ID:
      if (value == null) {
        unsetIdenttyId();
      } else {
        setIdenttyId((java.lang.String)value);
      }
      break;

    case ORIGINAL_PRICE:
      if (value == null) {
        unsetOriginalPrice();
      } else {
        setOriginalPrice((java.lang.Long)value);
      }
      break;

    case SALE_PRICE:
      if (value == null) {
        unsetSalePrice();
      } else {
        setSalePrice((java.lang.Long)value);
      }
      break;

    case CHECK_FLAG:
      if (value == null) {
        unsetCheckFlag();
      } else {
        setCheckFlag((java.lang.String)value);
      }
      break;

    case USELESS_FLAG:
      if (value == null) {
        unsetUselessFlag();
      } else {
        setUselessFlag((java.lang.String)value);
      }
      break;

    case OUTLET_ID:
      if (value == null) {
        unsetOutletId();
      } else {
        setOutletId((java.lang.Long)value);
      }
      break;

    case CLIENT_ID:
      if (value == null) {
        unsetClientId();
      } else {
        setClientId((java.lang.Long)value);
      }
      break;

    case EJECT_USER_ID:
      if (value == null) {
        unsetEjectUserId();
      } else {
        setEjectUserId((java.lang.String)value);
      }
      break;

    case EJECT_TICKET_STAT:
      if (value == null) {
        unsetEjectTicketStat();
      } else {
        setEjectTicketStat((java.lang.String)value);
      }
      break;

    case EJECT_TICKET_TIME:
      if (value == null) {
        unsetEjectTicketTime();
      } else {
        setEjectTicketTime((java.lang.Long)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ORDER_DETAIL_ID:
      return getOrderDetailId();

    case ORDER_ID:
      return getOrderId();

    case TICKET_CLASS:
      return getTicketClass();

    case TICKET_ID:
      return getTicketId();

    case TICKET_UID:
      return getTicketUid();

    case TICKET_TYPE_ID:
      return getTicketTypeId();

    case VALIDATE_TIMES:
      return getValidateTimes();

    case IDENTTY_ID:
      return getIdenttyId();

    case ORIGINAL_PRICE:
      return getOriginalPrice();

    case SALE_PRICE:
      return getSalePrice();

    case CHECK_FLAG:
      return getCheckFlag();

    case USELESS_FLAG:
      return getUselessFlag();

    case OUTLET_ID:
      return getOutletId();

    case CLIENT_ID:
      return getClientId();

    case EJECT_USER_ID:
      return getEjectUserId();

    case EJECT_TICKET_STAT:
      return getEjectTicketStat();

    case EJECT_TICKET_TIME:
      return getEjectTicketTime();

    case VERSION_NO:
      return getVersionNo();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ORDER_DETAIL_ID:
      return isSetOrderDetailId();
    case ORDER_ID:
      return isSetOrderId();
    case TICKET_CLASS:
      return isSetTicketClass();
    case TICKET_ID:
      return isSetTicketId();
    case TICKET_UID:
      return isSetTicketUid();
    case TICKET_TYPE_ID:
      return isSetTicketTypeId();
    case VALIDATE_TIMES:
      return isSetValidateTimes();
    case IDENTTY_ID:
      return isSetIdenttyId();
    case ORIGINAL_PRICE:
      return isSetOriginalPrice();
    case SALE_PRICE:
      return isSetSalePrice();
    case CHECK_FLAG:
      return isSetCheckFlag();
    case USELESS_FLAG:
      return isSetUselessFlag();
    case OUTLET_ID:
      return isSetOutletId();
    case CLIENT_ID:
      return isSetClientId();
    case EJECT_USER_ID:
      return isSetEjectUserId();
    case EJECT_TICKET_STAT:
      return isSetEjectTicketStat();
    case EJECT_TICKET_TIME:
      return isSetEjectTicketTime();
    case VERSION_NO:
      return isSetVersionNo();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_ORDER_DETAIL)
      return this.equals((SL_ORDER_DETAIL)that);
    return false;
  }

  public boolean equals(SL_ORDER_DETAIL that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_orderDetailId = true && this.isSetOrderDetailId();
    boolean that_present_orderDetailId = true && that.isSetOrderDetailId();
    if (this_present_orderDetailId || that_present_orderDetailId) {
      if (!(this_present_orderDetailId && that_present_orderDetailId))
        return false;
      if (!this.orderDetailId.equals(that.orderDetailId))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_ticketClass = true && this.isSetTicketClass();
    boolean that_present_ticketClass = true && that.isSetTicketClass();
    if (this_present_ticketClass || that_present_ticketClass) {
      if (!(this_present_ticketClass && that_present_ticketClass))
        return false;
      if (!this.ticketClass.equals(that.ticketClass))
        return false;
    }

    boolean this_present_ticketId = true;
    boolean that_present_ticketId = true;
    if (this_present_ticketId || that_present_ticketId) {
      if (!(this_present_ticketId && that_present_ticketId))
        return false;
      if (this.ticketId != that.ticketId)
        return false;
    }

    boolean this_present_ticketUid = true && this.isSetTicketUid();
    boolean that_present_ticketUid = true && that.isSetTicketUid();
    if (this_present_ticketUid || that_present_ticketUid) {
      if (!(this_present_ticketUid && that_present_ticketUid))
        return false;
      if (!this.ticketUid.equals(that.ticketUid))
        return false;
    }

    boolean this_present_ticketTypeId = true && this.isSetTicketTypeId();
    boolean that_present_ticketTypeId = true && that.isSetTicketTypeId();
    if (this_present_ticketTypeId || that_present_ticketTypeId) {
      if (!(this_present_ticketTypeId && that_present_ticketTypeId))
        return false;
      if (!this.ticketTypeId.equals(that.ticketTypeId))
        return false;
    }

    boolean this_present_validateTimes = true;
    boolean that_present_validateTimes = true;
    if (this_present_validateTimes || that_present_validateTimes) {
      if (!(this_present_validateTimes && that_present_validateTimes))
        return false;
      if (this.validateTimes != that.validateTimes)
        return false;
    }

    boolean this_present_identtyId = true && this.isSetIdenttyId();
    boolean that_present_identtyId = true && that.isSetIdenttyId();
    if (this_present_identtyId || that_present_identtyId) {
      if (!(this_present_identtyId && that_present_identtyId))
        return false;
      if (!this.identtyId.equals(that.identtyId))
        return false;
    }

    boolean this_present_originalPrice = true && this.isSetOriginalPrice();
    boolean that_present_originalPrice = true && that.isSetOriginalPrice();
    if (this_present_originalPrice || that_present_originalPrice) {
      if (!(this_present_originalPrice && that_present_originalPrice))
        return false;
      if (this.originalPrice != that.originalPrice)
        return false;
    }

    boolean this_present_salePrice = true && this.isSetSalePrice();
    boolean that_present_salePrice = true && that.isSetSalePrice();
    if (this_present_salePrice || that_present_salePrice) {
      if (!(this_present_salePrice && that_present_salePrice))
        return false;
      if (this.salePrice != that.salePrice)
        return false;
    }

    boolean this_present_checkFlag = true && this.isSetCheckFlag();
    boolean that_present_checkFlag = true && that.isSetCheckFlag();
    if (this_present_checkFlag || that_present_checkFlag) {
      if (!(this_present_checkFlag && that_present_checkFlag))
        return false;
      if (!this.checkFlag.equals(that.checkFlag))
        return false;
    }

    boolean this_present_uselessFlag = true && this.isSetUselessFlag();
    boolean that_present_uselessFlag = true && that.isSetUselessFlag();
    if (this_present_uselessFlag || that_present_uselessFlag) {
      if (!(this_present_uselessFlag && that_present_uselessFlag))
        return false;
      if (!this.uselessFlag.equals(that.uselessFlag))
        return false;
    }

    boolean this_present_outletId = true && this.isSetOutletId();
    boolean that_present_outletId = true && that.isSetOutletId();
    if (this_present_outletId || that_present_outletId) {
      if (!(this_present_outletId && that_present_outletId))
        return false;
      if (this.outletId != that.outletId)
        return false;
    }

    boolean this_present_clientId = true && this.isSetClientId();
    boolean that_present_clientId = true && that.isSetClientId();
    if (this_present_clientId || that_present_clientId) {
      if (!(this_present_clientId && that_present_clientId))
        return false;
      if (this.clientId != that.clientId)
        return false;
    }

    boolean this_present_ejectUserId = true && this.isSetEjectUserId();
    boolean that_present_ejectUserId = true && that.isSetEjectUserId();
    if (this_present_ejectUserId || that_present_ejectUserId) {
      if (!(this_present_ejectUserId && that_present_ejectUserId))
        return false;
      if (!this.ejectUserId.equals(that.ejectUserId))
        return false;
    }

    boolean this_present_ejectTicketStat = true && this.isSetEjectTicketStat();
    boolean that_present_ejectTicketStat = true && that.isSetEjectTicketStat();
    if (this_present_ejectTicketStat || that_present_ejectTicketStat) {
      if (!(this_present_ejectTicketStat && that_present_ejectTicketStat))
        return false;
      if (!this.ejectTicketStat.equals(that.ejectTicketStat))
        return false;
    }

    boolean this_present_ejectTicketTime = true && this.isSetEjectTicketTime();
    boolean that_present_ejectTicketTime = true && that.isSetEjectTicketTime();
    if (this_present_ejectTicketTime || that_present_ejectTicketTime) {
      if (!(this_present_ejectTicketTime && that_present_ejectTicketTime))
        return false;
      if (this.ejectTicketTime != that.ejectTicketTime)
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetOrderDetailId()) ? 131071 : 524287);
    if (isSetOrderDetailId())
      hashCode = hashCode * 8191 + orderDetailId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + orderId.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketClass()) ? 131071 : 524287);
    if (isSetTicketClass())
      hashCode = hashCode * 8191 + ticketClass.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticketId);

    hashCode = hashCode * 8191 + ((isSetTicketUid()) ? 131071 : 524287);
    if (isSetTicketUid())
      hashCode = hashCode * 8191 + ticketUid.hashCode();

    hashCode = hashCode * 8191 + ((isSetTicketTypeId()) ? 131071 : 524287);
    if (isSetTicketTypeId())
      hashCode = hashCode * 8191 + ticketTypeId.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(validateTimes);

    hashCode = hashCode * 8191 + ((isSetIdenttyId()) ? 131071 : 524287);
    if (isSetIdenttyId())
      hashCode = hashCode * 8191 + identtyId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOriginalPrice()) ? 131071 : 524287);
    if (isSetOriginalPrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(originalPrice);

    hashCode = hashCode * 8191 + ((isSetSalePrice()) ? 131071 : 524287);
    if (isSetSalePrice())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(salePrice);

    hashCode = hashCode * 8191 + ((isSetCheckFlag()) ? 131071 : 524287);
    if (isSetCheckFlag())
      hashCode = hashCode * 8191 + checkFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetUselessFlag()) ? 131071 : 524287);
    if (isSetUselessFlag())
      hashCode = hashCode * 8191 + uselessFlag.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutletId()) ? 131071 : 524287);
    if (isSetOutletId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outletId);

    hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
    if (isSetClientId())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clientId);

    hashCode = hashCode * 8191 + ((isSetEjectUserId()) ? 131071 : 524287);
    if (isSetEjectUserId())
      hashCode = hashCode * 8191 + ejectUserId.hashCode();

    hashCode = hashCode * 8191 + ((isSetEjectTicketStat()) ? 131071 : 524287);
    if (isSetEjectTicketStat())
      hashCode = hashCode * 8191 + ejectTicketStat.hashCode();

    hashCode = hashCode * 8191 + ((isSetEjectTicketTime()) ? 131071 : 524287);
    if (isSetEjectTicketTime())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ejectTicketTime);

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    return hashCode;
  }

  @Override
  public int compareTo(SL_ORDER_DETAIL other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetOrderDetailId()).compareTo(other.isSetOrderDetailId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderDetailId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderDetailId, other.orderDetailId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketClass()).compareTo(other.isSetTicketClass());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketClass()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketClass, other.ticketClass);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketId()).compareTo(other.isSetTicketId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketId, other.ticketId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketUid()).compareTo(other.isSetTicketUid());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketUid()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketUid, other.ticketUid);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetTicketTypeId()).compareTo(other.isSetTicketTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTicketTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketTypeId, other.ticketTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetValidateTimes()).compareTo(other.isSetValidateTimes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetValidateTimes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.validateTimes, other.validateTimes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetIdenttyId()).compareTo(other.isSetIdenttyId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetIdenttyId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identtyId, other.identtyId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOriginalPrice()).compareTo(other.isSetOriginalPrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOriginalPrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.originalPrice, other.originalPrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSalePrice()).compareTo(other.isSetSalePrice());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSalePrice()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.salePrice, other.salePrice);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCheckFlag()).compareTo(other.isSetCheckFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCheckFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkFlag, other.checkFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUselessFlag()).compareTo(other.isSetUselessFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUselessFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uselessFlag, other.uselessFlag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutletId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClientId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEjectUserId()).compareTo(other.isSetEjectUserId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEjectUserId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ejectUserId, other.ejectUserId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEjectTicketStat()).compareTo(other.isSetEjectTicketStat());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEjectTicketStat()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ejectTicketStat, other.ejectTicketStat);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetEjectTicketTime()).compareTo(other.isSetEjectTicketTime());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetEjectTicketTime()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ejectTicketTime, other.ejectTicketTime);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_ORDER_DETAIL(");
    boolean first = true;

    sb.append("orderDetailId:");
    if (this.orderDetailId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderDetailId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (isSetTicketClass()) {
      if (!first) sb.append(", ");
      sb.append("ticketClass:");
      if (this.ticketClass == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketClass);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ticketId:");
    sb.append(this.ticketId);
    first = false;
    if (isSetTicketUid()) {
      if (!first) sb.append(", ");
      sb.append("ticketUid:");
      if (this.ticketUid == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketUid);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("ticketTypeId:");
    if (this.ticketTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.ticketTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("validateTimes:");
    sb.append(this.validateTimes);
    first = false;
    if (isSetIdenttyId()) {
      if (!first) sb.append(", ");
      sb.append("identtyId:");
      if (this.identtyId == null) {
        sb.append("null");
      } else {
        sb.append(this.identtyId);
      }
      first = false;
    }
    if (isSetOriginalPrice()) {
      if (!first) sb.append(", ");
      sb.append("originalPrice:");
      sb.append(this.originalPrice);
      first = false;
    }
    if (isSetSalePrice()) {
      if (!first) sb.append(", ");
      sb.append("salePrice:");
      sb.append(this.salePrice);
      first = false;
    }
    if (isSetCheckFlag()) {
      if (!first) sb.append(", ");
      sb.append("checkFlag:");
      if (this.checkFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.checkFlag);
      }
      first = false;
    }
    if (isSetUselessFlag()) {
      if (!first) sb.append(", ");
      sb.append("uselessFlag:");
      if (this.uselessFlag == null) {
        sb.append("null");
      } else {
        sb.append(this.uselessFlag);
      }
      first = false;
    }
    if (isSetOutletId()) {
      if (!first) sb.append(", ");
      sb.append("outletId:");
      sb.append(this.outletId);
      first = false;
    }
    if (isSetClientId()) {
      if (!first) sb.append(", ");
      sb.append("clientId:");
      sb.append(this.clientId);
      first = false;
    }
    if (isSetEjectUserId()) {
      if (!first) sb.append(", ");
      sb.append("ejectUserId:");
      if (this.ejectUserId == null) {
        sb.append("null");
      } else {
        sb.append(this.ejectUserId);
      }
      first = false;
    }
    if (isSetEjectTicketStat()) {
      if (!first) sb.append(", ");
      sb.append("ejectTicketStat:");
      if (this.ejectTicketStat == null) {
        sb.append("null");
      } else {
        sb.append(this.ejectTicketStat);
      }
      first = false;
    }
    if (isSetEjectTicketTime()) {
      if (!first) sb.append(", ");
      sb.append("ejectTicketTime:");
      sb.append(this.ejectTicketTime);
      first = false;
    }
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (orderDetailId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderDetailId' was not present! Struct: " + toString());
    }
    if (orderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'ticketId' because it's a primitive and you chose the non-beans generator.
    if (ticketTypeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketTypeId' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'validateTimes' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_ORDER_DETAILStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_ORDER_DETAILStandardScheme getScheme() {
      return new SL_ORDER_DETAILStandardScheme();
    }
  }

  private static class SL_ORDER_DETAILStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_ORDER_DETAIL> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_ORDER_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ORDER_DETAIL_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderDetailId = iprot.readString();
              struct.setOrderDetailIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TICKET_CLASS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketClass = iprot.readString();
              struct.setTicketClassIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TICKET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ticketId = iprot.readI64();
              struct.setTicketIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // TICKET_UID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketUid = iprot.readString();
              struct.setTicketUidIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TICKET_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ticketTypeId = iprot.readString();
              struct.setTicketTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // VALIDATE_TIMES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.validateTimes = iprot.readI64();
              struct.setValidateTimesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IDENTTY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.identtyId = iprot.readString();
              struct.setIdenttyIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // ORIGINAL_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.originalPrice = iprot.readI64();
              struct.setOriginalPriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SALE_PRICE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.salePrice = iprot.readI64();
              struct.setSalePriceIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CHECK_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.checkFlag = iprot.readString();
              struct.setCheckFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // USELESS_FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.uselessFlag = iprot.readString();
              struct.setUselessFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // OUTLET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.outletId = iprot.readI64();
              struct.setOutletIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // CLIENT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.clientId = iprot.readI64();
              struct.setClientIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // EJECT_USER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ejectUserId = iprot.readString();
              struct.setEjectUserIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 16: // EJECT_TICKET_STAT
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.ejectTicketStat = iprot.readString();
              struct.setEjectTicketStatIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 17: // EJECT_TICKET_TIME
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.ejectTicketTime = iprot.readI64();
              struct.setEjectTicketTimeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 18: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetTicketId()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'ticketId' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetValidateTimes()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'validateTimes' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_ORDER_DETAIL struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.orderDetailId != null) {
        oprot.writeFieldBegin(ORDER_DETAIL_ID_FIELD_DESC);
        oprot.writeString(struct.orderDetailId);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.ticketClass != null) {
        if (struct.isSetTicketClass()) {
          oprot.writeFieldBegin(TICKET_CLASS_FIELD_DESC);
          oprot.writeString(struct.ticketClass);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
      oprot.writeI64(struct.ticketId);
      oprot.writeFieldEnd();
      if (struct.ticketUid != null) {
        if (struct.isSetTicketUid()) {
          oprot.writeFieldBegin(TICKET_UID_FIELD_DESC);
          oprot.writeString(struct.ticketUid);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ticketTypeId != null) {
        oprot.writeFieldBegin(TICKET_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.ticketTypeId);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VALIDATE_TIMES_FIELD_DESC);
      oprot.writeI64(struct.validateTimes);
      oprot.writeFieldEnd();
      if (struct.identtyId != null) {
        if (struct.isSetIdenttyId()) {
          oprot.writeFieldBegin(IDENTTY_ID_FIELD_DESC);
          oprot.writeString(struct.identtyId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOriginalPrice()) {
        oprot.writeFieldBegin(ORIGINAL_PRICE_FIELD_DESC);
        oprot.writeI64(struct.originalPrice);
        oprot.writeFieldEnd();
      }
      if (struct.isSetSalePrice()) {
        oprot.writeFieldBegin(SALE_PRICE_FIELD_DESC);
        oprot.writeI64(struct.salePrice);
        oprot.writeFieldEnd();
      }
      if (struct.checkFlag != null) {
        if (struct.isSetCheckFlag()) {
          oprot.writeFieldBegin(CHECK_FLAG_FIELD_DESC);
          oprot.writeString(struct.checkFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.uselessFlag != null) {
        if (struct.isSetUselessFlag()) {
          oprot.writeFieldBegin(USELESS_FLAG_FIELD_DESC);
          oprot.writeString(struct.uselessFlag);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetOutletId()) {
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outletId);
        oprot.writeFieldEnd();
      }
      if (struct.isSetClientId()) {
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeI64(struct.clientId);
        oprot.writeFieldEnd();
      }
      if (struct.ejectUserId != null) {
        if (struct.isSetEjectUserId()) {
          oprot.writeFieldBegin(EJECT_USER_ID_FIELD_DESC);
          oprot.writeString(struct.ejectUserId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.ejectTicketStat != null) {
        if (struct.isSetEjectTicketStat()) {
          oprot.writeFieldBegin(EJECT_TICKET_STAT_FIELD_DESC);
          oprot.writeString(struct.ejectTicketStat);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetEjectTicketTime()) {
        oprot.writeFieldBegin(EJECT_TICKET_TIME_FIELD_DESC);
        oprot.writeI64(struct.ejectTicketTime);
        oprot.writeFieldEnd();
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_ORDER_DETAILTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_ORDER_DETAILTupleScheme getScheme() {
      return new SL_ORDER_DETAILTupleScheme();
    }
  }

  private static class SL_ORDER_DETAILTupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_ORDER_DETAIL> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_ORDER_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.orderDetailId);
      oprot.writeString(struct.orderId);
      oprot.writeI64(struct.ticketId);
      oprot.writeString(struct.ticketTypeId);
      oprot.writeI64(struct.validateTimes);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTicketClass()) {
        optionals.set(0);
      }
      if (struct.isSetTicketUid()) {
        optionals.set(1);
      }
      if (struct.isSetIdenttyId()) {
        optionals.set(2);
      }
      if (struct.isSetOriginalPrice()) {
        optionals.set(3);
      }
      if (struct.isSetSalePrice()) {
        optionals.set(4);
      }
      if (struct.isSetCheckFlag()) {
        optionals.set(5);
      }
      if (struct.isSetUselessFlag()) {
        optionals.set(6);
      }
      if (struct.isSetOutletId()) {
        optionals.set(7);
      }
      if (struct.isSetClientId()) {
        optionals.set(8);
      }
      if (struct.isSetEjectUserId()) {
        optionals.set(9);
      }
      if (struct.isSetEjectTicketStat()) {
        optionals.set(10);
      }
      if (struct.isSetEjectTicketTime()) {
        optionals.set(11);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(12);
      }
      oprot.writeBitSet(optionals, 13);
      if (struct.isSetTicketClass()) {
        oprot.writeString(struct.ticketClass);
      }
      if (struct.isSetTicketUid()) {
        oprot.writeString(struct.ticketUid);
      }
      if (struct.isSetIdenttyId()) {
        oprot.writeString(struct.identtyId);
      }
      if (struct.isSetOriginalPrice()) {
        oprot.writeI64(struct.originalPrice);
      }
      if (struct.isSetSalePrice()) {
        oprot.writeI64(struct.salePrice);
      }
      if (struct.isSetCheckFlag()) {
        oprot.writeString(struct.checkFlag);
      }
      if (struct.isSetUselessFlag()) {
        oprot.writeString(struct.uselessFlag);
      }
      if (struct.isSetOutletId()) {
        oprot.writeI64(struct.outletId);
      }
      if (struct.isSetClientId()) {
        oprot.writeI64(struct.clientId);
      }
      if (struct.isSetEjectUserId()) {
        oprot.writeString(struct.ejectUserId);
      }
      if (struct.isSetEjectTicketStat()) {
        oprot.writeString(struct.ejectTicketStat);
      }
      if (struct.isSetEjectTicketTime()) {
        oprot.writeI64(struct.ejectTicketTime);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_ORDER_DETAIL struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.orderDetailId = iprot.readString();
      struct.setOrderDetailIdIsSet(true);
      struct.orderId = iprot.readString();
      struct.setOrderIdIsSet(true);
      struct.ticketId = iprot.readI64();
      struct.setTicketIdIsSet(true);
      struct.ticketTypeId = iprot.readString();
      struct.setTicketTypeIdIsSet(true);
      struct.validateTimes = iprot.readI64();
      struct.setValidateTimesIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(13);
      if (incoming.get(0)) {
        struct.ticketClass = iprot.readString();
        struct.setTicketClassIsSet(true);
      }
      if (incoming.get(1)) {
        struct.ticketUid = iprot.readString();
        struct.setTicketUidIsSet(true);
      }
      if (incoming.get(2)) {
        struct.identtyId = iprot.readString();
        struct.setIdenttyIdIsSet(true);
      }
      if (incoming.get(3)) {
        struct.originalPrice = iprot.readI64();
        struct.setOriginalPriceIsSet(true);
      }
      if (incoming.get(4)) {
        struct.salePrice = iprot.readI64();
        struct.setSalePriceIsSet(true);
      }
      if (incoming.get(5)) {
        struct.checkFlag = iprot.readString();
        struct.setCheckFlagIsSet(true);
      }
      if (incoming.get(6)) {
        struct.uselessFlag = iprot.readString();
        struct.setUselessFlagIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outletId = iprot.readI64();
        struct.setOutletIdIsSet(true);
      }
      if (incoming.get(8)) {
        struct.clientId = iprot.readI64();
        struct.setClientIdIsSet(true);
      }
      if (incoming.get(9)) {
        struct.ejectUserId = iprot.readString();
        struct.setEjectUserIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.ejectTicketStat = iprot.readString();
        struct.setEjectTicketStatIsSet(true);
      }
      if (incoming.get(11)) {
        struct.ejectTicketTime = iprot.readI64();
        struct.setEjectTicketTimeIsSet(true);
      }
      if (incoming.get(12)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

