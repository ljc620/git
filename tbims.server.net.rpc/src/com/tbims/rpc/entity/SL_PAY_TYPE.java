/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.entity;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * 支付方式明细表
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-21")
public class SL_PAY_TYPE implements org.apache.thrift.TBase<SL_PAY_TYPE, SL_PAY_TYPE._Fields>, java.io.Serializable, Cloneable, Comparable<SL_PAY_TYPE> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("SL_PAY_TYPE");

  private static final org.apache.thrift.protocol.TField PAY_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("payTypeId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("orderId", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField PAY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("payType", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField AMT_FIELD_DESC = new org.apache.thrift.protocol.TField("amt", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField PAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("payId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("versionNo", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField PAYMENT_CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("paymentCode", org.apache.thrift.protocol.TType.STRING, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new SL_PAY_TYPEStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new SL_PAY_TYPETupleSchemeFactory();

  /**
   * 订单支付方式明细表id
   */
  public java.lang.String payTypeId; // required
  /**
   * 销售单号
   */
  public java.lang.String orderId; // required
  /**
   * 支付方式
   */
  public java.lang.String payType; // required
  /**
   * 金额
   */
  public long amt; // required
  /**
   * 第三方支付单号
   */
  public java.lang.String payId; // optional
  /**
   * 版本号
   */
  public long versionNo; // optional
  /**
   * 付款码
   */
  public java.lang.String paymentCode; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    /**
     * 订单支付方式明细表id
     */
    PAY_TYPE_ID((short)1, "payTypeId"),
    /**
     * 销售单号
     */
    ORDER_ID((short)2, "orderId"),
    /**
     * 支付方式
     */
    PAY_TYPE((short)3, "payType"),
    /**
     * 金额
     */
    AMT((short)4, "amt"),
    /**
     * 第三方支付单号
     */
    PAY_ID((short)5, "payId"),
    /**
     * 版本号
     */
    VERSION_NO((short)6, "versionNo"),
    /**
     * 付款码
     */
    PAYMENT_CODE((short)7, "paymentCode");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // PAY_TYPE_ID
          return PAY_TYPE_ID;
        case 2: // ORDER_ID
          return ORDER_ID;
        case 3: // PAY_TYPE
          return PAY_TYPE;
        case 4: // AMT
          return AMT;
        case 5: // PAY_ID
          return PAY_ID;
        case 6: // VERSION_NO
          return VERSION_NO;
        case 7: // PAYMENT_CODE
          return PAYMENT_CODE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __AMT_ISSET_ID = 0;
  private static final int __VERSIONNO_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.PAY_ID,_Fields.VERSION_NO,_Fields.PAYMENT_CODE};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.PAY_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("payTypeId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("orderId", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PAY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("payType", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.AMT, new org.apache.thrift.meta_data.FieldMetaData("amt", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAY_ID, new org.apache.thrift.meta_data.FieldMetaData("payId", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("versionNo", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PAYMENT_CODE, new org.apache.thrift.meta_data.FieldMetaData("paymentCode", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(SL_PAY_TYPE.class, metaDataMap);
  }

  public SL_PAY_TYPE() {
  }

  public SL_PAY_TYPE(
    java.lang.String payTypeId,
    java.lang.String orderId,
    java.lang.String payType,
    long amt)
  {
    this();
    this.payTypeId = payTypeId;
    this.orderId = orderId;
    this.payType = payType;
    this.amt = amt;
    setAmtIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public SL_PAY_TYPE(SL_PAY_TYPE other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetPayTypeId()) {
      this.payTypeId = other.payTypeId;
    }
    if (other.isSetOrderId()) {
      this.orderId = other.orderId;
    }
    if (other.isSetPayType()) {
      this.payType = other.payType;
    }
    this.amt = other.amt;
    if (other.isSetPayId()) {
      this.payId = other.payId;
    }
    this.versionNo = other.versionNo;
    if (other.isSetPaymentCode()) {
      this.paymentCode = other.paymentCode;
    }
  }

  public SL_PAY_TYPE deepCopy() {
    return new SL_PAY_TYPE(this);
  }

  @Override
  public void clear() {
    this.payTypeId = null;
    this.orderId = null;
    this.payType = null;
    setAmtIsSet(false);
    this.amt = 0;
    this.payId = null;
    setVersionNoIsSet(false);
    this.versionNo = 0;
    this.paymentCode = null;
  }

  /**
   * 订单支付方式明细表id
   */
  public java.lang.String getPayTypeId() {
    return this.payTypeId;
  }

  /**
   * 订单支付方式明细表id
   */
  public SL_PAY_TYPE setPayTypeId(java.lang.String payTypeId) {
    this.payTypeId = payTypeId;
    return this;
  }

  public void unsetPayTypeId() {
    this.payTypeId = null;
  }

  /** Returns true if field payTypeId is set (has been assigned a value) and false otherwise */
  public boolean isSetPayTypeId() {
    return this.payTypeId != null;
  }

  public void setPayTypeIdIsSet(boolean value) {
    if (!value) {
      this.payTypeId = null;
    }
  }

  /**
   * 销售单号
   */
  public java.lang.String getOrderId() {
    return this.orderId;
  }

  /**
   * 销售单号
   */
  public SL_PAY_TYPE setOrderId(java.lang.String orderId) {
    this.orderId = orderId;
    return this;
  }

  public void unsetOrderId() {
    this.orderId = null;
  }

  /** Returns true if field orderId is set (has been assigned a value) and false otherwise */
  public boolean isSetOrderId() {
    return this.orderId != null;
  }

  public void setOrderIdIsSet(boolean value) {
    if (!value) {
      this.orderId = null;
    }
  }

  /**
   * 支付方式
   */
  public java.lang.String getPayType() {
    return this.payType;
  }

  /**
   * 支付方式
   */
  public SL_PAY_TYPE setPayType(java.lang.String payType) {
    this.payType = payType;
    return this;
  }

  public void unsetPayType() {
    this.payType = null;
  }

  /** Returns true if field payType is set (has been assigned a value) and false otherwise */
  public boolean isSetPayType() {
    return this.payType != null;
  }

  public void setPayTypeIsSet(boolean value) {
    if (!value) {
      this.payType = null;
    }
  }

  /**
   * 金额
   */
  public long getAmt() {
    return this.amt;
  }

  /**
   * 金额
   */
  public SL_PAY_TYPE setAmt(long amt) {
    this.amt = amt;
    setAmtIsSet(true);
    return this;
  }

  public void unsetAmt() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __AMT_ISSET_ID);
  }

  /** Returns true if field amt is set (has been assigned a value) and false otherwise */
  public boolean isSetAmt() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __AMT_ISSET_ID);
  }

  public void setAmtIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __AMT_ISSET_ID, value);
  }

  /**
   * 第三方支付单号
   */
  public java.lang.String getPayId() {
    return this.payId;
  }

  /**
   * 第三方支付单号
   */
  public SL_PAY_TYPE setPayId(java.lang.String payId) {
    this.payId = payId;
    return this;
  }

  public void unsetPayId() {
    this.payId = null;
  }

  /** Returns true if field payId is set (has been assigned a value) and false otherwise */
  public boolean isSetPayId() {
    return this.payId != null;
  }

  public void setPayIdIsSet(boolean value) {
    if (!value) {
      this.payId = null;
    }
  }

  /**
   * 版本号
   */
  public long getVersionNo() {
    return this.versionNo;
  }

  /**
   * 版本号
   */
  public SL_PAY_TYPE setVersionNo(long versionNo) {
    this.versionNo = versionNo;
    setVersionNoIsSet(true);
    return this;
  }

  public void unsetVersionNo() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  /** Returns true if field versionNo is set (has been assigned a value) and false otherwise */
  public boolean isSetVersionNo() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSIONNO_ISSET_ID);
  }

  public void setVersionNoIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSIONNO_ISSET_ID, value);
  }

  /**
   * 付款码
   */
  public java.lang.String getPaymentCode() {
    return this.paymentCode;
  }

  /**
   * 付款码
   */
  public SL_PAY_TYPE setPaymentCode(java.lang.String paymentCode) {
    this.paymentCode = paymentCode;
    return this;
  }

  public void unsetPaymentCode() {
    this.paymentCode = null;
  }

  /** Returns true if field paymentCode is set (has been assigned a value) and false otherwise */
  public boolean isSetPaymentCode() {
    return this.paymentCode != null;
  }

  public void setPaymentCodeIsSet(boolean value) {
    if (!value) {
      this.paymentCode = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case PAY_TYPE_ID:
      if (value == null) {
        unsetPayTypeId();
      } else {
        setPayTypeId((java.lang.String)value);
      }
      break;

    case ORDER_ID:
      if (value == null) {
        unsetOrderId();
      } else {
        setOrderId((java.lang.String)value);
      }
      break;

    case PAY_TYPE:
      if (value == null) {
        unsetPayType();
      } else {
        setPayType((java.lang.String)value);
      }
      break;

    case AMT:
      if (value == null) {
        unsetAmt();
      } else {
        setAmt((java.lang.Long)value);
      }
      break;

    case PAY_ID:
      if (value == null) {
        unsetPayId();
      } else {
        setPayId((java.lang.String)value);
      }
      break;

    case VERSION_NO:
      if (value == null) {
        unsetVersionNo();
      } else {
        setVersionNo((java.lang.Long)value);
      }
      break;

    case PAYMENT_CODE:
      if (value == null) {
        unsetPaymentCode();
      } else {
        setPaymentCode((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case PAY_TYPE_ID:
      return getPayTypeId();

    case ORDER_ID:
      return getOrderId();

    case PAY_TYPE:
      return getPayType();

    case AMT:
      return getAmt();

    case PAY_ID:
      return getPayId();

    case VERSION_NO:
      return getVersionNo();

    case PAYMENT_CODE:
      return getPaymentCode();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case PAY_TYPE_ID:
      return isSetPayTypeId();
    case ORDER_ID:
      return isSetOrderId();
    case PAY_TYPE:
      return isSetPayType();
    case AMT:
      return isSetAmt();
    case PAY_ID:
      return isSetPayId();
    case VERSION_NO:
      return isSetVersionNo();
    case PAYMENT_CODE:
      return isSetPaymentCode();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof SL_PAY_TYPE)
      return this.equals((SL_PAY_TYPE)that);
    return false;
  }

  public boolean equals(SL_PAY_TYPE that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_payTypeId = true && this.isSetPayTypeId();
    boolean that_present_payTypeId = true && that.isSetPayTypeId();
    if (this_present_payTypeId || that_present_payTypeId) {
      if (!(this_present_payTypeId && that_present_payTypeId))
        return false;
      if (!this.payTypeId.equals(that.payTypeId))
        return false;
    }

    boolean this_present_orderId = true && this.isSetOrderId();
    boolean that_present_orderId = true && that.isSetOrderId();
    if (this_present_orderId || that_present_orderId) {
      if (!(this_present_orderId && that_present_orderId))
        return false;
      if (!this.orderId.equals(that.orderId))
        return false;
    }

    boolean this_present_payType = true && this.isSetPayType();
    boolean that_present_payType = true && that.isSetPayType();
    if (this_present_payType || that_present_payType) {
      if (!(this_present_payType && that_present_payType))
        return false;
      if (!this.payType.equals(that.payType))
        return false;
    }

    boolean this_present_amt = true;
    boolean that_present_amt = true;
    if (this_present_amt || that_present_amt) {
      if (!(this_present_amt && that_present_amt))
        return false;
      if (this.amt != that.amt)
        return false;
    }

    boolean this_present_payId = true && this.isSetPayId();
    boolean that_present_payId = true && that.isSetPayId();
    if (this_present_payId || that_present_payId) {
      if (!(this_present_payId && that_present_payId))
        return false;
      if (!this.payId.equals(that.payId))
        return false;
    }

    boolean this_present_versionNo = true && this.isSetVersionNo();
    boolean that_present_versionNo = true && that.isSetVersionNo();
    if (this_present_versionNo || that_present_versionNo) {
      if (!(this_present_versionNo && that_present_versionNo))
        return false;
      if (this.versionNo != that.versionNo)
        return false;
    }

    boolean this_present_paymentCode = true && this.isSetPaymentCode();
    boolean that_present_paymentCode = true && that.isSetPaymentCode();
    if (this_present_paymentCode || that_present_paymentCode) {
      if (!(this_present_paymentCode && that_present_paymentCode))
        return false;
      if (!this.paymentCode.equals(that.paymentCode))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetPayTypeId()) ? 131071 : 524287);
    if (isSetPayTypeId())
      hashCode = hashCode * 8191 + payTypeId.hashCode();

    hashCode = hashCode * 8191 + ((isSetOrderId()) ? 131071 : 524287);
    if (isSetOrderId())
      hashCode = hashCode * 8191 + orderId.hashCode();

    hashCode = hashCode * 8191 + ((isSetPayType()) ? 131071 : 524287);
    if (isSetPayType())
      hashCode = hashCode * 8191 + payType.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(amt);

    hashCode = hashCode * 8191 + ((isSetPayId()) ? 131071 : 524287);
    if (isSetPayId())
      hashCode = hashCode * 8191 + payId.hashCode();

    hashCode = hashCode * 8191 + ((isSetVersionNo()) ? 131071 : 524287);
    if (isSetVersionNo())
      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(versionNo);

    hashCode = hashCode * 8191 + ((isSetPaymentCode()) ? 131071 : 524287);
    if (isSetPaymentCode())
      hashCode = hashCode * 8191 + paymentCode.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(SL_PAY_TYPE other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetPayTypeId()).compareTo(other.isSetPayTypeId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayTypeId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payTypeId, other.payTypeId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOrderId()).compareTo(other.isSetOrderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOrderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orderId, other.orderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayType()).compareTo(other.isSetPayType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payType, other.payType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetAmt()).compareTo(other.isSetAmt());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAmt()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.amt, other.amt);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPayId()).compareTo(other.isSetPayId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPayId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.payId, other.payId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVersionNo()).compareTo(other.isSetVersionNo());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVersionNo()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.versionNo, other.versionNo);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPaymentCode()).compareTo(other.isSetPaymentCode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPaymentCode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.paymentCode, other.paymentCode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("SL_PAY_TYPE(");
    boolean first = true;

    sb.append("payTypeId:");
    if (this.payTypeId == null) {
      sb.append("null");
    } else {
      sb.append(this.payTypeId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("orderId:");
    if (this.orderId == null) {
      sb.append("null");
    } else {
      sb.append(this.orderId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("payType:");
    if (this.payType == null) {
      sb.append("null");
    } else {
      sb.append(this.payType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("amt:");
    sb.append(this.amt);
    first = false;
    if (isSetPayId()) {
      if (!first) sb.append(", ");
      sb.append("payId:");
      if (this.payId == null) {
        sb.append("null");
      } else {
        sb.append(this.payId);
      }
      first = false;
    }
    if (isSetVersionNo()) {
      if (!first) sb.append(", ");
      sb.append("versionNo:");
      sb.append(this.versionNo);
      first = false;
    }
    if (isSetPaymentCode()) {
      if (!first) sb.append(", ");
      sb.append("paymentCode:");
      if (this.paymentCode == null) {
        sb.append("null");
      } else {
        sb.append(this.paymentCode);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (payTypeId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'payTypeId' was not present! Struct: " + toString());
    }
    if (orderId == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'orderId' was not present! Struct: " + toString());
    }
    if (payType == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'payType' was not present! Struct: " + toString());
    }
    // alas, we cannot check 'amt' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class SL_PAY_TYPEStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_PAY_TYPEStandardScheme getScheme() {
      return new SL_PAY_TYPEStandardScheme();
    }
  }

  private static class SL_PAY_TYPEStandardScheme extends org.apache.thrift.scheme.StandardScheme<SL_PAY_TYPE> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, SL_PAY_TYPE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // PAY_TYPE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payTypeId = iprot.readString();
              struct.setPayTypeIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ORDER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.orderId = iprot.readString();
              struct.setOrderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // PAY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payType = iprot.readString();
              struct.setPayTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // AMT
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.amt = iprot.readI64();
              struct.setAmtIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PAY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.payId = iprot.readString();
              struct.setPayIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VERSION_NO
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.versionNo = iprot.readI64();
              struct.setVersionNoIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // PAYMENT_CODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.paymentCode = iprot.readString();
              struct.setPaymentCodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetAmt()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'amt' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, SL_PAY_TYPE struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.payTypeId != null) {
        oprot.writeFieldBegin(PAY_TYPE_ID_FIELD_DESC);
        oprot.writeString(struct.payTypeId);
        oprot.writeFieldEnd();
      }
      if (struct.orderId != null) {
        oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
        oprot.writeString(struct.orderId);
        oprot.writeFieldEnd();
      }
      if (struct.payType != null) {
        oprot.writeFieldBegin(PAY_TYPE_FIELD_DESC);
        oprot.writeString(struct.payType);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(AMT_FIELD_DESC);
      oprot.writeI64(struct.amt);
      oprot.writeFieldEnd();
      if (struct.payId != null) {
        if (struct.isSetPayId()) {
          oprot.writeFieldBegin(PAY_ID_FIELD_DESC);
          oprot.writeString(struct.payId);
          oprot.writeFieldEnd();
        }
      }
      if (struct.isSetVersionNo()) {
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.versionNo);
        oprot.writeFieldEnd();
      }
      if (struct.paymentCode != null) {
        if (struct.isSetPaymentCode()) {
          oprot.writeFieldBegin(PAYMENT_CODE_FIELD_DESC);
          oprot.writeString(struct.paymentCode);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class SL_PAY_TYPETupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public SL_PAY_TYPETupleScheme getScheme() {
      return new SL_PAY_TYPETupleScheme();
    }
  }

  private static class SL_PAY_TYPETupleScheme extends org.apache.thrift.scheme.TupleScheme<SL_PAY_TYPE> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, SL_PAY_TYPE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      oprot.writeString(struct.payTypeId);
      oprot.writeString(struct.orderId);
      oprot.writeString(struct.payType);
      oprot.writeI64(struct.amt);
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetPayId()) {
        optionals.set(0);
      }
      if (struct.isSetVersionNo()) {
        optionals.set(1);
      }
      if (struct.isSetPaymentCode()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetPayId()) {
        oprot.writeString(struct.payId);
      }
      if (struct.isSetVersionNo()) {
        oprot.writeI64(struct.versionNo);
      }
      if (struct.isSetPaymentCode()) {
        oprot.writeString(struct.paymentCode);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, SL_PAY_TYPE struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      struct.payTypeId = iprot.readString();
      struct.setPayTypeIdIsSet(true);
      struct.orderId = iprot.readString();
      struct.setOrderIdIsSet(true);
      struct.payType = iprot.readString();
      struct.setPayTypeIsSet(true);
      struct.amt = iprot.readI64();
      struct.setAmtIsSet(true);
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.payId = iprot.readString();
        struct.setPayIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.versionNo = iprot.readI64();
        struct.setVersionNoIsSet(true);
      }
      if (incoming.get(2)) {
        struct.paymentCode = iprot.readString();
        struct.setPaymentCodeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

