/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-29")
public class DataSyncService {

  /**
   * 基础数据服务接口
   */
  public interface Iface {

    /**
     * 闸机信息上传
     * 
     * @param auth 通用参数
     * 
     * @param sys_client 闸机信息
     */
    public boolean gateStateSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_CLIENT sys_client) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 自助售票机状态和票数同步,联机上传
     * 
     * @param auth 通用参数
     * 
     * @param state 状态
     * 
     * @param ticket_num 余票数量(自助售票机用) A:数量,B:数量
     */
    public boolean ejectTicketStatSync(com.tbims.rpc.entity.AUTHORIZATION auth, int state, java.lang.String ticket_num) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 员工卡登记表下载
     * 增量下载
     * @return 员工卡信息
     * 
     * @param auth 通用参数
     * 
     * @param version_no 版本号
     */
    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> empRegisterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 查询员工卡登记表
     * @return 员工卡信息
     * 
     * @param auth 通用参数
     * 
     * @param sys_emp_register 员工卡信息
     */
    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> queryEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 保存或更新员工卡登记表
     * @return 员工卡信息
     * 
     * @param auth 通用参数
     * 
     * @param sys_emp_register 员工卡信息
     */
    public boolean saveOrUpdateEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 状态启用或禁用
     * 
     * @param auth 通用参数
     * 
     * @param empId 员工编号
     * 
     * @param stat 状态
     */
    public boolean empRegisterStat(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String stat) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 补卡更新芯片ID
     * 
     * @param auth 通用参数
     * 
     * @param empId 员工编号
     * 
     * @param chip_id 芯片ID
     */
    public boolean empRegisterChipId(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String chip_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 票种表下载
     * 全量下载，版本号预留
     * @return 票种信息
     * 
     * @param auth 通用参数
     * 
     * @param version_no 版本号
     */
    public java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> ticketTypeSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 场馆表下载
     * 全量下载
     * @return 场馆表
     * 
     * @param auth 通用参数
     */
    public java.util.List<com.tbims.rpc.entity.SYS_VENUE> sysVenueSnyc(com.tbims.rpc.entity.AUTHORIZATION auth) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 黑名单表下载
     * 增量下载
     * @return 黑名单信息
     * 
     * @param auth 通用参数
     * 
     * @param version_no 版本号
     */
    public java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> blacklistSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 字典表
     * 全量下载，版本号预留
     * @return 字典信息
     * 
     * @param auth 通用参数
     * 
     * @param version_no 版本号
     */
    public java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> sysDictionarySnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 参数表
     * 全量下载，版本号预留
     * @return 参数表
     * 
     * @param auth 通用参数
     * 
     * @param version_no 版本号
     */
    public java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> sysParemeterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 预售期信息查询
     * @return 预售期信息
     * 
     * @param auth 通用参数
     * 
     * @param version_no 版本号
     */
    public java.util.List<com.tbims.rpc.entity.SL_PERIOD> salePeriodQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 获取服务器时间,精确到秒
     * 
     * @param auth 通用参数
     */
    public long getSystemDateTime(com.tbims.rpc.entity.AUTHORIZATION auth) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 查询、同步终端信息
     * 
     * @param auth 通用参数
     * 
     * @param clientId 终端编号
     * 
     * @param clientName
     * @param clientType 终端类型
     * 
     * @param regionIds 类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔
     */
    public java.util.List<com.tbims.rpc.entity.SYS_CLIENT> queryClient(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String clientId, java.lang.String clientName, java.lang.String clientType, java.lang.String regionIds) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 查询废票明细
     * @return 废票明细
     * 
     * @param auth 通用参数
     * 
     * @param outlet_id 网点编号
     */
    public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> queryUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 售票机补票查询(购票)
     * @return 售票信息
     * 
     * @param auth 通用参数
     * 
     * @param pay_id 第三方支付单号
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> querySaleSupplyTicketG(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 售票机补票查询(取票)
     * @return 售票信息
     * 
     * @param auth 通用参数
     * 
     * @param pay_id 第三方支付单号
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> querySaleSupplyTicketQ(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 客户端日志上传
     * 
     * @param auth 通用参数
     * 
     * @param fileName 文件名
     * 
     * @param file 文件
     */
    public boolean uploadClientLog(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String fileName, java.nio.ByteBuffer file) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void gateStateSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_CLIENT sys_client, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ejectTicketStatSync(com.tbims.rpc.entity.AUTHORIZATION auth, int state, java.lang.String ticket_num, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void empRegisterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler) throws org.apache.thrift.TException;

    public void queryEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler) throws org.apache.thrift.TException;

    public void saveOrUpdateEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void empRegisterStat(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String stat, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void empRegisterChipId(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String chip_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ticketTypeSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>> resultHandler) throws org.apache.thrift.TException;

    public void sysVenueSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_VENUE>> resultHandler) throws org.apache.thrift.TException;

    public void blacklistSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>> resultHandler) throws org.apache.thrift.TException;

    public void sysDictionarySnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>> resultHandler) throws org.apache.thrift.TException;

    public void sysParemeterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>> resultHandler) throws org.apache.thrift.TException;

    public void salePeriodQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_PERIOD>> resultHandler) throws org.apache.thrift.TException;

    public void getSystemDateTime(com.tbims.rpc.entity.AUTHORIZATION auth, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException;

    public void queryClient(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String clientId, java.lang.String clientName, java.lang.String clientType, java.lang.String regionIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_CLIENT>> resultHandler) throws org.apache.thrift.TException;

    public void queryUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>> resultHandler) throws org.apache.thrift.TException;

    public void querySaleSupplyTicketG(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>> resultHandler) throws org.apache.thrift.TException;

    public void querySaleSupplyTicketQ(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler) throws org.apache.thrift.TException;

    public void uploadClientLog(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String fileName, java.nio.ByteBuffer file, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public boolean gateStateSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_CLIENT sys_client) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_gateStateSnyc(auth, sys_client);
      return recv_gateStateSnyc();
    }

    public void send_gateStateSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_CLIENT sys_client) throws org.apache.thrift.TException
    {
      gateStateSnyc_args args = new gateStateSnyc_args();
      args.setAuth(auth);
      args.setSys_client(sys_client);
      sendBase("gateStateSnyc", args);
    }

    public boolean recv_gateStateSnyc() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      gateStateSnyc_result result = new gateStateSnyc_result();
      receiveBase(result, "gateStateSnyc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "gateStateSnyc failed: unknown result");
    }

    public boolean ejectTicketStatSync(com.tbims.rpc.entity.AUTHORIZATION auth, int state, java.lang.String ticket_num) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_ejectTicketStatSync(auth, state, ticket_num);
      return recv_ejectTicketStatSync();
    }

    public void send_ejectTicketStatSync(com.tbims.rpc.entity.AUTHORIZATION auth, int state, java.lang.String ticket_num) throws org.apache.thrift.TException
    {
      ejectTicketStatSync_args args = new ejectTicketStatSync_args();
      args.setAuth(auth);
      args.setState(state);
      args.setTicket_num(ticket_num);
      sendBase("ejectTicketStatSync", args);
    }

    public boolean recv_ejectTicketStatSync() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      ejectTicketStatSync_result result = new ejectTicketStatSync_result();
      receiveBase(result, "ejectTicketStatSync");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ejectTicketStatSync failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> empRegisterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_empRegisterSnyc(auth, version_no);
      return recv_empRegisterSnyc();
    }

    public void send_empRegisterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws org.apache.thrift.TException
    {
      empRegisterSnyc_args args = new empRegisterSnyc_args();
      args.setAuth(auth);
      args.setVersion_no(version_no);
      sendBase("empRegisterSnyc", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> recv_empRegisterSnyc() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      empRegisterSnyc_result result = new empRegisterSnyc_result();
      receiveBase(result, "empRegisterSnyc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "empRegisterSnyc failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> queryEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_queryEmpRegister(auth, sys_emp_register);
      return recv_queryEmpRegister();
    }

    public void send_queryEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) throws org.apache.thrift.TException
    {
      queryEmpRegister_args args = new queryEmpRegister_args();
      args.setAuth(auth);
      args.setSys_emp_register(sys_emp_register);
      sendBase("queryEmpRegister", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> recv_queryEmpRegister() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      queryEmpRegister_result result = new queryEmpRegister_result();
      receiveBase(result, "queryEmpRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryEmpRegister failed: unknown result");
    }

    public boolean saveOrUpdateEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_saveOrUpdateEmpRegister(auth, sys_emp_register);
      return recv_saveOrUpdateEmpRegister();
    }

    public void send_saveOrUpdateEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) throws org.apache.thrift.TException
    {
      saveOrUpdateEmpRegister_args args = new saveOrUpdateEmpRegister_args();
      args.setAuth(auth);
      args.setSys_emp_register(sys_emp_register);
      sendBase("saveOrUpdateEmpRegister", args);
    }

    public boolean recv_saveOrUpdateEmpRegister() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      saveOrUpdateEmpRegister_result result = new saveOrUpdateEmpRegister_result();
      receiveBase(result, "saveOrUpdateEmpRegister");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saveOrUpdateEmpRegister failed: unknown result");
    }

    public boolean empRegisterStat(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String stat) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_empRegisterStat(auth, empId, stat);
      return recv_empRegisterStat();
    }

    public void send_empRegisterStat(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String stat) throws org.apache.thrift.TException
    {
      empRegisterStat_args args = new empRegisterStat_args();
      args.setAuth(auth);
      args.setEmpId(empId);
      args.setStat(stat);
      sendBase("empRegisterStat", args);
    }

    public boolean recv_empRegisterStat() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      empRegisterStat_result result = new empRegisterStat_result();
      receiveBase(result, "empRegisterStat");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "empRegisterStat failed: unknown result");
    }

    public boolean empRegisterChipId(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String chip_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_empRegisterChipId(auth, empId, chip_id);
      return recv_empRegisterChipId();
    }

    public void send_empRegisterChipId(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String chip_id) throws org.apache.thrift.TException
    {
      empRegisterChipId_args args = new empRegisterChipId_args();
      args.setAuth(auth);
      args.setEmpId(empId);
      args.setChip_id(chip_id);
      sendBase("empRegisterChipId", args);
    }

    public boolean recv_empRegisterChipId() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      empRegisterChipId_result result = new empRegisterChipId_result();
      receiveBase(result, "empRegisterChipId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "empRegisterChipId failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> ticketTypeSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_ticketTypeSnyc(auth, version_no);
      return recv_ticketTypeSnyc();
    }

    public void send_ticketTypeSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws org.apache.thrift.TException
    {
      ticketTypeSnyc_args args = new ticketTypeSnyc_args();
      args.setAuth(auth);
      args.setVersion_no(version_no);
      sendBase("ticketTypeSnyc", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> recv_ticketTypeSnyc() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      ticketTypeSnyc_result result = new ticketTypeSnyc_result();
      receiveBase(result, "ticketTypeSnyc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ticketTypeSnyc failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_VENUE> sysVenueSnyc(com.tbims.rpc.entity.AUTHORIZATION auth) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_sysVenueSnyc(auth);
      return recv_sysVenueSnyc();
    }

    public void send_sysVenueSnyc(com.tbims.rpc.entity.AUTHORIZATION auth) throws org.apache.thrift.TException
    {
      sysVenueSnyc_args args = new sysVenueSnyc_args();
      args.setAuth(auth);
      sendBase("sysVenueSnyc", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_VENUE> recv_sysVenueSnyc() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      sysVenueSnyc_result result = new sysVenueSnyc_result();
      receiveBase(result, "sysVenueSnyc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sysVenueSnyc failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> blacklistSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_blacklistSnyc(auth, version_no);
      return recv_blacklistSnyc();
    }

    public void send_blacklistSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws org.apache.thrift.TException
    {
      blacklistSnyc_args args = new blacklistSnyc_args();
      args.setAuth(auth);
      args.setVersion_no(version_no);
      sendBase("blacklistSnyc", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> recv_blacklistSnyc() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      blacklistSnyc_result result = new blacklistSnyc_result();
      receiveBase(result, "blacklistSnyc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "blacklistSnyc failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> sysDictionarySnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_sysDictionarySnyc(auth, version_no);
      return recv_sysDictionarySnyc();
    }

    public void send_sysDictionarySnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws org.apache.thrift.TException
    {
      sysDictionarySnyc_args args = new sysDictionarySnyc_args();
      args.setAuth(auth);
      args.setVersion_no(version_no);
      sendBase("sysDictionarySnyc", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> recv_sysDictionarySnyc() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      sysDictionarySnyc_result result = new sysDictionarySnyc_result();
      receiveBase(result, "sysDictionarySnyc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sysDictionarySnyc failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> sysParemeterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_sysParemeterSnyc(auth, version_no);
      return recv_sysParemeterSnyc();
    }

    public void send_sysParemeterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws org.apache.thrift.TException
    {
      sysParemeterSnyc_args args = new sysParemeterSnyc_args();
      args.setAuth(auth);
      args.setVersion_no(version_no);
      sendBase("sysParemeterSnyc", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> recv_sysParemeterSnyc() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      sysParemeterSnyc_result result = new sysParemeterSnyc_result();
      receiveBase(result, "sysParemeterSnyc");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "sysParemeterSnyc failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SL_PERIOD> salePeriodQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_salePeriodQuery(auth, version_no);
      return recv_salePeriodQuery();
    }

    public void send_salePeriodQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no) throws org.apache.thrift.TException
    {
      salePeriodQuery_args args = new salePeriodQuery_args();
      args.setAuth(auth);
      args.setVersion_no(version_no);
      sendBase("salePeriodQuery", args);
    }

    public java.util.List<com.tbims.rpc.entity.SL_PERIOD> recv_salePeriodQuery() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      salePeriodQuery_result result = new salePeriodQuery_result();
      receiveBase(result, "salePeriodQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "salePeriodQuery failed: unknown result");
    }

    public long getSystemDateTime(com.tbims.rpc.entity.AUTHORIZATION auth) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_getSystemDateTime(auth);
      return recv_getSystemDateTime();
    }

    public void send_getSystemDateTime(com.tbims.rpc.entity.AUTHORIZATION auth) throws org.apache.thrift.TException
    {
      getSystemDateTime_args args = new getSystemDateTime_args();
      args.setAuth(auth);
      sendBase("getSystemDateTime", args);
    }

    public long recv_getSystemDateTime() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      getSystemDateTime_result result = new getSystemDateTime_result();
      receiveBase(result, "getSystemDateTime");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSystemDateTime failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SYS_CLIENT> queryClient(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String clientId, java.lang.String clientName, java.lang.String clientType, java.lang.String regionIds) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_queryClient(auth, clientId, clientName, clientType, regionIds);
      return recv_queryClient();
    }

    public void send_queryClient(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String clientId, java.lang.String clientName, java.lang.String clientType, java.lang.String regionIds) throws org.apache.thrift.TException
    {
      queryClient_args args = new queryClient_args();
      args.setAuth(auth);
      args.setClientId(clientId);
      args.setClientName(clientName);
      args.setClientType(clientType);
      args.setRegionIds(regionIds);
      sendBase("queryClient", args);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_CLIENT> recv_queryClient() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      queryClient_result result = new queryClient_result();
      receiveBase(result, "queryClient");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryClient failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> queryUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_queryUselessTicket(auth, outlet_id);
      return recv_queryUselessTicket();
    }

    public void send_queryUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id) throws org.apache.thrift.TException
    {
      queryUselessTicket_args args = new queryUselessTicket_args();
      args.setAuth(auth);
      args.setOutlet_id(outlet_id);
      sendBase("queryUselessTicket", args);
    }

    public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> recv_queryUselessTicket() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      queryUselessTicket_result result = new queryUselessTicket_result();
      receiveBase(result, "queryUselessTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryUselessTicket failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> querySaleSupplyTicketG(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_querySaleSupplyTicketG(auth, pay_id);
      return recv_querySaleSupplyTicketG();
    }

    public void send_querySaleSupplyTicketG(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id) throws org.apache.thrift.TException
    {
      querySaleSupplyTicketG_args args = new querySaleSupplyTicketG_args();
      args.setAuth(auth);
      args.setPay_id(pay_id);
      sendBase("querySaleSupplyTicketG", args);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> recv_querySaleSupplyTicketG() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      querySaleSupplyTicketG_result result = new querySaleSupplyTicketG_result();
      receiveBase(result, "querySaleSupplyTicketG");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySaleSupplyTicketG failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> querySaleSupplyTicketQ(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_querySaleSupplyTicketQ(auth, pay_id);
      return recv_querySaleSupplyTicketQ();
    }

    public void send_querySaleSupplyTicketQ(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id) throws org.apache.thrift.TException
    {
      querySaleSupplyTicketQ_args args = new querySaleSupplyTicketQ_args();
      args.setAuth(auth);
      args.setPay_id(pay_id);
      sendBase("querySaleSupplyTicketQ", args);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> recv_querySaleSupplyTicketQ() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      querySaleSupplyTicketQ_result result = new querySaleSupplyTicketQ_result();
      receiveBase(result, "querySaleSupplyTicketQ");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySaleSupplyTicketQ failed: unknown result");
    }

    public boolean uploadClientLog(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String fileName, java.nio.ByteBuffer file) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_uploadClientLog(auth, fileName, file);
      return recv_uploadClientLog();
    }

    public void send_uploadClientLog(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String fileName, java.nio.ByteBuffer file) throws org.apache.thrift.TException
    {
      uploadClientLog_args args = new uploadClientLog_args();
      args.setAuth(auth);
      args.setFileName(fileName);
      args.setFile(file);
      sendBase("uploadClientLog", args);
    }

    public boolean recv_uploadClientLog() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      uploadClientLog_result result = new uploadClientLog_result();
      receiveBase(result, "uploadClientLog");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadClientLog failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void gateStateSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_CLIENT sys_client, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      gateStateSnyc_call method_call = new gateStateSnyc_call(auth, sys_client, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class gateStateSnyc_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.SYS_CLIENT sys_client;
      public gateStateSnyc_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_CLIENT sys_client, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sys_client = sys_client;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("gateStateSnyc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        gateStateSnyc_args args = new gateStateSnyc_args();
        args.setAuth(auth);
        args.setSys_client(sys_client);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_gateStateSnyc();
      }
    }

    public void ejectTicketStatSync(com.tbims.rpc.entity.AUTHORIZATION auth, int state, java.lang.String ticket_num, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ejectTicketStatSync_call method_call = new ejectTicketStatSync_call(auth, state, ticket_num, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ejectTicketStatSync_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private int state;
      private java.lang.String ticket_num;
      public ejectTicketStatSync_call(com.tbims.rpc.entity.AUTHORIZATION auth, int state, java.lang.String ticket_num, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.state = state;
        this.ticket_num = ticket_num;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ejectTicketStatSync", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ejectTicketStatSync_args args = new ejectTicketStatSync_args();
        args.setAuth(auth);
        args.setState(state);
        args.setTicket_num(ticket_num);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ejectTicketStatSync();
      }
    }

    public void empRegisterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      empRegisterSnyc_call method_call = new empRegisterSnyc_call(auth, version_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class empRegisterSnyc_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long version_no;
      public empRegisterSnyc_call(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.version_no = version_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("empRegisterSnyc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        empRegisterSnyc_args args = new empRegisterSnyc_args();
        args.setAuth(auth);
        args.setVersion_no(version_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_empRegisterSnyc();
      }
    }

    public void queryEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryEmpRegister_call method_call = new queryEmpRegister_call(auth, sys_emp_register, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryEmpRegister_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register;
      public queryEmpRegister_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sys_emp_register = sys_emp_register;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryEmpRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryEmpRegister_args args = new queryEmpRegister_args();
        args.setAuth(auth);
        args.setSys_emp_register(sys_emp_register);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryEmpRegister();
      }
    }

    public void saveOrUpdateEmpRegister(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saveOrUpdateEmpRegister_call method_call = new saveOrUpdateEmpRegister_call(auth, sys_emp_register, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saveOrUpdateEmpRegister_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register;
      public saveOrUpdateEmpRegister_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sys_emp_register = sys_emp_register;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saveOrUpdateEmpRegister", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saveOrUpdateEmpRegister_args args = new saveOrUpdateEmpRegister_args();
        args.setAuth(auth);
        args.setSys_emp_register(sys_emp_register);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saveOrUpdateEmpRegister();
      }
    }

    public void empRegisterStat(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String stat, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      empRegisterStat_call method_call = new empRegisterStat_call(auth, empId, stat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class empRegisterStat_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long empId;
      private java.lang.String stat;
      public empRegisterStat_call(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String stat, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.empId = empId;
        this.stat = stat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("empRegisterStat", org.apache.thrift.protocol.TMessageType.CALL, 0));
        empRegisterStat_args args = new empRegisterStat_args();
        args.setAuth(auth);
        args.setEmpId(empId);
        args.setStat(stat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_empRegisterStat();
      }
    }

    public void empRegisterChipId(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String chip_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      empRegisterChipId_call method_call = new empRegisterChipId_call(auth, empId, chip_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class empRegisterChipId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long empId;
      private java.lang.String chip_id;
      public empRegisterChipId_call(com.tbims.rpc.entity.AUTHORIZATION auth, long empId, java.lang.String chip_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.empId = empId;
        this.chip_id = chip_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("empRegisterChipId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        empRegisterChipId_args args = new empRegisterChipId_args();
        args.setAuth(auth);
        args.setEmpId(empId);
        args.setChip_id(chip_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_empRegisterChipId();
      }
    }

    public void ticketTypeSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ticketTypeSnyc_call method_call = new ticketTypeSnyc_call(auth, version_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ticketTypeSnyc_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long version_no;
      public ticketTypeSnyc_call(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.version_no = version_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ticketTypeSnyc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ticketTypeSnyc_args args = new ticketTypeSnyc_args();
        args.setAuth(auth);
        args.setVersion_no(version_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ticketTypeSnyc();
      }
    }

    public void sysVenueSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_VENUE>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sysVenueSnyc_call method_call = new sysVenueSnyc_call(auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sysVenueSnyc_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_VENUE>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      public sysVenueSnyc_call(com.tbims.rpc.entity.AUTHORIZATION auth, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_VENUE>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sysVenueSnyc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sysVenueSnyc_args args = new sysVenueSnyc_args();
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_VENUE> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sysVenueSnyc();
      }
    }

    public void blacklistSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      blacklistSnyc_call method_call = new blacklistSnyc_call(auth, version_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class blacklistSnyc_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long version_no;
      public blacklistSnyc_call(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.version_no = version_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("blacklistSnyc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        blacklistSnyc_args args = new blacklistSnyc_args();
        args.setAuth(auth);
        args.setVersion_no(version_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_blacklistSnyc();
      }
    }

    public void sysDictionarySnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sysDictionarySnyc_call method_call = new sysDictionarySnyc_call(auth, version_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sysDictionarySnyc_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long version_no;
      public sysDictionarySnyc_call(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.version_no = version_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sysDictionarySnyc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sysDictionarySnyc_args args = new sysDictionarySnyc_args();
        args.setAuth(auth);
        args.setVersion_no(version_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sysDictionarySnyc();
      }
    }

    public void sysParemeterSnyc(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      sysParemeterSnyc_call method_call = new sysParemeterSnyc_call(auth, version_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class sysParemeterSnyc_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long version_no;
      public sysParemeterSnyc_call(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.version_no = version_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("sysParemeterSnyc", org.apache.thrift.protocol.TMessageType.CALL, 0));
        sysParemeterSnyc_args args = new sysParemeterSnyc_args();
        args.setAuth(auth);
        args.setVersion_no(version_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_sysParemeterSnyc();
      }
    }

    public void salePeriodQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_PERIOD>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      salePeriodQuery_call method_call = new salePeriodQuery_call(auth, version_no, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class salePeriodQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SL_PERIOD>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long version_no;
      public salePeriodQuery_call(com.tbims.rpc.entity.AUTHORIZATION auth, long version_no, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_PERIOD>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.version_no = version_no;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("salePeriodQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        salePeriodQuery_args args = new salePeriodQuery_args();
        args.setAuth(auth);
        args.setVersion_no(version_no);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SL_PERIOD> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_salePeriodQuery();
      }
    }

    public void getSystemDateTime(com.tbims.rpc.entity.AUTHORIZATION auth, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSystemDateTime_call method_call = new getSystemDateTime_call(auth, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSystemDateTime_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Long> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      public getSystemDateTime_call(com.tbims.rpc.entity.AUTHORIZATION auth, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSystemDateTime", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSystemDateTime_args args = new getSystemDateTime_args();
        args.setAuth(auth);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Long getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSystemDateTime();
      }
    }

    public void queryClient(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String clientId, java.lang.String clientName, java.lang.String clientType, java.lang.String regionIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_CLIENT>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryClient_call method_call = new queryClient_call(auth, clientId, clientName, clientType, regionIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryClient_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SYS_CLIENT>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String clientId;
      private java.lang.String clientName;
      private java.lang.String clientType;
      private java.lang.String regionIds;
      public queryClient_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String clientId, java.lang.String clientName, java.lang.String clientType, java.lang.String regionIds, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_CLIENT>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.clientId = clientId;
        this.clientName = clientName;
        this.clientType = clientType;
        this.regionIds = regionIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryClient", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryClient_args args = new queryClient_args();
        args.setAuth(auth);
        args.setClientId(clientId);
        args.setClientName(clientName);
        args.setClientType(clientType);
        args.setRegionIds(regionIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SYS_CLIENT> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryClient();
      }
    }

    public void queryUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryUselessTicket_call method_call = new queryUselessTicket_call(auth, outlet_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryUselessTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long outlet_id;
      public queryUselessTicket_call(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.outlet_id = outlet_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryUselessTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryUselessTicket_args args = new queryUselessTicket_args();
        args.setAuth(auth);
        args.setOutlet_id(outlet_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryUselessTicket();
      }
    }

    public void querySaleSupplyTicketG(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySaleSupplyTicketG_call method_call = new querySaleSupplyTicketG_call(auth, pay_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySaleSupplyTicketG_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String pay_id;
      public querySaleSupplyTicketG_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.pay_id = pay_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySaleSupplyTicketG", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySaleSupplyTicketG_args args = new querySaleSupplyTicketG_args();
        args.setAuth(auth);
        args.setPay_id(pay_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySaleSupplyTicketG();
      }
    }

    public void querySaleSupplyTicketQ(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySaleSupplyTicketQ_call method_call = new querySaleSupplyTicketQ_call(auth, pay_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySaleSupplyTicketQ_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String pay_id;
      public querySaleSupplyTicketQ_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String pay_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.pay_id = pay_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySaleSupplyTicketQ", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySaleSupplyTicketQ_args args = new querySaleSupplyTicketQ_args();
        args.setAuth(auth);
        args.setPay_id(pay_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySaleSupplyTicketQ();
      }
    }

    public void uploadClientLog(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String fileName, java.nio.ByteBuffer file, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadClientLog_call method_call = new uploadClientLog_call(auth, fileName, file, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadClientLog_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String fileName;
      private java.nio.ByteBuffer file;
      public uploadClientLog_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String fileName, java.nio.ByteBuffer file, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.fileName = fileName;
        this.file = file;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadClientLog", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadClientLog_args args = new uploadClientLog_args();
        args.setAuth(auth);
        args.setFileName(fileName);
        args.setFile(file);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadClientLog();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("gateStateSnyc", new gateStateSnyc());
      processMap.put("ejectTicketStatSync", new ejectTicketStatSync());
      processMap.put("empRegisterSnyc", new empRegisterSnyc());
      processMap.put("queryEmpRegister", new queryEmpRegister());
      processMap.put("saveOrUpdateEmpRegister", new saveOrUpdateEmpRegister());
      processMap.put("empRegisterStat", new empRegisterStat());
      processMap.put("empRegisterChipId", new empRegisterChipId());
      processMap.put("ticketTypeSnyc", new ticketTypeSnyc());
      processMap.put("sysVenueSnyc", new sysVenueSnyc());
      processMap.put("blacklistSnyc", new blacklistSnyc());
      processMap.put("sysDictionarySnyc", new sysDictionarySnyc());
      processMap.put("sysParemeterSnyc", new sysParemeterSnyc());
      processMap.put("salePeriodQuery", new salePeriodQuery());
      processMap.put("getSystemDateTime", new getSystemDateTime());
      processMap.put("queryClient", new queryClient());
      processMap.put("queryUselessTicket", new queryUselessTicket());
      processMap.put("querySaleSupplyTicketG", new querySaleSupplyTicketG());
      processMap.put("querySaleSupplyTicketQ", new querySaleSupplyTicketQ());
      processMap.put("uploadClientLog", new uploadClientLog());
      return processMap;
    }

    public static class gateStateSnyc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, gateStateSnyc_args> {
      public gateStateSnyc() {
        super("gateStateSnyc");
      }

      public gateStateSnyc_args getEmptyArgsInstance() {
        return new gateStateSnyc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public gateStateSnyc_result getResult(I iface, gateStateSnyc_args args) throws org.apache.thrift.TException {
        gateStateSnyc_result result = new gateStateSnyc_result();
        try {
          result.success = iface.gateStateSnyc(args.auth, args.sys_client);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class ejectTicketStatSync<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ejectTicketStatSync_args> {
      public ejectTicketStatSync() {
        super("ejectTicketStatSync");
      }

      public ejectTicketStatSync_args getEmptyArgsInstance() {
        return new ejectTicketStatSync_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ejectTicketStatSync_result getResult(I iface, ejectTicketStatSync_args args) throws org.apache.thrift.TException {
        ejectTicketStatSync_result result = new ejectTicketStatSync_result();
        try {
          result.success = iface.ejectTicketStatSync(args.auth, args.state, args.ticket_num);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class empRegisterSnyc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, empRegisterSnyc_args> {
      public empRegisterSnyc() {
        super("empRegisterSnyc");
      }

      public empRegisterSnyc_args getEmptyArgsInstance() {
        return new empRegisterSnyc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public empRegisterSnyc_result getResult(I iface, empRegisterSnyc_args args) throws org.apache.thrift.TException {
        empRegisterSnyc_result result = new empRegisterSnyc_result();
        try {
          result.success = iface.empRegisterSnyc(args.auth, args.version_no);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryEmpRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryEmpRegister_args> {
      public queryEmpRegister() {
        super("queryEmpRegister");
      }

      public queryEmpRegister_args getEmptyArgsInstance() {
        return new queryEmpRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryEmpRegister_result getResult(I iface, queryEmpRegister_args args) throws org.apache.thrift.TException {
        queryEmpRegister_result result = new queryEmpRegister_result();
        try {
          result.success = iface.queryEmpRegister(args.auth, args.sys_emp_register);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saveOrUpdateEmpRegister<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saveOrUpdateEmpRegister_args> {
      public saveOrUpdateEmpRegister() {
        super("saveOrUpdateEmpRegister");
      }

      public saveOrUpdateEmpRegister_args getEmptyArgsInstance() {
        return new saveOrUpdateEmpRegister_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saveOrUpdateEmpRegister_result getResult(I iface, saveOrUpdateEmpRegister_args args) throws org.apache.thrift.TException {
        saveOrUpdateEmpRegister_result result = new saveOrUpdateEmpRegister_result();
        try {
          result.success = iface.saveOrUpdateEmpRegister(args.auth, args.sys_emp_register);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class empRegisterStat<I extends Iface> extends org.apache.thrift.ProcessFunction<I, empRegisterStat_args> {
      public empRegisterStat() {
        super("empRegisterStat");
      }

      public empRegisterStat_args getEmptyArgsInstance() {
        return new empRegisterStat_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public empRegisterStat_result getResult(I iface, empRegisterStat_args args) throws org.apache.thrift.TException {
        empRegisterStat_result result = new empRegisterStat_result();
        try {
          result.success = iface.empRegisterStat(args.auth, args.empId, args.stat);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class empRegisterChipId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, empRegisterChipId_args> {
      public empRegisterChipId() {
        super("empRegisterChipId");
      }

      public empRegisterChipId_args getEmptyArgsInstance() {
        return new empRegisterChipId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public empRegisterChipId_result getResult(I iface, empRegisterChipId_args args) throws org.apache.thrift.TException {
        empRegisterChipId_result result = new empRegisterChipId_result();
        try {
          result.success = iface.empRegisterChipId(args.auth, args.empId, args.chip_id);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class ticketTypeSnyc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ticketTypeSnyc_args> {
      public ticketTypeSnyc() {
        super("ticketTypeSnyc");
      }

      public ticketTypeSnyc_args getEmptyArgsInstance() {
        return new ticketTypeSnyc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ticketTypeSnyc_result getResult(I iface, ticketTypeSnyc_args args) throws org.apache.thrift.TException {
        ticketTypeSnyc_result result = new ticketTypeSnyc_result();
        try {
          result.success = iface.ticketTypeSnyc(args.auth, args.version_no);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class sysVenueSnyc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sysVenueSnyc_args> {
      public sysVenueSnyc() {
        super("sysVenueSnyc");
      }

      public sysVenueSnyc_args getEmptyArgsInstance() {
        return new sysVenueSnyc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sysVenueSnyc_result getResult(I iface, sysVenueSnyc_args args) throws org.apache.thrift.TException {
        sysVenueSnyc_result result = new sysVenueSnyc_result();
        try {
          result.success = iface.sysVenueSnyc(args.auth);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class blacklistSnyc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, blacklistSnyc_args> {
      public blacklistSnyc() {
        super("blacklistSnyc");
      }

      public blacklistSnyc_args getEmptyArgsInstance() {
        return new blacklistSnyc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public blacklistSnyc_result getResult(I iface, blacklistSnyc_args args) throws org.apache.thrift.TException {
        blacklistSnyc_result result = new blacklistSnyc_result();
        try {
          result.success = iface.blacklistSnyc(args.auth, args.version_no);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class sysDictionarySnyc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sysDictionarySnyc_args> {
      public sysDictionarySnyc() {
        super("sysDictionarySnyc");
      }

      public sysDictionarySnyc_args getEmptyArgsInstance() {
        return new sysDictionarySnyc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sysDictionarySnyc_result getResult(I iface, sysDictionarySnyc_args args) throws org.apache.thrift.TException {
        sysDictionarySnyc_result result = new sysDictionarySnyc_result();
        try {
          result.success = iface.sysDictionarySnyc(args.auth, args.version_no);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class sysParemeterSnyc<I extends Iface> extends org.apache.thrift.ProcessFunction<I, sysParemeterSnyc_args> {
      public sysParemeterSnyc() {
        super("sysParemeterSnyc");
      }

      public sysParemeterSnyc_args getEmptyArgsInstance() {
        return new sysParemeterSnyc_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public sysParemeterSnyc_result getResult(I iface, sysParemeterSnyc_args args) throws org.apache.thrift.TException {
        sysParemeterSnyc_result result = new sysParemeterSnyc_result();
        try {
          result.success = iface.sysParemeterSnyc(args.auth, args.version_no);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class salePeriodQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, salePeriodQuery_args> {
      public salePeriodQuery() {
        super("salePeriodQuery");
      }

      public salePeriodQuery_args getEmptyArgsInstance() {
        return new salePeriodQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public salePeriodQuery_result getResult(I iface, salePeriodQuery_args args) throws org.apache.thrift.TException {
        salePeriodQuery_result result = new salePeriodQuery_result();
        try {
          result.success = iface.salePeriodQuery(args.auth, args.version_no);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class getSystemDateTime<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSystemDateTime_args> {
      public getSystemDateTime() {
        super("getSystemDateTime");
      }

      public getSystemDateTime_args getEmptyArgsInstance() {
        return new getSystemDateTime_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getSystemDateTime_result getResult(I iface, getSystemDateTime_args args) throws org.apache.thrift.TException {
        getSystemDateTime_result result = new getSystemDateTime_result();
        try {
          result.success = iface.getSystemDateTime(args.auth);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryClient<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryClient_args> {
      public queryClient() {
        super("queryClient");
      }

      public queryClient_args getEmptyArgsInstance() {
        return new queryClient_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryClient_result getResult(I iface, queryClient_args args) throws org.apache.thrift.TException {
        queryClient_result result = new queryClient_result();
        try {
          result.success = iface.queryClient(args.auth, args.clientId, args.clientName, args.clientType, args.regionIds);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryUselessTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryUselessTicket_args> {
      public queryUselessTicket() {
        super("queryUselessTicket");
      }

      public queryUselessTicket_args getEmptyArgsInstance() {
        return new queryUselessTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryUselessTicket_result getResult(I iface, queryUselessTicket_args args) throws org.apache.thrift.TException {
        queryUselessTicket_result result = new queryUselessTicket_result();
        try {
          result.success = iface.queryUselessTicket(args.auth, args.outlet_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class querySaleSupplyTicketG<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySaleSupplyTicketG_args> {
      public querySaleSupplyTicketG() {
        super("querySaleSupplyTicketG");
      }

      public querySaleSupplyTicketG_args getEmptyArgsInstance() {
        return new querySaleSupplyTicketG_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySaleSupplyTicketG_result getResult(I iface, querySaleSupplyTicketG_args args) throws org.apache.thrift.TException {
        querySaleSupplyTicketG_result result = new querySaleSupplyTicketG_result();
        try {
          result.success = iface.querySaleSupplyTicketG(args.auth, args.pay_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class querySaleSupplyTicketQ<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySaleSupplyTicketQ_args> {
      public querySaleSupplyTicketQ() {
        super("querySaleSupplyTicketQ");
      }

      public querySaleSupplyTicketQ_args getEmptyArgsInstance() {
        return new querySaleSupplyTicketQ_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySaleSupplyTicketQ_result getResult(I iface, querySaleSupplyTicketQ_args args) throws org.apache.thrift.TException {
        querySaleSupplyTicketQ_result result = new querySaleSupplyTicketQ_result();
        try {
          result.success = iface.querySaleSupplyTicketQ(args.auth, args.pay_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class uploadClientLog<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadClientLog_args> {
      public uploadClientLog() {
        super("uploadClientLog");
      }

      public uploadClientLog_args getEmptyArgsInstance() {
        return new uploadClientLog_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uploadClientLog_result getResult(I iface, uploadClientLog_args args) throws org.apache.thrift.TException {
        uploadClientLog_result result = new uploadClientLog_result();
        try {
          result.success = iface.uploadClientLog(args.auth, args.fileName, args.file);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("gateStateSnyc", new gateStateSnyc());
      processMap.put("ejectTicketStatSync", new ejectTicketStatSync());
      processMap.put("empRegisterSnyc", new empRegisterSnyc());
      processMap.put("queryEmpRegister", new queryEmpRegister());
      processMap.put("saveOrUpdateEmpRegister", new saveOrUpdateEmpRegister());
      processMap.put("empRegisterStat", new empRegisterStat());
      processMap.put("empRegisterChipId", new empRegisterChipId());
      processMap.put("ticketTypeSnyc", new ticketTypeSnyc());
      processMap.put("sysVenueSnyc", new sysVenueSnyc());
      processMap.put("blacklistSnyc", new blacklistSnyc());
      processMap.put("sysDictionarySnyc", new sysDictionarySnyc());
      processMap.put("sysParemeterSnyc", new sysParemeterSnyc());
      processMap.put("salePeriodQuery", new salePeriodQuery());
      processMap.put("getSystemDateTime", new getSystemDateTime());
      processMap.put("queryClient", new queryClient());
      processMap.put("queryUselessTicket", new queryUselessTicket());
      processMap.put("querySaleSupplyTicketG", new querySaleSupplyTicketG());
      processMap.put("querySaleSupplyTicketQ", new querySaleSupplyTicketQ());
      processMap.put("uploadClientLog", new uploadClientLog());
      return processMap;
    }

    public static class gateStateSnyc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, gateStateSnyc_args, java.lang.Boolean> {
      public gateStateSnyc() {
        super("gateStateSnyc");
      }

      public gateStateSnyc_args getEmptyArgsInstance() {
        return new gateStateSnyc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            gateStateSnyc_result result = new gateStateSnyc_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            gateStateSnyc_result result = new gateStateSnyc_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, gateStateSnyc_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.gateStateSnyc(args.auth, args.sys_client,resultHandler);
      }
    }

    public static class ejectTicketStatSync<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ejectTicketStatSync_args, java.lang.Boolean> {
      public ejectTicketStatSync() {
        super("ejectTicketStatSync");
      }

      public ejectTicketStatSync_args getEmptyArgsInstance() {
        return new ejectTicketStatSync_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            ejectTicketStatSync_result result = new ejectTicketStatSync_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ejectTicketStatSync_result result = new ejectTicketStatSync_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ejectTicketStatSync_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ejectTicketStatSync(args.auth, args.state, args.ticket_num,resultHandler);
      }
    }

    public static class empRegisterSnyc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, empRegisterSnyc_args, java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> {
      public empRegisterSnyc() {
        super("empRegisterSnyc");
      }

      public empRegisterSnyc_args getEmptyArgsInstance() {
        return new empRegisterSnyc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> o) {
            empRegisterSnyc_result result = new empRegisterSnyc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            empRegisterSnyc_result result = new empRegisterSnyc_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, empRegisterSnyc_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler) throws org.apache.thrift.TException {
        iface.empRegisterSnyc(args.auth, args.version_no,resultHandler);
      }
    }

    public static class queryEmpRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryEmpRegister_args, java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> {
      public queryEmpRegister() {
        super("queryEmpRegister");
      }

      public queryEmpRegister_args getEmptyArgsInstance() {
        return new queryEmpRegister_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> o) {
            queryEmpRegister_result result = new queryEmpRegister_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryEmpRegister_result result = new queryEmpRegister_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryEmpRegister_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>> resultHandler) throws org.apache.thrift.TException {
        iface.queryEmpRegister(args.auth, args.sys_emp_register,resultHandler);
      }
    }

    public static class saveOrUpdateEmpRegister<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saveOrUpdateEmpRegister_args, java.lang.Boolean> {
      public saveOrUpdateEmpRegister() {
        super("saveOrUpdateEmpRegister");
      }

      public saveOrUpdateEmpRegister_args getEmptyArgsInstance() {
        return new saveOrUpdateEmpRegister_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            saveOrUpdateEmpRegister_result result = new saveOrUpdateEmpRegister_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saveOrUpdateEmpRegister_result result = new saveOrUpdateEmpRegister_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saveOrUpdateEmpRegister_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.saveOrUpdateEmpRegister(args.auth, args.sys_emp_register,resultHandler);
      }
    }

    public static class empRegisterStat<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, empRegisterStat_args, java.lang.Boolean> {
      public empRegisterStat() {
        super("empRegisterStat");
      }

      public empRegisterStat_args getEmptyArgsInstance() {
        return new empRegisterStat_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            empRegisterStat_result result = new empRegisterStat_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            empRegisterStat_result result = new empRegisterStat_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, empRegisterStat_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.empRegisterStat(args.auth, args.empId, args.stat,resultHandler);
      }
    }

    public static class empRegisterChipId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, empRegisterChipId_args, java.lang.Boolean> {
      public empRegisterChipId() {
        super("empRegisterChipId");
      }

      public empRegisterChipId_args getEmptyArgsInstance() {
        return new empRegisterChipId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            empRegisterChipId_result result = new empRegisterChipId_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            empRegisterChipId_result result = new empRegisterChipId_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, empRegisterChipId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.empRegisterChipId(args.auth, args.empId, args.chip_id,resultHandler);
      }
    }

    public static class ticketTypeSnyc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ticketTypeSnyc_args, java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>> {
      public ticketTypeSnyc() {
        super("ticketTypeSnyc");
      }

      public ticketTypeSnyc_args getEmptyArgsInstance() {
        return new ticketTypeSnyc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> o) {
            ticketTypeSnyc_result result = new ticketTypeSnyc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ticketTypeSnyc_result result = new ticketTypeSnyc_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ticketTypeSnyc_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>> resultHandler) throws org.apache.thrift.TException {
        iface.ticketTypeSnyc(args.auth, args.version_no,resultHandler);
      }
    }

    public static class sysVenueSnyc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sysVenueSnyc_args, java.util.List<com.tbims.rpc.entity.SYS_VENUE>> {
      public sysVenueSnyc() {
        super("sysVenueSnyc");
      }

      public sysVenueSnyc_args getEmptyArgsInstance() {
        return new sysVenueSnyc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_VENUE>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_VENUE>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_VENUE> o) {
            sysVenueSnyc_result result = new sysVenueSnyc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sysVenueSnyc_result result = new sysVenueSnyc_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sysVenueSnyc_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_VENUE>> resultHandler) throws org.apache.thrift.TException {
        iface.sysVenueSnyc(args.auth,resultHandler);
      }
    }

    public static class blacklistSnyc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, blacklistSnyc_args, java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>> {
      public blacklistSnyc() {
        super("blacklistSnyc");
      }

      public blacklistSnyc_args getEmptyArgsInstance() {
        return new blacklistSnyc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> o) {
            blacklistSnyc_result result = new blacklistSnyc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            blacklistSnyc_result result = new blacklistSnyc_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, blacklistSnyc_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>> resultHandler) throws org.apache.thrift.TException {
        iface.blacklistSnyc(args.auth, args.version_no,resultHandler);
      }
    }

    public static class sysDictionarySnyc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sysDictionarySnyc_args, java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>> {
      public sysDictionarySnyc() {
        super("sysDictionarySnyc");
      }

      public sysDictionarySnyc_args getEmptyArgsInstance() {
        return new sysDictionarySnyc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> o) {
            sysDictionarySnyc_result result = new sysDictionarySnyc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sysDictionarySnyc_result result = new sysDictionarySnyc_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sysDictionarySnyc_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>> resultHandler) throws org.apache.thrift.TException {
        iface.sysDictionarySnyc(args.auth, args.version_no,resultHandler);
      }
    }

    public static class sysParemeterSnyc<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, sysParemeterSnyc_args, java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>> {
      public sysParemeterSnyc() {
        super("sysParemeterSnyc");
      }

      public sysParemeterSnyc_args getEmptyArgsInstance() {
        return new sysParemeterSnyc_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> o) {
            sysParemeterSnyc_result result = new sysParemeterSnyc_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            sysParemeterSnyc_result result = new sysParemeterSnyc_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, sysParemeterSnyc_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>> resultHandler) throws org.apache.thrift.TException {
        iface.sysParemeterSnyc(args.auth, args.version_no,resultHandler);
      }
    }

    public static class salePeriodQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, salePeriodQuery_args, java.util.List<com.tbims.rpc.entity.SL_PERIOD>> {
      public salePeriodQuery() {
        super("salePeriodQuery");
      }

      public salePeriodQuery_args getEmptyArgsInstance() {
        return new salePeriodQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_PERIOD>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_PERIOD>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SL_PERIOD> o) {
            salePeriodQuery_result result = new salePeriodQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            salePeriodQuery_result result = new salePeriodQuery_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, salePeriodQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_PERIOD>> resultHandler) throws org.apache.thrift.TException {
        iface.salePeriodQuery(args.auth, args.version_no,resultHandler);
      }
    }

    public static class getSystemDateTime<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSystemDateTime_args, java.lang.Long> {
      public getSystemDateTime() {
        super("getSystemDateTime");
      }

      public getSystemDateTime_args getEmptyArgsInstance() {
        return new getSystemDateTime_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Long>() { 
          public void onComplete(java.lang.Long o) {
            getSystemDateTime_result result = new getSystemDateTime_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSystemDateTime_result result = new getSystemDateTime_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSystemDateTime_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Long> resultHandler) throws org.apache.thrift.TException {
        iface.getSystemDateTime(args.auth,resultHandler);
      }
    }

    public static class queryClient<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryClient_args, java.util.List<com.tbims.rpc.entity.SYS_CLIENT>> {
      public queryClient() {
        super("queryClient");
      }

      public queryClient_args getEmptyArgsInstance() {
        return new queryClient_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_CLIENT>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_CLIENT>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SYS_CLIENT> o) {
            queryClient_result result = new queryClient_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryClient_result result = new queryClient_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryClient_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SYS_CLIENT>> resultHandler) throws org.apache.thrift.TException {
        iface.queryClient(args.auth, args.clientId, args.clientName, args.clientType, args.regionIds,resultHandler);
      }
    }

    public static class queryUselessTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryUselessTicket_args, java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>> {
      public queryUselessTicket() {
        super("queryUselessTicket");
      }

      public queryUselessTicket_args getEmptyArgsInstance() {
        return new queryUselessTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> o) {
            queryUselessTicket_result result = new queryUselessTicket_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryUselessTicket_result result = new queryUselessTicket_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryUselessTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>> resultHandler) throws org.apache.thrift.TException {
        iface.queryUselessTicket(args.auth, args.outlet_id,resultHandler);
      }
    }

    public static class querySaleSupplyTicketG<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySaleSupplyTicketG_args, java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>> {
      public querySaleSupplyTicketG() {
        super("querySaleSupplyTicketG");
      }

      public querySaleSupplyTicketG_args getEmptyArgsInstance() {
        return new querySaleSupplyTicketG_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> o) {
            querySaleSupplyTicketG_result result = new querySaleSupplyTicketG_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            querySaleSupplyTicketG_result result = new querySaleSupplyTicketG_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySaleSupplyTicketG_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>> resultHandler) throws org.apache.thrift.TException {
        iface.querySaleSupplyTicketG(args.auth, args.pay_id,resultHandler);
      }
    }

    public static class querySaleSupplyTicketQ<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySaleSupplyTicketQ_args, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> {
      public querySaleSupplyTicketQ() {
        super("querySaleSupplyTicketQ");
      }

      public querySaleSupplyTicketQ_args getEmptyArgsInstance() {
        return new querySaleSupplyTicketQ_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> o) {
            querySaleSupplyTicketQ_result result = new querySaleSupplyTicketQ_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            querySaleSupplyTicketQ_result result = new querySaleSupplyTicketQ_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySaleSupplyTicketQ_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler) throws org.apache.thrift.TException {
        iface.querySaleSupplyTicketQ(args.auth, args.pay_id,resultHandler);
      }
    }

    public static class uploadClientLog<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadClientLog_args, java.lang.Boolean> {
      public uploadClientLog() {
        super("uploadClientLog");
      }

      public uploadClientLog_args getEmptyArgsInstance() {
        return new uploadClientLog_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            uploadClientLog_result result = new uploadClientLog_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadClientLog_result result = new uploadClientLog_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadClientLog_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.uploadClientLog(args.auth, args.fileName, args.file,resultHandler);
      }
    }

  }

  public static class gateStateSnyc_args implements org.apache.thrift.TBase<gateStateSnyc_args, gateStateSnyc_args._Fields>, java.io.Serializable, Cloneable, Comparable<gateStateSnyc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gateStateSnyc_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SYS_CLIENT_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_client", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gateStateSnyc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new gateStateSnyc_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 闸机信息
     */
    public com.tbims.rpc.entity.SYS_CLIENT sys_client; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 闸机信息
       */
      SYS_CLIENT((short)2, "sys_client");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SYS_CLIENT
            return SYS_CLIENT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SYS_CLIENT, new org.apache.thrift.meta_data.FieldMetaData("sys_client", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_CLIENT.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gateStateSnyc_args.class, metaDataMap);
    }

    public gateStateSnyc_args() {
    }

    public gateStateSnyc_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.SYS_CLIENT sys_client)
    {
      this();
      this.auth = auth;
      this.sys_client = sys_client;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gateStateSnyc_args(gateStateSnyc_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSys_client()) {
        this.sys_client = new com.tbims.rpc.entity.SYS_CLIENT(other.sys_client);
      }
    }

    public gateStateSnyc_args deepCopy() {
      return new gateStateSnyc_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sys_client = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public gateStateSnyc_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 闸机信息
     */
    public com.tbims.rpc.entity.SYS_CLIENT getSys_client() {
      return this.sys_client;
    }

    /**
     * 闸机信息
     */
    public gateStateSnyc_args setSys_client(com.tbims.rpc.entity.SYS_CLIENT sys_client) {
      this.sys_client = sys_client;
      return this;
    }

    public void unsetSys_client() {
      this.sys_client = null;
    }

    /** Returns true if field sys_client is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_client() {
      return this.sys_client != null;
    }

    public void setSys_clientIsSet(boolean value) {
      if (!value) {
        this.sys_client = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SYS_CLIENT:
        if (value == null) {
          unsetSys_client();
        } else {
          setSys_client((com.tbims.rpc.entity.SYS_CLIENT)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SYS_CLIENT:
        return getSys_client();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SYS_CLIENT:
        return isSetSys_client();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof gateStateSnyc_args)
        return this.equals((gateStateSnyc_args)that);
      return false;
    }

    public boolean equals(gateStateSnyc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sys_client = true && this.isSetSys_client();
      boolean that_present_sys_client = true && that.isSetSys_client();
      if (this_present_sys_client || that_present_sys_client) {
        if (!(this_present_sys_client && that_present_sys_client))
          return false;
        if (!this.sys_client.equals(that.sys_client))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_client()) ? 131071 : 524287);
      if (isSetSys_client())
        hashCode = hashCode * 8191 + sys_client.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(gateStateSnyc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_client()).compareTo(other.isSetSys_client());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_client()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_client, other.sys_client);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("gateStateSnyc_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_client:");
      if (this.sys_client == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_client);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (sys_client != null) {
        sys_client.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gateStateSnyc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gateStateSnyc_argsStandardScheme getScheme() {
        return new gateStateSnyc_argsStandardScheme();
      }
    }

    private static class gateStateSnyc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<gateStateSnyc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gateStateSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYS_CLIENT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_client = new com.tbims.rpc.entity.SYS_CLIENT();
                struct.sys_client.read(iprot);
                struct.setSys_clientIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gateStateSnyc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_client != null) {
          oprot.writeFieldBegin(SYS_CLIENT_FIELD_DESC);
          struct.sys_client.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gateStateSnyc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gateStateSnyc_argsTupleScheme getScheme() {
        return new gateStateSnyc_argsTupleScheme();
      }
    }

    private static class gateStateSnyc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<gateStateSnyc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gateStateSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSys_client()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSys_client()) {
          struct.sys_client.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gateStateSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_client = new com.tbims.rpc.entity.SYS_CLIENT();
          struct.sys_client.read(iprot);
          struct.setSys_clientIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class gateStateSnyc_result implements org.apache.thrift.TBase<gateStateSnyc_result, gateStateSnyc_result._Fields>, java.io.Serializable, Cloneable, Comparable<gateStateSnyc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("gateStateSnyc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new gateStateSnyc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new gateStateSnyc_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(gateStateSnyc_result.class, metaDataMap);
    }

    public gateStateSnyc_result() {
    }

    public gateStateSnyc_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public gateStateSnyc_result(gateStateSnyc_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public gateStateSnyc_result deepCopy() {
      return new gateStateSnyc_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public gateStateSnyc_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public gateStateSnyc_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof gateStateSnyc_result)
        return this.equals((gateStateSnyc_result)that);
      return false;
    }

    public boolean equals(gateStateSnyc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(gateStateSnyc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("gateStateSnyc_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class gateStateSnyc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gateStateSnyc_resultStandardScheme getScheme() {
        return new gateStateSnyc_resultStandardScheme();
      }
    }

    private static class gateStateSnyc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<gateStateSnyc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, gateStateSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, gateStateSnyc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class gateStateSnyc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public gateStateSnyc_resultTupleScheme getScheme() {
        return new gateStateSnyc_resultTupleScheme();
      }
    }

    private static class gateStateSnyc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<gateStateSnyc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, gateStateSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, gateStateSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ejectTicketStatSync_args implements org.apache.thrift.TBase<ejectTicketStatSync_args, ejectTicketStatSync_args._Fields>, java.io.Serializable, Cloneable, Comparable<ejectTicketStatSync_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ejectTicketStatSync_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ticket_num", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ejectTicketStatSync_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ejectTicketStatSync_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 状态
     */
    public int state; // required
    /**
     * 余票数量(自助售票机用) A:数量,B:数量
     */
    public java.lang.String ticket_num; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 状态
       */
      STATE((short)2, "state"),
      /**
       * 余票数量(自助售票机用) A:数量,B:数量
       */
      TICKET_NUM((short)3, "ticket_num");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // STATE
            return STATE;
          case 3: // TICKET_NUM
            return TICKET_NUM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __STATE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("ticket_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ejectTicketStatSync_args.class, metaDataMap);
    }

    public ejectTicketStatSync_args() {
    }

    public ejectTicketStatSync_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      int state,
      java.lang.String ticket_num)
    {
      this();
      this.auth = auth;
      this.state = state;
      setStateIsSet(true);
      this.ticket_num = ticket_num;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ejectTicketStatSync_args(ejectTicketStatSync_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.state = other.state;
      if (other.isSetTicket_num()) {
        this.ticket_num = other.ticket_num;
      }
    }

    public ejectTicketStatSync_args deepCopy() {
      return new ejectTicketStatSync_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setStateIsSet(false);
      this.state = 0;
      this.ticket_num = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public ejectTicketStatSync_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 状态
     */
    public int getState() {
      return this.state;
    }

    /**
     * 状态
     */
    public ejectTicketStatSync_args setState(int state) {
      this.state = state;
      setStateIsSet(true);
      return this;
    }

    public void unsetState() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __STATE_ISSET_ID);
    }

    public void setStateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __STATE_ISSET_ID, value);
    }

    /**
     * 余票数量(自助售票机用) A:数量,B:数量
     */
    public java.lang.String getTicket_num() {
      return this.ticket_num;
    }

    /**
     * 余票数量(自助售票机用) A:数量,B:数量
     */
    public ejectTicketStatSync_args setTicket_num(java.lang.String ticket_num) {
      this.ticket_num = ticket_num;
      return this;
    }

    public void unsetTicket_num() {
      this.ticket_num = null;
    }

    /** Returns true if field ticket_num is set (has been assigned a value) and false otherwise */
    public boolean isSetTicket_num() {
      return this.ticket_num != null;
    }

    public void setTicket_numIsSet(boolean value) {
      if (!value) {
        this.ticket_num = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((java.lang.Integer)value);
        }
        break;

      case TICKET_NUM:
        if (value == null) {
          unsetTicket_num();
        } else {
          setTicket_num((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case STATE:
        return getState();

      case TICKET_NUM:
        return getTicket_num();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case STATE:
        return isSetState();
      case TICKET_NUM:
        return isSetTicket_num();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ejectTicketStatSync_args)
        return this.equals((ejectTicketStatSync_args)that);
      return false;
    }

    public boolean equals(ejectTicketStatSync_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_state = true;
      boolean that_present_state = true;
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (this.state != that.state)
          return false;
      }

      boolean this_present_ticket_num = true && this.isSetTicket_num();
      boolean that_present_ticket_num = true && that.isSetTicket_num();
      if (this_present_ticket_num || that_present_ticket_num) {
        if (!(this_present_ticket_num && that_present_ticket_num))
          return false;
        if (!this.ticket_num.equals(that.ticket_num))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + state;

      hashCode = hashCode * 8191 + ((isSetTicket_num()) ? 131071 : 524287);
      if (isSetTicket_num())
        hashCode = hashCode * 8191 + ticket_num.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ejectTicketStatSync_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTicket_num()).compareTo(other.isSetTicket_num());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicket_num()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticket_num, other.ticket_num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ejectTicketStatSync_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      sb.append(this.state);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ticket_num:");
      if (this.ticket_num == null) {
        sb.append("null");
      } else {
        sb.append(this.ticket_num);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ejectTicketStatSync_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicketStatSync_argsStandardScheme getScheme() {
        return new ejectTicketStatSync_argsStandardScheme();
      }
    }

    private static class ejectTicketStatSync_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ejectTicketStatSync_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ejectTicketStatSync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = iprot.readI32();
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TICKET_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ticket_num = iprot.readString();
                struct.setTicket_numIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ejectTicketStatSync_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(STATE_FIELD_DESC);
        oprot.writeI32(struct.state);
        oprot.writeFieldEnd();
        if (struct.ticket_num != null) {
          oprot.writeFieldBegin(TICKET_NUM_FIELD_DESC);
          oprot.writeString(struct.ticket_num);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ejectTicketStatSync_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicketStatSync_argsTupleScheme getScheme() {
        return new ejectTicketStatSync_argsTupleScheme();
      }
    }

    private static class ejectTicketStatSync_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ejectTicketStatSync_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ejectTicketStatSync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetState()) {
          optionals.set(1);
        }
        if (struct.isSetTicket_num()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state);
        }
        if (struct.isSetTicket_num()) {
          oprot.writeString(struct.ticket_num);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ejectTicketStatSync_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.state = iprot.readI32();
          struct.setStateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ticket_num = iprot.readString();
          struct.setTicket_numIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ejectTicketStatSync_result implements org.apache.thrift.TBase<ejectTicketStatSync_result, ejectTicketStatSync_result._Fields>, java.io.Serializable, Cloneable, Comparable<ejectTicketStatSync_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ejectTicketStatSync_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ejectTicketStatSync_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ejectTicketStatSync_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ejectTicketStatSync_result.class, metaDataMap);
    }

    public ejectTicketStatSync_result() {
    }

    public ejectTicketStatSync_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ejectTicketStatSync_result(ejectTicketStatSync_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public ejectTicketStatSync_result deepCopy() {
      return new ejectTicketStatSync_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ejectTicketStatSync_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public ejectTicketStatSync_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ejectTicketStatSync_result)
        return this.equals((ejectTicketStatSync_result)that);
      return false;
    }

    public boolean equals(ejectTicketStatSync_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ejectTicketStatSync_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ejectTicketStatSync_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ejectTicketStatSync_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicketStatSync_resultStandardScheme getScheme() {
        return new ejectTicketStatSync_resultStandardScheme();
      }
    }

    private static class ejectTicketStatSync_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ejectTicketStatSync_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ejectTicketStatSync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ejectTicketStatSync_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ejectTicketStatSync_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicketStatSync_resultTupleScheme getScheme() {
        return new ejectTicketStatSync_resultTupleScheme();
      }
    }

    private static class ejectTicketStatSync_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ejectTicketStatSync_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ejectTicketStatSync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ejectTicketStatSync_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class empRegisterSnyc_args implements org.apache.thrift.TBase<empRegisterSnyc_args, empRegisterSnyc_args._Fields>, java.io.Serializable, Cloneable, Comparable<empRegisterSnyc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("empRegisterSnyc_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("version_no", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new empRegisterSnyc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new empRegisterSnyc_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 版本号
     */
    public long version_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 版本号
       */
      VERSION_NO((short)2, "version_no");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // VERSION_NO
            return VERSION_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_NO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("version_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(empRegisterSnyc_args.class, metaDataMap);
    }

    public empRegisterSnyc_args() {
    }

    public empRegisterSnyc_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long version_no)
    {
      this();
      this.auth = auth;
      this.version_no = version_no;
      setVersion_noIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public empRegisterSnyc_args(empRegisterSnyc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.version_no = other.version_no;
    }

    public empRegisterSnyc_args deepCopy() {
      return new empRegisterSnyc_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setVersion_noIsSet(false);
      this.version_no = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public empRegisterSnyc_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 版本号
     */
    public long getVersion_no() {
      return this.version_no;
    }

    /**
     * 版本号
     */
    public empRegisterSnyc_args setVersion_no(long version_no) {
      this.version_no = version_no;
      setVersion_noIsSet(true);
      return this;
    }

    public void unsetVersion_no() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    /** Returns true if field version_no is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_no() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    public void setVersion_noIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_NO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case VERSION_NO:
        if (value == null) {
          unsetVersion_no();
        } else {
          setVersion_no((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case VERSION_NO:
        return getVersion_no();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case VERSION_NO:
        return isSetVersion_no();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof empRegisterSnyc_args)
        return this.equals((empRegisterSnyc_args)that);
      return false;
    }

    public boolean equals(empRegisterSnyc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_version_no = true;
      boolean that_present_version_no = true;
      if (this_present_version_no || that_present_version_no) {
        if (!(this_present_version_no && that_present_version_no))
          return false;
        if (this.version_no != that.version_no)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_no);

      return hashCode;
    }

    @Override
    public int compareTo(empRegisterSnyc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion_no()).compareTo(other.isSetVersion_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_no, other.version_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("empRegisterSnyc_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_no:");
      sb.append(this.version_no);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class empRegisterSnyc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterSnyc_argsStandardScheme getScheme() {
        return new empRegisterSnyc_argsStandardScheme();
      }
    }

    private static class empRegisterSnyc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<empRegisterSnyc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, empRegisterSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version_no = iprot.readI64();
                struct.setVersion_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, empRegisterSnyc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.version_no);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class empRegisterSnyc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterSnyc_argsTupleScheme getScheme() {
        return new empRegisterSnyc_argsTupleScheme();
      }
    }

    private static class empRegisterSnyc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<empRegisterSnyc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, empRegisterSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetVersion_no()) {
          oprot.writeI64(struct.version_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, empRegisterSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_no = iprot.readI64();
          struct.setVersion_noIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class empRegisterSnyc_result implements org.apache.thrift.TBase<empRegisterSnyc_result, empRegisterSnyc_result._Fields>, java.io.Serializable, Cloneable, Comparable<empRegisterSnyc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("empRegisterSnyc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new empRegisterSnyc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new empRegisterSnyc_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_EMP_REGISTER.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(empRegisterSnyc_result.class, metaDataMap);
    }

    public empRegisterSnyc_result() {
    }

    public empRegisterSnyc_result(
      java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public empRegisterSnyc_result(empRegisterSnyc_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>(other.success.size());
        for (com.tbims.rpc.entity.SYS_EMP_REGISTER other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_EMP_REGISTER(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public empRegisterSnyc_result deepCopy() {
      return new empRegisterSnyc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_EMP_REGISTER> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_EMP_REGISTER elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> getSuccess() {
      return this.success;
    }

    public empRegisterSnyc_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public empRegisterSnyc_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof empRegisterSnyc_result)
        return this.equals((empRegisterSnyc_result)that);
      return false;
    }

    public boolean equals(empRegisterSnyc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(empRegisterSnyc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("empRegisterSnyc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class empRegisterSnyc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterSnyc_resultStandardScheme getScheme() {
        return new empRegisterSnyc_resultStandardScheme();
      }
    }

    private static class empRegisterSnyc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<empRegisterSnyc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, empRegisterSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list112 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>(_list112.size);
                  com.tbims.rpc.entity.SYS_EMP_REGISTER _elem113;
                  for (int _i114 = 0; _i114 < _list112.size; ++_i114)
                  {
                    _elem113 = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
                    _elem113.read(iprot);
                    struct.success.add(_elem113);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, empRegisterSnyc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_EMP_REGISTER _iter115 : struct.success)
            {
              _iter115.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class empRegisterSnyc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterSnyc_resultTupleScheme getScheme() {
        return new empRegisterSnyc_resultTupleScheme();
      }
    }

    private static class empRegisterSnyc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<empRegisterSnyc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, empRegisterSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_EMP_REGISTER _iter116 : struct.success)
            {
              _iter116.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, empRegisterSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list117 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>(_list117.size);
            com.tbims.rpc.entity.SYS_EMP_REGISTER _elem118;
            for (int _i119 = 0; _i119 < _list117.size; ++_i119)
            {
              _elem118 = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
              _elem118.read(iprot);
              struct.success.add(_elem118);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryEmpRegister_args implements org.apache.thrift.TBase<queryEmpRegister_args, queryEmpRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryEmpRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryEmpRegister_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SYS_EMP_REGISTER_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_emp_register", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryEmpRegister_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryEmpRegister_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 员工卡信息
     */
    public com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 员工卡信息
       */
      SYS_EMP_REGISTER((short)2, "sys_emp_register");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SYS_EMP_REGISTER
            return SYS_EMP_REGISTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SYS_EMP_REGISTER, new org.apache.thrift.meta_data.FieldMetaData("sys_emp_register", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_EMP_REGISTER.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryEmpRegister_args.class, metaDataMap);
    }

    public queryEmpRegister_args() {
    }

    public queryEmpRegister_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
    {
      this();
      this.auth = auth;
      this.sys_emp_register = sys_emp_register;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryEmpRegister_args(queryEmpRegister_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSys_emp_register()) {
        this.sys_emp_register = new com.tbims.rpc.entity.SYS_EMP_REGISTER(other.sys_emp_register);
      }
    }

    public queryEmpRegister_args deepCopy() {
      return new queryEmpRegister_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sys_emp_register = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public queryEmpRegister_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 员工卡信息
     */
    public com.tbims.rpc.entity.SYS_EMP_REGISTER getSys_emp_register() {
      return this.sys_emp_register;
    }

    /**
     * 员工卡信息
     */
    public queryEmpRegister_args setSys_emp_register(com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) {
      this.sys_emp_register = sys_emp_register;
      return this;
    }

    public void unsetSys_emp_register() {
      this.sys_emp_register = null;
    }

    /** Returns true if field sys_emp_register is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_emp_register() {
      return this.sys_emp_register != null;
    }

    public void setSys_emp_registerIsSet(boolean value) {
      if (!value) {
        this.sys_emp_register = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SYS_EMP_REGISTER:
        if (value == null) {
          unsetSys_emp_register();
        } else {
          setSys_emp_register((com.tbims.rpc.entity.SYS_EMP_REGISTER)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SYS_EMP_REGISTER:
        return getSys_emp_register();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SYS_EMP_REGISTER:
        return isSetSys_emp_register();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryEmpRegister_args)
        return this.equals((queryEmpRegister_args)that);
      return false;
    }

    public boolean equals(queryEmpRegister_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sys_emp_register = true && this.isSetSys_emp_register();
      boolean that_present_sys_emp_register = true && that.isSetSys_emp_register();
      if (this_present_sys_emp_register || that_present_sys_emp_register) {
        if (!(this_present_sys_emp_register && that_present_sys_emp_register))
          return false;
        if (!this.sys_emp_register.equals(that.sys_emp_register))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_emp_register()) ? 131071 : 524287);
      if (isSetSys_emp_register())
        hashCode = hashCode * 8191 + sys_emp_register.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryEmpRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_emp_register()).compareTo(other.isSetSys_emp_register());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_emp_register()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_emp_register, other.sys_emp_register);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryEmpRegister_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_emp_register:");
      if (this.sys_emp_register == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_emp_register);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (sys_emp_register != null) {
        sys_emp_register.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryEmpRegister_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryEmpRegister_argsStandardScheme getScheme() {
        return new queryEmpRegister_argsStandardScheme();
      }
    }

    private static class queryEmpRegister_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryEmpRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryEmpRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYS_EMP_REGISTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_emp_register = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
                struct.sys_emp_register.read(iprot);
                struct.setSys_emp_registerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryEmpRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_emp_register != null) {
          oprot.writeFieldBegin(SYS_EMP_REGISTER_FIELD_DESC);
          struct.sys_emp_register.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryEmpRegister_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryEmpRegister_argsTupleScheme getScheme() {
        return new queryEmpRegister_argsTupleScheme();
      }
    }

    private static class queryEmpRegister_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryEmpRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryEmpRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSys_emp_register()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSys_emp_register()) {
          struct.sys_emp_register.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryEmpRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_emp_register = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
          struct.sys_emp_register.read(iprot);
          struct.setSys_emp_registerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryEmpRegister_result implements org.apache.thrift.TBase<queryEmpRegister_result, queryEmpRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryEmpRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryEmpRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryEmpRegister_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryEmpRegister_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_EMP_REGISTER.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryEmpRegister_result.class, metaDataMap);
    }

    public queryEmpRegister_result() {
    }

    public queryEmpRegister_result(
      java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryEmpRegister_result(queryEmpRegister_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>(other.success.size());
        for (com.tbims.rpc.entity.SYS_EMP_REGISTER other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_EMP_REGISTER(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public queryEmpRegister_result deepCopy() {
      return new queryEmpRegister_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_EMP_REGISTER> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_EMP_REGISTER elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> getSuccess() {
      return this.success;
    }

    public queryEmpRegister_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public queryEmpRegister_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_EMP_REGISTER>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryEmpRegister_result)
        return this.equals((queryEmpRegister_result)that);
      return false;
    }

    public boolean equals(queryEmpRegister_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryEmpRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryEmpRegister_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryEmpRegister_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryEmpRegister_resultStandardScheme getScheme() {
        return new queryEmpRegister_resultStandardScheme();
      }
    }

    private static class queryEmpRegister_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryEmpRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryEmpRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list120 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>(_list120.size);
                  com.tbims.rpc.entity.SYS_EMP_REGISTER _elem121;
                  for (int _i122 = 0; _i122 < _list120.size; ++_i122)
                  {
                    _elem121 = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
                    _elem121.read(iprot);
                    struct.success.add(_elem121);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryEmpRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_EMP_REGISTER _iter123 : struct.success)
            {
              _iter123.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryEmpRegister_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryEmpRegister_resultTupleScheme getScheme() {
        return new queryEmpRegister_resultTupleScheme();
      }
    }

    private static class queryEmpRegister_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryEmpRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryEmpRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_EMP_REGISTER _iter124 : struct.success)
            {
              _iter124.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryEmpRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list125 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_EMP_REGISTER>(_list125.size);
            com.tbims.rpc.entity.SYS_EMP_REGISTER _elem126;
            for (int _i127 = 0; _i127 < _list125.size; ++_i127)
            {
              _elem126 = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
              _elem126.read(iprot);
              struct.success.add(_elem126);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveOrUpdateEmpRegister_args implements org.apache.thrift.TBase<saveOrUpdateEmpRegister_args, saveOrUpdateEmpRegister_args._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrUpdateEmpRegister_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrUpdateEmpRegister_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SYS_EMP_REGISTER_FIELD_DESC = new org.apache.thrift.protocol.TField("sys_emp_register", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveOrUpdateEmpRegister_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveOrUpdateEmpRegister_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 员工卡信息
     */
    public com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 员工卡信息
       */
      SYS_EMP_REGISTER((short)2, "sys_emp_register");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SYS_EMP_REGISTER
            return SYS_EMP_REGISTER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SYS_EMP_REGISTER, new org.apache.thrift.meta_data.FieldMetaData("sys_emp_register", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_EMP_REGISTER.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrUpdateEmpRegister_args.class, metaDataMap);
    }

    public saveOrUpdateEmpRegister_args() {
    }

    public saveOrUpdateEmpRegister_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register)
    {
      this();
      this.auth = auth;
      this.sys_emp_register = sys_emp_register;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrUpdateEmpRegister_args(saveOrUpdateEmpRegister_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSys_emp_register()) {
        this.sys_emp_register = new com.tbims.rpc.entity.SYS_EMP_REGISTER(other.sys_emp_register);
      }
    }

    public saveOrUpdateEmpRegister_args deepCopy() {
      return new saveOrUpdateEmpRegister_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sys_emp_register = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public saveOrUpdateEmpRegister_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 员工卡信息
     */
    public com.tbims.rpc.entity.SYS_EMP_REGISTER getSys_emp_register() {
      return this.sys_emp_register;
    }

    /**
     * 员工卡信息
     */
    public saveOrUpdateEmpRegister_args setSys_emp_register(com.tbims.rpc.entity.SYS_EMP_REGISTER sys_emp_register) {
      this.sys_emp_register = sys_emp_register;
      return this;
    }

    public void unsetSys_emp_register() {
      this.sys_emp_register = null;
    }

    /** Returns true if field sys_emp_register is set (has been assigned a value) and false otherwise */
    public boolean isSetSys_emp_register() {
      return this.sys_emp_register != null;
    }

    public void setSys_emp_registerIsSet(boolean value) {
      if (!value) {
        this.sys_emp_register = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SYS_EMP_REGISTER:
        if (value == null) {
          unsetSys_emp_register();
        } else {
          setSys_emp_register((com.tbims.rpc.entity.SYS_EMP_REGISTER)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SYS_EMP_REGISTER:
        return getSys_emp_register();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SYS_EMP_REGISTER:
        return isSetSys_emp_register();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrUpdateEmpRegister_args)
        return this.equals((saveOrUpdateEmpRegister_args)that);
      return false;
    }

    public boolean equals(saveOrUpdateEmpRegister_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sys_emp_register = true && this.isSetSys_emp_register();
      boolean that_present_sys_emp_register = true && that.isSetSys_emp_register();
      if (this_present_sys_emp_register || that_present_sys_emp_register) {
        if (!(this_present_sys_emp_register && that_present_sys_emp_register))
          return false;
        if (!this.sys_emp_register.equals(that.sys_emp_register))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSys_emp_register()) ? 131071 : 524287);
      if (isSetSys_emp_register())
        hashCode = hashCode * 8191 + sys_emp_register.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveOrUpdateEmpRegister_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSys_emp_register()).compareTo(other.isSetSys_emp_register());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSys_emp_register()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sys_emp_register, other.sys_emp_register);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveOrUpdateEmpRegister_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sys_emp_register:");
      if (this.sys_emp_register == null) {
        sb.append("null");
      } else {
        sb.append(this.sys_emp_register);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (sys_emp_register != null) {
        sys_emp_register.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrUpdateEmpRegister_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateEmpRegister_argsStandardScheme getScheme() {
        return new saveOrUpdateEmpRegister_argsStandardScheme();
      }
    }

    private static class saveOrUpdateEmpRegister_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveOrUpdateEmpRegister_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrUpdateEmpRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SYS_EMP_REGISTER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sys_emp_register = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
                struct.sys_emp_register.read(iprot);
                struct.setSys_emp_registerIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrUpdateEmpRegister_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sys_emp_register != null) {
          oprot.writeFieldBegin(SYS_EMP_REGISTER_FIELD_DESC);
          struct.sys_emp_register.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrUpdateEmpRegister_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateEmpRegister_argsTupleScheme getScheme() {
        return new saveOrUpdateEmpRegister_argsTupleScheme();
      }
    }

    private static class saveOrUpdateEmpRegister_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveOrUpdateEmpRegister_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateEmpRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSys_emp_register()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSys_emp_register()) {
          struct.sys_emp_register.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateEmpRegister_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sys_emp_register = new com.tbims.rpc.entity.SYS_EMP_REGISTER();
          struct.sys_emp_register.read(iprot);
          struct.setSys_emp_registerIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saveOrUpdateEmpRegister_result implements org.apache.thrift.TBase<saveOrUpdateEmpRegister_result, saveOrUpdateEmpRegister_result._Fields>, java.io.Serializable, Cloneable, Comparable<saveOrUpdateEmpRegister_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saveOrUpdateEmpRegister_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saveOrUpdateEmpRegister_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saveOrUpdateEmpRegister_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saveOrUpdateEmpRegister_result.class, metaDataMap);
    }

    public saveOrUpdateEmpRegister_result() {
    }

    public saveOrUpdateEmpRegister_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saveOrUpdateEmpRegister_result(saveOrUpdateEmpRegister_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public saveOrUpdateEmpRegister_result deepCopy() {
      return new saveOrUpdateEmpRegister_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public saveOrUpdateEmpRegister_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public saveOrUpdateEmpRegister_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saveOrUpdateEmpRegister_result)
        return this.equals((saveOrUpdateEmpRegister_result)that);
      return false;
    }

    public boolean equals(saveOrUpdateEmpRegister_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saveOrUpdateEmpRegister_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saveOrUpdateEmpRegister_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saveOrUpdateEmpRegister_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateEmpRegister_resultStandardScheme getScheme() {
        return new saveOrUpdateEmpRegister_resultStandardScheme();
      }
    }

    private static class saveOrUpdateEmpRegister_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saveOrUpdateEmpRegister_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saveOrUpdateEmpRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saveOrUpdateEmpRegister_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saveOrUpdateEmpRegister_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saveOrUpdateEmpRegister_resultTupleScheme getScheme() {
        return new saveOrUpdateEmpRegister_resultTupleScheme();
      }
    }

    private static class saveOrUpdateEmpRegister_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saveOrUpdateEmpRegister_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateEmpRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saveOrUpdateEmpRegister_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class empRegisterStat_args implements org.apache.thrift.TBase<empRegisterStat_args, empRegisterStat_args._Fields>, java.io.Serializable, Cloneable, Comparable<empRegisterStat_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("empRegisterStat_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("empId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("stat", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new empRegisterStat_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new empRegisterStat_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 员工编号
     */
    public long empId; // required
    /**
     * 状态
     */
    public java.lang.String stat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 员工编号
       */
      EMP_ID((short)2, "empId"),
      /**
       * 状态
       */
      STAT((short)3, "stat");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // EMP_ID
            return EMP_ID;
          case 3: // STAT
            return STAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.EMP_ID, new org.apache.thrift.meta_data.FieldMetaData("empId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.STAT, new org.apache.thrift.meta_data.FieldMetaData("stat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(empRegisterStat_args.class, metaDataMap);
    }

    public empRegisterStat_args() {
    }

    public empRegisterStat_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long empId,
      java.lang.String stat)
    {
      this();
      this.auth = auth;
      this.empId = empId;
      setEmpIdIsSet(true);
      this.stat = stat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public empRegisterStat_args(empRegisterStat_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.empId = other.empId;
      if (other.isSetStat()) {
        this.stat = other.stat;
      }
    }

    public empRegisterStat_args deepCopy() {
      return new empRegisterStat_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setEmpIdIsSet(false);
      this.empId = 0;
      this.stat = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public empRegisterStat_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 员工编号
     */
    public long getEmpId() {
      return this.empId;
    }

    /**
     * 员工编号
     */
    public empRegisterStat_args setEmpId(long empId) {
      this.empId = empId;
      setEmpIdIsSet(true);
      return this;
    }

    public void unsetEmpId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPID_ISSET_ID);
    }

    /** Returns true if field empId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmpId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPID_ISSET_ID);
    }

    public void setEmpIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPID_ISSET_ID, value);
    }

    /**
     * 状态
     */
    public java.lang.String getStat() {
      return this.stat;
    }

    /**
     * 状态
     */
    public empRegisterStat_args setStat(java.lang.String stat) {
      this.stat = stat;
      return this;
    }

    public void unsetStat() {
      this.stat = null;
    }

    /** Returns true if field stat is set (has been assigned a value) and false otherwise */
    public boolean isSetStat() {
      return this.stat != null;
    }

    public void setStatIsSet(boolean value) {
      if (!value) {
        this.stat = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case EMP_ID:
        if (value == null) {
          unsetEmpId();
        } else {
          setEmpId((java.lang.Long)value);
        }
        break;

      case STAT:
        if (value == null) {
          unsetStat();
        } else {
          setStat((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case EMP_ID:
        return getEmpId();

      case STAT:
        return getStat();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case EMP_ID:
        return isSetEmpId();
      case STAT:
        return isSetStat();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof empRegisterStat_args)
        return this.equals((empRegisterStat_args)that);
      return false;
    }

    public boolean equals(empRegisterStat_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_empId = true;
      boolean that_present_empId = true;
      if (this_present_empId || that_present_empId) {
        if (!(this_present_empId && that_present_empId))
          return false;
        if (this.empId != that.empId)
          return false;
      }

      boolean this_present_stat = true && this.isSetStat();
      boolean that_present_stat = true && that.isSetStat();
      if (this_present_stat || that_present_stat) {
        if (!(this_present_stat && that_present_stat))
          return false;
        if (!this.stat.equals(that.stat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(empId);

      hashCode = hashCode * 8191 + ((isSetStat()) ? 131071 : 524287);
      if (isSetStat())
        hashCode = hashCode * 8191 + stat.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(empRegisterStat_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEmpId()).compareTo(other.isSetEmpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empId, other.empId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetStat()).compareTo(other.isSetStat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetStat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.stat, other.stat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("empRegisterStat_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("empId:");
      sb.append(this.empId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("stat:");
      if (this.stat == null) {
        sb.append("null");
      } else {
        sb.append(this.stat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class empRegisterStat_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterStat_argsStandardScheme getScheme() {
        return new empRegisterStat_argsStandardScheme();
      }
    }

    private static class empRegisterStat_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<empRegisterStat_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, empRegisterStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.empId = iprot.readI64();
                struct.setEmpIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.stat = iprot.readString();
                struct.setStatIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, empRegisterStat_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EMP_ID_FIELD_DESC);
        oprot.writeI64(struct.empId);
        oprot.writeFieldEnd();
        if (struct.stat != null) {
          oprot.writeFieldBegin(STAT_FIELD_DESC);
          oprot.writeString(struct.stat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class empRegisterStat_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterStat_argsTupleScheme getScheme() {
        return new empRegisterStat_argsTupleScheme();
      }
    }

    private static class empRegisterStat_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<empRegisterStat_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, empRegisterStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetEmpId()) {
          optionals.set(1);
        }
        if (struct.isSetStat()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetEmpId()) {
          oprot.writeI64(struct.empId);
        }
        if (struct.isSetStat()) {
          oprot.writeString(struct.stat);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, empRegisterStat_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.empId = iprot.readI64();
          struct.setEmpIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.stat = iprot.readString();
          struct.setStatIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class empRegisterStat_result implements org.apache.thrift.TBase<empRegisterStat_result, empRegisterStat_result._Fields>, java.io.Serializable, Cloneable, Comparable<empRegisterStat_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("empRegisterStat_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new empRegisterStat_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new empRegisterStat_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(empRegisterStat_result.class, metaDataMap);
    }

    public empRegisterStat_result() {
    }

    public empRegisterStat_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public empRegisterStat_result(empRegisterStat_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public empRegisterStat_result deepCopy() {
      return new empRegisterStat_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public empRegisterStat_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public empRegisterStat_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof empRegisterStat_result)
        return this.equals((empRegisterStat_result)that);
      return false;
    }

    public boolean equals(empRegisterStat_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(empRegisterStat_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("empRegisterStat_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class empRegisterStat_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterStat_resultStandardScheme getScheme() {
        return new empRegisterStat_resultStandardScheme();
      }
    }

    private static class empRegisterStat_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<empRegisterStat_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, empRegisterStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, empRegisterStat_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class empRegisterStat_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterStat_resultTupleScheme getScheme() {
        return new empRegisterStat_resultTupleScheme();
      }
    }

    private static class empRegisterStat_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<empRegisterStat_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, empRegisterStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, empRegisterStat_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class empRegisterChipId_args implements org.apache.thrift.TBase<empRegisterChipId_args, empRegisterChipId_args._Fields>, java.io.Serializable, Cloneable, Comparable<empRegisterChipId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("empRegisterChipId_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EMP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("empId", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField CHIP_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("chip_id", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new empRegisterChipId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new empRegisterChipId_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 员工编号
     */
    public long empId; // required
    /**
     * 芯片ID
     */
    public java.lang.String chip_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 员工编号
       */
      EMP_ID((short)2, "empId"),
      /**
       * 芯片ID
       */
      CHIP_ID((short)3, "chip_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // EMP_ID
            return EMP_ID;
          case 3: // CHIP_ID
            return CHIP_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __EMPID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.EMP_ID, new org.apache.thrift.meta_data.FieldMetaData("empId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.CHIP_ID, new org.apache.thrift.meta_data.FieldMetaData("chip_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(empRegisterChipId_args.class, metaDataMap);
    }

    public empRegisterChipId_args() {
    }

    public empRegisterChipId_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long empId,
      java.lang.String chip_id)
    {
      this();
      this.auth = auth;
      this.empId = empId;
      setEmpIdIsSet(true);
      this.chip_id = chip_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public empRegisterChipId_args(empRegisterChipId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.empId = other.empId;
      if (other.isSetChip_id()) {
        this.chip_id = other.chip_id;
      }
    }

    public empRegisterChipId_args deepCopy() {
      return new empRegisterChipId_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setEmpIdIsSet(false);
      this.empId = 0;
      this.chip_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public empRegisterChipId_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 员工编号
     */
    public long getEmpId() {
      return this.empId;
    }

    /**
     * 员工编号
     */
    public empRegisterChipId_args setEmpId(long empId) {
      this.empId = empId;
      setEmpIdIsSet(true);
      return this;
    }

    public void unsetEmpId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __EMPID_ISSET_ID);
    }

    /** Returns true if field empId is set (has been assigned a value) and false otherwise */
    public boolean isSetEmpId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __EMPID_ISSET_ID);
    }

    public void setEmpIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __EMPID_ISSET_ID, value);
    }

    /**
     * 芯片ID
     */
    public java.lang.String getChip_id() {
      return this.chip_id;
    }

    /**
     * 芯片ID
     */
    public empRegisterChipId_args setChip_id(java.lang.String chip_id) {
      this.chip_id = chip_id;
      return this;
    }

    public void unsetChip_id() {
      this.chip_id = null;
    }

    /** Returns true if field chip_id is set (has been assigned a value) and false otherwise */
    public boolean isSetChip_id() {
      return this.chip_id != null;
    }

    public void setChip_idIsSet(boolean value) {
      if (!value) {
        this.chip_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case EMP_ID:
        if (value == null) {
          unsetEmpId();
        } else {
          setEmpId((java.lang.Long)value);
        }
        break;

      case CHIP_ID:
        if (value == null) {
          unsetChip_id();
        } else {
          setChip_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case EMP_ID:
        return getEmpId();

      case CHIP_ID:
        return getChip_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case EMP_ID:
        return isSetEmpId();
      case CHIP_ID:
        return isSetChip_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof empRegisterChipId_args)
        return this.equals((empRegisterChipId_args)that);
      return false;
    }

    public boolean equals(empRegisterChipId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_empId = true;
      boolean that_present_empId = true;
      if (this_present_empId || that_present_empId) {
        if (!(this_present_empId && that_present_empId))
          return false;
        if (this.empId != that.empId)
          return false;
      }

      boolean this_present_chip_id = true && this.isSetChip_id();
      boolean that_present_chip_id = true && that.isSetChip_id();
      if (this_present_chip_id || that_present_chip_id) {
        if (!(this_present_chip_id && that_present_chip_id))
          return false;
        if (!this.chip_id.equals(that.chip_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(empId);

      hashCode = hashCode * 8191 + ((isSetChip_id()) ? 131071 : 524287);
      if (isSetChip_id())
        hashCode = hashCode * 8191 + chip_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(empRegisterChipId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEmpId()).compareTo(other.isSetEmpId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEmpId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.empId, other.empId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChip_id()).compareTo(other.isSetChip_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChip_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chip_id, other.chip_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("empRegisterChipId_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("empId:");
      sb.append(this.empId);
      first = false;
      if (!first) sb.append(", ");
      sb.append("chip_id:");
      if (this.chip_id == null) {
        sb.append("null");
      } else {
        sb.append(this.chip_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class empRegisterChipId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterChipId_argsStandardScheme getScheme() {
        return new empRegisterChipId_argsStandardScheme();
      }
    }

    private static class empRegisterChipId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<empRegisterChipId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, empRegisterChipId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EMP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.empId = iprot.readI64();
                struct.setEmpIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CHIP_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.chip_id = iprot.readString();
                struct.setChip_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, empRegisterChipId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(EMP_ID_FIELD_DESC);
        oprot.writeI64(struct.empId);
        oprot.writeFieldEnd();
        if (struct.chip_id != null) {
          oprot.writeFieldBegin(CHIP_ID_FIELD_DESC);
          oprot.writeString(struct.chip_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class empRegisterChipId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterChipId_argsTupleScheme getScheme() {
        return new empRegisterChipId_argsTupleScheme();
      }
    }

    private static class empRegisterChipId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<empRegisterChipId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, empRegisterChipId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetEmpId()) {
          optionals.set(1);
        }
        if (struct.isSetChip_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetEmpId()) {
          oprot.writeI64(struct.empId);
        }
        if (struct.isSetChip_id()) {
          oprot.writeString(struct.chip_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, empRegisterChipId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.empId = iprot.readI64();
          struct.setEmpIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.chip_id = iprot.readString();
          struct.setChip_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class empRegisterChipId_result implements org.apache.thrift.TBase<empRegisterChipId_result, empRegisterChipId_result._Fields>, java.io.Serializable, Cloneable, Comparable<empRegisterChipId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("empRegisterChipId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new empRegisterChipId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new empRegisterChipId_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(empRegisterChipId_result.class, metaDataMap);
    }

    public empRegisterChipId_result() {
    }

    public empRegisterChipId_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public empRegisterChipId_result(empRegisterChipId_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public empRegisterChipId_result deepCopy() {
      return new empRegisterChipId_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public empRegisterChipId_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public empRegisterChipId_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof empRegisterChipId_result)
        return this.equals((empRegisterChipId_result)that);
      return false;
    }

    public boolean equals(empRegisterChipId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(empRegisterChipId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("empRegisterChipId_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class empRegisterChipId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterChipId_resultStandardScheme getScheme() {
        return new empRegisterChipId_resultStandardScheme();
      }
    }

    private static class empRegisterChipId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<empRegisterChipId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, empRegisterChipId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, empRegisterChipId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class empRegisterChipId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public empRegisterChipId_resultTupleScheme getScheme() {
        return new empRegisterChipId_resultTupleScheme();
      }
    }

    private static class empRegisterChipId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<empRegisterChipId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, empRegisterChipId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, empRegisterChipId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketTypeSnyc_args implements org.apache.thrift.TBase<ticketTypeSnyc_args, ticketTypeSnyc_args._Fields>, java.io.Serializable, Cloneable, Comparable<ticketTypeSnyc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketTypeSnyc_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("version_no", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketTypeSnyc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketTypeSnyc_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 版本号
     */
    public long version_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 版本号
       */
      VERSION_NO((short)2, "version_no");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // VERSION_NO
            return VERSION_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_NO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("version_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketTypeSnyc_args.class, metaDataMap);
    }

    public ticketTypeSnyc_args() {
    }

    public ticketTypeSnyc_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long version_no)
    {
      this();
      this.auth = auth;
      this.version_no = version_no;
      setVersion_noIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketTypeSnyc_args(ticketTypeSnyc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.version_no = other.version_no;
    }

    public ticketTypeSnyc_args deepCopy() {
      return new ticketTypeSnyc_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setVersion_noIsSet(false);
      this.version_no = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public ticketTypeSnyc_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 版本号
     */
    public long getVersion_no() {
      return this.version_no;
    }

    /**
     * 版本号
     */
    public ticketTypeSnyc_args setVersion_no(long version_no) {
      this.version_no = version_no;
      setVersion_noIsSet(true);
      return this;
    }

    public void unsetVersion_no() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    /** Returns true if field version_no is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_no() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    public void setVersion_noIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_NO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case VERSION_NO:
        if (value == null) {
          unsetVersion_no();
        } else {
          setVersion_no((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case VERSION_NO:
        return getVersion_no();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case VERSION_NO:
        return isSetVersion_no();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketTypeSnyc_args)
        return this.equals((ticketTypeSnyc_args)that);
      return false;
    }

    public boolean equals(ticketTypeSnyc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_version_no = true;
      boolean that_present_version_no = true;
      if (this_present_version_no || that_present_version_no) {
        if (!(this_present_version_no && that_present_version_no))
          return false;
        if (this.version_no != that.version_no)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_no);

      return hashCode;
    }

    @Override
    public int compareTo(ticketTypeSnyc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion_no()).compareTo(other.isSetVersion_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_no, other.version_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketTypeSnyc_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_no:");
      sb.append(this.version_no);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketTypeSnyc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketTypeSnyc_argsStandardScheme getScheme() {
        return new ticketTypeSnyc_argsStandardScheme();
      }
    }

    private static class ticketTypeSnyc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketTypeSnyc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketTypeSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version_no = iprot.readI64();
                struct.setVersion_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketTypeSnyc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.version_no);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketTypeSnyc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketTypeSnyc_argsTupleScheme getScheme() {
        return new ticketTypeSnyc_argsTupleScheme();
      }
    }

    private static class ticketTypeSnyc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketTypeSnyc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketTypeSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetVersion_no()) {
          oprot.writeI64(struct.version_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketTypeSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_no = iprot.readI64();
          struct.setVersion_noIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketTypeSnyc_result implements org.apache.thrift.TBase<ticketTypeSnyc_result, ticketTypeSnyc_result._Fields>, java.io.Serializable, Cloneable, Comparable<ticketTypeSnyc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketTypeSnyc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketTypeSnyc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketTypeSnyc_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_TICKET_TYPE.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketTypeSnyc_result.class, metaDataMap);
    }

    public ticketTypeSnyc_result() {
    }

    public ticketTypeSnyc_result(
      java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketTypeSnyc_result(ticketTypeSnyc_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_TICKET_TYPE>(other.success.size());
        for (com.tbims.rpc.entity.SYS_TICKET_TYPE other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_TICKET_TYPE(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public ticketTypeSnyc_result deepCopy() {
      return new ticketTypeSnyc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_TICKET_TYPE> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_TICKET_TYPE elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_TICKET_TYPE>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> getSuccess() {
      return this.success;
    }

    public ticketTypeSnyc_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public ticketTypeSnyc_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_TICKET_TYPE>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketTypeSnyc_result)
        return this.equals((ticketTypeSnyc_result)that);
      return false;
    }

    public boolean equals(ticketTypeSnyc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ticketTypeSnyc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketTypeSnyc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketTypeSnyc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketTypeSnyc_resultStandardScheme getScheme() {
        return new ticketTypeSnyc_resultStandardScheme();
      }
    }

    private static class ticketTypeSnyc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketTypeSnyc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketTypeSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list128 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_TICKET_TYPE>(_list128.size);
                  com.tbims.rpc.entity.SYS_TICKET_TYPE _elem129;
                  for (int _i130 = 0; _i130 < _list128.size; ++_i130)
                  {
                    _elem129 = new com.tbims.rpc.entity.SYS_TICKET_TYPE();
                    _elem129.read(iprot);
                    struct.success.add(_elem129);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketTypeSnyc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_TICKET_TYPE _iter131 : struct.success)
            {
              _iter131.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketTypeSnyc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketTypeSnyc_resultTupleScheme getScheme() {
        return new ticketTypeSnyc_resultTupleScheme();
      }
    }

    private static class ticketTypeSnyc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketTypeSnyc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketTypeSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_TICKET_TYPE _iter132 : struct.success)
            {
              _iter132.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketTypeSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list133 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_TICKET_TYPE>(_list133.size);
            com.tbims.rpc.entity.SYS_TICKET_TYPE _elem134;
            for (int _i135 = 0; _i135 < _list133.size; ++_i135)
            {
              _elem134 = new com.tbims.rpc.entity.SYS_TICKET_TYPE();
              _elem134.read(iprot);
              struct.success.add(_elem134);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sysVenueSnyc_args implements org.apache.thrift.TBase<sysVenueSnyc_args, sysVenueSnyc_args._Fields>, java.io.Serializable, Cloneable, Comparable<sysVenueSnyc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sysVenueSnyc_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sysVenueSnyc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sysVenueSnyc_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sysVenueSnyc_args.class, metaDataMap);
    }

    public sysVenueSnyc_args() {
    }

    public sysVenueSnyc_args(
      com.tbims.rpc.entity.AUTHORIZATION auth)
    {
      this();
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sysVenueSnyc_args(sysVenueSnyc_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
    }

    public sysVenueSnyc_args deepCopy() {
      return new sysVenueSnyc_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public sysVenueSnyc_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sysVenueSnyc_args)
        return this.equals((sysVenueSnyc_args)that);
      return false;
    }

    public boolean equals(sysVenueSnyc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sysVenueSnyc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sysVenueSnyc_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sysVenueSnyc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysVenueSnyc_argsStandardScheme getScheme() {
        return new sysVenueSnyc_argsStandardScheme();
      }
    }

    private static class sysVenueSnyc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sysVenueSnyc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sysVenueSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sysVenueSnyc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sysVenueSnyc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysVenueSnyc_argsTupleScheme getScheme() {
        return new sysVenueSnyc_argsTupleScheme();
      }
    }

    private static class sysVenueSnyc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sysVenueSnyc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sysVenueSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sysVenueSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sysVenueSnyc_result implements org.apache.thrift.TBase<sysVenueSnyc_result, sysVenueSnyc_result._Fields>, java.io.Serializable, Cloneable, Comparable<sysVenueSnyc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sysVenueSnyc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sysVenueSnyc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sysVenueSnyc_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_VENUE> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_VENUE.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sysVenueSnyc_result.class, metaDataMap);
    }

    public sysVenueSnyc_result() {
    }

    public sysVenueSnyc_result(
      java.util.List<com.tbims.rpc.entity.SYS_VENUE> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sysVenueSnyc_result(sysVenueSnyc_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_VENUE> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_VENUE>(other.success.size());
        for (com.tbims.rpc.entity.SYS_VENUE other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_VENUE(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public sysVenueSnyc_result deepCopy() {
      return new sysVenueSnyc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_VENUE> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_VENUE elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_VENUE>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_VENUE> getSuccess() {
      return this.success;
    }

    public sysVenueSnyc_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_VENUE> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public sysVenueSnyc_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_VENUE>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sysVenueSnyc_result)
        return this.equals((sysVenueSnyc_result)that);
      return false;
    }

    public boolean equals(sysVenueSnyc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sysVenueSnyc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sysVenueSnyc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sysVenueSnyc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysVenueSnyc_resultStandardScheme getScheme() {
        return new sysVenueSnyc_resultStandardScheme();
      }
    }

    private static class sysVenueSnyc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sysVenueSnyc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sysVenueSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list136 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_VENUE>(_list136.size);
                  com.tbims.rpc.entity.SYS_VENUE _elem137;
                  for (int _i138 = 0; _i138 < _list136.size; ++_i138)
                  {
                    _elem137 = new com.tbims.rpc.entity.SYS_VENUE();
                    _elem137.read(iprot);
                    struct.success.add(_elem137);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sysVenueSnyc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_VENUE _iter139 : struct.success)
            {
              _iter139.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sysVenueSnyc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysVenueSnyc_resultTupleScheme getScheme() {
        return new sysVenueSnyc_resultTupleScheme();
      }
    }

    private static class sysVenueSnyc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sysVenueSnyc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sysVenueSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_VENUE _iter140 : struct.success)
            {
              _iter140.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sysVenueSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list141 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_VENUE>(_list141.size);
            com.tbims.rpc.entity.SYS_VENUE _elem142;
            for (int _i143 = 0; _i143 < _list141.size; ++_i143)
            {
              _elem142 = new com.tbims.rpc.entity.SYS_VENUE();
              _elem142.read(iprot);
              struct.success.add(_elem142);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class blacklistSnyc_args implements org.apache.thrift.TBase<blacklistSnyc_args, blacklistSnyc_args._Fields>, java.io.Serializable, Cloneable, Comparable<blacklistSnyc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blacklistSnyc_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("version_no", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new blacklistSnyc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new blacklistSnyc_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 版本号
     */
    public long version_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 版本号
       */
      VERSION_NO((short)2, "version_no");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // VERSION_NO
            return VERSION_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_NO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("version_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(blacklistSnyc_args.class, metaDataMap);
    }

    public blacklistSnyc_args() {
    }

    public blacklistSnyc_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long version_no)
    {
      this();
      this.auth = auth;
      this.version_no = version_no;
      setVersion_noIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blacklistSnyc_args(blacklistSnyc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.version_no = other.version_no;
    }

    public blacklistSnyc_args deepCopy() {
      return new blacklistSnyc_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setVersion_noIsSet(false);
      this.version_no = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public blacklistSnyc_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 版本号
     */
    public long getVersion_no() {
      return this.version_no;
    }

    /**
     * 版本号
     */
    public blacklistSnyc_args setVersion_no(long version_no) {
      this.version_no = version_no;
      setVersion_noIsSet(true);
      return this;
    }

    public void unsetVersion_no() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    /** Returns true if field version_no is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_no() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    public void setVersion_noIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_NO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case VERSION_NO:
        if (value == null) {
          unsetVersion_no();
        } else {
          setVersion_no((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case VERSION_NO:
        return getVersion_no();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case VERSION_NO:
        return isSetVersion_no();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof blacklistSnyc_args)
        return this.equals((blacklistSnyc_args)that);
      return false;
    }

    public boolean equals(blacklistSnyc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_version_no = true;
      boolean that_present_version_no = true;
      if (this_present_version_no || that_present_version_no) {
        if (!(this_present_version_no && that_present_version_no))
          return false;
        if (this.version_no != that.version_no)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_no);

      return hashCode;
    }

    @Override
    public int compareTo(blacklistSnyc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion_no()).compareTo(other.isSetVersion_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_no, other.version_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("blacklistSnyc_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_no:");
      sb.append(this.version_no);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class blacklistSnyc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public blacklistSnyc_argsStandardScheme getScheme() {
        return new blacklistSnyc_argsStandardScheme();
      }
    }

    private static class blacklistSnyc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<blacklistSnyc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, blacklistSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version_no = iprot.readI64();
                struct.setVersion_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, blacklistSnyc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.version_no);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class blacklistSnyc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public blacklistSnyc_argsTupleScheme getScheme() {
        return new blacklistSnyc_argsTupleScheme();
      }
    }

    private static class blacklistSnyc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<blacklistSnyc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, blacklistSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetVersion_no()) {
          oprot.writeI64(struct.version_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, blacklistSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_no = iprot.readI64();
          struct.setVersion_noIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class blacklistSnyc_result implements org.apache.thrift.TBase<blacklistSnyc_result, blacklistSnyc_result._Fields>, java.io.Serializable, Cloneable, Comparable<blacklistSnyc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("blacklistSnyc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new blacklistSnyc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new blacklistSnyc_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_BLACK_LIST.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(blacklistSnyc_result.class, metaDataMap);
    }

    public blacklistSnyc_result() {
    }

    public blacklistSnyc_result(
      java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public blacklistSnyc_result(blacklistSnyc_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_BLACK_LIST>(other.success.size());
        for (com.tbims.rpc.entity.SYS_BLACK_LIST other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_BLACK_LIST(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public blacklistSnyc_result deepCopy() {
      return new blacklistSnyc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_BLACK_LIST> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_BLACK_LIST elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_BLACK_LIST>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> getSuccess() {
      return this.success;
    }

    public blacklistSnyc_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public blacklistSnyc_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_BLACK_LIST>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof blacklistSnyc_result)
        return this.equals((blacklistSnyc_result)that);
      return false;
    }

    public boolean equals(blacklistSnyc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(blacklistSnyc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("blacklistSnyc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class blacklistSnyc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public blacklistSnyc_resultStandardScheme getScheme() {
        return new blacklistSnyc_resultStandardScheme();
      }
    }

    private static class blacklistSnyc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<blacklistSnyc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, blacklistSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list144 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_BLACK_LIST>(_list144.size);
                  com.tbims.rpc.entity.SYS_BLACK_LIST _elem145;
                  for (int _i146 = 0; _i146 < _list144.size; ++_i146)
                  {
                    _elem145 = new com.tbims.rpc.entity.SYS_BLACK_LIST();
                    _elem145.read(iprot);
                    struct.success.add(_elem145);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, blacklistSnyc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_BLACK_LIST _iter147 : struct.success)
            {
              _iter147.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class blacklistSnyc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public blacklistSnyc_resultTupleScheme getScheme() {
        return new blacklistSnyc_resultTupleScheme();
      }
    }

    private static class blacklistSnyc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<blacklistSnyc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, blacklistSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_BLACK_LIST _iter148 : struct.success)
            {
              _iter148.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, blacklistSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list149 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_BLACK_LIST>(_list149.size);
            com.tbims.rpc.entity.SYS_BLACK_LIST _elem150;
            for (int _i151 = 0; _i151 < _list149.size; ++_i151)
            {
              _elem150 = new com.tbims.rpc.entity.SYS_BLACK_LIST();
              _elem150.read(iprot);
              struct.success.add(_elem150);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sysDictionarySnyc_args implements org.apache.thrift.TBase<sysDictionarySnyc_args, sysDictionarySnyc_args._Fields>, java.io.Serializable, Cloneable, Comparable<sysDictionarySnyc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sysDictionarySnyc_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("version_no", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sysDictionarySnyc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sysDictionarySnyc_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 版本号
     */
    public long version_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 版本号
       */
      VERSION_NO((short)2, "version_no");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // VERSION_NO
            return VERSION_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_NO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("version_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sysDictionarySnyc_args.class, metaDataMap);
    }

    public sysDictionarySnyc_args() {
    }

    public sysDictionarySnyc_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long version_no)
    {
      this();
      this.auth = auth;
      this.version_no = version_no;
      setVersion_noIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sysDictionarySnyc_args(sysDictionarySnyc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.version_no = other.version_no;
    }

    public sysDictionarySnyc_args deepCopy() {
      return new sysDictionarySnyc_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setVersion_noIsSet(false);
      this.version_no = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public sysDictionarySnyc_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 版本号
     */
    public long getVersion_no() {
      return this.version_no;
    }

    /**
     * 版本号
     */
    public sysDictionarySnyc_args setVersion_no(long version_no) {
      this.version_no = version_no;
      setVersion_noIsSet(true);
      return this;
    }

    public void unsetVersion_no() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    /** Returns true if field version_no is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_no() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    public void setVersion_noIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_NO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case VERSION_NO:
        if (value == null) {
          unsetVersion_no();
        } else {
          setVersion_no((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case VERSION_NO:
        return getVersion_no();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case VERSION_NO:
        return isSetVersion_no();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sysDictionarySnyc_args)
        return this.equals((sysDictionarySnyc_args)that);
      return false;
    }

    public boolean equals(sysDictionarySnyc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_version_no = true;
      boolean that_present_version_no = true;
      if (this_present_version_no || that_present_version_no) {
        if (!(this_present_version_no && that_present_version_no))
          return false;
        if (this.version_no != that.version_no)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_no);

      return hashCode;
    }

    @Override
    public int compareTo(sysDictionarySnyc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion_no()).compareTo(other.isSetVersion_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_no, other.version_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sysDictionarySnyc_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_no:");
      sb.append(this.version_no);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sysDictionarySnyc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysDictionarySnyc_argsStandardScheme getScheme() {
        return new sysDictionarySnyc_argsStandardScheme();
      }
    }

    private static class sysDictionarySnyc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sysDictionarySnyc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sysDictionarySnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version_no = iprot.readI64();
                struct.setVersion_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sysDictionarySnyc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.version_no);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sysDictionarySnyc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysDictionarySnyc_argsTupleScheme getScheme() {
        return new sysDictionarySnyc_argsTupleScheme();
      }
    }

    private static class sysDictionarySnyc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sysDictionarySnyc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sysDictionarySnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetVersion_no()) {
          oprot.writeI64(struct.version_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sysDictionarySnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_no = iprot.readI64();
          struct.setVersion_noIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sysDictionarySnyc_result implements org.apache.thrift.TBase<sysDictionarySnyc_result, sysDictionarySnyc_result._Fields>, java.io.Serializable, Cloneable, Comparable<sysDictionarySnyc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sysDictionarySnyc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sysDictionarySnyc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sysDictionarySnyc_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_DICTIONARY.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sysDictionarySnyc_result.class, metaDataMap);
    }

    public sysDictionarySnyc_result() {
    }

    public sysDictionarySnyc_result(
      java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sysDictionarySnyc_result(sysDictionarySnyc_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_DICTIONARY>(other.success.size());
        for (com.tbims.rpc.entity.SYS_DICTIONARY other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_DICTIONARY(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public sysDictionarySnyc_result deepCopy() {
      return new sysDictionarySnyc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_DICTIONARY> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_DICTIONARY elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_DICTIONARY>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> getSuccess() {
      return this.success;
    }

    public sysDictionarySnyc_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public sysDictionarySnyc_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_DICTIONARY>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sysDictionarySnyc_result)
        return this.equals((sysDictionarySnyc_result)that);
      return false;
    }

    public boolean equals(sysDictionarySnyc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sysDictionarySnyc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sysDictionarySnyc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sysDictionarySnyc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysDictionarySnyc_resultStandardScheme getScheme() {
        return new sysDictionarySnyc_resultStandardScheme();
      }
    }

    private static class sysDictionarySnyc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sysDictionarySnyc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sysDictionarySnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list152 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_DICTIONARY>(_list152.size);
                  com.tbims.rpc.entity.SYS_DICTIONARY _elem153;
                  for (int _i154 = 0; _i154 < _list152.size; ++_i154)
                  {
                    _elem153 = new com.tbims.rpc.entity.SYS_DICTIONARY();
                    _elem153.read(iprot);
                    struct.success.add(_elem153);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sysDictionarySnyc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_DICTIONARY _iter155 : struct.success)
            {
              _iter155.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sysDictionarySnyc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysDictionarySnyc_resultTupleScheme getScheme() {
        return new sysDictionarySnyc_resultTupleScheme();
      }
    }

    private static class sysDictionarySnyc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sysDictionarySnyc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sysDictionarySnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_DICTIONARY _iter156 : struct.success)
            {
              _iter156.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sysDictionarySnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list157 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_DICTIONARY>(_list157.size);
            com.tbims.rpc.entity.SYS_DICTIONARY _elem158;
            for (int _i159 = 0; _i159 < _list157.size; ++_i159)
            {
              _elem158 = new com.tbims.rpc.entity.SYS_DICTIONARY();
              _elem158.read(iprot);
              struct.success.add(_elem158);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sysParemeterSnyc_args implements org.apache.thrift.TBase<sysParemeterSnyc_args, sysParemeterSnyc_args._Fields>, java.io.Serializable, Cloneable, Comparable<sysParemeterSnyc_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sysParemeterSnyc_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("version_no", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sysParemeterSnyc_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sysParemeterSnyc_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 版本号
     */
    public long version_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 版本号
       */
      VERSION_NO((short)2, "version_no");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // VERSION_NO
            return VERSION_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_NO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("version_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sysParemeterSnyc_args.class, metaDataMap);
    }

    public sysParemeterSnyc_args() {
    }

    public sysParemeterSnyc_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long version_no)
    {
      this();
      this.auth = auth;
      this.version_no = version_no;
      setVersion_noIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sysParemeterSnyc_args(sysParemeterSnyc_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.version_no = other.version_no;
    }

    public sysParemeterSnyc_args deepCopy() {
      return new sysParemeterSnyc_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setVersion_noIsSet(false);
      this.version_no = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public sysParemeterSnyc_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 版本号
     */
    public long getVersion_no() {
      return this.version_no;
    }

    /**
     * 版本号
     */
    public sysParemeterSnyc_args setVersion_no(long version_no) {
      this.version_no = version_no;
      setVersion_noIsSet(true);
      return this;
    }

    public void unsetVersion_no() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    /** Returns true if field version_no is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_no() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    public void setVersion_noIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_NO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case VERSION_NO:
        if (value == null) {
          unsetVersion_no();
        } else {
          setVersion_no((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case VERSION_NO:
        return getVersion_no();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case VERSION_NO:
        return isSetVersion_no();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sysParemeterSnyc_args)
        return this.equals((sysParemeterSnyc_args)that);
      return false;
    }

    public boolean equals(sysParemeterSnyc_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_version_no = true;
      boolean that_present_version_no = true;
      if (this_present_version_no || that_present_version_no) {
        if (!(this_present_version_no && that_present_version_no))
          return false;
        if (this.version_no != that.version_no)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_no);

      return hashCode;
    }

    @Override
    public int compareTo(sysParemeterSnyc_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion_no()).compareTo(other.isSetVersion_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_no, other.version_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sysParemeterSnyc_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_no:");
      sb.append(this.version_no);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sysParemeterSnyc_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysParemeterSnyc_argsStandardScheme getScheme() {
        return new sysParemeterSnyc_argsStandardScheme();
      }
    }

    private static class sysParemeterSnyc_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<sysParemeterSnyc_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sysParemeterSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version_no = iprot.readI64();
                struct.setVersion_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sysParemeterSnyc_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.version_no);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sysParemeterSnyc_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysParemeterSnyc_argsTupleScheme getScheme() {
        return new sysParemeterSnyc_argsTupleScheme();
      }
    }

    private static class sysParemeterSnyc_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<sysParemeterSnyc_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sysParemeterSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetVersion_no()) {
          oprot.writeI64(struct.version_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sysParemeterSnyc_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_no = iprot.readI64();
          struct.setVersion_noIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class sysParemeterSnyc_result implements org.apache.thrift.TBase<sysParemeterSnyc_result, sysParemeterSnyc_result._Fields>, java.io.Serializable, Cloneable, Comparable<sysParemeterSnyc_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("sysParemeterSnyc_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new sysParemeterSnyc_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new sysParemeterSnyc_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_PAREMETER.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(sysParemeterSnyc_result.class, metaDataMap);
    }

    public sysParemeterSnyc_result() {
    }

    public sysParemeterSnyc_result(
      java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public sysParemeterSnyc_result(sysParemeterSnyc_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_PAREMETER>(other.success.size());
        for (com.tbims.rpc.entity.SYS_PAREMETER other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_PAREMETER(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public sysParemeterSnyc_result deepCopy() {
      return new sysParemeterSnyc_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_PAREMETER> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_PAREMETER elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_PAREMETER>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> getSuccess() {
      return this.success;
    }

    public sysParemeterSnyc_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_PAREMETER> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public sysParemeterSnyc_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_PAREMETER>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof sysParemeterSnyc_result)
        return this.equals((sysParemeterSnyc_result)that);
      return false;
    }

    public boolean equals(sysParemeterSnyc_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(sysParemeterSnyc_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("sysParemeterSnyc_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class sysParemeterSnyc_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysParemeterSnyc_resultStandardScheme getScheme() {
        return new sysParemeterSnyc_resultStandardScheme();
      }
    }

    private static class sysParemeterSnyc_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<sysParemeterSnyc_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, sysParemeterSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list160 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_PAREMETER>(_list160.size);
                  com.tbims.rpc.entity.SYS_PAREMETER _elem161;
                  for (int _i162 = 0; _i162 < _list160.size; ++_i162)
                  {
                    _elem161 = new com.tbims.rpc.entity.SYS_PAREMETER();
                    _elem161.read(iprot);
                    struct.success.add(_elem161);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, sysParemeterSnyc_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_PAREMETER _iter163 : struct.success)
            {
              _iter163.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class sysParemeterSnyc_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public sysParemeterSnyc_resultTupleScheme getScheme() {
        return new sysParemeterSnyc_resultTupleScheme();
      }
    }

    private static class sysParemeterSnyc_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<sysParemeterSnyc_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, sysParemeterSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_PAREMETER _iter164 : struct.success)
            {
              _iter164.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, sysParemeterSnyc_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list165 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_PAREMETER>(_list165.size);
            com.tbims.rpc.entity.SYS_PAREMETER _elem166;
            for (int _i167 = 0; _i167 < _list165.size; ++_i167)
            {
              _elem166 = new com.tbims.rpc.entity.SYS_PAREMETER();
              _elem166.read(iprot);
              struct.success.add(_elem166);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class salePeriodQuery_args implements org.apache.thrift.TBase<salePeriodQuery_args, salePeriodQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<salePeriodQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("salePeriodQuery_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_NO_FIELD_DESC = new org.apache.thrift.protocol.TField("version_no", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new salePeriodQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new salePeriodQuery_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 版本号
     */
    public long version_no; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 版本号
       */
      VERSION_NO((short)2, "version_no");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // VERSION_NO
            return VERSION_NO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VERSION_NO_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.VERSION_NO, new org.apache.thrift.meta_data.FieldMetaData("version_no", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(salePeriodQuery_args.class, metaDataMap);
    }

    public salePeriodQuery_args() {
    }

    public salePeriodQuery_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long version_no)
    {
      this();
      this.auth = auth;
      this.version_no = version_no;
      setVersion_noIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public salePeriodQuery_args(salePeriodQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.version_no = other.version_no;
    }

    public salePeriodQuery_args deepCopy() {
      return new salePeriodQuery_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setVersion_noIsSet(false);
      this.version_no = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public salePeriodQuery_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 版本号
     */
    public long getVersion_no() {
      return this.version_no;
    }

    /**
     * 版本号
     */
    public salePeriodQuery_args setVersion_no(long version_no) {
      this.version_no = version_no;
      setVersion_noIsSet(true);
      return this;
    }

    public void unsetVersion_no() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    /** Returns true if field version_no is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion_no() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VERSION_NO_ISSET_ID);
    }

    public void setVersion_noIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VERSION_NO_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case VERSION_NO:
        if (value == null) {
          unsetVersion_no();
        } else {
          setVersion_no((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case VERSION_NO:
        return getVersion_no();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case VERSION_NO:
        return isSetVersion_no();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof salePeriodQuery_args)
        return this.equals((salePeriodQuery_args)that);
      return false;
    }

    public boolean equals(salePeriodQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_version_no = true;
      boolean that_present_version_no = true;
      if (this_present_version_no || that_present_version_no) {
        if (!(this_present_version_no && that_present_version_no))
          return false;
        if (this.version_no != that.version_no)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(version_no);

      return hashCode;
    }

    @Override
    public int compareTo(salePeriodQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion_no()).compareTo(other.isSetVersion_no());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion_no()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version_no, other.version_no);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("salePeriodQuery_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version_no:");
      sb.append(this.version_no);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class salePeriodQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salePeriodQuery_argsStandardScheme getScheme() {
        return new salePeriodQuery_argsStandardScheme();
      }
    }

    private static class salePeriodQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<salePeriodQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, salePeriodQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION_NO
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.version_no = iprot.readI64();
                struct.setVersion_noIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, salePeriodQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VERSION_NO_FIELD_DESC);
        oprot.writeI64(struct.version_no);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class salePeriodQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salePeriodQuery_argsTupleScheme getScheme() {
        return new salePeriodQuery_argsTupleScheme();
      }
    }

    private static class salePeriodQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<salePeriodQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, salePeriodQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetVersion_no()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetVersion_no()) {
          oprot.writeI64(struct.version_no);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, salePeriodQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version_no = iprot.readI64();
          struct.setVersion_noIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class salePeriodQuery_result implements org.apache.thrift.TBase<salePeriodQuery_result, salePeriodQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<salePeriodQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("salePeriodQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new salePeriodQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new salePeriodQuery_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SL_PERIOD> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_PERIOD.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(salePeriodQuery_result.class, metaDataMap);
    }

    public salePeriodQuery_result() {
    }

    public salePeriodQuery_result(
      java.util.List<com.tbims.rpc.entity.SL_PERIOD> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public salePeriodQuery_result(salePeriodQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SL_PERIOD> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SL_PERIOD>(other.success.size());
        for (com.tbims.rpc.entity.SL_PERIOD other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SL_PERIOD(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public salePeriodQuery_result deepCopy() {
      return new salePeriodQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_PERIOD> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SL_PERIOD elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_PERIOD>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SL_PERIOD> getSuccess() {
      return this.success;
    }

    public salePeriodQuery_result setSuccess(java.util.List<com.tbims.rpc.entity.SL_PERIOD> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public salePeriodQuery_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SL_PERIOD>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof salePeriodQuery_result)
        return this.equals((salePeriodQuery_result)that);
      return false;
    }

    public boolean equals(salePeriodQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(salePeriodQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("salePeriodQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class salePeriodQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salePeriodQuery_resultStandardScheme getScheme() {
        return new salePeriodQuery_resultStandardScheme();
      }
    }

    private static class salePeriodQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<salePeriodQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, salePeriodQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list168 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_PERIOD>(_list168.size);
                  com.tbims.rpc.entity.SL_PERIOD _elem169;
                  for (int _i170 = 0; _i170 < _list168.size; ++_i170)
                  {
                    _elem169 = new com.tbims.rpc.entity.SL_PERIOD();
                    _elem169.read(iprot);
                    struct.success.add(_elem169);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, salePeriodQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SL_PERIOD _iter171 : struct.success)
            {
              _iter171.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class salePeriodQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public salePeriodQuery_resultTupleScheme getScheme() {
        return new salePeriodQuery_resultTupleScheme();
      }
    }

    private static class salePeriodQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<salePeriodQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, salePeriodQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SL_PERIOD _iter172 : struct.success)
            {
              _iter172.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, salePeriodQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list173 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_PERIOD>(_list173.size);
            com.tbims.rpc.entity.SL_PERIOD _elem174;
            for (int _i175 = 0; _i175 < _list173.size; ++_i175)
            {
              _elem174 = new com.tbims.rpc.entity.SL_PERIOD();
              _elem174.read(iprot);
              struct.success.add(_elem174);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSystemDateTime_args implements org.apache.thrift.TBase<getSystemDateTime_args, getSystemDateTime_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSystemDateTime_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemDateTime_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSystemDateTime_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSystemDateTime_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemDateTime_args.class, metaDataMap);
    }

    public getSystemDateTime_args() {
    }

    public getSystemDateTime_args(
      com.tbims.rpc.entity.AUTHORIZATION auth)
    {
      this();
      this.auth = auth;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemDateTime_args(getSystemDateTime_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
    }

    public getSystemDateTime_args deepCopy() {
      return new getSystemDateTime_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public getSystemDateTime_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemDateTime_args)
        return this.equals((getSystemDateTime_args)that);
      return false;
    }

    public boolean equals(getSystemDateTime_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSystemDateTime_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSystemDateTime_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemDateTime_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSystemDateTime_argsStandardScheme getScheme() {
        return new getSystemDateTime_argsStandardScheme();
      }
    }

    private static class getSystemDateTime_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSystemDateTime_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemDateTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemDateTime_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemDateTime_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSystemDateTime_argsTupleScheme getScheme() {
        return new getSystemDateTime_argsTupleScheme();
      }
    }

    private static class getSystemDateTime_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSystemDateTime_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemDateTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemDateTime_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSystemDateTime_result implements org.apache.thrift.TBase<getSystemDateTime_result, getSystemDateTime_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSystemDateTime_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSystemDateTime_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSystemDateTime_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSystemDateTime_resultTupleSchemeFactory();

    public long success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSystemDateTime_result.class, metaDataMap);
    }

    public getSystemDateTime_result() {
    }

    public getSystemDateTime_result(
      long success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSystemDateTime_result(getSystemDateTime_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public getSystemDateTime_result deepCopy() {
      return new getSystemDateTime_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public long getSuccess() {
      return this.success;
    }

    public getSystemDateTime_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public getSystemDateTime_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Long)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSystemDateTime_result)
        return this.equals((getSystemDateTime_result)that);
      return false;
    }

    public boolean equals(getSystemDateTime_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(success);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSystemDateTime_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSystemDateTime_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSystemDateTime_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSystemDateTime_resultStandardScheme getScheme() {
        return new getSystemDateTime_resultStandardScheme();
      }
    }

    private static class getSystemDateTime_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSystemDateTime_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSystemDateTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSystemDateTime_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSystemDateTime_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSystemDateTime_resultTupleScheme getScheme() {
        return new getSystemDateTime_resultTupleScheme();
      }
    }

    private static class getSystemDateTime_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSystemDateTime_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSystemDateTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSystemDateTime_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryClient_args implements org.apache.thrift.TBase<queryClient_args, queryClient_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryClient_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryClient_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLIENT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("clientName", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField CLIENT_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("clientType", org.apache.thrift.protocol.TType.STRING, (short)4);
    private static final org.apache.thrift.protocol.TField REGION_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("regionIds", org.apache.thrift.protocol.TType.STRING, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryClient_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryClient_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 终端编号
     */
    public java.lang.String clientId; // required
    public java.lang.String clientName; // required
    /**
     * 终端类型
     */
    public java.lang.String clientType; // required
    /**
     * 类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔
     */
    public java.lang.String regionIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 终端编号
       */
      CLIENT_ID((short)2, "clientId"),
      CLIENT_NAME((short)3, "clientName"),
      /**
       * 终端类型
       */
      CLIENT_TYPE((short)4, "clientType"),
      /**
       * 类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔
       */
      REGION_IDS((short)5, "regionIds");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          case 3: // CLIENT_NAME
            return CLIENT_NAME;
          case 4: // CLIENT_TYPE
            return CLIENT_TYPE;
          case 5: // REGION_IDS
            return REGION_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_NAME, new org.apache.thrift.meta_data.FieldMetaData("clientName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.CLIENT_TYPE, new org.apache.thrift.meta_data.FieldMetaData("clientType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.REGION_IDS, new org.apache.thrift.meta_data.FieldMetaData("regionIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryClient_args.class, metaDataMap);
    }

    public queryClient_args() {
    }

    public queryClient_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String clientId,
      java.lang.String clientName,
      java.lang.String clientType,
      java.lang.String regionIds)
    {
      this();
      this.auth = auth;
      this.clientId = clientId;
      this.clientName = clientName;
      this.clientType = clientType;
      this.regionIds = regionIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryClient_args(queryClient_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetClientId()) {
        this.clientId = other.clientId;
      }
      if (other.isSetClientName()) {
        this.clientName = other.clientName;
      }
      if (other.isSetClientType()) {
        this.clientType = other.clientType;
      }
      if (other.isSetRegionIds()) {
        this.regionIds = other.regionIds;
      }
    }

    public queryClient_args deepCopy() {
      return new queryClient_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.clientId = null;
      this.clientName = null;
      this.clientType = null;
      this.regionIds = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public queryClient_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 终端编号
     */
    public java.lang.String getClientId() {
      return this.clientId;
    }

    /**
     * 终端编号
     */
    public queryClient_args setClientId(java.lang.String clientId) {
      this.clientId = clientId;
      return this;
    }

    public void unsetClientId() {
      this.clientId = null;
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return this.clientId != null;
    }

    public void setClientIdIsSet(boolean value) {
      if (!value) {
        this.clientId = null;
      }
    }

    public java.lang.String getClientName() {
      return this.clientName;
    }

    public queryClient_args setClientName(java.lang.String clientName) {
      this.clientName = clientName;
      return this;
    }

    public void unsetClientName() {
      this.clientName = null;
    }

    /** Returns true if field clientName is set (has been assigned a value) and false otherwise */
    public boolean isSetClientName() {
      return this.clientName != null;
    }

    public void setClientNameIsSet(boolean value) {
      if (!value) {
        this.clientName = null;
      }
    }

    /**
     * 终端类型
     */
    public java.lang.String getClientType() {
      return this.clientType;
    }

    /**
     * 终端类型
     */
    public queryClient_args setClientType(java.lang.String clientType) {
      this.clientType = clientType;
      return this;
    }

    public void unsetClientType() {
      this.clientType = null;
    }

    /** Returns true if field clientType is set (has been assigned a value) and false otherwise */
    public boolean isSetClientType() {
      return this.clientType != null;
    }

    public void setClientTypeIsSet(boolean value) {
      if (!value) {
        this.clientType = null;
      }
    }

    /**
     * 类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔
     */
    public java.lang.String getRegionIds() {
      return this.regionIds;
    }

    /**
     * 类型为2为区域编号、或类型为5时为网点编号，以,逗号分隔
     */
    public queryClient_args setRegionIds(java.lang.String regionIds) {
      this.regionIds = regionIds;
      return this;
    }

    public void unsetRegionIds() {
      this.regionIds = null;
    }

    /** Returns true if field regionIds is set (has been assigned a value) and false otherwise */
    public boolean isSetRegionIds() {
      return this.regionIds != null;
    }

    public void setRegionIdsIsSet(boolean value) {
      if (!value) {
        this.regionIds = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((java.lang.String)value);
        }
        break;

      case CLIENT_NAME:
        if (value == null) {
          unsetClientName();
        } else {
          setClientName((java.lang.String)value);
        }
        break;

      case CLIENT_TYPE:
        if (value == null) {
          unsetClientType();
        } else {
          setClientType((java.lang.String)value);
        }
        break;

      case REGION_IDS:
        if (value == null) {
          unsetRegionIds();
        } else {
          setRegionIds((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case CLIENT_ID:
        return getClientId();

      case CLIENT_NAME:
        return getClientName();

      case CLIENT_TYPE:
        return getClientType();

      case REGION_IDS:
        return getRegionIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case CLIENT_ID:
        return isSetClientId();
      case CLIENT_NAME:
        return isSetClientName();
      case CLIENT_TYPE:
        return isSetClientType();
      case REGION_IDS:
        return isSetRegionIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryClient_args)
        return this.equals((queryClient_args)that);
      return false;
    }

    public boolean equals(queryClient_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_clientId = true && this.isSetClientId();
      boolean that_present_clientId = true && that.isSetClientId();
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (!this.clientId.equals(that.clientId))
          return false;
      }

      boolean this_present_clientName = true && this.isSetClientName();
      boolean that_present_clientName = true && that.isSetClientName();
      if (this_present_clientName || that_present_clientName) {
        if (!(this_present_clientName && that_present_clientName))
          return false;
        if (!this.clientName.equals(that.clientName))
          return false;
      }

      boolean this_present_clientType = true && this.isSetClientType();
      boolean that_present_clientType = true && that.isSetClientType();
      if (this_present_clientType || that_present_clientType) {
        if (!(this_present_clientType && that_present_clientType))
          return false;
        if (!this.clientType.equals(that.clientType))
          return false;
      }

      boolean this_present_regionIds = true && this.isSetRegionIds();
      boolean that_present_regionIds = true && that.isSetRegionIds();
      if (this_present_regionIds || that_present_regionIds) {
        if (!(this_present_regionIds && that_present_regionIds))
          return false;
        if (!this.regionIds.equals(that.regionIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetClientId()) ? 131071 : 524287);
      if (isSetClientId())
        hashCode = hashCode * 8191 + clientId.hashCode();

      hashCode = hashCode * 8191 + ((isSetClientName()) ? 131071 : 524287);
      if (isSetClientName())
        hashCode = hashCode * 8191 + clientName.hashCode();

      hashCode = hashCode * 8191 + ((isSetClientType()) ? 131071 : 524287);
      if (isSetClientType())
        hashCode = hashCode * 8191 + clientType.hashCode();

      hashCode = hashCode * 8191 + ((isSetRegionIds()) ? 131071 : 524287);
      if (isSetRegionIds())
        hashCode = hashCode * 8191 + regionIds.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryClient_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientName()).compareTo(other.isSetClientName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientName, other.clientName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientType()).compareTo(other.isSetClientType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientType, other.clientType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRegionIds()).compareTo(other.isSetRegionIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRegionIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.regionIds, other.regionIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryClient_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      if (this.clientId == null) {
        sb.append("null");
      } else {
        sb.append(this.clientId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientName:");
      if (this.clientName == null) {
        sb.append("null");
      } else {
        sb.append(this.clientName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientType:");
      if (this.clientType == null) {
        sb.append("null");
      } else {
        sb.append(this.clientType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("regionIds:");
      if (this.regionIds == null) {
        sb.append("null");
      } else {
        sb.append(this.regionIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryClient_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryClient_argsStandardScheme getScheme() {
        return new queryClient_argsStandardScheme();
      }
    }

    private static class queryClient_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryClient_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientId = iprot.readString();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLIENT_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientName = iprot.readString();
                struct.setClientNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // CLIENT_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clientType = iprot.readString();
                struct.setClientTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // REGION_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.regionIds = iprot.readString();
                struct.setRegionIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryClient_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.clientId != null) {
          oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
          oprot.writeString(struct.clientId);
          oprot.writeFieldEnd();
        }
        if (struct.clientName != null) {
          oprot.writeFieldBegin(CLIENT_NAME_FIELD_DESC);
          oprot.writeString(struct.clientName);
          oprot.writeFieldEnd();
        }
        if (struct.clientType != null) {
          oprot.writeFieldBegin(CLIENT_TYPE_FIELD_DESC);
          oprot.writeString(struct.clientType);
          oprot.writeFieldEnd();
        }
        if (struct.regionIds != null) {
          oprot.writeFieldBegin(REGION_IDS_FIELD_DESC);
          oprot.writeString(struct.regionIds);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryClient_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryClient_argsTupleScheme getScheme() {
        return new queryClient_argsTupleScheme();
      }
    }

    private static class queryClient_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryClient_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        if (struct.isSetClientName()) {
          optionals.set(2);
        }
        if (struct.isSetClientType()) {
          optionals.set(3);
        }
        if (struct.isSetRegionIds()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeString(struct.clientId);
        }
        if (struct.isSetClientName()) {
          oprot.writeString(struct.clientName);
        }
        if (struct.isSetClientType()) {
          oprot.writeString(struct.clientType);
        }
        if (struct.isSetRegionIds()) {
          oprot.writeString(struct.regionIds);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryClient_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readString();
          struct.setClientIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.clientName = iprot.readString();
          struct.setClientNameIsSet(true);
        }
        if (incoming.get(3)) {
          struct.clientType = iprot.readString();
          struct.setClientTypeIsSet(true);
        }
        if (incoming.get(4)) {
          struct.regionIds = iprot.readString();
          struct.setRegionIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryClient_result implements org.apache.thrift.TBase<queryClient_result, queryClient_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryClient_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryClient_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryClient_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryClient_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SYS_CLIENT> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_CLIENT.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryClient_result.class, metaDataMap);
    }

    public queryClient_result() {
    }

    public queryClient_result(
      java.util.List<com.tbims.rpc.entity.SYS_CLIENT> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryClient_result(queryClient_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SYS_CLIENT> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_CLIENT>(other.success.size());
        for (com.tbims.rpc.entity.SYS_CLIENT other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SYS_CLIENT(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public queryClient_result deepCopy() {
      return new queryClient_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SYS_CLIENT> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SYS_CLIENT elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_CLIENT>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SYS_CLIENT> getSuccess() {
      return this.success;
    }

    public queryClient_result setSuccess(java.util.List<com.tbims.rpc.entity.SYS_CLIENT> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public queryClient_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SYS_CLIENT>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryClient_result)
        return this.equals((queryClient_result)that);
      return false;
    }

    public boolean equals(queryClient_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryClient_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryClient_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryClient_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryClient_resultStandardScheme getScheme() {
        return new queryClient_resultStandardScheme();
      }
    }

    private static class queryClient_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryClient_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list176 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_CLIENT>(_list176.size);
                  com.tbims.rpc.entity.SYS_CLIENT _elem177;
                  for (int _i178 = 0; _i178 < _list176.size; ++_i178)
                  {
                    _elem177 = new com.tbims.rpc.entity.SYS_CLIENT();
                    _elem177.read(iprot);
                    struct.success.add(_elem177);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryClient_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SYS_CLIENT _iter179 : struct.success)
            {
              _iter179.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryClient_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryClient_resultTupleScheme getScheme() {
        return new queryClient_resultTupleScheme();
      }
    }

    private static class queryClient_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryClient_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SYS_CLIENT _iter180 : struct.success)
            {
              _iter180.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryClient_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list181 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SYS_CLIENT>(_list181.size);
            com.tbims.rpc.entity.SYS_CLIENT _elem182;
            for (int _i183 = 0; _i183 < _list181.size; ++_i183)
            {
              _elem182 = new com.tbims.rpc.entity.SYS_CLIENT();
              _elem182.read(iprot);
              struct.success.add(_elem182);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryUselessTicket_args implements org.apache.thrift.TBase<queryUselessTicket_args, queryUselessTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryUselessTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUselessTicket_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUselessTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUselessTicket_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 网点编号
     */
    public long outlet_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 网点编号
       */
      OUTLET_ID((short)2, "outlet_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OUTLET_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUselessTicket_args.class, metaDataMap);
    }

    public queryUselessTicket_args() {
    }

    public queryUselessTicket_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long outlet_id)
    {
      this();
      this.auth = auth;
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUselessTicket_args(queryUselessTicket_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.outlet_id = other.outlet_id;
    }

    public queryUselessTicket_args deepCopy() {
      return new queryUselessTicket_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setOutlet_idIsSet(false);
      this.outlet_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public queryUselessTicket_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 网点编号
     */
    public long getOutlet_id() {
      return this.outlet_id;
    }

    /**
     * 网点编号
     */
    public queryUselessTicket_args setOutlet_id(long outlet_id) {
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
      return this;
    }

    public void unsetOutlet_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlet_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    public void setOutlet_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutlet_id();
        } else {
          setOutlet_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case OUTLET_ID:
        return getOutlet_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case OUTLET_ID:
        return isSetOutlet_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUselessTicket_args)
        return this.equals((queryUselessTicket_args)that);
      return false;
    }

    public boolean equals(queryUselessTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_outlet_id = true;
      boolean that_present_outlet_id = true;
      if (this_present_outlet_id || that_present_outlet_id) {
        if (!(this_present_outlet_id && that_present_outlet_id))
          return false;
        if (this.outlet_id != that.outlet_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outlet_id);

      return hashCode;
    }

    @Override
    public int compareTo(queryUselessTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutlet_id()).compareTo(other.isSetOutlet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, other.outlet_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUselessTicket_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUselessTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUselessTicket_argsStandardScheme getScheme() {
        return new queryUselessTicket_argsStandardScheme();
      }
    }

    private static class queryUselessTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUselessTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outlet_id = iprot.readI64();
                struct.setOutlet_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUselessTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outlet_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUselessTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUselessTicket_argsTupleScheme getScheme() {
        return new queryUselessTicket_argsTupleScheme();
      }
    }

    private static class queryUselessTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUselessTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetOutlet_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetOutlet_id()) {
          oprot.writeI64(struct.outlet_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outlet_id = iprot.readI64();
          struct.setOutlet_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryUselessTicket_result implements org.apache.thrift.TBase<queryUselessTicket_result, queryUselessTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryUselessTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryUselessTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryUselessTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryUselessTicket_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.USELESS_TICKET_DETAIL.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryUselessTicket_result.class, metaDataMap);
    }

    public queryUselessTicket_result() {
    }

    public queryUselessTicket_result(
      java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryUselessTicket_result(queryUselessTicket_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>(other.success.size());
        for (com.tbims.rpc.entity.USELESS_TICKET_DETAIL other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.USELESS_TICKET_DETAIL(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public queryUselessTicket_result deepCopy() {
      return new queryUselessTicket_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.USELESS_TICKET_DETAIL elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> getSuccess() {
      return this.success;
    }

    public queryUselessTicket_result setSuccess(java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public queryUselessTicket_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryUselessTicket_result)
        return this.equals((queryUselessTicket_result)that);
      return false;
    }

    public boolean equals(queryUselessTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryUselessTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryUselessTicket_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryUselessTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUselessTicket_resultStandardScheme getScheme() {
        return new queryUselessTicket_resultStandardScheme();
      }
    }

    private static class queryUselessTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryUselessTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryUselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list184 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>(_list184.size);
                  com.tbims.rpc.entity.USELESS_TICKET_DETAIL _elem185;
                  for (int _i186 = 0; _i186 < _list184.size; ++_i186)
                  {
                    _elem185 = new com.tbims.rpc.entity.USELESS_TICKET_DETAIL();
                    _elem185.read(iprot);
                    struct.success.add(_elem185);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryUselessTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.USELESS_TICKET_DETAIL _iter187 : struct.success)
            {
              _iter187.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryUselessTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryUselessTicket_resultTupleScheme getScheme() {
        return new queryUselessTicket_resultTupleScheme();
      }
    }

    private static class queryUselessTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryUselessTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryUselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.USELESS_TICKET_DETAIL _iter188 : struct.success)
            {
              _iter188.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryUselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list189 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>(_list189.size);
            com.tbims.rpc.entity.USELESS_TICKET_DETAIL _elem190;
            for (int _i191 = 0; _i191 < _list189.size; ++_i191)
            {
              _elem190 = new com.tbims.rpc.entity.USELESS_TICKET_DETAIL();
              _elem190.read(iprot);
              struct.success.add(_elem190);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySaleSupplyTicketG_args implements org.apache.thrift.TBase<querySaleSupplyTicketG_args, querySaleSupplyTicketG_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySaleSupplyTicketG_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySaleSupplyTicketG_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pay_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySaleSupplyTicketG_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySaleSupplyTicketG_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 第三方支付单号
     */
    public java.lang.String pay_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 第三方支付单号
       */
      PAY_ID((short)2, "pay_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PAY_ID
            return PAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.PAY_ID, new org.apache.thrift.meta_data.FieldMetaData("pay_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySaleSupplyTicketG_args.class, metaDataMap);
    }

    public querySaleSupplyTicketG_args() {
    }

    public querySaleSupplyTicketG_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String pay_id)
    {
      this();
      this.auth = auth;
      this.pay_id = pay_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySaleSupplyTicketG_args(querySaleSupplyTicketG_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetPay_id()) {
        this.pay_id = other.pay_id;
      }
    }

    public querySaleSupplyTicketG_args deepCopy() {
      return new querySaleSupplyTicketG_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.pay_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public querySaleSupplyTicketG_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 第三方支付单号
     */
    public java.lang.String getPay_id() {
      return this.pay_id;
    }

    /**
     * 第三方支付单号
     */
    public querySaleSupplyTicketG_args setPay_id(java.lang.String pay_id) {
      this.pay_id = pay_id;
      return this;
    }

    public void unsetPay_id() {
      this.pay_id = null;
    }

    /** Returns true if field pay_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPay_id() {
      return this.pay_id != null;
    }

    public void setPay_idIsSet(boolean value) {
      if (!value) {
        this.pay_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case PAY_ID:
        if (value == null) {
          unsetPay_id();
        } else {
          setPay_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PAY_ID:
        return getPay_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PAY_ID:
        return isSetPay_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySaleSupplyTicketG_args)
        return this.equals((querySaleSupplyTicketG_args)that);
      return false;
    }

    public boolean equals(querySaleSupplyTicketG_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_pay_id = true && this.isSetPay_id();
      boolean that_present_pay_id = true && that.isSetPay_id();
      if (this_present_pay_id || that_present_pay_id) {
        if (!(this_present_pay_id && that_present_pay_id))
          return false;
        if (!this.pay_id.equals(that.pay_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetPay_id()) ? 131071 : 524287);
      if (isSetPay_id())
        hashCode = hashCode * 8191 + pay_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querySaleSupplyTicketG_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPay_id()).compareTo(other.isSetPay_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPay_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pay_id, other.pay_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySaleSupplyTicketG_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pay_id:");
      if (this.pay_id == null) {
        sb.append("null");
      } else {
        sb.append(this.pay_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySaleSupplyTicketG_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketG_argsStandardScheme getScheme() {
        return new querySaleSupplyTicketG_argsStandardScheme();
      }
    }

    private static class querySaleSupplyTicketG_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySaleSupplyTicketG_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySaleSupplyTicketG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pay_id = iprot.readString();
                struct.setPay_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySaleSupplyTicketG_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pay_id != null) {
          oprot.writeFieldBegin(PAY_ID_FIELD_DESC);
          oprot.writeString(struct.pay_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySaleSupplyTicketG_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketG_argsTupleScheme getScheme() {
        return new querySaleSupplyTicketG_argsTupleScheme();
      }
    }

    private static class querySaleSupplyTicketG_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySaleSupplyTicketG_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetPay_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetPay_id()) {
          oprot.writeString(struct.pay_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pay_id = iprot.readString();
          struct.setPay_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySaleSupplyTicketG_result implements org.apache.thrift.TBase<querySaleSupplyTicketG_result, querySaleSupplyTicketG_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySaleSupplyTicketG_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySaleSupplyTicketG_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySaleSupplyTicketG_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySaleSupplyTicketG_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySaleSupplyTicketG_result.class, metaDataMap);
    }

    public querySaleSupplyTicketG_result() {
    }

    public querySaleSupplyTicketG_result(
      java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySaleSupplyTicketG_result(querySaleSupplyTicketG_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>(other.success.size());
        for (com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public querySaleSupplyTicketG_result deepCopy() {
      return new querySaleSupplyTicketG_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> getSuccess() {
      return this.success;
    }

    public querySaleSupplyTicketG_result setSuccess(java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public querySaleSupplyTicketG_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySaleSupplyTicketG_result)
        return this.equals((querySaleSupplyTicketG_result)that);
      return false;
    }

    public boolean equals(querySaleSupplyTicketG_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querySaleSupplyTicketG_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySaleSupplyTicketG_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySaleSupplyTicketG_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketG_resultStandardScheme getScheme() {
        return new querySaleSupplyTicketG_resultStandardScheme();
      }
    }

    private static class querySaleSupplyTicketG_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySaleSupplyTicketG_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySaleSupplyTicketG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list192 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>(_list192.size);
                  com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL _elem193;
                  for (int _i194 = 0; _i194 < _list192.size; ++_i194)
                  {
                    _elem193 = new com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL();
                    _elem193.read(iprot);
                    struct.success.add(_elem193);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySaleSupplyTicketG_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL _iter195 : struct.success)
            {
              _iter195.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySaleSupplyTicketG_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketG_resultTupleScheme getScheme() {
        return new querySaleSupplyTicketG_resultTupleScheme();
      }
    }

    private static class querySaleSupplyTicketG_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySaleSupplyTicketG_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL _iter196 : struct.success)
            {
              _iter196.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list197 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL>(_list197.size);
            com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL _elem198;
            for (int _i199 = 0; _i199 < _list197.size; ++_i199)
            {
              _elem198 = new com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL();
              _elem198.read(iprot);
              struct.success.add(_elem198);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySaleSupplyTicketQ_args implements org.apache.thrift.TBase<querySaleSupplyTicketQ_args, querySaleSupplyTicketQ_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySaleSupplyTicketQ_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySaleSupplyTicketQ_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField PAY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pay_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySaleSupplyTicketQ_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySaleSupplyTicketQ_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 第三方支付单号
     */
    public java.lang.String pay_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 第三方支付单号
       */
      PAY_ID((short)2, "pay_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // PAY_ID
            return PAY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.PAY_ID, new org.apache.thrift.meta_data.FieldMetaData("pay_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySaleSupplyTicketQ_args.class, metaDataMap);
    }

    public querySaleSupplyTicketQ_args() {
    }

    public querySaleSupplyTicketQ_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String pay_id)
    {
      this();
      this.auth = auth;
      this.pay_id = pay_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySaleSupplyTicketQ_args(querySaleSupplyTicketQ_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetPay_id()) {
        this.pay_id = other.pay_id;
      }
    }

    public querySaleSupplyTicketQ_args deepCopy() {
      return new querySaleSupplyTicketQ_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.pay_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public querySaleSupplyTicketQ_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 第三方支付单号
     */
    public java.lang.String getPay_id() {
      return this.pay_id;
    }

    /**
     * 第三方支付单号
     */
    public querySaleSupplyTicketQ_args setPay_id(java.lang.String pay_id) {
      this.pay_id = pay_id;
      return this;
    }

    public void unsetPay_id() {
      this.pay_id = null;
    }

    /** Returns true if field pay_id is set (has been assigned a value) and false otherwise */
    public boolean isSetPay_id() {
      return this.pay_id != null;
    }

    public void setPay_idIsSet(boolean value) {
      if (!value) {
        this.pay_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case PAY_ID:
        if (value == null) {
          unsetPay_id();
        } else {
          setPay_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case PAY_ID:
        return getPay_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case PAY_ID:
        return isSetPay_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySaleSupplyTicketQ_args)
        return this.equals((querySaleSupplyTicketQ_args)that);
      return false;
    }

    public boolean equals(querySaleSupplyTicketQ_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_pay_id = true && this.isSetPay_id();
      boolean that_present_pay_id = true && that.isSetPay_id();
      if (this_present_pay_id || that_present_pay_id) {
        if (!(this_present_pay_id && that_present_pay_id))
          return false;
        if (!this.pay_id.equals(that.pay_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetPay_id()) ? 131071 : 524287);
      if (isSetPay_id())
        hashCode = hashCode * 8191 + pay_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querySaleSupplyTicketQ_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPay_id()).compareTo(other.isSetPay_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPay_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pay_id, other.pay_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySaleSupplyTicketQ_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("pay_id:");
      if (this.pay_id == null) {
        sb.append("null");
      } else {
        sb.append(this.pay_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySaleSupplyTicketQ_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketQ_argsStandardScheme getScheme() {
        return new querySaleSupplyTicketQ_argsStandardScheme();
      }
    }

    private static class querySaleSupplyTicketQ_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySaleSupplyTicketQ_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySaleSupplyTicketQ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PAY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pay_id = iprot.readString();
                struct.setPay_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySaleSupplyTicketQ_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.pay_id != null) {
          oprot.writeFieldBegin(PAY_ID_FIELD_DESC);
          oprot.writeString(struct.pay_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySaleSupplyTicketQ_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketQ_argsTupleScheme getScheme() {
        return new querySaleSupplyTicketQ_argsTupleScheme();
      }
    }

    private static class querySaleSupplyTicketQ_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySaleSupplyTicketQ_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketQ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetPay_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetPay_id()) {
          oprot.writeString(struct.pay_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketQ_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.pay_id = iprot.readString();
          struct.setPay_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySaleSupplyTicketQ_result implements org.apache.thrift.TBase<querySaleSupplyTicketQ_result, querySaleSupplyTicketQ_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySaleSupplyTicketQ_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySaleSupplyTicketQ_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySaleSupplyTicketQ_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySaleSupplyTicketQ_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER_DETAIL.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySaleSupplyTicketQ_result.class, metaDataMap);
    }

    public querySaleSupplyTicketQ_result() {
    }

    public querySaleSupplyTicketQ_result(
      java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySaleSupplyTicketQ_result(querySaleSupplyTicketQ_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(other.success.size());
        for (com.tbims.rpc.entity.SL_ORDER_DETAIL other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SL_ORDER_DETAIL(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public querySaleSupplyTicketQ_result deepCopy() {
      return new querySaleSupplyTicketQ_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_ORDER_DETAIL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SL_ORDER_DETAIL elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> getSuccess() {
      return this.success;
    }

    public querySaleSupplyTicketQ_result setSuccess(java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public querySaleSupplyTicketQ_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySaleSupplyTicketQ_result)
        return this.equals((querySaleSupplyTicketQ_result)that);
      return false;
    }

    public boolean equals(querySaleSupplyTicketQ_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querySaleSupplyTicketQ_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySaleSupplyTicketQ_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySaleSupplyTicketQ_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketQ_resultStandardScheme getScheme() {
        return new querySaleSupplyTicketQ_resultStandardScheme();
      }
    }

    private static class querySaleSupplyTicketQ_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySaleSupplyTicketQ_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySaleSupplyTicketQ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list200 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(_list200.size);
                  com.tbims.rpc.entity.SL_ORDER_DETAIL _elem201;
                  for (int _i202 = 0; _i202 < _list200.size; ++_i202)
                  {
                    _elem201 = new com.tbims.rpc.entity.SL_ORDER_DETAIL();
                    _elem201.read(iprot);
                    struct.success.add(_elem201);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySaleSupplyTicketQ_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SL_ORDER_DETAIL _iter203 : struct.success)
            {
              _iter203.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySaleSupplyTicketQ_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySaleSupplyTicketQ_resultTupleScheme getScheme() {
        return new querySaleSupplyTicketQ_resultTupleScheme();
      }
    }

    private static class querySaleSupplyTicketQ_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySaleSupplyTicketQ_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketQ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SL_ORDER_DETAIL _iter204 : struct.success)
            {
              _iter204.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySaleSupplyTicketQ_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list205 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(_list205.size);
            com.tbims.rpc.entity.SL_ORDER_DETAIL _elem206;
            for (int _i207 = 0; _i207 < _list205.size; ++_i207)
            {
              _elem206 = new com.tbims.rpc.entity.SL_ORDER_DETAIL();
              _elem206.read(iprot);
              struct.success.add(_elem206);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadClientLog_args implements org.apache.thrift.TBase<uploadClientLog_args, uploadClientLog_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadClientLog_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadClientLog_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField FILE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("fileName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField FILE_FIELD_DESC = new org.apache.thrift.protocol.TField("file", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadClientLog_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadClientLog_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 文件名
     */
    public java.lang.String fileName; // required
    /**
     * 文件
     */
    public java.nio.ByteBuffer file; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 文件名
       */
      FILE_NAME((short)2, "fileName"),
      /**
       * 文件
       */
      FILE((short)3, "file");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // FILE_NAME
            return FILE_NAME;
          case 3: // FILE
            return FILE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.FILE_NAME, new org.apache.thrift.meta_data.FieldMetaData("fileName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.FILE, new org.apache.thrift.meta_data.FieldMetaData("file", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadClientLog_args.class, metaDataMap);
    }

    public uploadClientLog_args() {
    }

    public uploadClientLog_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String fileName,
      java.nio.ByteBuffer file)
    {
      this();
      this.auth = auth;
      this.fileName = fileName;
      this.file = org.apache.thrift.TBaseHelper.copyBinary(file);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadClientLog_args(uploadClientLog_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetFileName()) {
        this.fileName = other.fileName;
      }
      if (other.isSetFile()) {
        this.file = org.apache.thrift.TBaseHelper.copyBinary(other.file);
      }
    }

    public uploadClientLog_args deepCopy() {
      return new uploadClientLog_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.fileName = null;
      this.file = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public uploadClientLog_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 文件名
     */
    public java.lang.String getFileName() {
      return this.fileName;
    }

    /**
     * 文件名
     */
    public uploadClientLog_args setFileName(java.lang.String fileName) {
      this.fileName = fileName;
      return this;
    }

    public void unsetFileName() {
      this.fileName = null;
    }

    /** Returns true if field fileName is set (has been assigned a value) and false otherwise */
    public boolean isSetFileName() {
      return this.fileName != null;
    }

    public void setFileNameIsSet(boolean value) {
      if (!value) {
        this.fileName = null;
      }
    }

    /**
     * 文件
     */
    public byte[] getFile() {
      setFile(org.apache.thrift.TBaseHelper.rightSize(file));
      return file == null ? null : file.array();
    }

    public java.nio.ByteBuffer bufferForFile() {
      return org.apache.thrift.TBaseHelper.copyBinary(file);
    }

    /**
     * 文件
     */
    public uploadClientLog_args setFile(byte[] file) {
      this.file = file == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(file.clone());
      return this;
    }

    public uploadClientLog_args setFile(java.nio.ByteBuffer file) {
      this.file = org.apache.thrift.TBaseHelper.copyBinary(file);
      return this;
    }

    public void unsetFile() {
      this.file = null;
    }

    /** Returns true if field file is set (has been assigned a value) and false otherwise */
    public boolean isSetFile() {
      return this.file != null;
    }

    public void setFileIsSet(boolean value) {
      if (!value) {
        this.file = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case FILE_NAME:
        if (value == null) {
          unsetFileName();
        } else {
          setFileName((java.lang.String)value);
        }
        break;

      case FILE:
        if (value == null) {
          unsetFile();
        } else {
          if (value instanceof byte[]) {
            setFile((byte[])value);
          } else {
            setFile((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case FILE_NAME:
        return getFileName();

      case FILE:
        return getFile();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case FILE_NAME:
        return isSetFileName();
      case FILE:
        return isSetFile();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadClientLog_args)
        return this.equals((uploadClientLog_args)that);
      return false;
    }

    public boolean equals(uploadClientLog_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_fileName = true && this.isSetFileName();
      boolean that_present_fileName = true && that.isSetFileName();
      if (this_present_fileName || that_present_fileName) {
        if (!(this_present_fileName && that_present_fileName))
          return false;
        if (!this.fileName.equals(that.fileName))
          return false;
      }

      boolean this_present_file = true && this.isSetFile();
      boolean that_present_file = true && that.isSetFile();
      if (this_present_file || that_present_file) {
        if (!(this_present_file && that_present_file))
          return false;
        if (!this.file.equals(that.file))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetFileName()) ? 131071 : 524287);
      if (isSetFileName())
        hashCode = hashCode * 8191 + fileName.hashCode();

      hashCode = hashCode * 8191 + ((isSetFile()) ? 131071 : 524287);
      if (isSetFile())
        hashCode = hashCode * 8191 + file.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadClientLog_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFileName()).compareTo(other.isSetFileName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFileName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.fileName, other.fileName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetFile()).compareTo(other.isSetFile());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetFile()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.file, other.file);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadClientLog_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("fileName:");
      if (this.fileName == null) {
        sb.append("null");
      } else {
        sb.append(this.fileName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("file:");
      if (this.file == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.file, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadClientLog_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientLog_argsStandardScheme getScheme() {
        return new uploadClientLog_argsStandardScheme();
      }
    }

    private static class uploadClientLog_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadClientLog_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadClientLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // FILE_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.fileName = iprot.readString();
                struct.setFileNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // FILE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.file = iprot.readBinary();
                struct.setFileIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadClientLog_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.fileName != null) {
          oprot.writeFieldBegin(FILE_NAME_FIELD_DESC);
          oprot.writeString(struct.fileName);
          oprot.writeFieldEnd();
        }
        if (struct.file != null) {
          oprot.writeFieldBegin(FILE_FIELD_DESC);
          oprot.writeBinary(struct.file);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadClientLog_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientLog_argsTupleScheme getScheme() {
        return new uploadClientLog_argsTupleScheme();
      }
    }

    private static class uploadClientLog_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadClientLog_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadClientLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetFileName()) {
          optionals.set(1);
        }
        if (struct.isSetFile()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetFileName()) {
          oprot.writeString(struct.fileName);
        }
        if (struct.isSetFile()) {
          oprot.writeBinary(struct.file);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadClientLog_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.fileName = iprot.readString();
          struct.setFileNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.file = iprot.readBinary();
          struct.setFileIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadClientLog_result implements org.apache.thrift.TBase<uploadClientLog_result, uploadClientLog_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadClientLog_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadClientLog_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadClientLog_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadClientLog_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadClientLog_result.class, metaDataMap);
    }

    public uploadClientLog_result() {
    }

    public uploadClientLog_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadClientLog_result(uploadClientLog_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public uploadClientLog_result deepCopy() {
      return new uploadClientLog_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public uploadClientLog_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public uploadClientLog_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadClientLog_result)
        return this.equals((uploadClientLog_result)that);
      return false;
    }

    public boolean equals(uploadClientLog_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadClientLog_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadClientLog_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadClientLog_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientLog_resultStandardScheme getScheme() {
        return new uploadClientLog_resultStandardScheme();
      }
    }

    private static class uploadClientLog_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadClientLog_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadClientLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadClientLog_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadClientLog_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientLog_resultTupleScheme getScheme() {
        return new uploadClientLog_resultTupleScheme();
      }
    }

    private static class uploadClientLog_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadClientLog_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadClientLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadClientLog_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
