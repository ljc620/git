/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.tbims.rpc.service;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2017-08-29")
public class SaleService {

  /**
   * 销售信息服务
   */
  public interface Iface {

    /**
     * 根据客户端id获取客户端和网点信息的接口
     * @return 客户端和网点信息
     * 
     * @param auth 通用参数
     * 
     * @param clientId 客户端id
     */
    public com.tbims.rpc.entity.SYS_CLIENT_OUTLET getInfoByClientId(com.tbims.rpc.entity.AUTHORIZATION auth, long clientId) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 查询代理商信息
     * @return 代理商信息
     * 
     * @param auth 通用参数
     * 
     * @param orgType 机构类型(0签约社1网络代理商2实体代理商)
     * 
     * @param outletId 网点编号
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORG> querySlOrg(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String orgType, long outletId) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 门票配送申请单查询
     * @return 门票信息suppl
     * 
     * @param auth 通用参数
     * 
     * @param applyId 申请编号
     * 
     * @param app_begin_tm 申请开始时间
     * 
     * @param app_end_tm 申请开始时间
     * 
     * @param exam_stat 审核状态(0待审核1已审核2已配送3已接收4已拒收)
     * 
     * @param outlet_id 网点编号
     */
    public java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> ticketApplyQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, long app_begin_tm, long app_end_tm, java.lang.String exam_stat, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 门票配送申请
     * 
     * @param auth 通用参数
     * 
     * @param delivery_apply 配送申请信息
     */
    public boolean ticketApply(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 门票配送确认
     * 
     * @param auth 通用参数
     * 
     * @param applyId 申请编号
     * 
     * @param exam_stat 审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)
     */
    public boolean ticketConfirm(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, java.lang.String exam_stat) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 票据信息查询
     * @return 票信息
     * 
     * @param auth 通用参数
     * 
     * @param ticket_id 票号
     * 
     * @param outlet_id 网点编码
     */
    public com.tbims.rpc.entity.STR_TICKET_INFO ticketInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 检票信息查询
     * @return 检票信息
     * 
     * @param auth 通用参数
     * 
     * @param ticket_id 票号
     */
    public java.util.List<com.tbims.rpc.entity.SL_CHECK> checkInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 团队订单查询
     * @return 团队票订单信息
     * 
     * @param auth 通用参数
     * 
     * @param apply_id 申请编号
     */
    public com.tbims.rpc.entity.SL_TEAM_ORDER teamOrderQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String apply_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 自营售票验票号接口
     * 
     * @return 是否联号 true:检查通过 false:检查失败
     * 
     * @param auth 通用参数
     * 
     * @param begin_ticket_id 起始票号
     * 
     * @param ticket_num 数量
     * 
     * @param end_ticket_id 起始票号
     */
    public boolean checkSaleTicketBYzy(com.tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 售票信息上传 (XC-现场售票、ZY-自营售票、ST-实体代理、TD-团队换票),增量上传
     * 
     * @param auth 通用参数
     * 
     * @param sl_orders 销售订单信息
     */
    public boolean saleTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 售票信息上传(ZG-自助购票,按RFID卡),联机上传
     * 
     * @param auth 通用参数
     * 
     * @param sl_order 销售订单信息
     * 
     * @param sl_order_tickettype_detail 销售单票种明细表
     */
    public boolean saleTicketByZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 售票信息上传(ZG-自助购票,按身份证),联机上传
     * 
     * @param auth 通用参数
     * 
     * @param sl_order 销售订单信息
     */
    public boolean saleTicketByIdenttyZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 身份证换票查询 (ZQ-自助取票)
     * 
     * @param auth 通用参数
     * 
     * @param identty_id 销售订单信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> queryTicketByIdenttyId(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String identty_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 查询售票单的支付状态,返回支付状态(1-待支付 2-已支付 3-支付失败),联机,调用6次,每5秒调用一次，非2-已支付 则调用取消交易接口
     * 
     * @param auth 通用参数
     * 
     * @param order_id 销售订单信息
     */
    public int querTicketPayStatus(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 撤消交易,支付超时或未知状态,并通过查询确认后调用
     * 
     * @param auth 通用参数
     * 
     * @param order_id 销售订单信息
     */
    public boolean cancelTicketPay(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id) throws org.apache.thrift.TException;

    /**
     * 出票信息上传-自助售票机 (ZG-自助购票、ZQ-自助取票),联机上传
     * 
     * @param auth 通用参数
     * 
     * @param sl_order_detail_list 销售订单信息
     */
    public boolean ejectTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 售票信息上传 (WL-网络代理换票)
     * 
     * @param auth 通用参数
     * 
     * @param sl_netagent_order 网络代理订单表
     */
    public boolean changeTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 补票信息上传 (PB-补票)
     * 
     * @param auth 通用参数
     * 
     * @param sl_supply 补票信息
     */
    public boolean supplyTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_SUPPLY sl_supply) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 坏票信息上传
     * 
     * @param auth 通用参数
     * 
     * @param useless_ticket_infos 废票信息
     */
    public boolean uselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 废票取消（芯片作废）
     * 
     * @param auth 通用参数
     * 
     * @param useless_ticket_infos 废票信息
     */
    public boolean cancelUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 检票信息上传
     * 
     * @param auth 通用参数
     * 
     * @param sl_checks 检票信息
     */
    public boolean checkInfo(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 身份证入园检票-联机(没检票、没取实体票、没有作废的记录就通过，通过后再入检票表),返回 1-成功 40-当前场馆无有效门票 41-当前门票已过有效期 42-当前时间不允许此门票入场 43-系统错误
     * 
     * @param auth 通用参数
     * 
     * @param checkId 检票表id
     * 
     * @param ticketClass 门票类型(2-身份证、3-二维码)
     * 
     * @param ticketUid 票据唯一号
     */
    public int checkTicketOnline(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String checkId, java.lang.String ticketClass, java.lang.String ticketUid) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 网点员工销售统计表
     * @return 销售数据
     * 
     * @param auth 通用参数
     * 
     * @param rpt_date 统计日期
     * 
     * @param outlet_id 网点编号
     */
    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> rptSaleDataUser(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 网点销售统计表
     * @return 营业数据
     * 
     * @param auth 通用参数
     * 
     * @param rpt_date 统计日期
     * 
     * @param outlet_id 网点编号
     */
    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> rptSaleDataOutlet(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 网点库存统计表
     * @return 营业数据
     * 
     * @param auth 通用参数
     * 
     * @param rpt_date 统计日期
     * 
     * @param outlet_id 网点编号
     */
    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> rptStrData(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 当日网点库存统计表
     * @return 营业数据
     * 
     * @param auth 通用参数
     * 
     * @param outlet_id 网点编号
     */
    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> rptStrDataNow(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

    /**
     * 团队换票明细表
     * @return 换票明细
     * 
     * @param auth 通用参数
     * 
     * @param change_time 换票时间
     * 
     * @param apply_id 申请单号
     */
    public java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> queryTeamOrderDetail(com.tbims.rpc.entity.AUTHORIZATION auth, long change_time, java.lang.String apply_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getInfoByClientId(com.tbims.rpc.entity.AUTHORIZATION auth, long clientId, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SYS_CLIENT_OUTLET> resultHandler) throws org.apache.thrift.TException;

    public void querySlOrg(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String orgType, long outletId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORG>> resultHandler) throws org.apache.thrift.TException;

    public void ticketApplyQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, long app_begin_tm, long app_end_tm, java.lang.String exam_stat, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>> resultHandler) throws org.apache.thrift.TException;

    public void ticketApply(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ticketConfirm(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, java.lang.String exam_stat, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ticketInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.STR_TICKET_INFO> resultHandler) throws org.apache.thrift.TException;

    public void checkInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_CHECK>> resultHandler) throws org.apache.thrift.TException;

    public void teamOrderQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String apply_id, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SL_TEAM_ORDER> resultHandler) throws org.apache.thrift.TException;

    public void checkSaleTicketBYzy(com.tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void saleTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void saleTicketByZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void saleTicketByIdenttyZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void queryTicketByIdenttyId(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String identty_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler) throws org.apache.thrift.TException;

    public void querTicketPayStatus(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void cancelTicketPay(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void ejectTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void changeTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void supplyTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_SUPPLY sl_supply, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void uselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void cancelUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void checkInfo(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException;

    public void checkTicketOnline(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String checkId, java.lang.String ticketClass, java.lang.String ticketUid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException;

    public void rptSaleDataUser(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>> resultHandler) throws org.apache.thrift.TException;

    public void rptSaleDataOutlet(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>> resultHandler) throws org.apache.thrift.TException;

    public void rptStrData(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler) throws org.apache.thrift.TException;

    public void rptStrDataNow(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler) throws org.apache.thrift.TException;

    public void queryTeamOrderDetail(com.tbims.rpc.entity.AUTHORIZATION auth, long change_time, java.lang.String apply_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public com.tbims.rpc.entity.SYS_CLIENT_OUTLET getInfoByClientId(com.tbims.rpc.entity.AUTHORIZATION auth, long clientId) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_getInfoByClientId(auth, clientId);
      return recv_getInfoByClientId();
    }

    public void send_getInfoByClientId(com.tbims.rpc.entity.AUTHORIZATION auth, long clientId) throws org.apache.thrift.TException
    {
      getInfoByClientId_args args = new getInfoByClientId_args();
      args.setAuth(auth);
      args.setClientId(clientId);
      sendBase("getInfoByClientId", args);
    }

    public com.tbims.rpc.entity.SYS_CLIENT_OUTLET recv_getInfoByClientId() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      getInfoByClientId_result result = new getInfoByClientId_result();
      receiveBase(result, "getInfoByClientId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getInfoByClientId failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORG> querySlOrg(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String orgType, long outletId) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_querySlOrg(auth, orgType, outletId);
      return recv_querySlOrg();
    }

    public void send_querySlOrg(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String orgType, long outletId) throws org.apache.thrift.TException
    {
      querySlOrg_args args = new querySlOrg_args();
      args.setAuth(auth);
      args.setOrgType(orgType);
      args.setOutletId(outletId);
      sendBase("querySlOrg", args);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORG> recv_querySlOrg() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      querySlOrg_result result = new querySlOrg_result();
      receiveBase(result, "querySlOrg");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querySlOrg failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> ticketApplyQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, long app_begin_tm, long app_end_tm, java.lang.String exam_stat, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_ticketApplyQuery(auth, applyId, app_begin_tm, app_end_tm, exam_stat, outlet_id);
      return recv_ticketApplyQuery();
    }

    public void send_ticketApplyQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, long app_begin_tm, long app_end_tm, java.lang.String exam_stat, long outlet_id) throws org.apache.thrift.TException
    {
      ticketApplyQuery_args args = new ticketApplyQuery_args();
      args.setAuth(auth);
      args.setApplyId(applyId);
      args.setApp_begin_tm(app_begin_tm);
      args.setApp_end_tm(app_end_tm);
      args.setExam_stat(exam_stat);
      args.setOutlet_id(outlet_id);
      sendBase("ticketApplyQuery", args);
    }

    public java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> recv_ticketApplyQuery() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      ticketApplyQuery_result result = new ticketApplyQuery_result();
      receiveBase(result, "ticketApplyQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ticketApplyQuery failed: unknown result");
    }

    public boolean ticketApply(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_ticketApply(auth, delivery_apply);
      return recv_ticketApply();
    }

    public void send_ticketApply(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply) throws org.apache.thrift.TException
    {
      ticketApply_args args = new ticketApply_args();
      args.setAuth(auth);
      args.setDelivery_apply(delivery_apply);
      sendBase("ticketApply", args);
    }

    public boolean recv_ticketApply() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      ticketApply_result result = new ticketApply_result();
      receiveBase(result, "ticketApply");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ticketApply failed: unknown result");
    }

    public boolean ticketConfirm(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, java.lang.String exam_stat) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_ticketConfirm(auth, applyId, exam_stat);
      return recv_ticketConfirm();
    }

    public void send_ticketConfirm(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, java.lang.String exam_stat) throws org.apache.thrift.TException
    {
      ticketConfirm_args args = new ticketConfirm_args();
      args.setAuth(auth);
      args.setApplyId(applyId);
      args.setExam_stat(exam_stat);
      sendBase("ticketConfirm", args);
    }

    public boolean recv_ticketConfirm() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      ticketConfirm_result result = new ticketConfirm_result();
      receiveBase(result, "ticketConfirm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ticketConfirm failed: unknown result");
    }

    public com.tbims.rpc.entity.STR_TICKET_INFO ticketInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_ticketInfoQuery(auth, ticket_id, outlet_id);
      return recv_ticketInfoQuery();
    }

    public void send_ticketInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id) throws org.apache.thrift.TException
    {
      ticketInfoQuery_args args = new ticketInfoQuery_args();
      args.setAuth(auth);
      args.setTicket_id(ticket_id);
      args.setOutlet_id(outlet_id);
      sendBase("ticketInfoQuery", args);
    }

    public com.tbims.rpc.entity.STR_TICKET_INFO recv_ticketInfoQuery() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      ticketInfoQuery_result result = new ticketInfoQuery_result();
      receiveBase(result, "ticketInfoQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ticketInfoQuery failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SL_CHECK> checkInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_checkInfoQuery(auth, ticket_id);
      return recv_checkInfoQuery();
    }

    public void send_checkInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id) throws org.apache.thrift.TException
    {
      checkInfoQuery_args args = new checkInfoQuery_args();
      args.setAuth(auth);
      args.setTicket_id(ticket_id);
      sendBase("checkInfoQuery", args);
    }

    public java.util.List<com.tbims.rpc.entity.SL_CHECK> recv_checkInfoQuery() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      checkInfoQuery_result result = new checkInfoQuery_result();
      receiveBase(result, "checkInfoQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkInfoQuery failed: unknown result");
    }

    public com.tbims.rpc.entity.SL_TEAM_ORDER teamOrderQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String apply_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_teamOrderQuery(auth, apply_id);
      return recv_teamOrderQuery();
    }

    public void send_teamOrderQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String apply_id) throws org.apache.thrift.TException
    {
      teamOrderQuery_args args = new teamOrderQuery_args();
      args.setAuth(auth);
      args.setApply_id(apply_id);
      sendBase("teamOrderQuery", args);
    }

    public com.tbims.rpc.entity.SL_TEAM_ORDER recv_teamOrderQuery() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      teamOrderQuery_result result = new teamOrderQuery_result();
      receiveBase(result, "teamOrderQuery");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "teamOrderQuery failed: unknown result");
    }

    public boolean checkSaleTicketBYzy(com.tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_checkSaleTicketBYzy(auth, begin_ticket_id, ticket_num, end_ticket_id);
      return recv_checkSaleTicketBYzy();
    }

    public void send_checkSaleTicketBYzy(com.tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id) throws org.apache.thrift.TException
    {
      checkSaleTicketBYzy_args args = new checkSaleTicketBYzy_args();
      args.setAuth(auth);
      args.setBegin_ticket_id(begin_ticket_id);
      args.setTicket_num(ticket_num);
      args.setEnd_ticket_id(end_ticket_id);
      sendBase("checkSaleTicketBYzy", args);
    }

    public boolean recv_checkSaleTicketBYzy() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      checkSaleTicketBYzy_result result = new checkSaleTicketBYzy_result();
      receiveBase(result, "checkSaleTicketBYzy");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkSaleTicketBYzy failed: unknown result");
    }

    public boolean saleTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_saleTicket(auth, sl_orders);
      return recv_saleTicket();
    }

    public void send_saleTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders) throws org.apache.thrift.TException
    {
      saleTicket_args args = new saleTicket_args();
      args.setAuth(auth);
      args.setSl_orders(sl_orders);
      sendBase("saleTicket", args);
    }

    public boolean recv_saleTicket() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      saleTicket_result result = new saleTicket_result();
      receiveBase(result, "saleTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saleTicket failed: unknown result");
    }

    public boolean saleTicketByZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_saleTicketByZG(auth, sl_order, sl_order_tickettype_detail);
      return recv_saleTicketByZG();
    }

    public void send_saleTicketByZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail) throws org.apache.thrift.TException
    {
      saleTicketByZG_args args = new saleTicketByZG_args();
      args.setAuth(auth);
      args.setSl_order(sl_order);
      args.setSl_order_tickettype_detail(sl_order_tickettype_detail);
      sendBase("saleTicketByZG", args);
    }

    public boolean recv_saleTicketByZG() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      saleTicketByZG_result result = new saleTicketByZG_result();
      receiveBase(result, "saleTicketByZG");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saleTicketByZG failed: unknown result");
    }

    public boolean saleTicketByIdenttyZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_saleTicketByIdenttyZG(auth, sl_order);
      return recv_saleTicketByIdenttyZG();
    }

    public void send_saleTicketByIdenttyZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order) throws org.apache.thrift.TException
    {
      saleTicketByIdenttyZG_args args = new saleTicketByIdenttyZG_args();
      args.setAuth(auth);
      args.setSl_order(sl_order);
      sendBase("saleTicketByIdenttyZG", args);
    }

    public boolean recv_saleTicketByIdenttyZG() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      saleTicketByIdenttyZG_result result = new saleTicketByIdenttyZG_result();
      receiveBase(result, "saleTicketByIdenttyZG");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "saleTicketByIdenttyZG failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> queryTicketByIdenttyId(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String identty_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_queryTicketByIdenttyId(auth, identty_id);
      return recv_queryTicketByIdenttyId();
    }

    public void send_queryTicketByIdenttyId(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String identty_id) throws org.apache.thrift.TException
    {
      queryTicketByIdenttyId_args args = new queryTicketByIdenttyId_args();
      args.setAuth(auth);
      args.setIdentty_id(identty_id);
      sendBase("queryTicketByIdenttyId", args);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> recv_queryTicketByIdenttyId() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      queryTicketByIdenttyId_result result = new queryTicketByIdenttyId_result();
      receiveBase(result, "queryTicketByIdenttyId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTicketByIdenttyId failed: unknown result");
    }

    public int querTicketPayStatus(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_querTicketPayStatus(auth, order_id);
      return recv_querTicketPayStatus();
    }

    public void send_querTicketPayStatus(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id) throws org.apache.thrift.TException
    {
      querTicketPayStatus_args args = new querTicketPayStatus_args();
      args.setAuth(auth);
      args.setOrder_id(order_id);
      sendBase("querTicketPayStatus", args);
    }

    public int recv_querTicketPayStatus() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      querTicketPayStatus_result result = new querTicketPayStatus_result();
      receiveBase(result, "querTicketPayStatus");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "querTicketPayStatus failed: unknown result");
    }

    public boolean cancelTicketPay(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id) throws org.apache.thrift.TException
    {
      send_cancelTicketPay(auth, order_id);
      return recv_cancelTicketPay();
    }

    public void send_cancelTicketPay(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id) throws org.apache.thrift.TException
    {
      cancelTicketPay_args args = new cancelTicketPay_args();
      args.setAuth(auth);
      args.setOrder_id(order_id);
      sendBase("cancelTicketPay", args);
    }

    public boolean recv_cancelTicketPay() throws org.apache.thrift.TException
    {
      cancelTicketPay_result result = new cancelTicketPay_result();
      receiveBase(result, "cancelTicketPay");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelTicketPay failed: unknown result");
    }

    public boolean ejectTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_ejectTicket(auth, sl_order_detail_list);
      return recv_ejectTicket();
    }

    public void send_ejectTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list) throws org.apache.thrift.TException
    {
      ejectTicket_args args = new ejectTicket_args();
      args.setAuth(auth);
      args.setSl_order_detail_list(sl_order_detail_list);
      sendBase("ejectTicket", args);
    }

    public boolean recv_ejectTicket() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      ejectTicket_result result = new ejectTicket_result();
      receiveBase(result, "ejectTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ejectTicket failed: unknown result");
    }

    public boolean changeTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_changeTicket(auth, sl_netagent_order);
      return recv_changeTicket();
    }

    public void send_changeTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order) throws org.apache.thrift.TException
    {
      changeTicket_args args = new changeTicket_args();
      args.setAuth(auth);
      args.setSl_netagent_order(sl_netagent_order);
      sendBase("changeTicket", args);
    }

    public boolean recv_changeTicket() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      changeTicket_result result = new changeTicket_result();
      receiveBase(result, "changeTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "changeTicket failed: unknown result");
    }

    public boolean supplyTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_SUPPLY sl_supply) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_supplyTicket(auth, sl_supply);
      return recv_supplyTicket();
    }

    public void send_supplyTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_SUPPLY sl_supply) throws org.apache.thrift.TException
    {
      supplyTicket_args args = new supplyTicket_args();
      args.setAuth(auth);
      args.setSl_supply(sl_supply);
      sendBase("supplyTicket", args);
    }

    public boolean recv_supplyTicket() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      supplyTicket_result result = new supplyTicket_result();
      receiveBase(result, "supplyTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "supplyTicket failed: unknown result");
    }

    public boolean uselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_uselessTicket(auth, useless_ticket_infos);
      return recv_uselessTicket();
    }

    public void send_uselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos) throws org.apache.thrift.TException
    {
      uselessTicket_args args = new uselessTicket_args();
      args.setAuth(auth);
      args.setUseless_ticket_infos(useless_ticket_infos);
      sendBase("uselessTicket", args);
    }

    public boolean recv_uselessTicket() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      uselessTicket_result result = new uselessTicket_result();
      receiveBase(result, "uselessTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uselessTicket failed: unknown result");
    }

    public boolean cancelUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_cancelUselessTicket(auth, useless_ticket_infos);
      return recv_cancelUselessTicket();
    }

    public void send_cancelUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos) throws org.apache.thrift.TException
    {
      cancelUselessTicket_args args = new cancelUselessTicket_args();
      args.setAuth(auth);
      args.setUseless_ticket_infos(useless_ticket_infos);
      sendBase("cancelUselessTicket", args);
    }

    public boolean recv_cancelUselessTicket() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      cancelUselessTicket_result result = new cancelUselessTicket_result();
      receiveBase(result, "cancelUselessTicket");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "cancelUselessTicket failed: unknown result");
    }

    public boolean checkInfo(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_checkInfo(auth, sl_checks);
      return recv_checkInfo();
    }

    public void send_checkInfo(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks) throws org.apache.thrift.TException
    {
      checkInfo_args args = new checkInfo_args();
      args.setAuth(auth);
      args.setSl_checks(sl_checks);
      sendBase("checkInfo", args);
    }

    public boolean recv_checkInfo() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      checkInfo_result result = new checkInfo_result();
      receiveBase(result, "checkInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkInfo failed: unknown result");
    }

    public int checkTicketOnline(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String checkId, java.lang.String ticketClass, java.lang.String ticketUid) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_checkTicketOnline(auth, checkId, ticketClass, ticketUid);
      return recv_checkTicketOnline();
    }

    public void send_checkTicketOnline(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String checkId, java.lang.String ticketClass, java.lang.String ticketUid) throws org.apache.thrift.TException
    {
      checkTicketOnline_args args = new checkTicketOnline_args();
      args.setAuth(auth);
      args.setCheckId(checkId);
      args.setTicketClass(ticketClass);
      args.setTicketUid(ticketUid);
      sendBase("checkTicketOnline", args);
    }

    public int recv_checkTicketOnline() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      checkTicketOnline_result result = new checkTicketOnline_result();
      receiveBase(result, "checkTicketOnline");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "checkTicketOnline failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> rptSaleDataUser(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_rptSaleDataUser(auth, rpt_date, outlet_id);
      return recv_rptSaleDataUser();
    }

    public void send_rptSaleDataUser(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws org.apache.thrift.TException
    {
      rptSaleDataUser_args args = new rptSaleDataUser_args();
      args.setAuth(auth);
      args.setRpt_date(rpt_date);
      args.setOutlet_id(outlet_id);
      sendBase("rptSaleDataUser", args);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> recv_rptSaleDataUser() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      rptSaleDataUser_result result = new rptSaleDataUser_result();
      receiveBase(result, "rptSaleDataUser");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rptSaleDataUser failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> rptSaleDataOutlet(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_rptSaleDataOutlet(auth, rpt_date, outlet_id);
      return recv_rptSaleDataOutlet();
    }

    public void send_rptSaleDataOutlet(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws org.apache.thrift.TException
    {
      rptSaleDataOutlet_args args = new rptSaleDataOutlet_args();
      args.setAuth(auth);
      args.setRpt_date(rpt_date);
      args.setOutlet_id(outlet_id);
      sendBase("rptSaleDataOutlet", args);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> recv_rptSaleDataOutlet() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      rptSaleDataOutlet_result result = new rptSaleDataOutlet_result();
      receiveBase(result, "rptSaleDataOutlet");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rptSaleDataOutlet failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> rptStrData(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_rptStrData(auth, rpt_date, outlet_id);
      return recv_rptStrData();
    }

    public void send_rptStrData(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id) throws org.apache.thrift.TException
    {
      rptStrData_args args = new rptStrData_args();
      args.setAuth(auth);
      args.setRpt_date(rpt_date);
      args.setOutlet_id(outlet_id);
      sendBase("rptStrData", args);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> recv_rptStrData() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      rptStrData_result result = new rptStrData_result();
      receiveBase(result, "rptStrData");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rptStrData failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> rptStrDataNow(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_rptStrDataNow(auth, outlet_id);
      return recv_rptStrDataNow();
    }

    public void send_rptStrDataNow(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id) throws org.apache.thrift.TException
    {
      rptStrDataNow_args args = new rptStrDataNow_args();
      args.setAuth(auth);
      args.setOutlet_id(outlet_id);
      sendBase("rptStrDataNow", args);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> recv_rptStrDataNow() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      rptStrDataNow_result result = new rptStrDataNow_result();
      receiveBase(result, "rptStrDataNow");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "rptStrDataNow failed: unknown result");
    }

    public java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> queryTeamOrderDetail(com.tbims.rpc.entity.AUTHORIZATION auth, long change_time, java.lang.String apply_id) throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      send_queryTeamOrderDetail(auth, change_time, apply_id);
      return recv_queryTeamOrderDetail();
    }

    public void send_queryTeamOrderDetail(com.tbims.rpc.entity.AUTHORIZATION auth, long change_time, java.lang.String apply_id) throws org.apache.thrift.TException
    {
      queryTeamOrderDetail_args args = new queryTeamOrderDetail_args();
      args.setAuth(auth);
      args.setChange_time(change_time);
      args.setApply_id(apply_id);
      sendBase("queryTeamOrderDetail", args);
    }

    public java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> recv_queryTeamOrderDetail() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException
    {
      queryTeamOrderDetail_result result = new queryTeamOrderDetail_result();
      receiveBase(result, "queryTeamOrderDetail");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.e != null) {
        throw result.e;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queryTeamOrderDetail failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getInfoByClientId(com.tbims.rpc.entity.AUTHORIZATION auth, long clientId, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SYS_CLIENT_OUTLET> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getInfoByClientId_call method_call = new getInfoByClientId_call(auth, clientId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getInfoByClientId_call extends org.apache.thrift.async.TAsyncMethodCall<com.tbims.rpc.entity.SYS_CLIENT_OUTLET> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long clientId;
      public getInfoByClientId_call(com.tbims.rpc.entity.AUTHORIZATION auth, long clientId, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SYS_CLIENT_OUTLET> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.clientId = clientId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getInfoByClientId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getInfoByClientId_args args = new getInfoByClientId_args();
        args.setAuth(auth);
        args.setClientId(clientId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.tbims.rpc.entity.SYS_CLIENT_OUTLET getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getInfoByClientId();
      }
    }

    public void querySlOrg(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String orgType, long outletId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORG>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querySlOrg_call method_call = new querySlOrg_call(auth, orgType, outletId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querySlOrg_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SL_ORG>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String orgType;
      private long outletId;
      public querySlOrg_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String orgType, long outletId, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORG>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.orgType = orgType;
        this.outletId = outletId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querySlOrg", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querySlOrg_args args = new querySlOrg_args();
        args.setAuth(auth);
        args.setOrgType(orgType);
        args.setOutletId(outletId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SL_ORG> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querySlOrg();
      }
    }

    public void ticketApplyQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, long app_begin_tm, long app_end_tm, java.lang.String exam_stat, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ticketApplyQuery_call method_call = new ticketApplyQuery_call(auth, applyId, app_begin_tm, app_end_tm, exam_stat, outlet_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ticketApplyQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String applyId;
      private long app_begin_tm;
      private long app_end_tm;
      private java.lang.String exam_stat;
      private long outlet_id;
      public ticketApplyQuery_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, long app_begin_tm, long app_end_tm, java.lang.String exam_stat, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.applyId = applyId;
        this.app_begin_tm = app_begin_tm;
        this.app_end_tm = app_end_tm;
        this.exam_stat = exam_stat;
        this.outlet_id = outlet_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ticketApplyQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ticketApplyQuery_args args = new ticketApplyQuery_args();
        args.setAuth(auth);
        args.setApplyId(applyId);
        args.setApp_begin_tm(app_begin_tm);
        args.setApp_end_tm(app_end_tm);
        args.setExam_stat(exam_stat);
        args.setOutlet_id(outlet_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ticketApplyQuery();
      }
    }

    public void ticketApply(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ticketApply_call method_call = new ticketApply_call(auth, delivery_apply, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ticketApply_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply;
      public ticketApply_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.delivery_apply = delivery_apply;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ticketApply", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ticketApply_args args = new ticketApply_args();
        args.setAuth(auth);
        args.setDelivery_apply(delivery_apply);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ticketApply();
      }
    }

    public void ticketConfirm(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, java.lang.String exam_stat, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ticketConfirm_call method_call = new ticketConfirm_call(auth, applyId, exam_stat, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ticketConfirm_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String applyId;
      private java.lang.String exam_stat;
      public ticketConfirm_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String applyId, java.lang.String exam_stat, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.applyId = applyId;
        this.exam_stat = exam_stat;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ticketConfirm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ticketConfirm_args args = new ticketConfirm_args();
        args.setAuth(auth);
        args.setApplyId(applyId);
        args.setExam_stat(exam_stat);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ticketConfirm();
      }
    }

    public void ticketInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.STR_TICKET_INFO> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ticketInfoQuery_call method_call = new ticketInfoQuery_call(auth, ticket_id, outlet_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ticketInfoQuery_call extends org.apache.thrift.async.TAsyncMethodCall<com.tbims.rpc.entity.STR_TICKET_INFO> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long ticket_id;
      private long outlet_id;
      public ticketInfoQuery_call(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.STR_TICKET_INFO> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.ticket_id = ticket_id;
        this.outlet_id = outlet_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ticketInfoQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ticketInfoQuery_args args = new ticketInfoQuery_args();
        args.setAuth(auth);
        args.setTicket_id(ticket_id);
        args.setOutlet_id(outlet_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.tbims.rpc.entity.STR_TICKET_INFO getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ticketInfoQuery();
      }
    }

    public void checkInfoQuery(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_CHECK>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkInfoQuery_call method_call = new checkInfoQuery_call(auth, ticket_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkInfoQuery_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SL_CHECK>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long ticket_id;
      public checkInfoQuery_call(com.tbims.rpc.entity.AUTHORIZATION auth, long ticket_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_CHECK>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.ticket_id = ticket_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkInfoQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkInfoQuery_args args = new checkInfoQuery_args();
        args.setAuth(auth);
        args.setTicket_id(ticket_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SL_CHECK> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkInfoQuery();
      }
    }

    public void teamOrderQuery(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String apply_id, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SL_TEAM_ORDER> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      teamOrderQuery_call method_call = new teamOrderQuery_call(auth, apply_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class teamOrderQuery_call extends org.apache.thrift.async.TAsyncMethodCall<com.tbims.rpc.entity.SL_TEAM_ORDER> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String apply_id;
      public teamOrderQuery_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String apply_id, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SL_TEAM_ORDER> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.apply_id = apply_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("teamOrderQuery", org.apache.thrift.protocol.TMessageType.CALL, 0));
        teamOrderQuery_args args = new teamOrderQuery_args();
        args.setAuth(auth);
        args.setApply_id(apply_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public com.tbims.rpc.entity.SL_TEAM_ORDER getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_teamOrderQuery();
      }
    }

    public void checkSaleTicketBYzy(com.tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkSaleTicketBYzy_call method_call = new checkSaleTicketBYzy_call(auth, begin_ticket_id, ticket_num, end_ticket_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkSaleTicketBYzy_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long begin_ticket_id;
      private long ticket_num;
      private long end_ticket_id;
      public checkSaleTicketBYzy_call(com.tbims.rpc.entity.AUTHORIZATION auth, long begin_ticket_id, long ticket_num, long end_ticket_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.begin_ticket_id = begin_ticket_id;
        this.ticket_num = ticket_num;
        this.end_ticket_id = end_ticket_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkSaleTicketBYzy", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkSaleTicketBYzy_args args = new checkSaleTicketBYzy_args();
        args.setAuth(auth);
        args.setBegin_ticket_id(begin_ticket_id);
        args.setTicket_num(ticket_num);
        args.setEnd_ticket_id(end_ticket_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkSaleTicketBYzy();
      }
    }

    public void saleTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saleTicket_call method_call = new saleTicket_call(auth, sl_orders, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saleTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders;
      public saleTicket_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sl_orders = sl_orders;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saleTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saleTicket_args args = new saleTicket_args();
        args.setAuth(auth);
        args.setSl_orders(sl_orders);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saleTicket();
      }
    }

    public void saleTicketByZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saleTicketByZG_call method_call = new saleTicketByZG_call(auth, sl_order, sl_order_tickettype_detail, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saleTicketByZG_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.SL_ORDER sl_order;
      private com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail;
      public saleTicketByZG_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sl_order = sl_order;
        this.sl_order_tickettype_detail = sl_order_tickettype_detail;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saleTicketByZG", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saleTicketByZG_args args = new saleTicketByZG_args();
        args.setAuth(auth);
        args.setSl_order(sl_order);
        args.setSl_order_tickettype_detail(sl_order_tickettype_detail);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saleTicketByZG();
      }
    }

    public void saleTicketByIdenttyZG(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      saleTicketByIdenttyZG_call method_call = new saleTicketByIdenttyZG_call(auth, sl_order, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class saleTicketByIdenttyZG_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.SL_ORDER sl_order;
      public saleTicketByIdenttyZG_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_ORDER sl_order, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sl_order = sl_order;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("saleTicketByIdenttyZG", org.apache.thrift.protocol.TMessageType.CALL, 0));
        saleTicketByIdenttyZG_args args = new saleTicketByIdenttyZG_args();
        args.setAuth(auth);
        args.setSl_order(sl_order);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_saleTicketByIdenttyZG();
      }
    }

    public void queryTicketByIdenttyId(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String identty_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTicketByIdenttyId_call method_call = new queryTicketByIdenttyId_call(auth, identty_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTicketByIdenttyId_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String identty_id;
      public queryTicketByIdenttyId_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String identty_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.identty_id = identty_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTicketByIdenttyId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTicketByIdenttyId_args args = new queryTicketByIdenttyId_args();
        args.setAuth(auth);
        args.setIdentty_id(identty_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTicketByIdenttyId();
      }
    }

    public void querTicketPayStatus(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      querTicketPayStatus_call method_call = new querTicketPayStatus_call(auth, order_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class querTicketPayStatus_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String order_id;
      public querTicketPayStatus_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.order_id = order_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("querTicketPayStatus", org.apache.thrift.protocol.TMessageType.CALL, 0));
        querTicketPayStatus_args args = new querTicketPayStatus_args();
        args.setAuth(auth);
        args.setOrder_id(order_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_querTicketPayStatus();
      }
    }

    public void cancelTicketPay(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelTicketPay_call method_call = new cancelTicketPay_call(auth, order_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelTicketPay_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String order_id;
      public cancelTicketPay_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String order_id, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.order_id = order_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelTicketPay", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelTicketPay_args args = new cancelTicketPay_args();
        args.setAuth(auth);
        args.setOrder_id(order_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelTicketPay();
      }
    }

    public void ejectTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ejectTicket_call method_call = new ejectTicket_call(auth, sl_order_detail_list, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ejectTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list;
      public ejectTicket_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sl_order_detail_list = sl_order_detail_list;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ejectTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ejectTicket_args args = new ejectTicket_args();
        args.setAuth(auth);
        args.setSl_order_detail_list(sl_order_detail_list);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ejectTicket();
      }
    }

    public void changeTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      changeTicket_call method_call = new changeTicket_call(auth, sl_netagent_order, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class changeTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order;
      public changeTicket_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sl_netagent_order = sl_netagent_order;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("changeTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        changeTicket_args args = new changeTicket_args();
        args.setAuth(auth);
        args.setSl_netagent_order(sl_netagent_order);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_changeTicket();
      }
    }

    public void supplyTicket(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_SUPPLY sl_supply, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      supplyTicket_call method_call = new supplyTicket_call(auth, sl_supply, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class supplyTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private com.tbims.rpc.entity.SL_SUPPLY sl_supply;
      public supplyTicket_call(com.tbims.rpc.entity.AUTHORIZATION auth, com.tbims.rpc.entity.SL_SUPPLY sl_supply, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sl_supply = sl_supply;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("supplyTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        supplyTicket_args args = new supplyTicket_args();
        args.setAuth(auth);
        args.setSl_supply(sl_supply);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_supplyTicket();
      }
    }

    public void uselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uselessTicket_call method_call = new uselessTicket_call(auth, useless_ticket_infos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uselessTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos;
      public uselessTicket_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.useless_ticket_infos = useless_ticket_infos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uselessTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uselessTicket_args args = new uselessTicket_args();
        args.setAuth(auth);
        args.setUseless_ticket_infos(useless_ticket_infos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uselessTicket();
      }
    }

    public void cancelUselessTicket(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      cancelUselessTicket_call method_call = new cancelUselessTicket_call(auth, useless_ticket_infos, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class cancelUselessTicket_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos;
      public cancelUselessTicket_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.useless_ticket_infos = useless_ticket_infos;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("cancelUselessTicket", org.apache.thrift.protocol.TMessageType.CALL, 0));
        cancelUselessTicket_args args = new cancelUselessTicket_args();
        args.setAuth(auth);
        args.setUseless_ticket_infos(useless_ticket_infos);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_cancelUselessTicket();
      }
    }

    public void checkInfo(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkInfo_call method_call = new checkInfo_call(auth, sl_checks, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkInfo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Boolean> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks;
      public checkInfo_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.sl_checks = sl_checks;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkInfo_args args = new checkInfo_args();
        args.setAuth(auth);
        args.setSl_checks(sl_checks);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Boolean getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkInfo();
      }
    }

    public void checkTicketOnline(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String checkId, java.lang.String ticketClass, java.lang.String ticketUid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      checkTicketOnline_call method_call = new checkTicketOnline_call(auth, checkId, ticketClass, ticketUid, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class checkTicketOnline_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.Integer> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private java.lang.String checkId;
      private java.lang.String ticketClass;
      private java.lang.String ticketUid;
      public checkTicketOnline_call(com.tbims.rpc.entity.AUTHORIZATION auth, java.lang.String checkId, java.lang.String ticketClass, java.lang.String ticketUid, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.checkId = checkId;
        this.ticketClass = ticketClass;
        this.ticketUid = ticketUid;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("checkTicketOnline", org.apache.thrift.protocol.TMessageType.CALL, 0));
        checkTicketOnline_args args = new checkTicketOnline_args();
        args.setAuth(auth);
        args.setCheckId(checkId);
        args.setTicketClass(ticketClass);
        args.setTicketUid(ticketUid);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.Integer getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_checkTicketOnline();
      }
    }

    public void rptSaleDataUser(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rptSaleDataUser_call method_call = new rptSaleDataUser_call(auth, rpt_date, outlet_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rptSaleDataUser_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long rpt_date;
      private long outlet_id;
      public rptSaleDataUser_call(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.rpt_date = rpt_date;
        this.outlet_id = outlet_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rptSaleDataUser", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rptSaleDataUser_args args = new rptSaleDataUser_args();
        args.setAuth(auth);
        args.setRpt_date(rpt_date);
        args.setOutlet_id(outlet_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rptSaleDataUser();
      }
    }

    public void rptSaleDataOutlet(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rptSaleDataOutlet_call method_call = new rptSaleDataOutlet_call(auth, rpt_date, outlet_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rptSaleDataOutlet_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long rpt_date;
      private long outlet_id;
      public rptSaleDataOutlet_call(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.rpt_date = rpt_date;
        this.outlet_id = outlet_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rptSaleDataOutlet", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rptSaleDataOutlet_args args = new rptSaleDataOutlet_args();
        args.setAuth(auth);
        args.setRpt_date(rpt_date);
        args.setOutlet_id(outlet_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rptSaleDataOutlet();
      }
    }

    public void rptStrData(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rptStrData_call method_call = new rptStrData_call(auth, rpt_date, outlet_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rptStrData_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long rpt_date;
      private long outlet_id;
      public rptStrData_call(com.tbims.rpc.entity.AUTHORIZATION auth, long rpt_date, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.rpt_date = rpt_date;
        this.outlet_id = outlet_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rptStrData", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rptStrData_args args = new rptStrData_args();
        args.setAuth(auth);
        args.setRpt_date(rpt_date);
        args.setOutlet_id(outlet_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rptStrData();
      }
    }

    public void rptStrDataNow(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      rptStrDataNow_call method_call = new rptStrDataNow_call(auth, outlet_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class rptStrDataNow_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long outlet_id;
      public rptStrDataNow_call(com.tbims.rpc.entity.AUTHORIZATION auth, long outlet_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.outlet_id = outlet_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("rptStrDataNow", org.apache.thrift.protocol.TMessageType.CALL, 0));
        rptStrDataNow_args args = new rptStrDataNow_args();
        args.setAuth(auth);
        args.setOutlet_id(outlet_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_rptStrDataNow();
      }
    }

    public void queryTeamOrderDetail(com.tbims.rpc.entity.AUTHORIZATION auth, long change_time, java.lang.String apply_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queryTeamOrderDetail_call method_call = new queryTeamOrderDetail_call(auth, change_time, apply_id, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queryTeamOrderDetail_call extends org.apache.thrift.async.TAsyncMethodCall<java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>> {
      private com.tbims.rpc.entity.AUTHORIZATION auth;
      private long change_time;
      private java.lang.String apply_id;
      public queryTeamOrderDetail_call(com.tbims.rpc.entity.AUTHORIZATION auth, long change_time, java.lang.String apply_id, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.auth = auth;
        this.change_time = change_time;
        this.apply_id = apply_id;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queryTeamOrderDetail", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queryTeamOrderDetail_args args = new queryTeamOrderDetail_args();
        args.setAuth(auth);
        args.setChange_time(change_time);
        args.setApply_id(apply_id);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> getResult() throws com.tbims.rpc.entity.RPCException, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queryTeamOrderDetail();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getInfoByClientId", new getInfoByClientId());
      processMap.put("querySlOrg", new querySlOrg());
      processMap.put("ticketApplyQuery", new ticketApplyQuery());
      processMap.put("ticketApply", new ticketApply());
      processMap.put("ticketConfirm", new ticketConfirm());
      processMap.put("ticketInfoQuery", new ticketInfoQuery());
      processMap.put("checkInfoQuery", new checkInfoQuery());
      processMap.put("teamOrderQuery", new teamOrderQuery());
      processMap.put("checkSaleTicketBYzy", new checkSaleTicketBYzy());
      processMap.put("saleTicket", new saleTicket());
      processMap.put("saleTicketByZG", new saleTicketByZG());
      processMap.put("saleTicketByIdenttyZG", new saleTicketByIdenttyZG());
      processMap.put("queryTicketByIdenttyId", new queryTicketByIdenttyId());
      processMap.put("querTicketPayStatus", new querTicketPayStatus());
      processMap.put("cancelTicketPay", new cancelTicketPay());
      processMap.put("ejectTicket", new ejectTicket());
      processMap.put("changeTicket", new changeTicket());
      processMap.put("supplyTicket", new supplyTicket());
      processMap.put("uselessTicket", new uselessTicket());
      processMap.put("cancelUselessTicket", new cancelUselessTicket());
      processMap.put("checkInfo", new checkInfo());
      processMap.put("checkTicketOnline", new checkTicketOnline());
      processMap.put("rptSaleDataUser", new rptSaleDataUser());
      processMap.put("rptSaleDataOutlet", new rptSaleDataOutlet());
      processMap.put("rptStrData", new rptStrData());
      processMap.put("rptStrDataNow", new rptStrDataNow());
      processMap.put("queryTeamOrderDetail", new queryTeamOrderDetail());
      return processMap;
    }

    public static class getInfoByClientId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getInfoByClientId_args> {
      public getInfoByClientId() {
        super("getInfoByClientId");
      }

      public getInfoByClientId_args getEmptyArgsInstance() {
        return new getInfoByClientId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public getInfoByClientId_result getResult(I iface, getInfoByClientId_args args) throws org.apache.thrift.TException {
        getInfoByClientId_result result = new getInfoByClientId_result();
        try {
          result.success = iface.getInfoByClientId(args.auth, args.clientId);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class querySlOrg<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querySlOrg_args> {
      public querySlOrg() {
        super("querySlOrg");
      }

      public querySlOrg_args getEmptyArgsInstance() {
        return new querySlOrg_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querySlOrg_result getResult(I iface, querySlOrg_args args) throws org.apache.thrift.TException {
        querySlOrg_result result = new querySlOrg_result();
        try {
          result.success = iface.querySlOrg(args.auth, args.orgType, args.outletId);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class ticketApplyQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ticketApplyQuery_args> {
      public ticketApplyQuery() {
        super("ticketApplyQuery");
      }

      public ticketApplyQuery_args getEmptyArgsInstance() {
        return new ticketApplyQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ticketApplyQuery_result getResult(I iface, ticketApplyQuery_args args) throws org.apache.thrift.TException {
        ticketApplyQuery_result result = new ticketApplyQuery_result();
        try {
          result.success = iface.ticketApplyQuery(args.auth, args.applyId, args.app_begin_tm, args.app_end_tm, args.exam_stat, args.outlet_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class ticketApply<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ticketApply_args> {
      public ticketApply() {
        super("ticketApply");
      }

      public ticketApply_args getEmptyArgsInstance() {
        return new ticketApply_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ticketApply_result getResult(I iface, ticketApply_args args) throws org.apache.thrift.TException {
        ticketApply_result result = new ticketApply_result();
        try {
          result.success = iface.ticketApply(args.auth, args.delivery_apply);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class ticketConfirm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ticketConfirm_args> {
      public ticketConfirm() {
        super("ticketConfirm");
      }

      public ticketConfirm_args getEmptyArgsInstance() {
        return new ticketConfirm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ticketConfirm_result getResult(I iface, ticketConfirm_args args) throws org.apache.thrift.TException {
        ticketConfirm_result result = new ticketConfirm_result();
        try {
          result.success = iface.ticketConfirm(args.auth, args.applyId, args.exam_stat);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class ticketInfoQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ticketInfoQuery_args> {
      public ticketInfoQuery() {
        super("ticketInfoQuery");
      }

      public ticketInfoQuery_args getEmptyArgsInstance() {
        return new ticketInfoQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ticketInfoQuery_result getResult(I iface, ticketInfoQuery_args args) throws org.apache.thrift.TException {
        ticketInfoQuery_result result = new ticketInfoQuery_result();
        try {
          result.success = iface.ticketInfoQuery(args.auth, args.ticket_id, args.outlet_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkInfoQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkInfoQuery_args> {
      public checkInfoQuery() {
        super("checkInfoQuery");
      }

      public checkInfoQuery_args getEmptyArgsInstance() {
        return new checkInfoQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkInfoQuery_result getResult(I iface, checkInfoQuery_args args) throws org.apache.thrift.TException {
        checkInfoQuery_result result = new checkInfoQuery_result();
        try {
          result.success = iface.checkInfoQuery(args.auth, args.ticket_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class teamOrderQuery<I extends Iface> extends org.apache.thrift.ProcessFunction<I, teamOrderQuery_args> {
      public teamOrderQuery() {
        super("teamOrderQuery");
      }

      public teamOrderQuery_args getEmptyArgsInstance() {
        return new teamOrderQuery_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public teamOrderQuery_result getResult(I iface, teamOrderQuery_args args) throws org.apache.thrift.TException {
        teamOrderQuery_result result = new teamOrderQuery_result();
        try {
          result.success = iface.teamOrderQuery(args.auth, args.apply_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkSaleTicketBYzy<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkSaleTicketBYzy_args> {
      public checkSaleTicketBYzy() {
        super("checkSaleTicketBYzy");
      }

      public checkSaleTicketBYzy_args getEmptyArgsInstance() {
        return new checkSaleTicketBYzy_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkSaleTicketBYzy_result getResult(I iface, checkSaleTicketBYzy_args args) throws org.apache.thrift.TException {
        checkSaleTicketBYzy_result result = new checkSaleTicketBYzy_result();
        try {
          result.success = iface.checkSaleTicketBYzy(args.auth, args.begin_ticket_id, args.ticket_num, args.end_ticket_id);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saleTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saleTicket_args> {
      public saleTicket() {
        super("saleTicket");
      }

      public saleTicket_args getEmptyArgsInstance() {
        return new saleTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saleTicket_result getResult(I iface, saleTicket_args args) throws org.apache.thrift.TException {
        saleTicket_result result = new saleTicket_result();
        try {
          result.success = iface.saleTicket(args.auth, args.sl_orders);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saleTicketByZG<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saleTicketByZG_args> {
      public saleTicketByZG() {
        super("saleTicketByZG");
      }

      public saleTicketByZG_args getEmptyArgsInstance() {
        return new saleTicketByZG_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saleTicketByZG_result getResult(I iface, saleTicketByZG_args args) throws org.apache.thrift.TException {
        saleTicketByZG_result result = new saleTicketByZG_result();
        try {
          result.success = iface.saleTicketByZG(args.auth, args.sl_order, args.sl_order_tickettype_detail);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class saleTicketByIdenttyZG<I extends Iface> extends org.apache.thrift.ProcessFunction<I, saleTicketByIdenttyZG_args> {
      public saleTicketByIdenttyZG() {
        super("saleTicketByIdenttyZG");
      }

      public saleTicketByIdenttyZG_args getEmptyArgsInstance() {
        return new saleTicketByIdenttyZG_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public saleTicketByIdenttyZG_result getResult(I iface, saleTicketByIdenttyZG_args args) throws org.apache.thrift.TException {
        saleTicketByIdenttyZG_result result = new saleTicketByIdenttyZG_result();
        try {
          result.success = iface.saleTicketByIdenttyZG(args.auth, args.sl_order);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryTicketByIdenttyId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTicketByIdenttyId_args> {
      public queryTicketByIdenttyId() {
        super("queryTicketByIdenttyId");
      }

      public queryTicketByIdenttyId_args getEmptyArgsInstance() {
        return new queryTicketByIdenttyId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTicketByIdenttyId_result getResult(I iface, queryTicketByIdenttyId_args args) throws org.apache.thrift.TException {
        queryTicketByIdenttyId_result result = new queryTicketByIdenttyId_result();
        try {
          result.success = iface.queryTicketByIdenttyId(args.auth, args.identty_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class querTicketPayStatus<I extends Iface> extends org.apache.thrift.ProcessFunction<I, querTicketPayStatus_args> {
      public querTicketPayStatus() {
        super("querTicketPayStatus");
      }

      public querTicketPayStatus_args getEmptyArgsInstance() {
        return new querTicketPayStatus_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public querTicketPayStatus_result getResult(I iface, querTicketPayStatus_args args) throws org.apache.thrift.TException {
        querTicketPayStatus_result result = new querTicketPayStatus_result();
        try {
          result.success = iface.querTicketPayStatus(args.auth, args.order_id);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class cancelTicketPay<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelTicketPay_args> {
      public cancelTicketPay() {
        super("cancelTicketPay");
      }

      public cancelTicketPay_args getEmptyArgsInstance() {
        return new cancelTicketPay_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelTicketPay_result getResult(I iface, cancelTicketPay_args args) throws org.apache.thrift.TException {
        cancelTicketPay_result result = new cancelTicketPay_result();
        result.success = iface.cancelTicketPay(args.auth, args.order_id);
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class ejectTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ejectTicket_args> {
      public ejectTicket() {
        super("ejectTicket");
      }

      public ejectTicket_args getEmptyArgsInstance() {
        return new ejectTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ejectTicket_result getResult(I iface, ejectTicket_args args) throws org.apache.thrift.TException {
        ejectTicket_result result = new ejectTicket_result();
        try {
          result.success = iface.ejectTicket(args.auth, args.sl_order_detail_list);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class changeTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, changeTicket_args> {
      public changeTicket() {
        super("changeTicket");
      }

      public changeTicket_args getEmptyArgsInstance() {
        return new changeTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public changeTicket_result getResult(I iface, changeTicket_args args) throws org.apache.thrift.TException {
        changeTicket_result result = new changeTicket_result();
        try {
          result.success = iface.changeTicket(args.auth, args.sl_netagent_order);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class supplyTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, supplyTicket_args> {
      public supplyTicket() {
        super("supplyTicket");
      }

      public supplyTicket_args getEmptyArgsInstance() {
        return new supplyTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public supplyTicket_result getResult(I iface, supplyTicket_args args) throws org.apache.thrift.TException {
        supplyTicket_result result = new supplyTicket_result();
        try {
          result.success = iface.supplyTicket(args.auth, args.sl_supply);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class uselessTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uselessTicket_args> {
      public uselessTicket() {
        super("uselessTicket");
      }

      public uselessTicket_args getEmptyArgsInstance() {
        return new uselessTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public uselessTicket_result getResult(I iface, uselessTicket_args args) throws org.apache.thrift.TException {
        uselessTicket_result result = new uselessTicket_result();
        try {
          result.success = iface.uselessTicket(args.auth, args.useless_ticket_infos);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class cancelUselessTicket<I extends Iface> extends org.apache.thrift.ProcessFunction<I, cancelUselessTicket_args> {
      public cancelUselessTicket() {
        super("cancelUselessTicket");
      }

      public cancelUselessTicket_args getEmptyArgsInstance() {
        return new cancelUselessTicket_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public cancelUselessTicket_result getResult(I iface, cancelUselessTicket_args args) throws org.apache.thrift.TException {
        cancelUselessTicket_result result = new cancelUselessTicket_result();
        try {
          result.success = iface.cancelUselessTicket(args.auth, args.useless_ticket_infos);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkInfo_args> {
      public checkInfo() {
        super("checkInfo");
      }

      public checkInfo_args getEmptyArgsInstance() {
        return new checkInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkInfo_result getResult(I iface, checkInfo_args args) throws org.apache.thrift.TException {
        checkInfo_result result = new checkInfo_result();
        try {
          result.success = iface.checkInfo(args.auth, args.sl_checks);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class checkTicketOnline<I extends Iface> extends org.apache.thrift.ProcessFunction<I, checkTicketOnline_args> {
      public checkTicketOnline() {
        super("checkTicketOnline");
      }

      public checkTicketOnline_args getEmptyArgsInstance() {
        return new checkTicketOnline_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public checkTicketOnline_result getResult(I iface, checkTicketOnline_args args) throws org.apache.thrift.TException {
        checkTicketOnline_result result = new checkTicketOnline_result();
        try {
          result.success = iface.checkTicketOnline(args.auth, args.checkId, args.ticketClass, args.ticketUid);
          result.setSuccessIsSet(true);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class rptSaleDataUser<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rptSaleDataUser_args> {
      public rptSaleDataUser() {
        super("rptSaleDataUser");
      }

      public rptSaleDataUser_args getEmptyArgsInstance() {
        return new rptSaleDataUser_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rptSaleDataUser_result getResult(I iface, rptSaleDataUser_args args) throws org.apache.thrift.TException {
        rptSaleDataUser_result result = new rptSaleDataUser_result();
        try {
          result.success = iface.rptSaleDataUser(args.auth, args.rpt_date, args.outlet_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class rptSaleDataOutlet<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rptSaleDataOutlet_args> {
      public rptSaleDataOutlet() {
        super("rptSaleDataOutlet");
      }

      public rptSaleDataOutlet_args getEmptyArgsInstance() {
        return new rptSaleDataOutlet_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rptSaleDataOutlet_result getResult(I iface, rptSaleDataOutlet_args args) throws org.apache.thrift.TException {
        rptSaleDataOutlet_result result = new rptSaleDataOutlet_result();
        try {
          result.success = iface.rptSaleDataOutlet(args.auth, args.rpt_date, args.outlet_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class rptStrData<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rptStrData_args> {
      public rptStrData() {
        super("rptStrData");
      }

      public rptStrData_args getEmptyArgsInstance() {
        return new rptStrData_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rptStrData_result getResult(I iface, rptStrData_args args) throws org.apache.thrift.TException {
        rptStrData_result result = new rptStrData_result();
        try {
          result.success = iface.rptStrData(args.auth, args.rpt_date, args.outlet_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class rptStrDataNow<I extends Iface> extends org.apache.thrift.ProcessFunction<I, rptStrDataNow_args> {
      public rptStrDataNow() {
        super("rptStrDataNow");
      }

      public rptStrDataNow_args getEmptyArgsInstance() {
        return new rptStrDataNow_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public rptStrDataNow_result getResult(I iface, rptStrDataNow_args args) throws org.apache.thrift.TException {
        rptStrDataNow_result result = new rptStrDataNow_result();
        try {
          result.success = iface.rptStrDataNow(args.auth, args.outlet_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

    public static class queryTeamOrderDetail<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queryTeamOrderDetail_args> {
      public queryTeamOrderDetail() {
        super("queryTeamOrderDetail");
      }

      public queryTeamOrderDetail_args getEmptyArgsInstance() {
        return new queryTeamOrderDetail_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public queryTeamOrderDetail_result getResult(I iface, queryTeamOrderDetail_args args) throws org.apache.thrift.TException {
        queryTeamOrderDetail_result result = new queryTeamOrderDetail_result();
        try {
          result.success = iface.queryTeamOrderDetail(args.auth, args.change_time, args.apply_id);
        } catch (com.tbims.rpc.entity.RPCException e) {
          result.e = e;
        }
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getInfoByClientId", new getInfoByClientId());
      processMap.put("querySlOrg", new querySlOrg());
      processMap.put("ticketApplyQuery", new ticketApplyQuery());
      processMap.put("ticketApply", new ticketApply());
      processMap.put("ticketConfirm", new ticketConfirm());
      processMap.put("ticketInfoQuery", new ticketInfoQuery());
      processMap.put("checkInfoQuery", new checkInfoQuery());
      processMap.put("teamOrderQuery", new teamOrderQuery());
      processMap.put("checkSaleTicketBYzy", new checkSaleTicketBYzy());
      processMap.put("saleTicket", new saleTicket());
      processMap.put("saleTicketByZG", new saleTicketByZG());
      processMap.put("saleTicketByIdenttyZG", new saleTicketByIdenttyZG());
      processMap.put("queryTicketByIdenttyId", new queryTicketByIdenttyId());
      processMap.put("querTicketPayStatus", new querTicketPayStatus());
      processMap.put("cancelTicketPay", new cancelTicketPay());
      processMap.put("ejectTicket", new ejectTicket());
      processMap.put("changeTicket", new changeTicket());
      processMap.put("supplyTicket", new supplyTicket());
      processMap.put("uselessTicket", new uselessTicket());
      processMap.put("cancelUselessTicket", new cancelUselessTicket());
      processMap.put("checkInfo", new checkInfo());
      processMap.put("checkTicketOnline", new checkTicketOnline());
      processMap.put("rptSaleDataUser", new rptSaleDataUser());
      processMap.put("rptSaleDataOutlet", new rptSaleDataOutlet());
      processMap.put("rptStrData", new rptStrData());
      processMap.put("rptStrDataNow", new rptStrDataNow());
      processMap.put("queryTeamOrderDetail", new queryTeamOrderDetail());
      return processMap;
    }

    public static class getInfoByClientId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getInfoByClientId_args, com.tbims.rpc.entity.SYS_CLIENT_OUTLET> {
      public getInfoByClientId() {
        super("getInfoByClientId");
      }

      public getInfoByClientId_args getEmptyArgsInstance() {
        return new getInfoByClientId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SYS_CLIENT_OUTLET> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SYS_CLIENT_OUTLET>() { 
          public void onComplete(com.tbims.rpc.entity.SYS_CLIENT_OUTLET o) {
            getInfoByClientId_result result = new getInfoByClientId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getInfoByClientId_result result = new getInfoByClientId_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getInfoByClientId_args args, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SYS_CLIENT_OUTLET> resultHandler) throws org.apache.thrift.TException {
        iface.getInfoByClientId(args.auth, args.clientId,resultHandler);
      }
    }

    public static class querySlOrg<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querySlOrg_args, java.util.List<com.tbims.rpc.entity.SL_ORG>> {
      public querySlOrg() {
        super("querySlOrg");
      }

      public querySlOrg_args getEmptyArgsInstance() {
        return new querySlOrg_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORG>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORG>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SL_ORG> o) {
            querySlOrg_result result = new querySlOrg_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            querySlOrg_result result = new querySlOrg_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querySlOrg_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORG>> resultHandler) throws org.apache.thrift.TException {
        iface.querySlOrg(args.auth, args.orgType, args.outletId,resultHandler);
      }
    }

    public static class ticketApplyQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ticketApplyQuery_args, java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>> {
      public ticketApplyQuery() {
        super("ticketApplyQuery");
      }

      public ticketApplyQuery_args getEmptyArgsInstance() {
        return new ticketApplyQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> o) {
            ticketApplyQuery_result result = new ticketApplyQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ticketApplyQuery_result result = new ticketApplyQuery_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ticketApplyQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>> resultHandler) throws org.apache.thrift.TException {
        iface.ticketApplyQuery(args.auth, args.applyId, args.app_begin_tm, args.app_end_tm, args.exam_stat, args.outlet_id,resultHandler);
      }
    }

    public static class ticketApply<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ticketApply_args, java.lang.Boolean> {
      public ticketApply() {
        super("ticketApply");
      }

      public ticketApply_args getEmptyArgsInstance() {
        return new ticketApply_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            ticketApply_result result = new ticketApply_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ticketApply_result result = new ticketApply_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ticketApply_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ticketApply(args.auth, args.delivery_apply,resultHandler);
      }
    }

    public static class ticketConfirm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ticketConfirm_args, java.lang.Boolean> {
      public ticketConfirm() {
        super("ticketConfirm");
      }

      public ticketConfirm_args getEmptyArgsInstance() {
        return new ticketConfirm_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            ticketConfirm_result result = new ticketConfirm_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ticketConfirm_result result = new ticketConfirm_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ticketConfirm_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ticketConfirm(args.auth, args.applyId, args.exam_stat,resultHandler);
      }
    }

    public static class ticketInfoQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ticketInfoQuery_args, com.tbims.rpc.entity.STR_TICKET_INFO> {
      public ticketInfoQuery() {
        super("ticketInfoQuery");
      }

      public ticketInfoQuery_args getEmptyArgsInstance() {
        return new ticketInfoQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.STR_TICKET_INFO> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.STR_TICKET_INFO>() { 
          public void onComplete(com.tbims.rpc.entity.STR_TICKET_INFO o) {
            ticketInfoQuery_result result = new ticketInfoQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ticketInfoQuery_result result = new ticketInfoQuery_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ticketInfoQuery_args args, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.STR_TICKET_INFO> resultHandler) throws org.apache.thrift.TException {
        iface.ticketInfoQuery(args.auth, args.ticket_id, args.outlet_id,resultHandler);
      }
    }

    public static class checkInfoQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkInfoQuery_args, java.util.List<com.tbims.rpc.entity.SL_CHECK>> {
      public checkInfoQuery() {
        super("checkInfoQuery");
      }

      public checkInfoQuery_args getEmptyArgsInstance() {
        return new checkInfoQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_CHECK>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_CHECK>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SL_CHECK> o) {
            checkInfoQuery_result result = new checkInfoQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkInfoQuery_result result = new checkInfoQuery_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkInfoQuery_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_CHECK>> resultHandler) throws org.apache.thrift.TException {
        iface.checkInfoQuery(args.auth, args.ticket_id,resultHandler);
      }
    }

    public static class teamOrderQuery<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, teamOrderQuery_args, com.tbims.rpc.entity.SL_TEAM_ORDER> {
      public teamOrderQuery() {
        super("teamOrderQuery");
      }

      public teamOrderQuery_args getEmptyArgsInstance() {
        return new teamOrderQuery_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SL_TEAM_ORDER> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SL_TEAM_ORDER>() { 
          public void onComplete(com.tbims.rpc.entity.SL_TEAM_ORDER o) {
            teamOrderQuery_result result = new teamOrderQuery_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            teamOrderQuery_result result = new teamOrderQuery_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, teamOrderQuery_args args, org.apache.thrift.async.AsyncMethodCallback<com.tbims.rpc.entity.SL_TEAM_ORDER> resultHandler) throws org.apache.thrift.TException {
        iface.teamOrderQuery(args.auth, args.apply_id,resultHandler);
      }
    }

    public static class checkSaleTicketBYzy<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkSaleTicketBYzy_args, java.lang.Boolean> {
      public checkSaleTicketBYzy() {
        super("checkSaleTicketBYzy");
      }

      public checkSaleTicketBYzy_args getEmptyArgsInstance() {
        return new checkSaleTicketBYzy_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            checkSaleTicketBYzy_result result = new checkSaleTicketBYzy_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkSaleTicketBYzy_result result = new checkSaleTicketBYzy_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkSaleTicketBYzy_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.checkSaleTicketBYzy(args.auth, args.begin_ticket_id, args.ticket_num, args.end_ticket_id,resultHandler);
      }
    }

    public static class saleTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saleTicket_args, java.lang.Boolean> {
      public saleTicket() {
        super("saleTicket");
      }

      public saleTicket_args getEmptyArgsInstance() {
        return new saleTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            saleTicket_result result = new saleTicket_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saleTicket_result result = new saleTicket_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saleTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.saleTicket(args.auth, args.sl_orders,resultHandler);
      }
    }

    public static class saleTicketByZG<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saleTicketByZG_args, java.lang.Boolean> {
      public saleTicketByZG() {
        super("saleTicketByZG");
      }

      public saleTicketByZG_args getEmptyArgsInstance() {
        return new saleTicketByZG_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            saleTicketByZG_result result = new saleTicketByZG_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saleTicketByZG_result result = new saleTicketByZG_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saleTicketByZG_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.saleTicketByZG(args.auth, args.sl_order, args.sl_order_tickettype_detail,resultHandler);
      }
    }

    public static class saleTicketByIdenttyZG<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, saleTicketByIdenttyZG_args, java.lang.Boolean> {
      public saleTicketByIdenttyZG() {
        super("saleTicketByIdenttyZG");
      }

      public saleTicketByIdenttyZG_args getEmptyArgsInstance() {
        return new saleTicketByIdenttyZG_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            saleTicketByIdenttyZG_result result = new saleTicketByIdenttyZG_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            saleTicketByIdenttyZG_result result = new saleTicketByIdenttyZG_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, saleTicketByIdenttyZG_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.saleTicketByIdenttyZG(args.auth, args.sl_order,resultHandler);
      }
    }

    public static class queryTicketByIdenttyId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTicketByIdenttyId_args, java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> {
      public queryTicketByIdenttyId() {
        super("queryTicketByIdenttyId");
      }

      public queryTicketByIdenttyId_args getEmptyArgsInstance() {
        return new queryTicketByIdenttyId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> o) {
            queryTicketByIdenttyId_result result = new queryTicketByIdenttyId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryTicketByIdenttyId_result result = new queryTicketByIdenttyId_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTicketByIdenttyId_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>> resultHandler) throws org.apache.thrift.TException {
        iface.queryTicketByIdenttyId(args.auth, args.identty_id,resultHandler);
      }
    }

    public static class querTicketPayStatus<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, querTicketPayStatus_args, java.lang.Integer> {
      public querTicketPayStatus() {
        super("querTicketPayStatus");
      }

      public querTicketPayStatus_args getEmptyArgsInstance() {
        return new querTicketPayStatus_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            querTicketPayStatus_result result = new querTicketPayStatus_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            querTicketPayStatus_result result = new querTicketPayStatus_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, querTicketPayStatus_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.querTicketPayStatus(args.auth, args.order_id,resultHandler);
      }
    }

    public static class cancelTicketPay<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelTicketPay_args, java.lang.Boolean> {
      public cancelTicketPay() {
        super("cancelTicketPay");
      }

      public cancelTicketPay_args getEmptyArgsInstance() {
        return new cancelTicketPay_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            cancelTicketPay_result result = new cancelTicketPay_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cancelTicketPay_result result = new cancelTicketPay_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelTicketPay_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.cancelTicketPay(args.auth, args.order_id,resultHandler);
      }
    }

    public static class ejectTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ejectTicket_args, java.lang.Boolean> {
      public ejectTicket() {
        super("ejectTicket");
      }

      public ejectTicket_args getEmptyArgsInstance() {
        return new ejectTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            ejectTicket_result result = new ejectTicket_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            ejectTicket_result result = new ejectTicket_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ejectTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.ejectTicket(args.auth, args.sl_order_detail_list,resultHandler);
      }
    }

    public static class changeTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, changeTicket_args, java.lang.Boolean> {
      public changeTicket() {
        super("changeTicket");
      }

      public changeTicket_args getEmptyArgsInstance() {
        return new changeTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            changeTicket_result result = new changeTicket_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            changeTicket_result result = new changeTicket_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, changeTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.changeTicket(args.auth, args.sl_netagent_order,resultHandler);
      }
    }

    public static class supplyTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, supplyTicket_args, java.lang.Boolean> {
      public supplyTicket() {
        super("supplyTicket");
      }

      public supplyTicket_args getEmptyArgsInstance() {
        return new supplyTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            supplyTicket_result result = new supplyTicket_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            supplyTicket_result result = new supplyTicket_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, supplyTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.supplyTicket(args.auth, args.sl_supply,resultHandler);
      }
    }

    public static class uselessTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uselessTicket_args, java.lang.Boolean> {
      public uselessTicket() {
        super("uselessTicket");
      }

      public uselessTicket_args getEmptyArgsInstance() {
        return new uselessTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            uselessTicket_result result = new uselessTicket_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uselessTicket_result result = new uselessTicket_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uselessTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.uselessTicket(args.auth, args.useless_ticket_infos,resultHandler);
      }
    }

    public static class cancelUselessTicket<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, cancelUselessTicket_args, java.lang.Boolean> {
      public cancelUselessTicket() {
        super("cancelUselessTicket");
      }

      public cancelUselessTicket_args getEmptyArgsInstance() {
        return new cancelUselessTicket_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            cancelUselessTicket_result result = new cancelUselessTicket_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            cancelUselessTicket_result result = new cancelUselessTicket_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, cancelUselessTicket_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.cancelUselessTicket(args.auth, args.useless_ticket_infos,resultHandler);
      }
    }

    public static class checkInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkInfo_args, java.lang.Boolean> {
      public checkInfo() {
        super("checkInfo");
      }

      public checkInfo_args getEmptyArgsInstance() {
        return new checkInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean>() { 
          public void onComplete(java.lang.Boolean o) {
            checkInfo_result result = new checkInfo_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkInfo_result result = new checkInfo_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkInfo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Boolean> resultHandler) throws org.apache.thrift.TException {
        iface.checkInfo(args.auth, args.sl_checks,resultHandler);
      }
    }

    public static class checkTicketOnline<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, checkTicketOnline_args, java.lang.Integer> {
      public checkTicketOnline() {
        super("checkTicketOnline");
      }

      public checkTicketOnline_args getEmptyArgsInstance() {
        return new checkTicketOnline_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer>() { 
          public void onComplete(java.lang.Integer o) {
            checkTicketOnline_result result = new checkTicketOnline_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            checkTicketOnline_result result = new checkTicketOnline_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, checkTicketOnline_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.Integer> resultHandler) throws org.apache.thrift.TException {
        iface.checkTicketOnline(args.auth, args.checkId, args.ticketClass, args.ticketUid,resultHandler);
      }
    }

    public static class rptSaleDataUser<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rptSaleDataUser_args, java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>> {
      public rptSaleDataUser() {
        super("rptSaleDataUser");
      }

      public rptSaleDataUser_args getEmptyArgsInstance() {
        return new rptSaleDataUser_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> o) {
            rptSaleDataUser_result result = new rptSaleDataUser_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rptSaleDataUser_result result = new rptSaleDataUser_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rptSaleDataUser_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>> resultHandler) throws org.apache.thrift.TException {
        iface.rptSaleDataUser(args.auth, args.rpt_date, args.outlet_id,resultHandler);
      }
    }

    public static class rptSaleDataOutlet<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rptSaleDataOutlet_args, java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>> {
      public rptSaleDataOutlet() {
        super("rptSaleDataOutlet");
      }

      public rptSaleDataOutlet_args getEmptyArgsInstance() {
        return new rptSaleDataOutlet_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> o) {
            rptSaleDataOutlet_result result = new rptSaleDataOutlet_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rptSaleDataOutlet_result result = new rptSaleDataOutlet_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rptSaleDataOutlet_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>> resultHandler) throws org.apache.thrift.TException {
        iface.rptSaleDataOutlet(args.auth, args.rpt_date, args.outlet_id,resultHandler);
      }
    }

    public static class rptStrData<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rptStrData_args, java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> {
      public rptStrData() {
        super("rptStrData");
      }

      public rptStrData_args getEmptyArgsInstance() {
        return new rptStrData_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> o) {
            rptStrData_result result = new rptStrData_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rptStrData_result result = new rptStrData_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rptStrData_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler) throws org.apache.thrift.TException {
        iface.rptStrData(args.auth, args.rpt_date, args.outlet_id,resultHandler);
      }
    }

    public static class rptStrDataNow<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, rptStrDataNow_args, java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> {
      public rptStrDataNow() {
        super("rptStrDataNow");
      }

      public rptStrDataNow_args getEmptyArgsInstance() {
        return new rptStrDataNow_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> o) {
            rptStrDataNow_result result = new rptStrDataNow_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            rptStrDataNow_result result = new rptStrDataNow_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, rptStrDataNow_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>> resultHandler) throws org.apache.thrift.TException {
        iface.rptStrDataNow(args.auth, args.outlet_id,resultHandler);
      }
    }

    public static class queryTeamOrderDetail<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queryTeamOrderDetail_args, java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>> {
      public queryTeamOrderDetail() {
        super("queryTeamOrderDetail");
      }

      public queryTeamOrderDetail_args getEmptyArgsInstance() {
        return new queryTeamOrderDetail_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>>() { 
          public void onComplete(java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> o) {
            queryTeamOrderDetail_result result = new queryTeamOrderDetail_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queryTeamOrderDetail_result result = new queryTeamOrderDetail_result();
            if (e instanceof com.tbims.rpc.entity.RPCException) {
              result.e = (com.tbims.rpc.entity.RPCException) e;
              result.setEIsSet(true);
              msg = result;
            } else if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queryTeamOrderDetail_args args, org.apache.thrift.async.AsyncMethodCallback<java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>> resultHandler) throws org.apache.thrift.TException {
        iface.queryTeamOrderDetail(args.auth, args.change_time, args.apply_id,resultHandler);
      }
    }

  }

  public static class getInfoByClientId_args implements org.apache.thrift.TBase<getInfoByClientId_args, getInfoByClientId_args._Fields>, java.io.Serializable, Cloneable, Comparable<getInfoByClientId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByClientId_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CLIENT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clientId", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInfoByClientId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInfoByClientId_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 客户端id
     */
    public long clientId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 客户端id
       */
      CLIENT_ID((short)2, "clientId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // CLIENT_ID
            return CLIENT_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CLIENTID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.CLIENT_ID, new org.apache.thrift.meta_data.FieldMetaData("clientId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByClientId_args.class, metaDataMap);
    }

    public getInfoByClientId_args() {
    }

    public getInfoByClientId_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long clientId)
    {
      this();
      this.auth = auth;
      this.clientId = clientId;
      setClientIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByClientId_args(getInfoByClientId_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.clientId = other.clientId;
    }

    public getInfoByClientId_args deepCopy() {
      return new getInfoByClientId_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setClientIdIsSet(false);
      this.clientId = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public getInfoByClientId_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 客户端id
     */
    public long getClientId() {
      return this.clientId;
    }

    /**
     * 客户端id
     */
    public getInfoByClientId_args setClientId(long clientId) {
      this.clientId = clientId;
      setClientIdIsSet(true);
      return this;
    }

    public void unsetClientId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    /** Returns true if field clientId is set (has been assigned a value) and false otherwise */
    public boolean isSetClientId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CLIENTID_ISSET_ID);
    }

    public void setClientIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CLIENTID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case CLIENT_ID:
        if (value == null) {
          unsetClientId();
        } else {
          setClientId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case CLIENT_ID:
        return getClientId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case CLIENT_ID:
        return isSetClientId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByClientId_args)
        return this.equals((getInfoByClientId_args)that);
      return false;
    }

    public boolean equals(getInfoByClientId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_clientId = true;
      boolean that_present_clientId = true;
      if (this_present_clientId || that_present_clientId) {
        if (!(this_present_clientId && that_present_clientId))
          return false;
        if (this.clientId != that.clientId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(clientId);

      return hashCode;
    }

    @Override
    public int compareTo(getInfoByClientId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetClientId()).compareTo(other.isSetClientId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClientId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clientId, other.clientId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getInfoByClientId_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("clientId:");
      sb.append(this.clientId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByClientId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoByClientId_argsStandardScheme getScheme() {
        return new getInfoByClientId_argsStandardScheme();
      }
    }

    private static class getInfoByClientId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInfoByClientId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLIENT_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.clientId = iprot.readI64();
                struct.setClientIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByClientId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CLIENT_ID_FIELD_DESC);
        oprot.writeI64(struct.clientId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByClientId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoByClientId_argsTupleScheme getScheme() {
        return new getInfoByClientId_argsTupleScheme();
      }
    }

    private static class getInfoByClientId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInfoByClientId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetClientId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetClientId()) {
          oprot.writeI64(struct.clientId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByClientId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.clientId = iprot.readI64();
          struct.setClientIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getInfoByClientId_result implements org.apache.thrift.TBase<getInfoByClientId_result, getInfoByClientId_result._Fields>, java.io.Serializable, Cloneable, Comparable<getInfoByClientId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getInfoByClientId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getInfoByClientId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getInfoByClientId_resultTupleSchemeFactory();

    public com.tbims.rpc.entity.SYS_CLIENT_OUTLET success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SYS_CLIENT_OUTLET.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getInfoByClientId_result.class, metaDataMap);
    }

    public getInfoByClientId_result() {
    }

    public getInfoByClientId_result(
      com.tbims.rpc.entity.SYS_CLIENT_OUTLET success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getInfoByClientId_result(getInfoByClientId_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.tbims.rpc.entity.SYS_CLIENT_OUTLET(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public getInfoByClientId_result deepCopy() {
      return new getInfoByClientId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.tbims.rpc.entity.SYS_CLIENT_OUTLET getSuccess() {
      return this.success;
    }

    public getInfoByClientId_result setSuccess(com.tbims.rpc.entity.SYS_CLIENT_OUTLET success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public getInfoByClientId_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.tbims.rpc.entity.SYS_CLIENT_OUTLET)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getInfoByClientId_result)
        return this.equals((getInfoByClientId_result)that);
      return false;
    }

    public boolean equals(getInfoByClientId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getInfoByClientId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getInfoByClientId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getInfoByClientId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoByClientId_resultStandardScheme getScheme() {
        return new getInfoByClientId_resultStandardScheme();
      }
    }

    private static class getInfoByClientId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getInfoByClientId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getInfoByClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tbims.rpc.entity.SYS_CLIENT_OUTLET();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getInfoByClientId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getInfoByClientId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getInfoByClientId_resultTupleScheme getScheme() {
        return new getInfoByClientId_resultTupleScheme();
      }
    }

    private static class getInfoByClientId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getInfoByClientId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getInfoByClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getInfoByClientId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.tbims.rpc.entity.SYS_CLIENT_OUTLET();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySlOrg_args implements org.apache.thrift.TBase<querySlOrg_args, querySlOrg_args._Fields>, java.io.Serializable, Cloneable, Comparable<querySlOrg_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySlOrg_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORG_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("orgType", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outletId", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySlOrg_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySlOrg_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 机构类型(0签约社1网络代理商2实体代理商)
     */
    public java.lang.String orgType; // required
    /**
     * 网点编号
     */
    public long outletId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 机构类型(0签约社1网络代理商2实体代理商)
       */
      ORG_TYPE((short)2, "orgType"),
      /**
       * 网点编号
       */
      OUTLET_ID((short)3, "outletId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // ORG_TYPE
            return ORG_TYPE;
          case 3: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OUTLETID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.ORG_TYPE, new org.apache.thrift.meta_data.FieldMetaData("orgType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outletId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySlOrg_args.class, metaDataMap);
    }

    public querySlOrg_args() {
    }

    public querySlOrg_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String orgType,
      long outletId)
    {
      this();
      this.auth = auth;
      this.orgType = orgType;
      this.outletId = outletId;
      setOutletIdIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySlOrg_args(querySlOrg_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetOrgType()) {
        this.orgType = other.orgType;
      }
      this.outletId = other.outletId;
    }

    public querySlOrg_args deepCopy() {
      return new querySlOrg_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.orgType = null;
      setOutletIdIsSet(false);
      this.outletId = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public querySlOrg_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 机构类型(0签约社1网络代理商2实体代理商)
     */
    public java.lang.String getOrgType() {
      return this.orgType;
    }

    /**
     * 机构类型(0签约社1网络代理商2实体代理商)
     */
    public querySlOrg_args setOrgType(java.lang.String orgType) {
      this.orgType = orgType;
      return this;
    }

    public void unsetOrgType() {
      this.orgType = null;
    }

    /** Returns true if field orgType is set (has been assigned a value) and false otherwise */
    public boolean isSetOrgType() {
      return this.orgType != null;
    }

    public void setOrgTypeIsSet(boolean value) {
      if (!value) {
        this.orgType = null;
      }
    }

    /**
     * 网点编号
     */
    public long getOutletId() {
      return this.outletId;
    }

    /**
     * 网点编号
     */
    public querySlOrg_args setOutletId(long outletId) {
      this.outletId = outletId;
      setOutletIdIsSet(true);
      return this;
    }

    public void unsetOutletId() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLETID_ISSET_ID);
    }

    /** Returns true if field outletId is set (has been assigned a value) and false otherwise */
    public boolean isSetOutletId() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLETID_ISSET_ID);
    }

    public void setOutletIdIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLETID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case ORG_TYPE:
        if (value == null) {
          unsetOrgType();
        } else {
          setOrgType((java.lang.String)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutletId();
        } else {
          setOutletId((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case ORG_TYPE:
        return getOrgType();

      case OUTLET_ID:
        return getOutletId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case ORG_TYPE:
        return isSetOrgType();
      case OUTLET_ID:
        return isSetOutletId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySlOrg_args)
        return this.equals((querySlOrg_args)that);
      return false;
    }

    public boolean equals(querySlOrg_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_orgType = true && this.isSetOrgType();
      boolean that_present_orgType = true && that.isSetOrgType();
      if (this_present_orgType || that_present_orgType) {
        if (!(this_present_orgType && that_present_orgType))
          return false;
        if (!this.orgType.equals(that.orgType))
          return false;
      }

      boolean this_present_outletId = true;
      boolean that_present_outletId = true;
      if (this_present_outletId || that_present_outletId) {
        if (!(this_present_outletId && that_present_outletId))
          return false;
        if (this.outletId != that.outletId)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetOrgType()) ? 131071 : 524287);
      if (isSetOrgType())
        hashCode = hashCode * 8191 + orgType.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outletId);

      return hashCode;
    }

    @Override
    public int compareTo(querySlOrg_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOrgType()).compareTo(other.isSetOrgType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrgType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.orgType, other.orgType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutletId()).compareTo(other.isSetOutletId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutletId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outletId, other.outletId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySlOrg_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("orgType:");
      if (this.orgType == null) {
        sb.append("null");
      } else {
        sb.append(this.orgType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outletId:");
      sb.append(this.outletId);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySlOrg_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySlOrg_argsStandardScheme getScheme() {
        return new querySlOrg_argsStandardScheme();
      }
    }

    private static class querySlOrg_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySlOrg_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySlOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORG_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.orgType = iprot.readString();
                struct.setOrgTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outletId = iprot.readI64();
                struct.setOutletIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySlOrg_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.orgType != null) {
          oprot.writeFieldBegin(ORG_TYPE_FIELD_DESC);
          oprot.writeString(struct.orgType);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outletId);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySlOrg_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySlOrg_argsTupleScheme getScheme() {
        return new querySlOrg_argsTupleScheme();
      }
    }

    private static class querySlOrg_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySlOrg_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySlOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetOrgType()) {
          optionals.set(1);
        }
        if (struct.isSetOutletId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetOrgType()) {
          oprot.writeString(struct.orgType);
        }
        if (struct.isSetOutletId()) {
          oprot.writeI64(struct.outletId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySlOrg_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.orgType = iprot.readString();
          struct.setOrgTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outletId = iprot.readI64();
          struct.setOutletIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querySlOrg_result implements org.apache.thrift.TBase<querySlOrg_result, querySlOrg_result._Fields>, java.io.Serializable, Cloneable, Comparable<querySlOrg_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querySlOrg_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querySlOrg_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querySlOrg_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SL_ORG> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORG.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querySlOrg_result.class, metaDataMap);
    }

    public querySlOrg_result() {
    }

    public querySlOrg_result(
      java.util.List<com.tbims.rpc.entity.SL_ORG> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querySlOrg_result(querySlOrg_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SL_ORG> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORG>(other.success.size());
        for (com.tbims.rpc.entity.SL_ORG other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SL_ORG(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public querySlOrg_result deepCopy() {
      return new querySlOrg_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_ORG> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SL_ORG elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORG>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORG> getSuccess() {
      return this.success;
    }

    public querySlOrg_result setSuccess(java.util.List<com.tbims.rpc.entity.SL_ORG> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public querySlOrg_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SL_ORG>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querySlOrg_result)
        return this.equals((querySlOrg_result)that);
      return false;
    }

    public boolean equals(querySlOrg_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querySlOrg_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querySlOrg_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querySlOrg_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySlOrg_resultStandardScheme getScheme() {
        return new querySlOrg_resultStandardScheme();
      }
    }

    private static class querySlOrg_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<querySlOrg_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querySlOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORG>(_list0.size);
                  com.tbims.rpc.entity.SL_ORG _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new com.tbims.rpc.entity.SL_ORG();
                    _elem1.read(iprot);
                    struct.success.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querySlOrg_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SL_ORG _iter3 : struct.success)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querySlOrg_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querySlOrg_resultTupleScheme getScheme() {
        return new querySlOrg_resultTupleScheme();
      }
    }

    private static class querySlOrg_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<querySlOrg_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querySlOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SL_ORG _iter4 : struct.success)
            {
              _iter4.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querySlOrg_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORG>(_list5.size);
            com.tbims.rpc.entity.SL_ORG _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new com.tbims.rpc.entity.SL_ORG();
              _elem6.read(iprot);
              struct.success.add(_elem6);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketApplyQuery_args implements org.apache.thrift.TBase<ticketApplyQuery_args, ticketApplyQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<ticketApplyQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketApplyQuery_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField APP_BEGIN_TM_FIELD_DESC = new org.apache.thrift.protocol.TField("app_begin_tm", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField APP_END_TM_FIELD_DESC = new org.apache.thrift.protocol.TField("app_end_tm", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField EXAM_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_stat", org.apache.thrift.protocol.TType.STRING, (short)6);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I64, (short)7);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketApplyQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketApplyQuery_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 申请编号
     */
    public java.lang.String applyId; // required
    /**
     * 申请开始时间
     */
    public long app_begin_tm; // required
    /**
     * 申请开始时间
     */
    public long app_end_tm; // required
    /**
     * 审核状态(0待审核1已审核2已配送3已接收4已拒收)
     */
    public java.lang.String exam_stat; // required
    /**
     * 网点编号
     */
    public long outlet_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 申请编号
       */
      APPLY_ID((short)2, "applyId"),
      /**
       * 申请开始时间
       */
      APP_BEGIN_TM((short)3, "app_begin_tm"),
      /**
       * 申请开始时间
       */
      APP_END_TM((short)4, "app_end_tm"),
      /**
       * 审核状态(0待审核1已审核2已配送3已接收4已拒收)
       */
      EXAM_STAT((short)6, "exam_stat"),
      /**
       * 网点编号
       */
      OUTLET_ID((short)7, "outlet_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // APPLY_ID
            return APPLY_ID;
          case 3: // APP_BEGIN_TM
            return APP_BEGIN_TM;
          case 4: // APP_END_TM
            return APP_END_TM;
          case 6: // EXAM_STAT
            return EXAM_STAT;
          case 7: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __APP_BEGIN_TM_ISSET_ID = 0;
    private static final int __APP_END_TM_ISSET_ID = 1;
    private static final int __OUTLET_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.APP_BEGIN_TM, new org.apache.thrift.meta_data.FieldMetaData("app_begin_tm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.APP_END_TM, new org.apache.thrift.meta_data.FieldMetaData("app_end_tm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.EXAM_STAT, new org.apache.thrift.meta_data.FieldMetaData("exam_stat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketApplyQuery_args.class, metaDataMap);
    }

    public ticketApplyQuery_args() {
    }

    public ticketApplyQuery_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String applyId,
      long app_begin_tm,
      long app_end_tm,
      java.lang.String exam_stat,
      long outlet_id)
    {
      this();
      this.auth = auth;
      this.applyId = applyId;
      this.app_begin_tm = app_begin_tm;
      setApp_begin_tmIsSet(true);
      this.app_end_tm = app_end_tm;
      setApp_end_tmIsSet(true);
      this.exam_stat = exam_stat;
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketApplyQuery_args(ticketApplyQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetApplyId()) {
        this.applyId = other.applyId;
      }
      this.app_begin_tm = other.app_begin_tm;
      this.app_end_tm = other.app_end_tm;
      if (other.isSetExam_stat()) {
        this.exam_stat = other.exam_stat;
      }
      this.outlet_id = other.outlet_id;
    }

    public ticketApplyQuery_args deepCopy() {
      return new ticketApplyQuery_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.applyId = null;
      setApp_begin_tmIsSet(false);
      this.app_begin_tm = 0;
      setApp_end_tmIsSet(false);
      this.app_end_tm = 0;
      this.exam_stat = null;
      setOutlet_idIsSet(false);
      this.outlet_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public ticketApplyQuery_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 申请编号
     */
    public java.lang.String getApplyId() {
      return this.applyId;
    }

    /**
     * 申请编号
     */
    public ticketApplyQuery_args setApplyId(java.lang.String applyId) {
      this.applyId = applyId;
      return this;
    }

    public void unsetApplyId() {
      this.applyId = null;
    }

    /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyId() {
      return this.applyId != null;
    }

    public void setApplyIdIsSet(boolean value) {
      if (!value) {
        this.applyId = null;
      }
    }

    /**
     * 申请开始时间
     */
    public long getApp_begin_tm() {
      return this.app_begin_tm;
    }

    /**
     * 申请开始时间
     */
    public ticketApplyQuery_args setApp_begin_tm(long app_begin_tm) {
      this.app_begin_tm = app_begin_tm;
      setApp_begin_tmIsSet(true);
      return this;
    }

    public void unsetApp_begin_tm() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APP_BEGIN_TM_ISSET_ID);
    }

    /** Returns true if field app_begin_tm is set (has been assigned a value) and false otherwise */
    public boolean isSetApp_begin_tm() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APP_BEGIN_TM_ISSET_ID);
    }

    public void setApp_begin_tmIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APP_BEGIN_TM_ISSET_ID, value);
    }

    /**
     * 申请开始时间
     */
    public long getApp_end_tm() {
      return this.app_end_tm;
    }

    /**
     * 申请开始时间
     */
    public ticketApplyQuery_args setApp_end_tm(long app_end_tm) {
      this.app_end_tm = app_end_tm;
      setApp_end_tmIsSet(true);
      return this;
    }

    public void unsetApp_end_tm() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __APP_END_TM_ISSET_ID);
    }

    /** Returns true if field app_end_tm is set (has been assigned a value) and false otherwise */
    public boolean isSetApp_end_tm() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __APP_END_TM_ISSET_ID);
    }

    public void setApp_end_tmIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __APP_END_TM_ISSET_ID, value);
    }

    /**
     * 审核状态(0待审核1已审核2已配送3已接收4已拒收)
     */
    public java.lang.String getExam_stat() {
      return this.exam_stat;
    }

    /**
     * 审核状态(0待审核1已审核2已配送3已接收4已拒收)
     */
    public ticketApplyQuery_args setExam_stat(java.lang.String exam_stat) {
      this.exam_stat = exam_stat;
      return this;
    }

    public void unsetExam_stat() {
      this.exam_stat = null;
    }

    /** Returns true if field exam_stat is set (has been assigned a value) and false otherwise */
    public boolean isSetExam_stat() {
      return this.exam_stat != null;
    }

    public void setExam_statIsSet(boolean value) {
      if (!value) {
        this.exam_stat = null;
      }
    }

    /**
     * 网点编号
     */
    public long getOutlet_id() {
      return this.outlet_id;
    }

    /**
     * 网点编号
     */
    public ticketApplyQuery_args setOutlet_id(long outlet_id) {
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
      return this;
    }

    public void unsetOutlet_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlet_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    public void setOutlet_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case APPLY_ID:
        if (value == null) {
          unsetApplyId();
        } else {
          setApplyId((java.lang.String)value);
        }
        break;

      case APP_BEGIN_TM:
        if (value == null) {
          unsetApp_begin_tm();
        } else {
          setApp_begin_tm((java.lang.Long)value);
        }
        break;

      case APP_END_TM:
        if (value == null) {
          unsetApp_end_tm();
        } else {
          setApp_end_tm((java.lang.Long)value);
        }
        break;

      case EXAM_STAT:
        if (value == null) {
          unsetExam_stat();
        } else {
          setExam_stat((java.lang.String)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutlet_id();
        } else {
          setOutlet_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case APPLY_ID:
        return getApplyId();

      case APP_BEGIN_TM:
        return getApp_begin_tm();

      case APP_END_TM:
        return getApp_end_tm();

      case EXAM_STAT:
        return getExam_stat();

      case OUTLET_ID:
        return getOutlet_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case APPLY_ID:
        return isSetApplyId();
      case APP_BEGIN_TM:
        return isSetApp_begin_tm();
      case APP_END_TM:
        return isSetApp_end_tm();
      case EXAM_STAT:
        return isSetExam_stat();
      case OUTLET_ID:
        return isSetOutlet_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketApplyQuery_args)
        return this.equals((ticketApplyQuery_args)that);
      return false;
    }

    public boolean equals(ticketApplyQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_applyId = true && this.isSetApplyId();
      boolean that_present_applyId = true && that.isSetApplyId();
      if (this_present_applyId || that_present_applyId) {
        if (!(this_present_applyId && that_present_applyId))
          return false;
        if (!this.applyId.equals(that.applyId))
          return false;
      }

      boolean this_present_app_begin_tm = true;
      boolean that_present_app_begin_tm = true;
      if (this_present_app_begin_tm || that_present_app_begin_tm) {
        if (!(this_present_app_begin_tm && that_present_app_begin_tm))
          return false;
        if (this.app_begin_tm != that.app_begin_tm)
          return false;
      }

      boolean this_present_app_end_tm = true;
      boolean that_present_app_end_tm = true;
      if (this_present_app_end_tm || that_present_app_end_tm) {
        if (!(this_present_app_end_tm && that_present_app_end_tm))
          return false;
        if (this.app_end_tm != that.app_end_tm)
          return false;
      }

      boolean this_present_exam_stat = true && this.isSetExam_stat();
      boolean that_present_exam_stat = true && that.isSetExam_stat();
      if (this_present_exam_stat || that_present_exam_stat) {
        if (!(this_present_exam_stat && that_present_exam_stat))
          return false;
        if (!this.exam_stat.equals(that.exam_stat))
          return false;
      }

      boolean this_present_outlet_id = true;
      boolean that_present_outlet_id = true;
      if (this_present_outlet_id || that_present_outlet_id) {
        if (!(this_present_outlet_id && that_present_outlet_id))
          return false;
        if (this.outlet_id != that.outlet_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetApplyId()) ? 131071 : 524287);
      if (isSetApplyId())
        hashCode = hashCode * 8191 + applyId.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(app_begin_tm);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(app_end_tm);

      hashCode = hashCode * 8191 + ((isSetExam_stat()) ? 131071 : 524287);
      if (isSetExam_stat())
        hashCode = hashCode * 8191 + exam_stat.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outlet_id);

      return hashCode;
    }

    @Override
    public int compareTo(ticketApplyQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApp_begin_tm()).compareTo(other.isSetApp_begin_tm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp_begin_tm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_begin_tm, other.app_begin_tm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApp_end_tm()).compareTo(other.isSetApp_end_tm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApp_end_tm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.app_end_tm, other.app_end_tm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExam_stat()).compareTo(other.isSetExam_stat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExam_stat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_stat, other.exam_stat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutlet_id()).compareTo(other.isSetOutlet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, other.outlet_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketApplyQuery_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyId:");
      if (this.applyId == null) {
        sb.append("null");
      } else {
        sb.append(this.applyId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("app_begin_tm:");
      sb.append(this.app_begin_tm);
      first = false;
      if (!first) sb.append(", ");
      sb.append("app_end_tm:");
      sb.append(this.app_end_tm);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exam_stat:");
      if (this.exam_stat == null) {
        sb.append("null");
      } else {
        sb.append(this.exam_stat);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketApplyQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApplyQuery_argsStandardScheme getScheme() {
        return new ticketApplyQuery_argsStandardScheme();
      }
    }

    private static class ticketApplyQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketApplyQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketApplyQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applyId = iprot.readString();
                struct.setApplyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APP_BEGIN_TM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.app_begin_tm = iprot.readI64();
                struct.setApp_begin_tmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // APP_END_TM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.app_end_tm = iprot.readI64();
                struct.setApp_end_tmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 6: // EXAM_STAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exam_stat = iprot.readString();
                struct.setExam_statIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 7: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outlet_id = iprot.readI64();
                struct.setOutlet_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketApplyQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyId != null) {
          oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
          oprot.writeString(struct.applyId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(APP_BEGIN_TM_FIELD_DESC);
        oprot.writeI64(struct.app_begin_tm);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(APP_END_TM_FIELD_DESC);
        oprot.writeI64(struct.app_end_tm);
        oprot.writeFieldEnd();
        if (struct.exam_stat != null) {
          oprot.writeFieldBegin(EXAM_STAT_FIELD_DESC);
          oprot.writeString(struct.exam_stat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outlet_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketApplyQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApplyQuery_argsTupleScheme getScheme() {
        return new ticketApplyQuery_argsTupleScheme();
      }
    }

    private static class ticketApplyQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketApplyQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketApplyQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetApplyId()) {
          optionals.set(1);
        }
        if (struct.isSetApp_begin_tm()) {
          optionals.set(2);
        }
        if (struct.isSetApp_end_tm()) {
          optionals.set(3);
        }
        if (struct.isSetExam_stat()) {
          optionals.set(4);
        }
        if (struct.isSetOutlet_id()) {
          optionals.set(5);
        }
        oprot.writeBitSet(optionals, 6);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetApplyId()) {
          oprot.writeString(struct.applyId);
        }
        if (struct.isSetApp_begin_tm()) {
          oprot.writeI64(struct.app_begin_tm);
        }
        if (struct.isSetApp_end_tm()) {
          oprot.writeI64(struct.app_end_tm);
        }
        if (struct.isSetExam_stat()) {
          oprot.writeString(struct.exam_stat);
        }
        if (struct.isSetOutlet_id()) {
          oprot.writeI64(struct.outlet_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketApplyQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(6);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyId = iprot.readString();
          struct.setApplyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.app_begin_tm = iprot.readI64();
          struct.setApp_begin_tmIsSet(true);
        }
        if (incoming.get(3)) {
          struct.app_end_tm = iprot.readI64();
          struct.setApp_end_tmIsSet(true);
        }
        if (incoming.get(4)) {
          struct.exam_stat = iprot.readString();
          struct.setExam_statIsSet(true);
        }
        if (incoming.get(5)) {
          struct.outlet_id = iprot.readI64();
          struct.setOutlet_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketApplyQuery_result implements org.apache.thrift.TBase<ticketApplyQuery_result, ticketApplyQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<ticketApplyQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketApplyQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketApplyQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketApplyQuery_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.STR_DELIVERY_APPLY.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketApplyQuery_result.class, metaDataMap);
    }

    public ticketApplyQuery_result() {
    }

    public ticketApplyQuery_result(
      java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketApplyQuery_result(ticketApplyQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.STR_DELIVERY_APPLY>(other.success.size());
        for (com.tbims.rpc.entity.STR_DELIVERY_APPLY other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.STR_DELIVERY_APPLY(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public ticketApplyQuery_result deepCopy() {
      return new ticketApplyQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.STR_DELIVERY_APPLY> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.STR_DELIVERY_APPLY elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.STR_DELIVERY_APPLY>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> getSuccess() {
      return this.success;
    }

    public ticketApplyQuery_result setSuccess(java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public ticketApplyQuery_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.STR_DELIVERY_APPLY>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketApplyQuery_result)
        return this.equals((ticketApplyQuery_result)that);
      return false;
    }

    public boolean equals(ticketApplyQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ticketApplyQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketApplyQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketApplyQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApplyQuery_resultStandardScheme getScheme() {
        return new ticketApplyQuery_resultStandardScheme();
      }
    }

    private static class ticketApplyQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketApplyQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketApplyQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.STR_DELIVERY_APPLY>(_list8.size);
                  com.tbims.rpc.entity.STR_DELIVERY_APPLY _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = new com.tbims.rpc.entity.STR_DELIVERY_APPLY();
                    _elem9.read(iprot);
                    struct.success.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketApplyQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.STR_DELIVERY_APPLY _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketApplyQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApplyQuery_resultTupleScheme getScheme() {
        return new ticketApplyQuery_resultTupleScheme();
      }
    }

    private static class ticketApplyQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketApplyQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketApplyQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.STR_DELIVERY_APPLY _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketApplyQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.STR_DELIVERY_APPLY>(_list13.size);
            com.tbims.rpc.entity.STR_DELIVERY_APPLY _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = new com.tbims.rpc.entity.STR_DELIVERY_APPLY();
              _elem14.read(iprot);
              struct.success.add(_elem14);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketApply_args implements org.apache.thrift.TBase<ticketApply_args, ticketApply_args._Fields>, java.io.Serializable, Cloneable, Comparable<ticketApply_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketApply_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField DELIVERY_APPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("delivery_apply", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketApply_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketApply_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 配送申请信息
     */
    public com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 配送申请信息
       */
      DELIVERY_APPLY((short)2, "delivery_apply");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // DELIVERY_APPLY
            return DELIVERY_APPLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.DELIVERY_APPLY, new org.apache.thrift.meta_data.FieldMetaData("delivery_apply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.STR_DELIVERY_APPLY.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketApply_args.class, metaDataMap);
    }

    public ticketApply_args() {
    }

    public ticketApply_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply)
    {
      this();
      this.auth = auth;
      this.delivery_apply = delivery_apply;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketApply_args(ticketApply_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetDelivery_apply()) {
        this.delivery_apply = new com.tbims.rpc.entity.STR_DELIVERY_APPLY(other.delivery_apply);
      }
    }

    public ticketApply_args deepCopy() {
      return new ticketApply_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.delivery_apply = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public ticketApply_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 配送申请信息
     */
    public com.tbims.rpc.entity.STR_DELIVERY_APPLY getDelivery_apply() {
      return this.delivery_apply;
    }

    /**
     * 配送申请信息
     */
    public ticketApply_args setDelivery_apply(com.tbims.rpc.entity.STR_DELIVERY_APPLY delivery_apply) {
      this.delivery_apply = delivery_apply;
      return this;
    }

    public void unsetDelivery_apply() {
      this.delivery_apply = null;
    }

    /** Returns true if field delivery_apply is set (has been assigned a value) and false otherwise */
    public boolean isSetDelivery_apply() {
      return this.delivery_apply != null;
    }

    public void setDelivery_applyIsSet(boolean value) {
      if (!value) {
        this.delivery_apply = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case DELIVERY_APPLY:
        if (value == null) {
          unsetDelivery_apply();
        } else {
          setDelivery_apply((com.tbims.rpc.entity.STR_DELIVERY_APPLY)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case DELIVERY_APPLY:
        return getDelivery_apply();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case DELIVERY_APPLY:
        return isSetDelivery_apply();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketApply_args)
        return this.equals((ticketApply_args)that);
      return false;
    }

    public boolean equals(ticketApply_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_delivery_apply = true && this.isSetDelivery_apply();
      boolean that_present_delivery_apply = true && that.isSetDelivery_apply();
      if (this_present_delivery_apply || that_present_delivery_apply) {
        if (!(this_present_delivery_apply && that_present_delivery_apply))
          return false;
        if (!this.delivery_apply.equals(that.delivery_apply))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetDelivery_apply()) ? 131071 : 524287);
      if (isSetDelivery_apply())
        hashCode = hashCode * 8191 + delivery_apply.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ticketApply_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDelivery_apply()).compareTo(other.isSetDelivery_apply());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDelivery_apply()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.delivery_apply, other.delivery_apply);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketApply_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("delivery_apply:");
      if (this.delivery_apply == null) {
        sb.append("null");
      } else {
        sb.append(this.delivery_apply);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (delivery_apply != null) {
        delivery_apply.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketApply_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApply_argsStandardScheme getScheme() {
        return new ticketApply_argsStandardScheme();
      }
    }

    private static class ticketApply_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketApply_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DELIVERY_APPLY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.delivery_apply = new com.tbims.rpc.entity.STR_DELIVERY_APPLY();
                struct.delivery_apply.read(iprot);
                struct.setDelivery_applyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketApply_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.delivery_apply != null) {
          oprot.writeFieldBegin(DELIVERY_APPLY_FIELD_DESC);
          struct.delivery_apply.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketApply_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApply_argsTupleScheme getScheme() {
        return new ticketApply_argsTupleScheme();
      }
    }

    private static class ticketApply_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketApply_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetDelivery_apply()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetDelivery_apply()) {
          struct.delivery_apply.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketApply_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.delivery_apply = new com.tbims.rpc.entity.STR_DELIVERY_APPLY();
          struct.delivery_apply.read(iprot);
          struct.setDelivery_applyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketApply_result implements org.apache.thrift.TBase<ticketApply_result, ticketApply_result._Fields>, java.io.Serializable, Cloneable, Comparable<ticketApply_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketApply_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketApply_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketApply_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketApply_result.class, metaDataMap);
    }

    public ticketApply_result() {
    }

    public ticketApply_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketApply_result(ticketApply_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public ticketApply_result deepCopy() {
      return new ticketApply_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ticketApply_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public ticketApply_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketApply_result)
        return this.equals((ticketApply_result)that);
      return false;
    }

    public boolean equals(ticketApply_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ticketApply_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketApply_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketApply_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApply_resultStandardScheme getScheme() {
        return new ticketApply_resultStandardScheme();
      }
    }

    private static class ticketApply_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketApply_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketApply_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketApply_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketApply_resultTupleScheme getScheme() {
        return new ticketApply_resultTupleScheme();
      }
    }

    private static class ticketApply_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketApply_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketApply_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketConfirm_args implements org.apache.thrift.TBase<ticketConfirm_args, ticketConfirm_args._Fields>, java.io.Serializable, Cloneable, Comparable<ticketConfirm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketConfirm_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("applyId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField EXAM_STAT_FIELD_DESC = new org.apache.thrift.protocol.TField("exam_stat", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketConfirm_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketConfirm_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 申请编号
     */
    public java.lang.String applyId; // required
    /**
     * 审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)
     */
    public java.lang.String exam_stat; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 申请编号
       */
      APPLY_ID((short)2, "applyId"),
      /**
       * 审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)
       */
      EXAM_STAT((short)3, "exam_stat");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // APPLY_ID
            return APPLY_ID;
          case 3: // EXAM_STAT
            return EXAM_STAT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("applyId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.EXAM_STAT, new org.apache.thrift.meta_data.FieldMetaData("exam_stat", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketConfirm_args.class, metaDataMap);
    }

    public ticketConfirm_args() {
    }

    public ticketConfirm_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String applyId,
      java.lang.String exam_stat)
    {
      this();
      this.auth = auth;
      this.applyId = applyId;
      this.exam_stat = exam_stat;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketConfirm_args(ticketConfirm_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetApplyId()) {
        this.applyId = other.applyId;
      }
      if (other.isSetExam_stat()) {
        this.exam_stat = other.exam_stat;
      }
    }

    public ticketConfirm_args deepCopy() {
      return new ticketConfirm_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.applyId = null;
      this.exam_stat = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public ticketConfirm_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 申请编号
     */
    public java.lang.String getApplyId() {
      return this.applyId;
    }

    /**
     * 申请编号
     */
    public ticketConfirm_args setApplyId(java.lang.String applyId) {
      this.applyId = applyId;
      return this;
    }

    public void unsetApplyId() {
      this.applyId = null;
    }

    /** Returns true if field applyId is set (has been assigned a value) and false otherwise */
    public boolean isSetApplyId() {
      return this.applyId != null;
    }

    public void setApplyIdIsSet(boolean value) {
      if (!value) {
        this.applyId = null;
      }
    }

    /**
     * 审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)
     */
    public java.lang.String getExam_stat() {
      return this.exam_stat;
    }

    /**
     * 审核状态(0待审核1已审核2已配送3已接收4已拒收5已退回)
     */
    public ticketConfirm_args setExam_stat(java.lang.String exam_stat) {
      this.exam_stat = exam_stat;
      return this;
    }

    public void unsetExam_stat() {
      this.exam_stat = null;
    }

    /** Returns true if field exam_stat is set (has been assigned a value) and false otherwise */
    public boolean isSetExam_stat() {
      return this.exam_stat != null;
    }

    public void setExam_statIsSet(boolean value) {
      if (!value) {
        this.exam_stat = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case APPLY_ID:
        if (value == null) {
          unsetApplyId();
        } else {
          setApplyId((java.lang.String)value);
        }
        break;

      case EXAM_STAT:
        if (value == null) {
          unsetExam_stat();
        } else {
          setExam_stat((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case APPLY_ID:
        return getApplyId();

      case EXAM_STAT:
        return getExam_stat();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case APPLY_ID:
        return isSetApplyId();
      case EXAM_STAT:
        return isSetExam_stat();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketConfirm_args)
        return this.equals((ticketConfirm_args)that);
      return false;
    }

    public boolean equals(ticketConfirm_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_applyId = true && this.isSetApplyId();
      boolean that_present_applyId = true && that.isSetApplyId();
      if (this_present_applyId || that_present_applyId) {
        if (!(this_present_applyId && that_present_applyId))
          return false;
        if (!this.applyId.equals(that.applyId))
          return false;
      }

      boolean this_present_exam_stat = true && this.isSetExam_stat();
      boolean that_present_exam_stat = true && that.isSetExam_stat();
      if (this_present_exam_stat || that_present_exam_stat) {
        if (!(this_present_exam_stat && that_present_exam_stat))
          return false;
        if (!this.exam_stat.equals(that.exam_stat))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetApplyId()) ? 131071 : 524287);
      if (isSetApplyId())
        hashCode = hashCode * 8191 + applyId.hashCode();

      hashCode = hashCode * 8191 + ((isSetExam_stat()) ? 131071 : 524287);
      if (isSetExam_stat())
        hashCode = hashCode * 8191 + exam_stat.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ticketConfirm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApplyId()).compareTo(other.isSetApplyId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApplyId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.applyId, other.applyId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetExam_stat()).compareTo(other.isSetExam_stat());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExam_stat()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exam_stat, other.exam_stat);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketConfirm_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("applyId:");
      if (this.applyId == null) {
        sb.append("null");
      } else {
        sb.append(this.applyId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exam_stat:");
      if (this.exam_stat == null) {
        sb.append("null");
      } else {
        sb.append(this.exam_stat);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketConfirm_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketConfirm_argsStandardScheme getScheme() {
        return new ticketConfirm_argsStandardScheme();
      }
    }

    private static class ticketConfirm_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketConfirm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.applyId = iprot.readString();
                struct.setApplyIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // EXAM_STAT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.exam_stat = iprot.readString();
                struct.setExam_statIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketConfirm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.applyId != null) {
          oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
          oprot.writeString(struct.applyId);
          oprot.writeFieldEnd();
        }
        if (struct.exam_stat != null) {
          oprot.writeFieldBegin(EXAM_STAT_FIELD_DESC);
          oprot.writeString(struct.exam_stat);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketConfirm_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketConfirm_argsTupleScheme getScheme() {
        return new ticketConfirm_argsTupleScheme();
      }
    }

    private static class ticketConfirm_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketConfirm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetApplyId()) {
          optionals.set(1);
        }
        if (struct.isSetExam_stat()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetApplyId()) {
          oprot.writeString(struct.applyId);
        }
        if (struct.isSetExam_stat()) {
          oprot.writeString(struct.exam_stat);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketConfirm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.applyId = iprot.readString();
          struct.setApplyIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.exam_stat = iprot.readString();
          struct.setExam_statIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketConfirm_result implements org.apache.thrift.TBase<ticketConfirm_result, ticketConfirm_result._Fields>, java.io.Serializable, Cloneable, Comparable<ticketConfirm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketConfirm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketConfirm_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketConfirm_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketConfirm_result.class, metaDataMap);
    }

    public ticketConfirm_result() {
    }

    public ticketConfirm_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketConfirm_result(ticketConfirm_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public ticketConfirm_result deepCopy() {
      return new ticketConfirm_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ticketConfirm_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public ticketConfirm_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketConfirm_result)
        return this.equals((ticketConfirm_result)that);
      return false;
    }

    public boolean equals(ticketConfirm_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ticketConfirm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketConfirm_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketConfirm_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketConfirm_resultStandardScheme getScheme() {
        return new ticketConfirm_resultStandardScheme();
      }
    }

    private static class ticketConfirm_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketConfirm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketConfirm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketConfirm_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketConfirm_resultTupleScheme getScheme() {
        return new ticketConfirm_resultTupleScheme();
      }
    }

    private static class ticketConfirm_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketConfirm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketConfirm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketInfoQuery_args implements org.apache.thrift.TBase<ticketInfoQuery_args, ticketInfoQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<ticketInfoQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketInfoQuery_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticket_id", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketInfoQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketInfoQuery_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 票号
     */
    public long ticket_id; // required
    /**
     * 网点编码
     */
    public long outlet_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 票号
       */
      TICKET_ID((short)2, "ticket_id"),
      /**
       * 网点编码
       */
      OUTLET_ID((short)3, "outlet_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // TICKET_ID
            return TICKET_ID;
          case 3: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TICKET_ID_ISSET_ID = 0;
    private static final int __OUTLET_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticket_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketInfoQuery_args.class, metaDataMap);
    }

    public ticketInfoQuery_args() {
    }

    public ticketInfoQuery_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long ticket_id,
      long outlet_id)
    {
      this();
      this.auth = auth;
      this.ticket_id = ticket_id;
      setTicket_idIsSet(true);
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketInfoQuery_args(ticketInfoQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.ticket_id = other.ticket_id;
      this.outlet_id = other.outlet_id;
    }

    public ticketInfoQuery_args deepCopy() {
      return new ticketInfoQuery_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setTicket_idIsSet(false);
      this.ticket_id = 0;
      setOutlet_idIsSet(false);
      this.outlet_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public ticketInfoQuery_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 票号
     */
    public long getTicket_id() {
      return this.ticket_id;
    }

    /**
     * 票号
     */
    public ticketInfoQuery_args setTicket_id(long ticket_id) {
      this.ticket_id = ticket_id;
      setTicket_idIsSet(true);
      return this;
    }

    public void unsetTicket_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKET_ID_ISSET_ID);
    }

    /** Returns true if field ticket_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTicket_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKET_ID_ISSET_ID);
    }

    public void setTicket_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKET_ID_ISSET_ID, value);
    }

    /**
     * 网点编码
     */
    public long getOutlet_id() {
      return this.outlet_id;
    }

    /**
     * 网点编码
     */
    public ticketInfoQuery_args setOutlet_id(long outlet_id) {
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
      return this;
    }

    public void unsetOutlet_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlet_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    public void setOutlet_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case TICKET_ID:
        if (value == null) {
          unsetTicket_id();
        } else {
          setTicket_id((java.lang.Long)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutlet_id();
        } else {
          setOutlet_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case TICKET_ID:
        return getTicket_id();

      case OUTLET_ID:
        return getOutlet_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case TICKET_ID:
        return isSetTicket_id();
      case OUTLET_ID:
        return isSetOutlet_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketInfoQuery_args)
        return this.equals((ticketInfoQuery_args)that);
      return false;
    }

    public boolean equals(ticketInfoQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_ticket_id = true;
      boolean that_present_ticket_id = true;
      if (this_present_ticket_id || that_present_ticket_id) {
        if (!(this_present_ticket_id && that_present_ticket_id))
          return false;
        if (this.ticket_id != that.ticket_id)
          return false;
      }

      boolean this_present_outlet_id = true;
      boolean that_present_outlet_id = true;
      if (this_present_outlet_id || that_present_outlet_id) {
        if (!(this_present_outlet_id && that_present_outlet_id))
          return false;
        if (this.outlet_id != that.outlet_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticket_id);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outlet_id);

      return hashCode;
    }

    @Override
    public int compareTo(ticketInfoQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTicket_id()).compareTo(other.isSetTicket_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicket_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticket_id, other.ticket_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutlet_id()).compareTo(other.isSetOutlet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, other.outlet_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketInfoQuery_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ticket_id:");
      sb.append(this.ticket_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketInfoQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketInfoQuery_argsStandardScheme getScheme() {
        return new ticketInfoQuery_argsStandardScheme();
      }
    }

    private static class ticketInfoQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketInfoQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketInfoQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TICKET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ticket_id = iprot.readI64();
                struct.setTicket_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outlet_id = iprot.readI64();
                struct.setOutlet_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketInfoQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeI64(struct.ticket_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outlet_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketInfoQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketInfoQuery_argsTupleScheme getScheme() {
        return new ticketInfoQuery_argsTupleScheme();
      }
    }

    private static class ticketInfoQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketInfoQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketInfoQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetTicket_id()) {
          optionals.set(1);
        }
        if (struct.isSetOutlet_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetTicket_id()) {
          oprot.writeI64(struct.ticket_id);
        }
        if (struct.isSetOutlet_id()) {
          oprot.writeI64(struct.outlet_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketInfoQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ticket_id = iprot.readI64();
          struct.setTicket_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outlet_id = iprot.readI64();
          struct.setOutlet_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ticketInfoQuery_result implements org.apache.thrift.TBase<ticketInfoQuery_result, ticketInfoQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<ticketInfoQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ticketInfoQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ticketInfoQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ticketInfoQuery_resultTupleSchemeFactory();

    public com.tbims.rpc.entity.STR_TICKET_INFO success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.STR_TICKET_INFO.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ticketInfoQuery_result.class, metaDataMap);
    }

    public ticketInfoQuery_result() {
    }

    public ticketInfoQuery_result(
      com.tbims.rpc.entity.STR_TICKET_INFO success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ticketInfoQuery_result(ticketInfoQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.tbims.rpc.entity.STR_TICKET_INFO(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public ticketInfoQuery_result deepCopy() {
      return new ticketInfoQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.tbims.rpc.entity.STR_TICKET_INFO getSuccess() {
      return this.success;
    }

    public ticketInfoQuery_result setSuccess(com.tbims.rpc.entity.STR_TICKET_INFO success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public ticketInfoQuery_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.tbims.rpc.entity.STR_TICKET_INFO)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ticketInfoQuery_result)
        return this.equals((ticketInfoQuery_result)that);
      return false;
    }

    public boolean equals(ticketInfoQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ticketInfoQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ticketInfoQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ticketInfoQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketInfoQuery_resultStandardScheme getScheme() {
        return new ticketInfoQuery_resultStandardScheme();
      }
    }

    private static class ticketInfoQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ticketInfoQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ticketInfoQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tbims.rpc.entity.STR_TICKET_INFO();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ticketInfoQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ticketInfoQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ticketInfoQuery_resultTupleScheme getScheme() {
        return new ticketInfoQuery_resultTupleScheme();
      }
    }

    private static class ticketInfoQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ticketInfoQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ticketInfoQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ticketInfoQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.tbims.rpc.entity.STR_TICKET_INFO();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkInfoQuery_args implements org.apache.thrift.TBase<checkInfoQuery_args, checkInfoQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkInfoQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkInfoQuery_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticket_id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkInfoQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkInfoQuery_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 票号
     */
    public long ticket_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 票号
       */
      TICKET_ID((short)2, "ticket_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // TICKET_ID
            return TICKET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __TICKET_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("ticket_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkInfoQuery_args.class, metaDataMap);
    }

    public checkInfoQuery_args() {
    }

    public checkInfoQuery_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long ticket_id)
    {
      this();
      this.auth = auth;
      this.ticket_id = ticket_id;
      setTicket_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkInfoQuery_args(checkInfoQuery_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.ticket_id = other.ticket_id;
    }

    public checkInfoQuery_args deepCopy() {
      return new checkInfoQuery_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setTicket_idIsSet(false);
      this.ticket_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public checkInfoQuery_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 票号
     */
    public long getTicket_id() {
      return this.ticket_id;
    }

    /**
     * 票号
     */
    public checkInfoQuery_args setTicket_id(long ticket_id) {
      this.ticket_id = ticket_id;
      setTicket_idIsSet(true);
      return this;
    }

    public void unsetTicket_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKET_ID_ISSET_ID);
    }

    /** Returns true if field ticket_id is set (has been assigned a value) and false otherwise */
    public boolean isSetTicket_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKET_ID_ISSET_ID);
    }

    public void setTicket_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case TICKET_ID:
        if (value == null) {
          unsetTicket_id();
        } else {
          setTicket_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case TICKET_ID:
        return getTicket_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case TICKET_ID:
        return isSetTicket_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkInfoQuery_args)
        return this.equals((checkInfoQuery_args)that);
      return false;
    }

    public boolean equals(checkInfoQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_ticket_id = true;
      boolean that_present_ticket_id = true;
      if (this_present_ticket_id || that_present_ticket_id) {
        if (!(this_present_ticket_id && that_present_ticket_id))
          return false;
        if (this.ticket_id != that.ticket_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticket_id);

      return hashCode;
    }

    @Override
    public int compareTo(checkInfoQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTicket_id()).compareTo(other.isSetTicket_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicket_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticket_id, other.ticket_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkInfoQuery_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ticket_id:");
      sb.append(this.ticket_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkInfoQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfoQuery_argsStandardScheme getScheme() {
        return new checkInfoQuery_argsStandardScheme();
      }
    }

    private static class checkInfoQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkInfoQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkInfoQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TICKET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ticket_id = iprot.readI64();
                struct.setTicket_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkInfoQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(TICKET_ID_FIELD_DESC);
        oprot.writeI64(struct.ticket_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkInfoQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfoQuery_argsTupleScheme getScheme() {
        return new checkInfoQuery_argsTupleScheme();
      }
    }

    private static class checkInfoQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkInfoQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkInfoQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetTicket_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetTicket_id()) {
          oprot.writeI64(struct.ticket_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkInfoQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.ticket_id = iprot.readI64();
          struct.setTicket_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkInfoQuery_result implements org.apache.thrift.TBase<checkInfoQuery_result, checkInfoQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkInfoQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkInfoQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkInfoQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkInfoQuery_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SL_CHECK> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_CHECK.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkInfoQuery_result.class, metaDataMap);
    }

    public checkInfoQuery_result() {
    }

    public checkInfoQuery_result(
      java.util.List<com.tbims.rpc.entity.SL_CHECK> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkInfoQuery_result(checkInfoQuery_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SL_CHECK> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>(other.success.size());
        for (com.tbims.rpc.entity.SL_CHECK other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SL_CHECK(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public checkInfoQuery_result deepCopy() {
      return new checkInfoQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_CHECK> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SL_CHECK elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SL_CHECK> getSuccess() {
      return this.success;
    }

    public checkInfoQuery_result setSuccess(java.util.List<com.tbims.rpc.entity.SL_CHECK> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public checkInfoQuery_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SL_CHECK>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkInfoQuery_result)
        return this.equals((checkInfoQuery_result)that);
      return false;
    }

    public boolean equals(checkInfoQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkInfoQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkInfoQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkInfoQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfoQuery_resultStandardScheme getScheme() {
        return new checkInfoQuery_resultStandardScheme();
      }
    }

    private static class checkInfoQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkInfoQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkInfoQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>(_list16.size);
                  com.tbims.rpc.entity.SL_CHECK _elem17;
                  for (int _i18 = 0; _i18 < _list16.size; ++_i18)
                  {
                    _elem17 = new com.tbims.rpc.entity.SL_CHECK();
                    _elem17.read(iprot);
                    struct.success.add(_elem17);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkInfoQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SL_CHECK _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkInfoQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfoQuery_resultTupleScheme getScheme() {
        return new checkInfoQuery_resultTupleScheme();
      }
    }

    private static class checkInfoQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkInfoQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkInfoQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SL_CHECK _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkInfoQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>(_list21.size);
            com.tbims.rpc.entity.SL_CHECK _elem22;
            for (int _i23 = 0; _i23 < _list21.size; ++_i23)
            {
              _elem22 = new com.tbims.rpc.entity.SL_CHECK();
              _elem22.read(iprot);
              struct.success.add(_elem22);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class teamOrderQuery_args implements org.apache.thrift.TBase<teamOrderQuery_args, teamOrderQuery_args._Fields>, java.io.Serializable, Cloneable, Comparable<teamOrderQuery_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teamOrderQuery_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("apply_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new teamOrderQuery_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new teamOrderQuery_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 申请编号
     */
    public java.lang.String apply_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 申请编号
       */
      APPLY_ID((short)2, "apply_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // APPLY_ID
            return APPLY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("apply_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teamOrderQuery_args.class, metaDataMap);
    }

    public teamOrderQuery_args() {
    }

    public teamOrderQuery_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String apply_id)
    {
      this();
      this.auth = auth;
      this.apply_id = apply_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teamOrderQuery_args(teamOrderQuery_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetApply_id()) {
        this.apply_id = other.apply_id;
      }
    }

    public teamOrderQuery_args deepCopy() {
      return new teamOrderQuery_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.apply_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public teamOrderQuery_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 申请编号
     */
    public java.lang.String getApply_id() {
      return this.apply_id;
    }

    /**
     * 申请编号
     */
    public teamOrderQuery_args setApply_id(java.lang.String apply_id) {
      this.apply_id = apply_id;
      return this;
    }

    public void unsetApply_id() {
      this.apply_id = null;
    }

    /** Returns true if field apply_id is set (has been assigned a value) and false otherwise */
    public boolean isSetApply_id() {
      return this.apply_id != null;
    }

    public void setApply_idIsSet(boolean value) {
      if (!value) {
        this.apply_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case APPLY_ID:
        if (value == null) {
          unsetApply_id();
        } else {
          setApply_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case APPLY_ID:
        return getApply_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case APPLY_ID:
        return isSetApply_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof teamOrderQuery_args)
        return this.equals((teamOrderQuery_args)that);
      return false;
    }

    public boolean equals(teamOrderQuery_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_apply_id = true && this.isSetApply_id();
      boolean that_present_apply_id = true && that.isSetApply_id();
      if (this_present_apply_id || that_present_apply_id) {
        if (!(this_present_apply_id && that_present_apply_id))
          return false;
        if (!this.apply_id.equals(that.apply_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetApply_id()) ? 131071 : 524287);
      if (isSetApply_id())
        hashCode = hashCode * 8191 + apply_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(teamOrderQuery_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApply_id()).compareTo(other.isSetApply_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApply_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apply_id, other.apply_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("teamOrderQuery_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("apply_id:");
      if (this.apply_id == null) {
        sb.append("null");
      } else {
        sb.append(this.apply_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teamOrderQuery_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public teamOrderQuery_argsStandardScheme getScheme() {
        return new teamOrderQuery_argsStandardScheme();
      }
    }

    private static class teamOrderQuery_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<teamOrderQuery_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teamOrderQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // APPLY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apply_id = iprot.readString();
                struct.setApply_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teamOrderQuery_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.apply_id != null) {
          oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
          oprot.writeString(struct.apply_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teamOrderQuery_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public teamOrderQuery_argsTupleScheme getScheme() {
        return new teamOrderQuery_argsTupleScheme();
      }
    }

    private static class teamOrderQuery_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<teamOrderQuery_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teamOrderQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetApply_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetApply_id()) {
          oprot.writeString(struct.apply_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teamOrderQuery_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.apply_id = iprot.readString();
          struct.setApply_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class teamOrderQuery_result implements org.apache.thrift.TBase<teamOrderQuery_result, teamOrderQuery_result._Fields>, java.io.Serializable, Cloneable, Comparable<teamOrderQuery_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("teamOrderQuery_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new teamOrderQuery_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new teamOrderQuery_resultTupleSchemeFactory();

    public com.tbims.rpc.entity.SL_TEAM_ORDER success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_TEAM_ORDER.class)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(teamOrderQuery_result.class, metaDataMap);
    }

    public teamOrderQuery_result() {
    }

    public teamOrderQuery_result(
      com.tbims.rpc.entity.SL_TEAM_ORDER success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public teamOrderQuery_result(teamOrderQuery_result other) {
      if (other.isSetSuccess()) {
        this.success = new com.tbims.rpc.entity.SL_TEAM_ORDER(other.success);
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public teamOrderQuery_result deepCopy() {
      return new teamOrderQuery_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public com.tbims.rpc.entity.SL_TEAM_ORDER getSuccess() {
      return this.success;
    }

    public teamOrderQuery_result setSuccess(com.tbims.rpc.entity.SL_TEAM_ORDER success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public teamOrderQuery_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((com.tbims.rpc.entity.SL_TEAM_ORDER)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof teamOrderQuery_result)
        return this.equals((teamOrderQuery_result)that);
      return false;
    }

    public boolean equals(teamOrderQuery_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(teamOrderQuery_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("teamOrderQuery_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class teamOrderQuery_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public teamOrderQuery_resultStandardScheme getScheme() {
        return new teamOrderQuery_resultStandardScheme();
      }
    }

    private static class teamOrderQuery_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<teamOrderQuery_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, teamOrderQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new com.tbims.rpc.entity.SL_TEAM_ORDER();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, teamOrderQuery_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class teamOrderQuery_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public teamOrderQuery_resultTupleScheme getScheme() {
        return new teamOrderQuery_resultTupleScheme();
      }
    }

    private static class teamOrderQuery_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<teamOrderQuery_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, teamOrderQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, teamOrderQuery_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new com.tbims.rpc.entity.SL_TEAM_ORDER();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkSaleTicketBYzy_args implements org.apache.thrift.TBase<checkSaleTicketBYzy_args, checkSaleTicketBYzy_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkSaleTicketBYzy_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSaleTicketBYzy_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField BEGIN_TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("begin_ticket_id", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField TICKET_NUM_FIELD_DESC = new org.apache.thrift.protocol.TField("ticket_num", org.apache.thrift.protocol.TType.I64, (short)3);
    private static final org.apache.thrift.protocol.TField END_TICKET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("end_ticket_id", org.apache.thrift.protocol.TType.I64, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkSaleTicketBYzy_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkSaleTicketBYzy_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 起始票号
     */
    public long begin_ticket_id; // required
    /**
     * 数量
     */
    public long ticket_num; // required
    /**
     * 起始票号
     */
    public long end_ticket_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 起始票号
       */
      BEGIN_TICKET_ID((short)2, "begin_ticket_id"),
      /**
       * 数量
       */
      TICKET_NUM((short)3, "ticket_num"),
      /**
       * 起始票号
       */
      END_TICKET_ID((short)4, "end_ticket_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // BEGIN_TICKET_ID
            return BEGIN_TICKET_ID;
          case 3: // TICKET_NUM
            return TICKET_NUM;
          case 4: // END_TICKET_ID
            return END_TICKET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __BEGIN_TICKET_ID_ISSET_ID = 0;
    private static final int __TICKET_NUM_ISSET_ID = 1;
    private static final int __END_TICKET_ID_ISSET_ID = 2;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.BEGIN_TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("begin_ticket_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.TICKET_NUM, new org.apache.thrift.meta_data.FieldMetaData("ticket_num", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.END_TICKET_ID, new org.apache.thrift.meta_data.FieldMetaData("end_ticket_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSaleTicketBYzy_args.class, metaDataMap);
    }

    public checkSaleTicketBYzy_args() {
    }

    public checkSaleTicketBYzy_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long begin_ticket_id,
      long ticket_num,
      long end_ticket_id)
    {
      this();
      this.auth = auth;
      this.begin_ticket_id = begin_ticket_id;
      setBegin_ticket_idIsSet(true);
      this.ticket_num = ticket_num;
      setTicket_numIsSet(true);
      this.end_ticket_id = end_ticket_id;
      setEnd_ticket_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkSaleTicketBYzy_args(checkSaleTicketBYzy_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.begin_ticket_id = other.begin_ticket_id;
      this.ticket_num = other.ticket_num;
      this.end_ticket_id = other.end_ticket_id;
    }

    public checkSaleTicketBYzy_args deepCopy() {
      return new checkSaleTicketBYzy_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setBegin_ticket_idIsSet(false);
      this.begin_ticket_id = 0;
      setTicket_numIsSet(false);
      this.ticket_num = 0;
      setEnd_ticket_idIsSet(false);
      this.end_ticket_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public checkSaleTicketBYzy_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 起始票号
     */
    public long getBegin_ticket_id() {
      return this.begin_ticket_id;
    }

    /**
     * 起始票号
     */
    public checkSaleTicketBYzy_args setBegin_ticket_id(long begin_ticket_id) {
      this.begin_ticket_id = begin_ticket_id;
      setBegin_ticket_idIsSet(true);
      return this;
    }

    public void unsetBegin_ticket_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __BEGIN_TICKET_ID_ISSET_ID);
    }

    /** Returns true if field begin_ticket_id is set (has been assigned a value) and false otherwise */
    public boolean isSetBegin_ticket_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __BEGIN_TICKET_ID_ISSET_ID);
    }

    public void setBegin_ticket_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __BEGIN_TICKET_ID_ISSET_ID, value);
    }

    /**
     * 数量
     */
    public long getTicket_num() {
      return this.ticket_num;
    }

    /**
     * 数量
     */
    public checkSaleTicketBYzy_args setTicket_num(long ticket_num) {
      this.ticket_num = ticket_num;
      setTicket_numIsSet(true);
      return this;
    }

    public void unsetTicket_num() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TICKET_NUM_ISSET_ID);
    }

    /** Returns true if field ticket_num is set (has been assigned a value) and false otherwise */
    public boolean isSetTicket_num() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TICKET_NUM_ISSET_ID);
    }

    public void setTicket_numIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TICKET_NUM_ISSET_ID, value);
    }

    /**
     * 起始票号
     */
    public long getEnd_ticket_id() {
      return this.end_ticket_id;
    }

    /**
     * 起始票号
     */
    public checkSaleTicketBYzy_args setEnd_ticket_id(long end_ticket_id) {
      this.end_ticket_id = end_ticket_id;
      setEnd_ticket_idIsSet(true);
      return this;
    }

    public void unsetEnd_ticket_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __END_TICKET_ID_ISSET_ID);
    }

    /** Returns true if field end_ticket_id is set (has been assigned a value) and false otherwise */
    public boolean isSetEnd_ticket_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __END_TICKET_ID_ISSET_ID);
    }

    public void setEnd_ticket_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __END_TICKET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case BEGIN_TICKET_ID:
        if (value == null) {
          unsetBegin_ticket_id();
        } else {
          setBegin_ticket_id((java.lang.Long)value);
        }
        break;

      case TICKET_NUM:
        if (value == null) {
          unsetTicket_num();
        } else {
          setTicket_num((java.lang.Long)value);
        }
        break;

      case END_TICKET_ID:
        if (value == null) {
          unsetEnd_ticket_id();
        } else {
          setEnd_ticket_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case BEGIN_TICKET_ID:
        return getBegin_ticket_id();

      case TICKET_NUM:
        return getTicket_num();

      case END_TICKET_ID:
        return getEnd_ticket_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case BEGIN_TICKET_ID:
        return isSetBegin_ticket_id();
      case TICKET_NUM:
        return isSetTicket_num();
      case END_TICKET_ID:
        return isSetEnd_ticket_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkSaleTicketBYzy_args)
        return this.equals((checkSaleTicketBYzy_args)that);
      return false;
    }

    public boolean equals(checkSaleTicketBYzy_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_begin_ticket_id = true;
      boolean that_present_begin_ticket_id = true;
      if (this_present_begin_ticket_id || that_present_begin_ticket_id) {
        if (!(this_present_begin_ticket_id && that_present_begin_ticket_id))
          return false;
        if (this.begin_ticket_id != that.begin_ticket_id)
          return false;
      }

      boolean this_present_ticket_num = true;
      boolean that_present_ticket_num = true;
      if (this_present_ticket_num || that_present_ticket_num) {
        if (!(this_present_ticket_num && that_present_ticket_num))
          return false;
        if (this.ticket_num != that.ticket_num)
          return false;
      }

      boolean this_present_end_ticket_id = true;
      boolean that_present_end_ticket_id = true;
      if (this_present_end_ticket_id || that_present_end_ticket_id) {
        if (!(this_present_end_ticket_id && that_present_end_ticket_id))
          return false;
        if (this.end_ticket_id != that.end_ticket_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(begin_ticket_id);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(ticket_num);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(end_ticket_id);

      return hashCode;
    }

    @Override
    public int compareTo(checkSaleTicketBYzy_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBegin_ticket_id()).compareTo(other.isSetBegin_ticket_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBegin_ticket_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.begin_ticket_id, other.begin_ticket_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTicket_num()).compareTo(other.isSetTicket_num());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicket_num()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticket_num, other.ticket_num);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetEnd_ticket_id()).compareTo(other.isSetEnd_ticket_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEnd_ticket_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.end_ticket_id, other.end_ticket_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkSaleTicketBYzy_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("begin_ticket_id:");
      sb.append(this.begin_ticket_id);
      first = false;
      if (!first) sb.append(", ");
      sb.append("ticket_num:");
      sb.append(this.ticket_num);
      first = false;
      if (!first) sb.append(", ");
      sb.append("end_ticket_id:");
      sb.append(this.end_ticket_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkSaleTicketBYzy_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkSaleTicketBYzy_argsStandardScheme getScheme() {
        return new checkSaleTicketBYzy_argsStandardScheme();
      }
    }

    private static class checkSaleTicketBYzy_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkSaleTicketBYzy_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkSaleTicketBYzy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BEGIN_TICKET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.begin_ticket_id = iprot.readI64();
                struct.setBegin_ticket_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TICKET_NUM
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.ticket_num = iprot.readI64();
                struct.setTicket_numIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // END_TICKET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.end_ticket_id = iprot.readI64();
                struct.setEnd_ticket_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkSaleTicketBYzy_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(BEGIN_TICKET_ID_FIELD_DESC);
        oprot.writeI64(struct.begin_ticket_id);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TICKET_NUM_FIELD_DESC);
        oprot.writeI64(struct.ticket_num);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(END_TICKET_ID_FIELD_DESC);
        oprot.writeI64(struct.end_ticket_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkSaleTicketBYzy_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkSaleTicketBYzy_argsTupleScheme getScheme() {
        return new checkSaleTicketBYzy_argsTupleScheme();
      }
    }

    private static class checkSaleTicketBYzy_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkSaleTicketBYzy_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkSaleTicketBYzy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetBegin_ticket_id()) {
          optionals.set(1);
        }
        if (struct.isSetTicket_num()) {
          optionals.set(2);
        }
        if (struct.isSetEnd_ticket_id()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetBegin_ticket_id()) {
          oprot.writeI64(struct.begin_ticket_id);
        }
        if (struct.isSetTicket_num()) {
          oprot.writeI64(struct.ticket_num);
        }
        if (struct.isSetEnd_ticket_id()) {
          oprot.writeI64(struct.end_ticket_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkSaleTicketBYzy_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.begin_ticket_id = iprot.readI64();
          struct.setBegin_ticket_idIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ticket_num = iprot.readI64();
          struct.setTicket_numIsSet(true);
        }
        if (incoming.get(3)) {
          struct.end_ticket_id = iprot.readI64();
          struct.setEnd_ticket_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkSaleTicketBYzy_result implements org.apache.thrift.TBase<checkSaleTicketBYzy_result, checkSaleTicketBYzy_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkSaleTicketBYzy_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkSaleTicketBYzy_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkSaleTicketBYzy_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkSaleTicketBYzy_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkSaleTicketBYzy_result.class, metaDataMap);
    }

    public checkSaleTicketBYzy_result() {
    }

    public checkSaleTicketBYzy_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkSaleTicketBYzy_result(checkSaleTicketBYzy_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public checkSaleTicketBYzy_result deepCopy() {
      return new checkSaleTicketBYzy_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkSaleTicketBYzy_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public checkSaleTicketBYzy_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkSaleTicketBYzy_result)
        return this.equals((checkSaleTicketBYzy_result)that);
      return false;
    }

    public boolean equals(checkSaleTicketBYzy_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkSaleTicketBYzy_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkSaleTicketBYzy_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkSaleTicketBYzy_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkSaleTicketBYzy_resultStandardScheme getScheme() {
        return new checkSaleTicketBYzy_resultStandardScheme();
      }
    }

    private static class checkSaleTicketBYzy_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkSaleTicketBYzy_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkSaleTicketBYzy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkSaleTicketBYzy_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkSaleTicketBYzy_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkSaleTicketBYzy_resultTupleScheme getScheme() {
        return new checkSaleTicketBYzy_resultTupleScheme();
      }
    }

    private static class checkSaleTicketBYzy_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkSaleTicketBYzy_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkSaleTicketBYzy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkSaleTicketBYzy_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saleTicket_args implements org.apache.thrift.TBase<saleTicket_args, saleTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<saleTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saleTicket_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SL_ORDERS_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_orders", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saleTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saleTicket_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 销售订单信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 销售订单信息
       */
      SL_ORDERS((short)2, "sl_orders");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SL_ORDERS
            return SL_ORDERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SL_ORDERS, new org.apache.thrift.meta_data.FieldMetaData("sl_orders", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saleTicket_args.class, metaDataMap);
    }

    public saleTicket_args() {
    }

    public saleTicket_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders)
    {
      this();
      this.auth = auth;
      this.sl_orders = sl_orders;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saleTicket_args(saleTicket_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSl_orders()) {
        java.util.List<com.tbims.rpc.entity.SL_ORDER> __this__sl_orders = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER>(other.sl_orders.size());
        for (com.tbims.rpc.entity.SL_ORDER other_element : other.sl_orders) {
          __this__sl_orders.add(new com.tbims.rpc.entity.SL_ORDER(other_element));
        }
        this.sl_orders = __this__sl_orders;
      }
    }

    public saleTicket_args deepCopy() {
      return new saleTicket_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sl_orders = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public saleTicket_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getSl_ordersSize() {
      return (this.sl_orders == null) ? 0 : this.sl_orders.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_ORDER> getSl_ordersIterator() {
      return (this.sl_orders == null) ? null : this.sl_orders.iterator();
    }

    public void addToSl_orders(com.tbims.rpc.entity.SL_ORDER elem) {
      if (this.sl_orders == null) {
        this.sl_orders = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER>();
      }
      this.sl_orders.add(elem);
    }

    /**
     * 销售订单信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORDER> getSl_orders() {
      return this.sl_orders;
    }

    /**
     * 销售订单信息
     */
    public saleTicket_args setSl_orders(java.util.List<com.tbims.rpc.entity.SL_ORDER> sl_orders) {
      this.sl_orders = sl_orders;
      return this;
    }

    public void unsetSl_orders() {
      this.sl_orders = null;
    }

    /** Returns true if field sl_orders is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_orders() {
      return this.sl_orders != null;
    }

    public void setSl_ordersIsSet(boolean value) {
      if (!value) {
        this.sl_orders = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SL_ORDERS:
        if (value == null) {
          unsetSl_orders();
        } else {
          setSl_orders((java.util.List<com.tbims.rpc.entity.SL_ORDER>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SL_ORDERS:
        return getSl_orders();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SL_ORDERS:
        return isSetSl_orders();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saleTicket_args)
        return this.equals((saleTicket_args)that);
      return false;
    }

    public boolean equals(saleTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sl_orders = true && this.isSetSl_orders();
      boolean that_present_sl_orders = true && that.isSetSl_orders();
      if (this_present_sl_orders || that_present_sl_orders) {
        if (!(this_present_sl_orders && that_present_sl_orders))
          return false;
        if (!this.sl_orders.equals(that.sl_orders))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_orders()) ? 131071 : 524287);
      if (isSetSl_orders())
        hashCode = hashCode * 8191 + sl_orders.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saleTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_orders()).compareTo(other.isSetSl_orders());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_orders()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_orders, other.sl_orders);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saleTicket_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_orders:");
      if (this.sl_orders == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_orders);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saleTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicket_argsStandardScheme getScheme() {
        return new saleTicket_argsStandardScheme();
      }
    }

    private static class saleTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saleTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saleTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SL_ORDERS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                  struct.sl_orders = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER>(_list24.size);
                  com.tbims.rpc.entity.SL_ORDER _elem25;
                  for (int _i26 = 0; _i26 < _list24.size; ++_i26)
                  {
                    _elem25 = new com.tbims.rpc.entity.SL_ORDER();
                    _elem25.read(iprot);
                    struct.sl_orders.add(_elem25);
                  }
                  iprot.readListEnd();
                }
                struct.setSl_ordersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saleTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_orders != null) {
          oprot.writeFieldBegin(SL_ORDERS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sl_orders.size()));
            for (com.tbims.rpc.entity.SL_ORDER _iter27 : struct.sl_orders)
            {
              _iter27.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saleTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicket_argsTupleScheme getScheme() {
        return new saleTicket_argsTupleScheme();
      }
    }

    private static class saleTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saleTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saleTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSl_orders()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSl_orders()) {
          {
            oprot.writeI32(struct.sl_orders.size());
            for (com.tbims.rpc.entity.SL_ORDER _iter28 : struct.sl_orders)
            {
              _iter28.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saleTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list29 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sl_orders = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER>(_list29.size);
            com.tbims.rpc.entity.SL_ORDER _elem30;
            for (int _i31 = 0; _i31 < _list29.size; ++_i31)
            {
              _elem30 = new com.tbims.rpc.entity.SL_ORDER();
              _elem30.read(iprot);
              struct.sl_orders.add(_elem30);
            }
          }
          struct.setSl_ordersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saleTicket_result implements org.apache.thrift.TBase<saleTicket_result, saleTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<saleTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saleTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saleTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saleTicket_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saleTicket_result.class, metaDataMap);
    }

    public saleTicket_result() {
    }

    public saleTicket_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saleTicket_result(saleTicket_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public saleTicket_result deepCopy() {
      return new saleTicket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public saleTicket_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public saleTicket_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saleTicket_result)
        return this.equals((saleTicket_result)that);
      return false;
    }

    public boolean equals(saleTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saleTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saleTicket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saleTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicket_resultStandardScheme getScheme() {
        return new saleTicket_resultStandardScheme();
      }
    }

    private static class saleTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saleTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saleTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saleTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saleTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicket_resultTupleScheme getScheme() {
        return new saleTicket_resultTupleScheme();
      }
    }

    private static class saleTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saleTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saleTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saleTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saleTicketByZG_args implements org.apache.thrift.TBase<saleTicketByZG_args, saleTicketByZG_args._Fields>, java.io.Serializable, Cloneable, Comparable<saleTicketByZG_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saleTicketByZG_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_order", org.apache.thrift.protocol.TType.STRUCT, (short)2);
    private static final org.apache.thrift.protocol.TField SL_ORDER_TICKETTYPE_DETAIL_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_order_tickettype_detail", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saleTicketByZG_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saleTicketByZG_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 销售订单信息
     */
    public com.tbims.rpc.entity.SL_ORDER sl_order; // required
    /**
     * 销售单票种明细表
     */
    public com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 销售订单信息
       */
      SL_ORDER((short)2, "sl_order"),
      /**
       * 销售单票种明细表
       */
      SL_ORDER_TICKETTYPE_DETAIL((short)3, "sl_order_tickettype_detail");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SL_ORDER
            return SL_ORDER;
          case 3: // SL_ORDER_TICKETTYPE_DETAIL
            return SL_ORDER_TICKETTYPE_DETAIL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sl_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER.class)));
      tmpMap.put(_Fields.SL_ORDER_TICKETTYPE_DETAIL, new org.apache.thrift.meta_data.FieldMetaData("sl_order_tickettype_detail", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saleTicketByZG_args.class, metaDataMap);
    }

    public saleTicketByZG_args() {
    }

    public saleTicketByZG_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.SL_ORDER sl_order,
      com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail)
    {
      this();
      this.auth = auth;
      this.sl_order = sl_order;
      this.sl_order_tickettype_detail = sl_order_tickettype_detail;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saleTicketByZG_args(saleTicketByZG_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSl_order()) {
        this.sl_order = new com.tbims.rpc.entity.SL_ORDER(other.sl_order);
      }
      if (other.isSetSl_order_tickettype_detail()) {
        this.sl_order_tickettype_detail = new com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL(other.sl_order_tickettype_detail);
      }
    }

    public saleTicketByZG_args deepCopy() {
      return new saleTicketByZG_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sl_order = null;
      this.sl_order_tickettype_detail = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public saleTicketByZG_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 销售订单信息
     */
    public com.tbims.rpc.entity.SL_ORDER getSl_order() {
      return this.sl_order;
    }

    /**
     * 销售订单信息
     */
    public saleTicketByZG_args setSl_order(com.tbims.rpc.entity.SL_ORDER sl_order) {
      this.sl_order = sl_order;
      return this;
    }

    public void unsetSl_order() {
      this.sl_order = null;
    }

    /** Returns true if field sl_order is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_order() {
      return this.sl_order != null;
    }

    public void setSl_orderIsSet(boolean value) {
      if (!value) {
        this.sl_order = null;
      }
    }

    /**
     * 销售单票种明细表
     */
    public com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL getSl_order_tickettype_detail() {
      return this.sl_order_tickettype_detail;
    }

    /**
     * 销售单票种明细表
     */
    public saleTicketByZG_args setSl_order_tickettype_detail(com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL sl_order_tickettype_detail) {
      this.sl_order_tickettype_detail = sl_order_tickettype_detail;
      return this;
    }

    public void unsetSl_order_tickettype_detail() {
      this.sl_order_tickettype_detail = null;
    }

    /** Returns true if field sl_order_tickettype_detail is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_order_tickettype_detail() {
      return this.sl_order_tickettype_detail != null;
    }

    public void setSl_order_tickettype_detailIsSet(boolean value) {
      if (!value) {
        this.sl_order_tickettype_detail = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SL_ORDER:
        if (value == null) {
          unsetSl_order();
        } else {
          setSl_order((com.tbims.rpc.entity.SL_ORDER)value);
        }
        break;

      case SL_ORDER_TICKETTYPE_DETAIL:
        if (value == null) {
          unsetSl_order_tickettype_detail();
        } else {
          setSl_order_tickettype_detail((com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SL_ORDER:
        return getSl_order();

      case SL_ORDER_TICKETTYPE_DETAIL:
        return getSl_order_tickettype_detail();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SL_ORDER:
        return isSetSl_order();
      case SL_ORDER_TICKETTYPE_DETAIL:
        return isSetSl_order_tickettype_detail();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saleTicketByZG_args)
        return this.equals((saleTicketByZG_args)that);
      return false;
    }

    public boolean equals(saleTicketByZG_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sl_order = true && this.isSetSl_order();
      boolean that_present_sl_order = true && that.isSetSl_order();
      if (this_present_sl_order || that_present_sl_order) {
        if (!(this_present_sl_order && that_present_sl_order))
          return false;
        if (!this.sl_order.equals(that.sl_order))
          return false;
      }

      boolean this_present_sl_order_tickettype_detail = true && this.isSetSl_order_tickettype_detail();
      boolean that_present_sl_order_tickettype_detail = true && that.isSetSl_order_tickettype_detail();
      if (this_present_sl_order_tickettype_detail || that_present_sl_order_tickettype_detail) {
        if (!(this_present_sl_order_tickettype_detail && that_present_sl_order_tickettype_detail))
          return false;
        if (!this.sl_order_tickettype_detail.equals(that.sl_order_tickettype_detail))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_order()) ? 131071 : 524287);
      if (isSetSl_order())
        hashCode = hashCode * 8191 + sl_order.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_order_tickettype_detail()) ? 131071 : 524287);
      if (isSetSl_order_tickettype_detail())
        hashCode = hashCode * 8191 + sl_order_tickettype_detail.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saleTicketByZG_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_order()).compareTo(other.isSetSl_order());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_order()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_order, other.sl_order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_order_tickettype_detail()).compareTo(other.isSetSl_order_tickettype_detail());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_order_tickettype_detail()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_order_tickettype_detail, other.sl_order_tickettype_detail);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saleTicketByZG_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_order:");
      if (this.sl_order == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_order);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_order_tickettype_detail:");
      if (this.sl_order_tickettype_detail == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_order_tickettype_detail);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (sl_order != null) {
        sl_order.validate();
      }
      if (sl_order_tickettype_detail != null) {
        sl_order_tickettype_detail.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saleTicketByZG_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByZG_argsStandardScheme getScheme() {
        return new saleTicketByZG_argsStandardScheme();
      }
    }

    private static class saleTicketByZG_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saleTicketByZG_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saleTicketByZG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SL_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sl_order = new com.tbims.rpc.entity.SL_ORDER();
                struct.sl_order.read(iprot);
                struct.setSl_orderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SL_ORDER_TICKETTYPE_DETAIL
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sl_order_tickettype_detail = new com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL();
                struct.sl_order_tickettype_detail.read(iprot);
                struct.setSl_order_tickettype_detailIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saleTicketByZG_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_order != null) {
          oprot.writeFieldBegin(SL_ORDER_FIELD_DESC);
          struct.sl_order.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_order_tickettype_detail != null) {
          oprot.writeFieldBegin(SL_ORDER_TICKETTYPE_DETAIL_FIELD_DESC);
          struct.sl_order_tickettype_detail.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saleTicketByZG_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByZG_argsTupleScheme getScheme() {
        return new saleTicketByZG_argsTupleScheme();
      }
    }

    private static class saleTicketByZG_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saleTicketByZG_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saleTicketByZG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSl_order()) {
          optionals.set(1);
        }
        if (struct.isSetSl_order_tickettype_detail()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSl_order()) {
          struct.sl_order.write(oprot);
        }
        if (struct.isSetSl_order_tickettype_detail()) {
          struct.sl_order_tickettype_detail.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saleTicketByZG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sl_order = new com.tbims.rpc.entity.SL_ORDER();
          struct.sl_order.read(iprot);
          struct.setSl_orderIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sl_order_tickettype_detail = new com.tbims.rpc.entity.SL_ORDER_TICKETTYPE_DETAIL();
          struct.sl_order_tickettype_detail.read(iprot);
          struct.setSl_order_tickettype_detailIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saleTicketByZG_result implements org.apache.thrift.TBase<saleTicketByZG_result, saleTicketByZG_result._Fields>, java.io.Serializable, Cloneable, Comparable<saleTicketByZG_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saleTicketByZG_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saleTicketByZG_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saleTicketByZG_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saleTicketByZG_result.class, metaDataMap);
    }

    public saleTicketByZG_result() {
    }

    public saleTicketByZG_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saleTicketByZG_result(saleTicketByZG_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public saleTicketByZG_result deepCopy() {
      return new saleTicketByZG_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public saleTicketByZG_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public saleTicketByZG_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saleTicketByZG_result)
        return this.equals((saleTicketByZG_result)that);
      return false;
    }

    public boolean equals(saleTicketByZG_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saleTicketByZG_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saleTicketByZG_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saleTicketByZG_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByZG_resultStandardScheme getScheme() {
        return new saleTicketByZG_resultStandardScheme();
      }
    }

    private static class saleTicketByZG_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saleTicketByZG_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saleTicketByZG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saleTicketByZG_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saleTicketByZG_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByZG_resultTupleScheme getScheme() {
        return new saleTicketByZG_resultTupleScheme();
      }
    }

    private static class saleTicketByZG_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saleTicketByZG_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saleTicketByZG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saleTicketByZG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saleTicketByIdenttyZG_args implements org.apache.thrift.TBase<saleTicketByIdenttyZG_args, saleTicketByIdenttyZG_args._Fields>, java.io.Serializable, Cloneable, Comparable<saleTicketByIdenttyZG_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saleTicketByIdenttyZG_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SL_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_order", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saleTicketByIdenttyZG_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saleTicketByIdenttyZG_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 销售订单信息
     */
    public com.tbims.rpc.entity.SL_ORDER sl_order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 销售订单信息
       */
      SL_ORDER((short)2, "sl_order");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SL_ORDER
            return SL_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SL_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sl_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saleTicketByIdenttyZG_args.class, metaDataMap);
    }

    public saleTicketByIdenttyZG_args() {
    }

    public saleTicketByIdenttyZG_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.SL_ORDER sl_order)
    {
      this();
      this.auth = auth;
      this.sl_order = sl_order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saleTicketByIdenttyZG_args(saleTicketByIdenttyZG_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSl_order()) {
        this.sl_order = new com.tbims.rpc.entity.SL_ORDER(other.sl_order);
      }
    }

    public saleTicketByIdenttyZG_args deepCopy() {
      return new saleTicketByIdenttyZG_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sl_order = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public saleTicketByIdenttyZG_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 销售订单信息
     */
    public com.tbims.rpc.entity.SL_ORDER getSl_order() {
      return this.sl_order;
    }

    /**
     * 销售订单信息
     */
    public saleTicketByIdenttyZG_args setSl_order(com.tbims.rpc.entity.SL_ORDER sl_order) {
      this.sl_order = sl_order;
      return this;
    }

    public void unsetSl_order() {
      this.sl_order = null;
    }

    /** Returns true if field sl_order is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_order() {
      return this.sl_order != null;
    }

    public void setSl_orderIsSet(boolean value) {
      if (!value) {
        this.sl_order = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SL_ORDER:
        if (value == null) {
          unsetSl_order();
        } else {
          setSl_order((com.tbims.rpc.entity.SL_ORDER)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SL_ORDER:
        return getSl_order();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SL_ORDER:
        return isSetSl_order();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saleTicketByIdenttyZG_args)
        return this.equals((saleTicketByIdenttyZG_args)that);
      return false;
    }

    public boolean equals(saleTicketByIdenttyZG_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sl_order = true && this.isSetSl_order();
      boolean that_present_sl_order = true && that.isSetSl_order();
      if (this_present_sl_order || that_present_sl_order) {
        if (!(this_present_sl_order && that_present_sl_order))
          return false;
        if (!this.sl_order.equals(that.sl_order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_order()) ? 131071 : 524287);
      if (isSetSl_order())
        hashCode = hashCode * 8191 + sl_order.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saleTicketByIdenttyZG_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_order()).compareTo(other.isSetSl_order());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_order()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_order, other.sl_order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saleTicketByIdenttyZG_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_order:");
      if (this.sl_order == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (sl_order != null) {
        sl_order.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saleTicketByIdenttyZG_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByIdenttyZG_argsStandardScheme getScheme() {
        return new saleTicketByIdenttyZG_argsStandardScheme();
      }
    }

    private static class saleTicketByIdenttyZG_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<saleTicketByIdenttyZG_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saleTicketByIdenttyZG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SL_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sl_order = new com.tbims.rpc.entity.SL_ORDER();
                struct.sl_order.read(iprot);
                struct.setSl_orderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saleTicketByIdenttyZG_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_order != null) {
          oprot.writeFieldBegin(SL_ORDER_FIELD_DESC);
          struct.sl_order.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saleTicketByIdenttyZG_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByIdenttyZG_argsTupleScheme getScheme() {
        return new saleTicketByIdenttyZG_argsTupleScheme();
      }
    }

    private static class saleTicketByIdenttyZG_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<saleTicketByIdenttyZG_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saleTicketByIdenttyZG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSl_order()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSl_order()) {
          struct.sl_order.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saleTicketByIdenttyZG_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sl_order = new com.tbims.rpc.entity.SL_ORDER();
          struct.sl_order.read(iprot);
          struct.setSl_orderIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class saleTicketByIdenttyZG_result implements org.apache.thrift.TBase<saleTicketByIdenttyZG_result, saleTicketByIdenttyZG_result._Fields>, java.io.Serializable, Cloneable, Comparable<saleTicketByIdenttyZG_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("saleTicketByIdenttyZG_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new saleTicketByIdenttyZG_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new saleTicketByIdenttyZG_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(saleTicketByIdenttyZG_result.class, metaDataMap);
    }

    public saleTicketByIdenttyZG_result() {
    }

    public saleTicketByIdenttyZG_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public saleTicketByIdenttyZG_result(saleTicketByIdenttyZG_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public saleTicketByIdenttyZG_result deepCopy() {
      return new saleTicketByIdenttyZG_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public saleTicketByIdenttyZG_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public saleTicketByIdenttyZG_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof saleTicketByIdenttyZG_result)
        return this.equals((saleTicketByIdenttyZG_result)that);
      return false;
    }

    public boolean equals(saleTicketByIdenttyZG_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(saleTicketByIdenttyZG_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("saleTicketByIdenttyZG_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class saleTicketByIdenttyZG_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByIdenttyZG_resultStandardScheme getScheme() {
        return new saleTicketByIdenttyZG_resultStandardScheme();
      }
    }

    private static class saleTicketByIdenttyZG_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<saleTicketByIdenttyZG_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, saleTicketByIdenttyZG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, saleTicketByIdenttyZG_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class saleTicketByIdenttyZG_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public saleTicketByIdenttyZG_resultTupleScheme getScheme() {
        return new saleTicketByIdenttyZG_resultTupleScheme();
      }
    }

    private static class saleTicketByIdenttyZG_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<saleTicketByIdenttyZG_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, saleTicketByIdenttyZG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, saleTicketByIdenttyZG_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTicketByIdenttyId_args implements org.apache.thrift.TBase<queryTicketByIdenttyId_args, queryTicketByIdenttyId_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTicketByIdenttyId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTicketByIdenttyId_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField IDENTTY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("identty_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTicketByIdenttyId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTicketByIdenttyId_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 销售订单信息
     */
    public java.lang.String identty_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 销售订单信息
       */
      IDENTTY_ID((short)2, "identty_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // IDENTTY_ID
            return IDENTTY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.IDENTTY_ID, new org.apache.thrift.meta_data.FieldMetaData("identty_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTicketByIdenttyId_args.class, metaDataMap);
    }

    public queryTicketByIdenttyId_args() {
    }

    public queryTicketByIdenttyId_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String identty_id)
    {
      this();
      this.auth = auth;
      this.identty_id = identty_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTicketByIdenttyId_args(queryTicketByIdenttyId_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetIdentty_id()) {
        this.identty_id = other.identty_id;
      }
    }

    public queryTicketByIdenttyId_args deepCopy() {
      return new queryTicketByIdenttyId_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.identty_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public queryTicketByIdenttyId_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 销售订单信息
     */
    public java.lang.String getIdentty_id() {
      return this.identty_id;
    }

    /**
     * 销售订单信息
     */
    public queryTicketByIdenttyId_args setIdentty_id(java.lang.String identty_id) {
      this.identty_id = identty_id;
      return this;
    }

    public void unsetIdentty_id() {
      this.identty_id = null;
    }

    /** Returns true if field identty_id is set (has been assigned a value) and false otherwise */
    public boolean isSetIdentty_id() {
      return this.identty_id != null;
    }

    public void setIdentty_idIsSet(boolean value) {
      if (!value) {
        this.identty_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case IDENTTY_ID:
        if (value == null) {
          unsetIdentty_id();
        } else {
          setIdentty_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case IDENTTY_ID:
        return getIdentty_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case IDENTTY_ID:
        return isSetIdentty_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTicketByIdenttyId_args)
        return this.equals((queryTicketByIdenttyId_args)that);
      return false;
    }

    public boolean equals(queryTicketByIdenttyId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_identty_id = true && this.isSetIdentty_id();
      boolean that_present_identty_id = true && that.isSetIdentty_id();
      if (this_present_identty_id || that_present_identty_id) {
        if (!(this_present_identty_id && that_present_identty_id))
          return false;
        if (!this.identty_id.equals(that.identty_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetIdentty_id()) ? 131071 : 524287);
      if (isSetIdentty_id())
        hashCode = hashCode * 8191 + identty_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTicketByIdenttyId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIdentty_id()).compareTo(other.isSetIdentty_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIdentty_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.identty_id, other.identty_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTicketByIdenttyId_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("identty_id:");
      if (this.identty_id == null) {
        sb.append("null");
      } else {
        sb.append(this.identty_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTicketByIdenttyId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTicketByIdenttyId_argsStandardScheme getScheme() {
        return new queryTicketByIdenttyId_argsStandardScheme();
      }
    }

    private static class queryTicketByIdenttyId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTicketByIdenttyId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTicketByIdenttyId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // IDENTTY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.identty_id = iprot.readString();
                struct.setIdentty_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTicketByIdenttyId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.identty_id != null) {
          oprot.writeFieldBegin(IDENTTY_ID_FIELD_DESC);
          oprot.writeString(struct.identty_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTicketByIdenttyId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTicketByIdenttyId_argsTupleScheme getScheme() {
        return new queryTicketByIdenttyId_argsTupleScheme();
      }
    }

    private static class queryTicketByIdenttyId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTicketByIdenttyId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTicketByIdenttyId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetIdentty_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetIdentty_id()) {
          oprot.writeString(struct.identty_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTicketByIdenttyId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.identty_id = iprot.readString();
          struct.setIdentty_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTicketByIdenttyId_result implements org.apache.thrift.TBase<queryTicketByIdenttyId_result, queryTicketByIdenttyId_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTicketByIdenttyId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTicketByIdenttyId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTicketByIdenttyId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTicketByIdenttyId_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER_DETAIL.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTicketByIdenttyId_result.class, metaDataMap);
    }

    public queryTicketByIdenttyId_result() {
    }

    public queryTicketByIdenttyId_result(
      java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTicketByIdenttyId_result(queryTicketByIdenttyId_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(other.success.size());
        for (com.tbims.rpc.entity.SL_ORDER_DETAIL other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SL_ORDER_DETAIL(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public queryTicketByIdenttyId_result deepCopy() {
      return new queryTicketByIdenttyId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_ORDER_DETAIL> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SL_ORDER_DETAIL elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> getSuccess() {
      return this.success;
    }

    public queryTicketByIdenttyId_result setSuccess(java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public queryTicketByIdenttyId_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTicketByIdenttyId_result)
        return this.equals((queryTicketByIdenttyId_result)that);
      return false;
    }

    public boolean equals(queryTicketByIdenttyId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTicketByIdenttyId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTicketByIdenttyId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTicketByIdenttyId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTicketByIdenttyId_resultStandardScheme getScheme() {
        return new queryTicketByIdenttyId_resultStandardScheme();
      }
    }

    private static class queryTicketByIdenttyId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTicketByIdenttyId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTicketByIdenttyId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list32 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(_list32.size);
                  com.tbims.rpc.entity.SL_ORDER_DETAIL _elem33;
                  for (int _i34 = 0; _i34 < _list32.size; ++_i34)
                  {
                    _elem33 = new com.tbims.rpc.entity.SL_ORDER_DETAIL();
                    _elem33.read(iprot);
                    struct.success.add(_elem33);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTicketByIdenttyId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SL_ORDER_DETAIL _iter35 : struct.success)
            {
              _iter35.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTicketByIdenttyId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTicketByIdenttyId_resultTupleScheme getScheme() {
        return new queryTicketByIdenttyId_resultTupleScheme();
      }
    }

    private static class queryTicketByIdenttyId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTicketByIdenttyId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTicketByIdenttyId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SL_ORDER_DETAIL _iter36 : struct.success)
            {
              _iter36.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTicketByIdenttyId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list37 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(_list37.size);
            com.tbims.rpc.entity.SL_ORDER_DETAIL _elem38;
            for (int _i39 = 0; _i39 < _list37.size; ++_i39)
            {
              _elem38 = new com.tbims.rpc.entity.SL_ORDER_DETAIL();
              _elem38.read(iprot);
              struct.success.add(_elem38);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querTicketPayStatus_args implements org.apache.thrift.TBase<querTicketPayStatus_args, querTicketPayStatus_args._Fields>, java.io.Serializable, Cloneable, Comparable<querTicketPayStatus_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querTicketPayStatus_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("order_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querTicketPayStatus_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querTicketPayStatus_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 销售订单信息
     */
    public java.lang.String order_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 销售订单信息
       */
      ORDER_ID((short)2, "order_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("order_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querTicketPayStatus_args.class, metaDataMap);
    }

    public querTicketPayStatus_args() {
    }

    public querTicketPayStatus_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String order_id)
    {
      this();
      this.auth = auth;
      this.order_id = order_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querTicketPayStatus_args(querTicketPayStatus_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetOrder_id()) {
        this.order_id = other.order_id;
      }
    }

    public querTicketPayStatus_args deepCopy() {
      return new querTicketPayStatus_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.order_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public querTicketPayStatus_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 销售订单信息
     */
    public java.lang.String getOrder_id() {
      return this.order_id;
    }

    /**
     * 销售订单信息
     */
    public querTicketPayStatus_args setOrder_id(java.lang.String order_id) {
      this.order_id = order_id;
      return this;
    }

    public void unsetOrder_id() {
      this.order_id = null;
    }

    /** Returns true if field order_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder_id() {
      return this.order_id != null;
    }

    public void setOrder_idIsSet(boolean value) {
      if (!value) {
        this.order_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case ORDER_ID:
        if (value == null) {
          unsetOrder_id();
        } else {
          setOrder_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case ORDER_ID:
        return getOrder_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case ORDER_ID:
        return isSetOrder_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querTicketPayStatus_args)
        return this.equals((querTicketPayStatus_args)that);
      return false;
    }

    public boolean equals(querTicketPayStatus_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_order_id = true && this.isSetOrder_id();
      boolean that_present_order_id = true && that.isSetOrder_id();
      if (this_present_order_id || that_present_order_id) {
        if (!(this_present_order_id && that_present_order_id))
          return false;
        if (!this.order_id.equals(that.order_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetOrder_id()) ? 131071 : 524287);
      if (isSetOrder_id())
        hashCode = hashCode * 8191 + order_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querTicketPayStatus_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOrder_id()).compareTo(other.isSetOrder_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_id, other.order_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querTicketPayStatus_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("order_id:");
      if (this.order_id == null) {
        sb.append("null");
      } else {
        sb.append(this.order_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querTicketPayStatus_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querTicketPayStatus_argsStandardScheme getScheme() {
        return new querTicketPayStatus_argsStandardScheme();
      }
    }

    private static class querTicketPayStatus_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<querTicketPayStatus_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querTicketPayStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.order_id = iprot.readString();
                struct.setOrder_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querTicketPayStatus_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.order_id != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.order_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querTicketPayStatus_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querTicketPayStatus_argsTupleScheme getScheme() {
        return new querTicketPayStatus_argsTupleScheme();
      }
    }

    private static class querTicketPayStatus_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<querTicketPayStatus_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querTicketPayStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetOrder_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetOrder_id()) {
          oprot.writeString(struct.order_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querTicketPayStatus_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.order_id = iprot.readString();
          struct.setOrder_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class querTicketPayStatus_result implements org.apache.thrift.TBase<querTicketPayStatus_result, querTicketPayStatus_result._Fields>, java.io.Serializable, Cloneable, Comparable<querTicketPayStatus_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("querTicketPayStatus_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new querTicketPayStatus_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new querTicketPayStatus_resultTupleSchemeFactory();

    public int success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(querTicketPayStatus_result.class, metaDataMap);
    }

    public querTicketPayStatus_result() {
    }

    public querTicketPayStatus_result(
      int success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public querTicketPayStatus_result(querTicketPayStatus_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public querTicketPayStatus_result deepCopy() {
      return new querTicketPayStatus_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public querTicketPayStatus_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public querTicketPayStatus_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof querTicketPayStatus_result)
        return this.equals((querTicketPayStatus_result)that);
      return false;
    }

    public boolean equals(querTicketPayStatus_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(querTicketPayStatus_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("querTicketPayStatus_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class querTicketPayStatus_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querTicketPayStatus_resultStandardScheme getScheme() {
        return new querTicketPayStatus_resultStandardScheme();
      }
    }

    private static class querTicketPayStatus_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<querTicketPayStatus_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, querTicketPayStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, querTicketPayStatus_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class querTicketPayStatus_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public querTicketPayStatus_resultTupleScheme getScheme() {
        return new querTicketPayStatus_resultTupleScheme();
      }
    }

    private static class querTicketPayStatus_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<querTicketPayStatus_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, querTicketPayStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, querTicketPayStatus_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cancelTicketPay_args implements org.apache.thrift.TBase<cancelTicketPay_args, cancelTicketPay_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelTicketPay_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelTicketPay_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField ORDER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("order_id", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelTicketPay_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelTicketPay_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 销售订单信息
     */
    public java.lang.String order_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 销售订单信息
       */
      ORDER_ID((short)2, "order_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // ORDER_ID
            return ORDER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.ORDER_ID, new org.apache.thrift.meta_data.FieldMetaData("order_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelTicketPay_args.class, metaDataMap);
    }

    public cancelTicketPay_args() {
    }

    public cancelTicketPay_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String order_id)
    {
      this();
      this.auth = auth;
      this.order_id = order_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelTicketPay_args(cancelTicketPay_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetOrder_id()) {
        this.order_id = other.order_id;
      }
    }

    public cancelTicketPay_args deepCopy() {
      return new cancelTicketPay_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.order_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public cancelTicketPay_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 销售订单信息
     */
    public java.lang.String getOrder_id() {
      return this.order_id;
    }

    /**
     * 销售订单信息
     */
    public cancelTicketPay_args setOrder_id(java.lang.String order_id) {
      this.order_id = order_id;
      return this;
    }

    public void unsetOrder_id() {
      this.order_id = null;
    }

    /** Returns true if field order_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOrder_id() {
      return this.order_id != null;
    }

    public void setOrder_idIsSet(boolean value) {
      if (!value) {
        this.order_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case ORDER_ID:
        if (value == null) {
          unsetOrder_id();
        } else {
          setOrder_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case ORDER_ID:
        return getOrder_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case ORDER_ID:
        return isSetOrder_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelTicketPay_args)
        return this.equals((cancelTicketPay_args)that);
      return false;
    }

    public boolean equals(cancelTicketPay_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_order_id = true && this.isSetOrder_id();
      boolean that_present_order_id = true && that.isSetOrder_id();
      if (this_present_order_id || that_present_order_id) {
        if (!(this_present_order_id && that_present_order_id))
          return false;
        if (!this.order_id.equals(that.order_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetOrder_id()) ? 131071 : 524287);
      if (isSetOrder_id())
        hashCode = hashCode * 8191 + order_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cancelTicketPay_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOrder_id()).compareTo(other.isSetOrder_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOrder_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.order_id, other.order_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelTicketPay_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("order_id:");
      if (this.order_id == null) {
        sb.append("null");
      } else {
        sb.append(this.order_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelTicketPay_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelTicketPay_argsStandardScheme getScheme() {
        return new cancelTicketPay_argsStandardScheme();
      }
    }

    private static class cancelTicketPay_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelTicketPay_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelTicketPay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // ORDER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.order_id = iprot.readString();
                struct.setOrder_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelTicketPay_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.order_id != null) {
          oprot.writeFieldBegin(ORDER_ID_FIELD_DESC);
          oprot.writeString(struct.order_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelTicketPay_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelTicketPay_argsTupleScheme getScheme() {
        return new cancelTicketPay_argsTupleScheme();
      }
    }

    private static class cancelTicketPay_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelTicketPay_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelTicketPay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetOrder_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetOrder_id()) {
          oprot.writeString(struct.order_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelTicketPay_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.order_id = iprot.readString();
          struct.setOrder_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cancelTicketPay_result implements org.apache.thrift.TBase<cancelTicketPay_result, cancelTicketPay_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelTicketPay_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelTicketPay_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelTicketPay_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelTicketPay_resultTupleSchemeFactory();

    public boolean success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelTicketPay_result.class, metaDataMap);
    }

    public cancelTicketPay_result() {
    }

    public cancelTicketPay_result(
      boolean success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelTicketPay_result(cancelTicketPay_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public cancelTicketPay_result deepCopy() {
      return new cancelTicketPay_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public cancelTicketPay_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelTicketPay_result)
        return this.equals((cancelTicketPay_result)that);
      return false;
    }

    public boolean equals(cancelTicketPay_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(cancelTicketPay_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelTicketPay_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelTicketPay_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelTicketPay_resultStandardScheme getScheme() {
        return new cancelTicketPay_resultStandardScheme();
      }
    }

    private static class cancelTicketPay_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelTicketPay_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelTicketPay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelTicketPay_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelTicketPay_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelTicketPay_resultTupleScheme getScheme() {
        return new cancelTicketPay_resultTupleScheme();
      }
    }

    private static class cancelTicketPay_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelTicketPay_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelTicketPay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelTicketPay_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ejectTicket_args implements org.apache.thrift.TBase<ejectTicket_args, ejectTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<ejectTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ejectTicket_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SL_ORDER_DETAIL_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_order_detail_list", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ejectTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ejectTicket_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 销售订单信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 销售订单信息
       */
      SL_ORDER_DETAIL_LIST((short)2, "sl_order_detail_list");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SL_ORDER_DETAIL_LIST
            return SL_ORDER_DETAIL_LIST;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SL_ORDER_DETAIL_LIST, new org.apache.thrift.meta_data.FieldMetaData("sl_order_detail_list", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_ORDER_DETAIL.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ejectTicket_args.class, metaDataMap);
    }

    public ejectTicket_args() {
    }

    public ejectTicket_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list)
    {
      this();
      this.auth = auth;
      this.sl_order_detail_list = sl_order_detail_list;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ejectTicket_args(ejectTicket_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSl_order_detail_list()) {
        java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> __this__sl_order_detail_list = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(other.sl_order_detail_list.size());
        for (com.tbims.rpc.entity.SL_ORDER_DETAIL other_element : other.sl_order_detail_list) {
          __this__sl_order_detail_list.add(new com.tbims.rpc.entity.SL_ORDER_DETAIL(other_element));
        }
        this.sl_order_detail_list = __this__sl_order_detail_list;
      }
    }

    public ejectTicket_args deepCopy() {
      return new ejectTicket_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sl_order_detail_list = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public ejectTicket_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getSl_order_detail_listSize() {
      return (this.sl_order_detail_list == null) ? 0 : this.sl_order_detail_list.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_ORDER_DETAIL> getSl_order_detail_listIterator() {
      return (this.sl_order_detail_list == null) ? null : this.sl_order_detail_list.iterator();
    }

    public void addToSl_order_detail_list(com.tbims.rpc.entity.SL_ORDER_DETAIL elem) {
      if (this.sl_order_detail_list == null) {
        this.sl_order_detail_list = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>();
      }
      this.sl_order_detail_list.add(elem);
    }

    /**
     * 销售订单信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> getSl_order_detail_list() {
      return this.sl_order_detail_list;
    }

    /**
     * 销售订单信息
     */
    public ejectTicket_args setSl_order_detail_list(java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL> sl_order_detail_list) {
      this.sl_order_detail_list = sl_order_detail_list;
      return this;
    }

    public void unsetSl_order_detail_list() {
      this.sl_order_detail_list = null;
    }

    /** Returns true if field sl_order_detail_list is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_order_detail_list() {
      return this.sl_order_detail_list != null;
    }

    public void setSl_order_detail_listIsSet(boolean value) {
      if (!value) {
        this.sl_order_detail_list = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SL_ORDER_DETAIL_LIST:
        if (value == null) {
          unsetSl_order_detail_list();
        } else {
          setSl_order_detail_list((java.util.List<com.tbims.rpc.entity.SL_ORDER_DETAIL>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SL_ORDER_DETAIL_LIST:
        return getSl_order_detail_list();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SL_ORDER_DETAIL_LIST:
        return isSetSl_order_detail_list();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ejectTicket_args)
        return this.equals((ejectTicket_args)that);
      return false;
    }

    public boolean equals(ejectTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sl_order_detail_list = true && this.isSetSl_order_detail_list();
      boolean that_present_sl_order_detail_list = true && that.isSetSl_order_detail_list();
      if (this_present_sl_order_detail_list || that_present_sl_order_detail_list) {
        if (!(this_present_sl_order_detail_list && that_present_sl_order_detail_list))
          return false;
        if (!this.sl_order_detail_list.equals(that.sl_order_detail_list))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_order_detail_list()) ? 131071 : 524287);
      if (isSetSl_order_detail_list())
        hashCode = hashCode * 8191 + sl_order_detail_list.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ejectTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_order_detail_list()).compareTo(other.isSetSl_order_detail_list());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_order_detail_list()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_order_detail_list, other.sl_order_detail_list);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ejectTicket_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_order_detail_list:");
      if (this.sl_order_detail_list == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_order_detail_list);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ejectTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicket_argsStandardScheme getScheme() {
        return new ejectTicket_argsStandardScheme();
      }
    }

    private static class ejectTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<ejectTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ejectTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SL_ORDER_DETAIL_LIST
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list40 = iprot.readListBegin();
                  struct.sl_order_detail_list = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(_list40.size);
                  com.tbims.rpc.entity.SL_ORDER_DETAIL _elem41;
                  for (int _i42 = 0; _i42 < _list40.size; ++_i42)
                  {
                    _elem41 = new com.tbims.rpc.entity.SL_ORDER_DETAIL();
                    _elem41.read(iprot);
                    struct.sl_order_detail_list.add(_elem41);
                  }
                  iprot.readListEnd();
                }
                struct.setSl_order_detail_listIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ejectTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_order_detail_list != null) {
          oprot.writeFieldBegin(SL_ORDER_DETAIL_LIST_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sl_order_detail_list.size()));
            for (com.tbims.rpc.entity.SL_ORDER_DETAIL _iter43 : struct.sl_order_detail_list)
            {
              _iter43.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ejectTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicket_argsTupleScheme getScheme() {
        return new ejectTicket_argsTupleScheme();
      }
    }

    private static class ejectTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<ejectTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ejectTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSl_order_detail_list()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSl_order_detail_list()) {
          {
            oprot.writeI32(struct.sl_order_detail_list.size());
            for (com.tbims.rpc.entity.SL_ORDER_DETAIL _iter44 : struct.sl_order_detail_list)
            {
              _iter44.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ejectTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list45 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sl_order_detail_list = new java.util.ArrayList<com.tbims.rpc.entity.SL_ORDER_DETAIL>(_list45.size);
            com.tbims.rpc.entity.SL_ORDER_DETAIL _elem46;
            for (int _i47 = 0; _i47 < _list45.size; ++_i47)
            {
              _elem46 = new com.tbims.rpc.entity.SL_ORDER_DETAIL();
              _elem46.read(iprot);
              struct.sl_order_detail_list.add(_elem46);
            }
          }
          struct.setSl_order_detail_listIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class ejectTicket_result implements org.apache.thrift.TBase<ejectTicket_result, ejectTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<ejectTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ejectTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new ejectTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new ejectTicket_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ejectTicket_result.class, metaDataMap);
    }

    public ejectTicket_result() {
    }

    public ejectTicket_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ejectTicket_result(ejectTicket_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public ejectTicket_result deepCopy() {
      return new ejectTicket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ejectTicket_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public ejectTicket_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof ejectTicket_result)
        return this.equals((ejectTicket_result)that);
      return false;
    }

    public boolean equals(ejectTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(ejectTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("ejectTicket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ejectTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicket_resultStandardScheme getScheme() {
        return new ejectTicket_resultStandardScheme();
      }
    }

    private static class ejectTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<ejectTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ejectTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ejectTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ejectTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public ejectTicket_resultTupleScheme getScheme() {
        return new ejectTicket_resultTupleScheme();
      }
    }

    private static class ejectTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<ejectTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ejectTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ejectTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeTicket_args implements org.apache.thrift.TBase<changeTicket_args, changeTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicket_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SL_NETAGENT_ORDER_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_netagent_order", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeTicket_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 网络代理订单表
     */
    public com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 网络代理订单表
       */
      SL_NETAGENT_ORDER((short)2, "sl_netagent_order");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SL_NETAGENT_ORDER
            return SL_NETAGENT_ORDER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SL_NETAGENT_ORDER, new org.apache.thrift.meta_data.FieldMetaData("sl_netagent_order", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_NETAGENT_ORDER.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicket_args.class, metaDataMap);
    }

    public changeTicket_args() {
    }

    public changeTicket_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order)
    {
      this();
      this.auth = auth;
      this.sl_netagent_order = sl_netagent_order;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicket_args(changeTicket_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSl_netagent_order()) {
        this.sl_netagent_order = new com.tbims.rpc.entity.SL_NETAGENT_ORDER(other.sl_netagent_order);
      }
    }

    public changeTicket_args deepCopy() {
      return new changeTicket_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sl_netagent_order = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public changeTicket_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 网络代理订单表
     */
    public com.tbims.rpc.entity.SL_NETAGENT_ORDER getSl_netagent_order() {
      return this.sl_netagent_order;
    }

    /**
     * 网络代理订单表
     */
    public changeTicket_args setSl_netagent_order(com.tbims.rpc.entity.SL_NETAGENT_ORDER sl_netagent_order) {
      this.sl_netagent_order = sl_netagent_order;
      return this;
    }

    public void unsetSl_netagent_order() {
      this.sl_netagent_order = null;
    }

    /** Returns true if field sl_netagent_order is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_netagent_order() {
      return this.sl_netagent_order != null;
    }

    public void setSl_netagent_orderIsSet(boolean value) {
      if (!value) {
        this.sl_netagent_order = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SL_NETAGENT_ORDER:
        if (value == null) {
          unsetSl_netagent_order();
        } else {
          setSl_netagent_order((com.tbims.rpc.entity.SL_NETAGENT_ORDER)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SL_NETAGENT_ORDER:
        return getSl_netagent_order();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SL_NETAGENT_ORDER:
        return isSetSl_netagent_order();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicket_args)
        return this.equals((changeTicket_args)that);
      return false;
    }

    public boolean equals(changeTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sl_netagent_order = true && this.isSetSl_netagent_order();
      boolean that_present_sl_netagent_order = true && that.isSetSl_netagent_order();
      if (this_present_sl_netagent_order || that_present_sl_netagent_order) {
        if (!(this_present_sl_netagent_order && that_present_sl_netagent_order))
          return false;
        if (!this.sl_netagent_order.equals(that.sl_netagent_order))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_netagent_order()) ? 131071 : 524287);
      if (isSetSl_netagent_order())
        hashCode = hashCode * 8191 + sl_netagent_order.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_netagent_order()).compareTo(other.isSetSl_netagent_order());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_netagent_order()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_netagent_order, other.sl_netagent_order);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeTicket_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_netagent_order:");
      if (this.sl_netagent_order == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_netagent_order);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (sl_netagent_order != null) {
        sl_netagent_order.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeTicket_argsStandardScheme getScheme() {
        return new changeTicket_argsStandardScheme();
      }
    }

    private static class changeTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SL_NETAGENT_ORDER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sl_netagent_order = new com.tbims.rpc.entity.SL_NETAGENT_ORDER();
                struct.sl_netagent_order.read(iprot);
                struct.setSl_netagent_orderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_netagent_order != null) {
          oprot.writeFieldBegin(SL_NETAGENT_ORDER_FIELD_DESC);
          struct.sl_netagent_order.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeTicket_argsTupleScheme getScheme() {
        return new changeTicket_argsTupleScheme();
      }
    }

    private static class changeTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSl_netagent_order()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSl_netagent_order()) {
          struct.sl_netagent_order.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sl_netagent_order = new com.tbims.rpc.entity.SL_NETAGENT_ORDER();
          struct.sl_netagent_order.read(iprot);
          struct.setSl_netagent_orderIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class changeTicket_result implements org.apache.thrift.TBase<changeTicket_result, changeTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<changeTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("changeTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new changeTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new changeTicket_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(changeTicket_result.class, metaDataMap);
    }

    public changeTicket_result() {
    }

    public changeTicket_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public changeTicket_result(changeTicket_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public changeTicket_result deepCopy() {
      return new changeTicket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public changeTicket_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public changeTicket_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof changeTicket_result)
        return this.equals((changeTicket_result)that);
      return false;
    }

    public boolean equals(changeTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(changeTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("changeTicket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class changeTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeTicket_resultStandardScheme getScheme() {
        return new changeTicket_resultStandardScheme();
      }
    }

    private static class changeTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<changeTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, changeTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, changeTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class changeTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public changeTicket_resultTupleScheme getScheme() {
        return new changeTicket_resultTupleScheme();
      }
    }

    private static class changeTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<changeTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, changeTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, changeTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class supplyTicket_args implements org.apache.thrift.TBase<supplyTicket_args, supplyTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<supplyTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supplyTicket_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SL_SUPPLY_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_supply", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new supplyTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new supplyTicket_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 补票信息
     */
    public com.tbims.rpc.entity.SL_SUPPLY sl_supply; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 补票信息
       */
      SL_SUPPLY((short)2, "sl_supply");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SL_SUPPLY
            return SL_SUPPLY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SL_SUPPLY, new org.apache.thrift.meta_data.FieldMetaData("sl_supply", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_SUPPLY.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supplyTicket_args.class, metaDataMap);
    }

    public supplyTicket_args() {
    }

    public supplyTicket_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      com.tbims.rpc.entity.SL_SUPPLY sl_supply)
    {
      this();
      this.auth = auth;
      this.sl_supply = sl_supply;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supplyTicket_args(supplyTicket_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSl_supply()) {
        this.sl_supply = new com.tbims.rpc.entity.SL_SUPPLY(other.sl_supply);
      }
    }

    public supplyTicket_args deepCopy() {
      return new supplyTicket_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sl_supply = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public supplyTicket_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 补票信息
     */
    public com.tbims.rpc.entity.SL_SUPPLY getSl_supply() {
      return this.sl_supply;
    }

    /**
     * 补票信息
     */
    public supplyTicket_args setSl_supply(com.tbims.rpc.entity.SL_SUPPLY sl_supply) {
      this.sl_supply = sl_supply;
      return this;
    }

    public void unsetSl_supply() {
      this.sl_supply = null;
    }

    /** Returns true if field sl_supply is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_supply() {
      return this.sl_supply != null;
    }

    public void setSl_supplyIsSet(boolean value) {
      if (!value) {
        this.sl_supply = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SL_SUPPLY:
        if (value == null) {
          unsetSl_supply();
        } else {
          setSl_supply((com.tbims.rpc.entity.SL_SUPPLY)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SL_SUPPLY:
        return getSl_supply();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SL_SUPPLY:
        return isSetSl_supply();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof supplyTicket_args)
        return this.equals((supplyTicket_args)that);
      return false;
    }

    public boolean equals(supplyTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sl_supply = true && this.isSetSl_supply();
      boolean that_present_sl_supply = true && that.isSetSl_supply();
      if (this_present_sl_supply || that_present_sl_supply) {
        if (!(this_present_sl_supply && that_present_sl_supply))
          return false;
        if (!this.sl_supply.equals(that.sl_supply))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_supply()) ? 131071 : 524287);
      if (isSetSl_supply())
        hashCode = hashCode * 8191 + sl_supply.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(supplyTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_supply()).compareTo(other.isSetSl_supply());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_supply()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_supply, other.sl_supply);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("supplyTicket_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_supply:");
      if (this.sl_supply == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_supply);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
      if (sl_supply != null) {
        sl_supply.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supplyTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supplyTicket_argsStandardScheme getScheme() {
        return new supplyTicket_argsStandardScheme();
      }
    }

    private static class supplyTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<supplyTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supplyTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SL_SUPPLY
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.sl_supply = new com.tbims.rpc.entity.SL_SUPPLY();
                struct.sl_supply.read(iprot);
                struct.setSl_supplyIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supplyTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_supply != null) {
          oprot.writeFieldBegin(SL_SUPPLY_FIELD_DESC);
          struct.sl_supply.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supplyTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supplyTicket_argsTupleScheme getScheme() {
        return new supplyTicket_argsTupleScheme();
      }
    }

    private static class supplyTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<supplyTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supplyTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSl_supply()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSl_supply()) {
          struct.sl_supply.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supplyTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.sl_supply = new com.tbims.rpc.entity.SL_SUPPLY();
          struct.sl_supply.read(iprot);
          struct.setSl_supplyIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class supplyTicket_result implements org.apache.thrift.TBase<supplyTicket_result, supplyTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<supplyTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("supplyTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new supplyTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new supplyTicket_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(supplyTicket_result.class, metaDataMap);
    }

    public supplyTicket_result() {
    }

    public supplyTicket_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public supplyTicket_result(supplyTicket_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public supplyTicket_result deepCopy() {
      return new supplyTicket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public supplyTicket_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public supplyTicket_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof supplyTicket_result)
        return this.equals((supplyTicket_result)that);
      return false;
    }

    public boolean equals(supplyTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(supplyTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("supplyTicket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class supplyTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supplyTicket_resultStandardScheme getScheme() {
        return new supplyTicket_resultStandardScheme();
      }
    }

    private static class supplyTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<supplyTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, supplyTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, supplyTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class supplyTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public supplyTicket_resultTupleScheme getScheme() {
        return new supplyTicket_resultTupleScheme();
      }
    }

    private static class supplyTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<supplyTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, supplyTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, supplyTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uselessTicket_args implements org.apache.thrift.TBase<uselessTicket_args, uselessTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<uselessTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uselessTicket_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USELESS_TICKET_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("useless_ticket_infos", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uselessTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uselessTicket_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 废票信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 废票信息
       */
      USELESS_TICKET_INFOS((short)2, "useless_ticket_infos");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // USELESS_TICKET_INFOS
            return USELESS_TICKET_INFOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.USELESS_TICKET_INFOS, new org.apache.thrift.meta_data.FieldMetaData("useless_ticket_infos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_USELESS_TICKET_INFO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uselessTicket_args.class, metaDataMap);
    }

    public uselessTicket_args() {
    }

    public uselessTicket_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos)
    {
      this();
      this.auth = auth;
      this.useless_ticket_infos = useless_ticket_infos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uselessTicket_args(uselessTicket_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetUseless_ticket_infos()) {
        java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> __this__useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO>(other.useless_ticket_infos.size());
        for (com.tbims.rpc.entity.SL_USELESS_TICKET_INFO other_element : other.useless_ticket_infos) {
          __this__useless_ticket_infos.add(new com.tbims.rpc.entity.SL_USELESS_TICKET_INFO(other_element));
        }
        this.useless_ticket_infos = __this__useless_ticket_infos;
      }
    }

    public uselessTicket_args deepCopy() {
      return new uselessTicket_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.useless_ticket_infos = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public uselessTicket_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getUseless_ticket_infosSize() {
      return (this.useless_ticket_infos == null) ? 0 : this.useless_ticket_infos.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> getUseless_ticket_infosIterator() {
      return (this.useless_ticket_infos == null) ? null : this.useless_ticket_infos.iterator();
    }

    public void addToUseless_ticket_infos(com.tbims.rpc.entity.SL_USELESS_TICKET_INFO elem) {
      if (this.useless_ticket_infos == null) {
        this.useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO>();
      }
      this.useless_ticket_infos.add(elem);
    }

    /**
     * 废票信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> getUseless_ticket_infos() {
      return this.useless_ticket_infos;
    }

    /**
     * 废票信息
     */
    public uselessTicket_args setUseless_ticket_infos(java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO> useless_ticket_infos) {
      this.useless_ticket_infos = useless_ticket_infos;
      return this;
    }

    public void unsetUseless_ticket_infos() {
      this.useless_ticket_infos = null;
    }

    /** Returns true if field useless_ticket_infos is set (has been assigned a value) and false otherwise */
    public boolean isSetUseless_ticket_infos() {
      return this.useless_ticket_infos != null;
    }

    public void setUseless_ticket_infosIsSet(boolean value) {
      if (!value) {
        this.useless_ticket_infos = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case USELESS_TICKET_INFOS:
        if (value == null) {
          unsetUseless_ticket_infos();
        } else {
          setUseless_ticket_infos((java.util.List<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case USELESS_TICKET_INFOS:
        return getUseless_ticket_infos();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case USELESS_TICKET_INFOS:
        return isSetUseless_ticket_infos();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uselessTicket_args)
        return this.equals((uselessTicket_args)that);
      return false;
    }

    public boolean equals(uselessTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_useless_ticket_infos = true && this.isSetUseless_ticket_infos();
      boolean that_present_useless_ticket_infos = true && that.isSetUseless_ticket_infos();
      if (this_present_useless_ticket_infos || that_present_useless_ticket_infos) {
        if (!(this_present_useless_ticket_infos && that_present_useless_ticket_infos))
          return false;
        if (!this.useless_ticket_infos.equals(that.useless_ticket_infos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetUseless_ticket_infos()) ? 131071 : 524287);
      if (isSetUseless_ticket_infos())
        hashCode = hashCode * 8191 + useless_ticket_infos.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uselessTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUseless_ticket_infos()).compareTo(other.isSetUseless_ticket_infos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUseless_ticket_infos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useless_ticket_infos, other.useless_ticket_infos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uselessTicket_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("useless_ticket_infos:");
      if (this.useless_ticket_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.useless_ticket_infos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uselessTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uselessTicket_argsStandardScheme getScheme() {
        return new uselessTicket_argsStandardScheme();
      }
    }

    private static class uselessTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uselessTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USELESS_TICKET_INFOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list48 = iprot.readListBegin();
                  struct.useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO>(_list48.size);
                  com.tbims.rpc.entity.SL_USELESS_TICKET_INFO _elem49;
                  for (int _i50 = 0; _i50 < _list48.size; ++_i50)
                  {
                    _elem49 = new com.tbims.rpc.entity.SL_USELESS_TICKET_INFO();
                    _elem49.read(iprot);
                    struct.useless_ticket_infos.add(_elem49);
                  }
                  iprot.readListEnd();
                }
                struct.setUseless_ticket_infosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uselessTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.useless_ticket_infos != null) {
          oprot.writeFieldBegin(USELESS_TICKET_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.useless_ticket_infos.size()));
            for (com.tbims.rpc.entity.SL_USELESS_TICKET_INFO _iter51 : struct.useless_ticket_infos)
            {
              _iter51.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uselessTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uselessTicket_argsTupleScheme getScheme() {
        return new uselessTicket_argsTupleScheme();
      }
    }

    private static class uselessTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uselessTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetUseless_ticket_infos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetUseless_ticket_infos()) {
          {
            oprot.writeI32(struct.useless_ticket_infos.size());
            for (com.tbims.rpc.entity.SL_USELESS_TICKET_INFO _iter52 : struct.useless_ticket_infos)
            {
              _iter52.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list53 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.SL_USELESS_TICKET_INFO>(_list53.size);
            com.tbims.rpc.entity.SL_USELESS_TICKET_INFO _elem54;
            for (int _i55 = 0; _i55 < _list53.size; ++_i55)
            {
              _elem54 = new com.tbims.rpc.entity.SL_USELESS_TICKET_INFO();
              _elem54.read(iprot);
              struct.useless_ticket_infos.add(_elem54);
            }
          }
          struct.setUseless_ticket_infosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uselessTicket_result implements org.apache.thrift.TBase<uselessTicket_result, uselessTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<uselessTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uselessTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uselessTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uselessTicket_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uselessTicket_result.class, metaDataMap);
    }

    public uselessTicket_result() {
    }

    public uselessTicket_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uselessTicket_result(uselessTicket_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public uselessTicket_result deepCopy() {
      return new uselessTicket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public uselessTicket_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public uselessTicket_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uselessTicket_result)
        return this.equals((uselessTicket_result)that);
      return false;
    }

    public boolean equals(uselessTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uselessTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uselessTicket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uselessTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uselessTicket_resultStandardScheme getScheme() {
        return new uselessTicket_resultStandardScheme();
      }
    }

    private static class uselessTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uselessTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uselessTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uselessTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uselessTicket_resultTupleScheme getScheme() {
        return new uselessTicket_resultTupleScheme();
      }
    }

    private static class uselessTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uselessTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cancelUselessTicket_args implements org.apache.thrift.TBase<cancelUselessTicket_args, cancelUselessTicket_args._Fields>, java.io.Serializable, Cloneable, Comparable<cancelUselessTicket_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelUselessTicket_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField USELESS_TICKET_INFOS_FIELD_DESC = new org.apache.thrift.protocol.TField("useless_ticket_infos", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelUselessTicket_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelUselessTicket_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 废票信息
     */
    public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 废票信息
       */
      USELESS_TICKET_INFOS((short)2, "useless_ticket_infos");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // USELESS_TICKET_INFOS
            return USELESS_TICKET_INFOS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.USELESS_TICKET_INFOS, new org.apache.thrift.meta_data.FieldMetaData("useless_ticket_infos", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.USELESS_TICKET_DETAIL.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelUselessTicket_args.class, metaDataMap);
    }

    public cancelUselessTicket_args() {
    }

    public cancelUselessTicket_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos)
    {
      this();
      this.auth = auth;
      this.useless_ticket_infos = useless_ticket_infos;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelUselessTicket_args(cancelUselessTicket_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetUseless_ticket_infos()) {
        java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> __this__useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>(other.useless_ticket_infos.size());
        for (com.tbims.rpc.entity.USELESS_TICKET_DETAIL other_element : other.useless_ticket_infos) {
          __this__useless_ticket_infos.add(new com.tbims.rpc.entity.USELESS_TICKET_DETAIL(other_element));
        }
        this.useless_ticket_infos = __this__useless_ticket_infos;
      }
    }

    public cancelUselessTicket_args deepCopy() {
      return new cancelUselessTicket_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.useless_ticket_infos = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public cancelUselessTicket_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getUseless_ticket_infosSize() {
      return (this.useless_ticket_infos == null) ? 0 : this.useless_ticket_infos.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> getUseless_ticket_infosIterator() {
      return (this.useless_ticket_infos == null) ? null : this.useless_ticket_infos.iterator();
    }

    public void addToUseless_ticket_infos(com.tbims.rpc.entity.USELESS_TICKET_DETAIL elem) {
      if (this.useless_ticket_infos == null) {
        this.useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>();
      }
      this.useless_ticket_infos.add(elem);
    }

    /**
     * 废票信息
     */
    public java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> getUseless_ticket_infos() {
      return this.useless_ticket_infos;
    }

    /**
     * 废票信息
     */
    public cancelUselessTicket_args setUseless_ticket_infos(java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL> useless_ticket_infos) {
      this.useless_ticket_infos = useless_ticket_infos;
      return this;
    }

    public void unsetUseless_ticket_infos() {
      this.useless_ticket_infos = null;
    }

    /** Returns true if field useless_ticket_infos is set (has been assigned a value) and false otherwise */
    public boolean isSetUseless_ticket_infos() {
      return this.useless_ticket_infos != null;
    }

    public void setUseless_ticket_infosIsSet(boolean value) {
      if (!value) {
        this.useless_ticket_infos = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case USELESS_TICKET_INFOS:
        if (value == null) {
          unsetUseless_ticket_infos();
        } else {
          setUseless_ticket_infos((java.util.List<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case USELESS_TICKET_INFOS:
        return getUseless_ticket_infos();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case USELESS_TICKET_INFOS:
        return isSetUseless_ticket_infos();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelUselessTicket_args)
        return this.equals((cancelUselessTicket_args)that);
      return false;
    }

    public boolean equals(cancelUselessTicket_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_useless_ticket_infos = true && this.isSetUseless_ticket_infos();
      boolean that_present_useless_ticket_infos = true && that.isSetUseless_ticket_infos();
      if (this_present_useless_ticket_infos || that_present_useless_ticket_infos) {
        if (!(this_present_useless_ticket_infos && that_present_useless_ticket_infos))
          return false;
        if (!this.useless_ticket_infos.equals(that.useless_ticket_infos))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetUseless_ticket_infos()) ? 131071 : 524287);
      if (isSetUseless_ticket_infos())
        hashCode = hashCode * 8191 + useless_ticket_infos.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cancelUselessTicket_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUseless_ticket_infos()).compareTo(other.isSetUseless_ticket_infos());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUseless_ticket_infos()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.useless_ticket_infos, other.useless_ticket_infos);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelUselessTicket_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("useless_ticket_infos:");
      if (this.useless_ticket_infos == null) {
        sb.append("null");
      } else {
        sb.append(this.useless_ticket_infos);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelUselessTicket_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelUselessTicket_argsStandardScheme getScheme() {
        return new cancelUselessTicket_argsStandardScheme();
      }
    }

    private static class cancelUselessTicket_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelUselessTicket_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelUselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USELESS_TICKET_INFOS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list56 = iprot.readListBegin();
                  struct.useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>(_list56.size);
                  com.tbims.rpc.entity.USELESS_TICKET_DETAIL _elem57;
                  for (int _i58 = 0; _i58 < _list56.size; ++_i58)
                  {
                    _elem57 = new com.tbims.rpc.entity.USELESS_TICKET_DETAIL();
                    _elem57.read(iprot);
                    struct.useless_ticket_infos.add(_elem57);
                  }
                  iprot.readListEnd();
                }
                struct.setUseless_ticket_infosIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelUselessTicket_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.useless_ticket_infos != null) {
          oprot.writeFieldBegin(USELESS_TICKET_INFOS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.useless_ticket_infos.size()));
            for (com.tbims.rpc.entity.USELESS_TICKET_DETAIL _iter59 : struct.useless_ticket_infos)
            {
              _iter59.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelUselessTicket_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelUselessTicket_argsTupleScheme getScheme() {
        return new cancelUselessTicket_argsTupleScheme();
      }
    }

    private static class cancelUselessTicket_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelUselessTicket_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelUselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetUseless_ticket_infos()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetUseless_ticket_infos()) {
          {
            oprot.writeI32(struct.useless_ticket_infos.size());
            for (com.tbims.rpc.entity.USELESS_TICKET_DETAIL _iter60 : struct.useless_ticket_infos)
            {
              _iter60.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelUselessTicket_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.useless_ticket_infos = new java.util.ArrayList<com.tbims.rpc.entity.USELESS_TICKET_DETAIL>(_list61.size);
            com.tbims.rpc.entity.USELESS_TICKET_DETAIL _elem62;
            for (int _i63 = 0; _i63 < _list61.size; ++_i63)
            {
              _elem62 = new com.tbims.rpc.entity.USELESS_TICKET_DETAIL();
              _elem62.read(iprot);
              struct.useless_ticket_infos.add(_elem62);
            }
          }
          struct.setUseless_ticket_infosIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class cancelUselessTicket_result implements org.apache.thrift.TBase<cancelUselessTicket_result, cancelUselessTicket_result._Fields>, java.io.Serializable, Cloneable, Comparable<cancelUselessTicket_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("cancelUselessTicket_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new cancelUselessTicket_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new cancelUselessTicket_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(cancelUselessTicket_result.class, metaDataMap);
    }

    public cancelUselessTicket_result() {
    }

    public cancelUselessTicket_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public cancelUselessTicket_result(cancelUselessTicket_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public cancelUselessTicket_result deepCopy() {
      return new cancelUselessTicket_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public cancelUselessTicket_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public cancelUselessTicket_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof cancelUselessTicket_result)
        return this.equals((cancelUselessTicket_result)that);
      return false;
    }

    public boolean equals(cancelUselessTicket_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(cancelUselessTicket_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("cancelUselessTicket_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class cancelUselessTicket_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelUselessTicket_resultStandardScheme getScheme() {
        return new cancelUselessTicket_resultStandardScheme();
      }
    }

    private static class cancelUselessTicket_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<cancelUselessTicket_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, cancelUselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, cancelUselessTicket_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class cancelUselessTicket_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public cancelUselessTicket_resultTupleScheme getScheme() {
        return new cancelUselessTicket_resultTupleScheme();
      }
    }

    private static class cancelUselessTicket_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<cancelUselessTicket_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, cancelUselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, cancelUselessTicket_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkInfo_args implements org.apache.thrift.TBase<checkInfo_args, checkInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkInfo_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField SL_CHECKS_FIELD_DESC = new org.apache.thrift.protocol.TField("sl_checks", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkInfo_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 检票信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 检票信息
       */
      SL_CHECKS((short)2, "sl_checks");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // SL_CHECKS
            return SL_CHECKS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.SL_CHECKS, new org.apache.thrift.meta_data.FieldMetaData("sl_checks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_CHECK.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkInfo_args.class, metaDataMap);
    }

    public checkInfo_args() {
    }

    public checkInfo_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks)
    {
      this();
      this.auth = auth;
      this.sl_checks = sl_checks;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkInfo_args(checkInfo_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetSl_checks()) {
        java.util.List<com.tbims.rpc.entity.SL_CHECK> __this__sl_checks = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>(other.sl_checks.size());
        for (com.tbims.rpc.entity.SL_CHECK other_element : other.sl_checks) {
          __this__sl_checks.add(new com.tbims.rpc.entity.SL_CHECK(other_element));
        }
        this.sl_checks = __this__sl_checks;
      }
    }

    public checkInfo_args deepCopy() {
      return new checkInfo_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.sl_checks = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public checkInfo_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    public int getSl_checksSize() {
      return (this.sl_checks == null) ? 0 : this.sl_checks.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_CHECK> getSl_checksIterator() {
      return (this.sl_checks == null) ? null : this.sl_checks.iterator();
    }

    public void addToSl_checks(com.tbims.rpc.entity.SL_CHECK elem) {
      if (this.sl_checks == null) {
        this.sl_checks = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>();
      }
      this.sl_checks.add(elem);
    }

    /**
     * 检票信息
     */
    public java.util.List<com.tbims.rpc.entity.SL_CHECK> getSl_checks() {
      return this.sl_checks;
    }

    /**
     * 检票信息
     */
    public checkInfo_args setSl_checks(java.util.List<com.tbims.rpc.entity.SL_CHECK> sl_checks) {
      this.sl_checks = sl_checks;
      return this;
    }

    public void unsetSl_checks() {
      this.sl_checks = null;
    }

    /** Returns true if field sl_checks is set (has been assigned a value) and false otherwise */
    public boolean isSetSl_checks() {
      return this.sl_checks != null;
    }

    public void setSl_checksIsSet(boolean value) {
      if (!value) {
        this.sl_checks = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case SL_CHECKS:
        if (value == null) {
          unsetSl_checks();
        } else {
          setSl_checks((java.util.List<com.tbims.rpc.entity.SL_CHECK>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case SL_CHECKS:
        return getSl_checks();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case SL_CHECKS:
        return isSetSl_checks();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkInfo_args)
        return this.equals((checkInfo_args)that);
      return false;
    }

    public boolean equals(checkInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_sl_checks = true && this.isSetSl_checks();
      boolean that_present_sl_checks = true && that.isSetSl_checks();
      if (this_present_sl_checks || that_present_sl_checks) {
        if (!(this_present_sl_checks && that_present_sl_checks))
          return false;
        if (!this.sl_checks.equals(that.sl_checks))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetSl_checks()) ? 131071 : 524287);
      if (isSetSl_checks())
        hashCode = hashCode * 8191 + sl_checks.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSl_checks()).compareTo(other.isSetSl_checks());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSl_checks()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sl_checks, other.sl_checks);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkInfo_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sl_checks:");
      if (this.sl_checks == null) {
        sb.append("null");
      } else {
        sb.append(this.sl_checks);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfo_argsStandardScheme getScheme() {
        return new checkInfo_argsStandardScheme();
      }
    }

    private static class checkInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // SL_CHECKS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list64 = iprot.readListBegin();
                  struct.sl_checks = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>(_list64.size);
                  com.tbims.rpc.entity.SL_CHECK _elem65;
                  for (int _i66 = 0; _i66 < _list64.size; ++_i66)
                  {
                    _elem65 = new com.tbims.rpc.entity.SL_CHECK();
                    _elem65.read(iprot);
                    struct.sl_checks.add(_elem65);
                  }
                  iprot.readListEnd();
                }
                struct.setSl_checksIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.sl_checks != null) {
          oprot.writeFieldBegin(SL_CHECKS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.sl_checks.size()));
            for (com.tbims.rpc.entity.SL_CHECK _iter67 : struct.sl_checks)
            {
              _iter67.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfo_argsTupleScheme getScheme() {
        return new checkInfo_argsTupleScheme();
      }
    }

    private static class checkInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetSl_checks()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetSl_checks()) {
          {
            oprot.writeI32(struct.sl_checks.size());
            for (com.tbims.rpc.entity.SL_CHECK _iter68 : struct.sl_checks)
            {
              _iter68.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list69 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.sl_checks = new java.util.ArrayList<com.tbims.rpc.entity.SL_CHECK>(_list69.size);
            com.tbims.rpc.entity.SL_CHECK _elem70;
            for (int _i71 = 0; _i71 < _list69.size; ++_i71)
            {
              _elem70 = new com.tbims.rpc.entity.SL_CHECK();
              _elem70.read(iprot);
              struct.sl_checks.add(_elem70);
            }
          }
          struct.setSl_checksIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkInfo_result implements org.apache.thrift.TBase<checkInfo_result, checkInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkInfo_resultTupleSchemeFactory();

    public boolean success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkInfo_result.class, metaDataMap);
    }

    public checkInfo_result() {
    }

    public checkInfo_result(
      boolean success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkInfo_result(checkInfo_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public checkInfo_result deepCopy() {
      return new checkInfo_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.e = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public checkInfo_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public checkInfo_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Boolean)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return isSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkInfo_result)
        return this.equals((checkInfo_result)that);
      return false;
    }

    public boolean equals(checkInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((success) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkInfo_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfo_resultStandardScheme getScheme() {
        return new checkInfo_resultStandardScheme();
      }
    }

    private static class checkInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkInfo_resultTupleScheme getScheme() {
        return new checkInfo_resultTupleScheme();
      }
    }

    private static class checkInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkTicketOnline_args implements org.apache.thrift.TBase<checkTicketOnline_args, checkTicketOnline_args._Fields>, java.io.Serializable, Cloneable, Comparable<checkTicketOnline_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkTicketOnline_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CHECK_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("checkId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField TICKET_CLASS_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketClass", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField TICKET_UID_FIELD_DESC = new org.apache.thrift.protocol.TField("ticketUid", org.apache.thrift.protocol.TType.STRING, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkTicketOnline_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkTicketOnline_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 检票表id
     */
    public java.lang.String checkId; // required
    /**
     * 门票类型(2-身份证、3-二维码)
     */
    public java.lang.String ticketClass; // required
    /**
     * 票据唯一号
     */
    public java.lang.String ticketUid; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 检票表id
       */
      CHECK_ID((short)2, "checkId"),
      /**
       * 门票类型(2-身份证、3-二维码)
       */
      TICKET_CLASS((short)3, "ticketClass"),
      /**
       * 票据唯一号
       */
      TICKET_UID((short)4, "ticketUid");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // CHECK_ID
            return CHECK_ID;
          case 3: // TICKET_CLASS
            return TICKET_CLASS;
          case 4: // TICKET_UID
            return TICKET_UID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.CHECK_ID, new org.apache.thrift.meta_data.FieldMetaData("checkId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TICKET_CLASS, new org.apache.thrift.meta_data.FieldMetaData("ticketClass", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.TICKET_UID, new org.apache.thrift.meta_data.FieldMetaData("ticketUid", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkTicketOnline_args.class, metaDataMap);
    }

    public checkTicketOnline_args() {
    }

    public checkTicketOnline_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      java.lang.String checkId,
      java.lang.String ticketClass,
      java.lang.String ticketUid)
    {
      this();
      this.auth = auth;
      this.checkId = checkId;
      this.ticketClass = ticketClass;
      this.ticketUid = ticketUid;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkTicketOnline_args(checkTicketOnline_args other) {
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      if (other.isSetCheckId()) {
        this.checkId = other.checkId;
      }
      if (other.isSetTicketClass()) {
        this.ticketClass = other.ticketClass;
      }
      if (other.isSetTicketUid()) {
        this.ticketUid = other.ticketUid;
      }
    }

    public checkTicketOnline_args deepCopy() {
      return new checkTicketOnline_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      this.checkId = null;
      this.ticketClass = null;
      this.ticketUid = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public checkTicketOnline_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 检票表id
     */
    public java.lang.String getCheckId() {
      return this.checkId;
    }

    /**
     * 检票表id
     */
    public checkTicketOnline_args setCheckId(java.lang.String checkId) {
      this.checkId = checkId;
      return this;
    }

    public void unsetCheckId() {
      this.checkId = null;
    }

    /** Returns true if field checkId is set (has been assigned a value) and false otherwise */
    public boolean isSetCheckId() {
      return this.checkId != null;
    }

    public void setCheckIdIsSet(boolean value) {
      if (!value) {
        this.checkId = null;
      }
    }

    /**
     * 门票类型(2-身份证、3-二维码)
     */
    public java.lang.String getTicketClass() {
      return this.ticketClass;
    }

    /**
     * 门票类型(2-身份证、3-二维码)
     */
    public checkTicketOnline_args setTicketClass(java.lang.String ticketClass) {
      this.ticketClass = ticketClass;
      return this;
    }

    public void unsetTicketClass() {
      this.ticketClass = null;
    }

    /** Returns true if field ticketClass is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketClass() {
      return this.ticketClass != null;
    }

    public void setTicketClassIsSet(boolean value) {
      if (!value) {
        this.ticketClass = null;
      }
    }

    /**
     * 票据唯一号
     */
    public java.lang.String getTicketUid() {
      return this.ticketUid;
    }

    /**
     * 票据唯一号
     */
    public checkTicketOnline_args setTicketUid(java.lang.String ticketUid) {
      this.ticketUid = ticketUid;
      return this;
    }

    public void unsetTicketUid() {
      this.ticketUid = null;
    }

    /** Returns true if field ticketUid is set (has been assigned a value) and false otherwise */
    public boolean isSetTicketUid() {
      return this.ticketUid != null;
    }

    public void setTicketUidIsSet(boolean value) {
      if (!value) {
        this.ticketUid = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case CHECK_ID:
        if (value == null) {
          unsetCheckId();
        } else {
          setCheckId((java.lang.String)value);
        }
        break;

      case TICKET_CLASS:
        if (value == null) {
          unsetTicketClass();
        } else {
          setTicketClass((java.lang.String)value);
        }
        break;

      case TICKET_UID:
        if (value == null) {
          unsetTicketUid();
        } else {
          setTicketUid((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case CHECK_ID:
        return getCheckId();

      case TICKET_CLASS:
        return getTicketClass();

      case TICKET_UID:
        return getTicketUid();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case CHECK_ID:
        return isSetCheckId();
      case TICKET_CLASS:
        return isSetTicketClass();
      case TICKET_UID:
        return isSetTicketUid();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkTicketOnline_args)
        return this.equals((checkTicketOnline_args)that);
      return false;
    }

    public boolean equals(checkTicketOnline_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_checkId = true && this.isSetCheckId();
      boolean that_present_checkId = true && that.isSetCheckId();
      if (this_present_checkId || that_present_checkId) {
        if (!(this_present_checkId && that_present_checkId))
          return false;
        if (!this.checkId.equals(that.checkId))
          return false;
      }

      boolean this_present_ticketClass = true && this.isSetTicketClass();
      boolean that_present_ticketClass = true && that.isSetTicketClass();
      if (this_present_ticketClass || that_present_ticketClass) {
        if (!(this_present_ticketClass && that_present_ticketClass))
          return false;
        if (!this.ticketClass.equals(that.ticketClass))
          return false;
      }

      boolean this_present_ticketUid = true && this.isSetTicketUid();
      boolean that_present_ticketUid = true && that.isSetTicketUid();
      if (this_present_ticketUid || that_present_ticketUid) {
        if (!(this_present_ticketUid && that_present_ticketUid))
          return false;
        if (!this.ticketUid.equals(that.ticketUid))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + ((isSetCheckId()) ? 131071 : 524287);
      if (isSetCheckId())
        hashCode = hashCode * 8191 + checkId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTicketClass()) ? 131071 : 524287);
      if (isSetTicketClass())
        hashCode = hashCode * 8191 + ticketClass.hashCode();

      hashCode = hashCode * 8191 + ((isSetTicketUid()) ? 131071 : 524287);
      if (isSetTicketUid())
        hashCode = hashCode * 8191 + ticketUid.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkTicketOnline_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCheckId()).compareTo(other.isSetCheckId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCheckId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.checkId, other.checkId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTicketClass()).compareTo(other.isSetTicketClass());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketClass()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketClass, other.ticketClass);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTicketUid()).compareTo(other.isSetTicketUid());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTicketUid()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ticketUid, other.ticketUid);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkTicketOnline_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("checkId:");
      if (this.checkId == null) {
        sb.append("null");
      } else {
        sb.append(this.checkId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ticketClass:");
      if (this.ticketClass == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketClass);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("ticketUid:");
      if (this.ticketUid == null) {
        sb.append("null");
      } else {
        sb.append(this.ticketUid);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkTicketOnline_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkTicketOnline_argsStandardScheme getScheme() {
        return new checkTicketOnline_argsStandardScheme();
      }
    }

    private static class checkTicketOnline_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkTicketOnline_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkTicketOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHECK_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.checkId = iprot.readString();
                struct.setCheckIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TICKET_CLASS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ticketClass = iprot.readString();
                struct.setTicketClassIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // TICKET_UID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.ticketUid = iprot.readString();
                struct.setTicketUidIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkTicketOnline_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.checkId != null) {
          oprot.writeFieldBegin(CHECK_ID_FIELD_DESC);
          oprot.writeString(struct.checkId);
          oprot.writeFieldEnd();
        }
        if (struct.ticketClass != null) {
          oprot.writeFieldBegin(TICKET_CLASS_FIELD_DESC);
          oprot.writeString(struct.ticketClass);
          oprot.writeFieldEnd();
        }
        if (struct.ticketUid != null) {
          oprot.writeFieldBegin(TICKET_UID_FIELD_DESC);
          oprot.writeString(struct.ticketUid);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkTicketOnline_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkTicketOnline_argsTupleScheme getScheme() {
        return new checkTicketOnline_argsTupleScheme();
      }
    }

    private static class checkTicketOnline_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkTicketOnline_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkTicketOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetCheckId()) {
          optionals.set(1);
        }
        if (struct.isSetTicketClass()) {
          optionals.set(2);
        }
        if (struct.isSetTicketUid()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetCheckId()) {
          oprot.writeString(struct.checkId);
        }
        if (struct.isSetTicketClass()) {
          oprot.writeString(struct.ticketClass);
        }
        if (struct.isSetTicketUid()) {
          oprot.writeString(struct.ticketUid);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkTicketOnline_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.checkId = iprot.readString();
          struct.setCheckIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.ticketClass = iprot.readString();
          struct.setTicketClassIsSet(true);
        }
        if (incoming.get(3)) {
          struct.ticketUid = iprot.readString();
          struct.setTicketUidIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class checkTicketOnline_result implements org.apache.thrift.TBase<checkTicketOnline_result, checkTicketOnline_result._Fields>, java.io.Serializable, Cloneable, Comparable<checkTicketOnline_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("checkTicketOnline_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I32, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new checkTicketOnline_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new checkTicketOnline_resultTupleSchemeFactory();

    public int success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(checkTicketOnline_result.class, metaDataMap);
    }

    public checkTicketOnline_result() {
    }

    public checkTicketOnline_result(
      int success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public checkTicketOnline_result(checkTicketOnline_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public checkTicketOnline_result deepCopy() {
      return new checkTicketOnline_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
      this.e = null;
    }

    public int getSuccess() {
      return this.success;
    }

    public checkTicketOnline_result setSuccess(int success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public checkTicketOnline_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.Integer)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof checkTicketOnline_result)
        return this.equals((checkTicketOnline_result)that);
      return false;
    }

    public boolean equals(checkTicketOnline_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + success;

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(checkTicketOnline_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("checkTicketOnline_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class checkTicketOnline_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkTicketOnline_resultStandardScheme getScheme() {
        return new checkTicketOnline_resultStandardScheme();
      }
    }

    private static class checkTicketOnline_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<checkTicketOnline_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, checkTicketOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.success = iprot.readI32();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, checkTicketOnline_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI32(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class checkTicketOnline_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public checkTicketOnline_resultTupleScheme getScheme() {
        return new checkTicketOnline_resultTupleScheme();
      }
    }

    private static class checkTicketOnline_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<checkTicketOnline_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, checkTicketOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeI32(struct.success);
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, checkTicketOnline_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readI32();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptSaleDataUser_args implements org.apache.thrift.TBase<rptSaleDataUser_args, rptSaleDataUser_args._Fields>, java.io.Serializable, Cloneable, Comparable<rptSaleDataUser_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptSaleDataUser_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RPT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rpt_date", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptSaleDataUser_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptSaleDataUser_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 统计日期
     */
    public long rpt_date; // required
    /**
     * 网点编号
     */
    public long outlet_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 统计日期
       */
      RPT_DATE((short)2, "rpt_date"),
      /**
       * 网点编号
       */
      OUTLET_ID((short)3, "outlet_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // RPT_DATE
            return RPT_DATE;
          case 3: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RPT_DATE_ISSET_ID = 0;
    private static final int __OUTLET_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.RPT_DATE, new org.apache.thrift.meta_data.FieldMetaData("rpt_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptSaleDataUser_args.class, metaDataMap);
    }

    public rptSaleDataUser_args() {
    }

    public rptSaleDataUser_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long rpt_date,
      long outlet_id)
    {
      this();
      this.auth = auth;
      this.rpt_date = rpt_date;
      setRpt_dateIsSet(true);
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptSaleDataUser_args(rptSaleDataUser_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.rpt_date = other.rpt_date;
      this.outlet_id = other.outlet_id;
    }

    public rptSaleDataUser_args deepCopy() {
      return new rptSaleDataUser_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setRpt_dateIsSet(false);
      this.rpt_date = 0;
      setOutlet_idIsSet(false);
      this.outlet_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public rptSaleDataUser_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 统计日期
     */
    public long getRpt_date() {
      return this.rpt_date;
    }

    /**
     * 统计日期
     */
    public rptSaleDataUser_args setRpt_date(long rpt_date) {
      this.rpt_date = rpt_date;
      setRpt_dateIsSet(true);
      return this;
    }

    public void unsetRpt_date() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RPT_DATE_ISSET_ID);
    }

    /** Returns true if field rpt_date is set (has been assigned a value) and false otherwise */
    public boolean isSetRpt_date() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RPT_DATE_ISSET_ID);
    }

    public void setRpt_dateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RPT_DATE_ISSET_ID, value);
    }

    /**
     * 网点编号
     */
    public long getOutlet_id() {
      return this.outlet_id;
    }

    /**
     * 网点编号
     */
    public rptSaleDataUser_args setOutlet_id(long outlet_id) {
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
      return this;
    }

    public void unsetOutlet_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlet_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    public void setOutlet_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case RPT_DATE:
        if (value == null) {
          unsetRpt_date();
        } else {
          setRpt_date((java.lang.Long)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutlet_id();
        } else {
          setOutlet_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case RPT_DATE:
        return getRpt_date();

      case OUTLET_ID:
        return getOutlet_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case RPT_DATE:
        return isSetRpt_date();
      case OUTLET_ID:
        return isSetOutlet_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptSaleDataUser_args)
        return this.equals((rptSaleDataUser_args)that);
      return false;
    }

    public boolean equals(rptSaleDataUser_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_rpt_date = true;
      boolean that_present_rpt_date = true;
      if (this_present_rpt_date || that_present_rpt_date) {
        if (!(this_present_rpt_date && that_present_rpt_date))
          return false;
        if (this.rpt_date != that.rpt_date)
          return false;
      }

      boolean this_present_outlet_id = true;
      boolean that_present_outlet_id = true;
      if (this_present_outlet_id || that_present_outlet_id) {
        if (!(this_present_outlet_id && that_present_outlet_id))
          return false;
        if (this.outlet_id != that.outlet_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rpt_date);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outlet_id);

      return hashCode;
    }

    @Override
    public int compareTo(rptSaleDataUser_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRpt_date()).compareTo(other.isSetRpt_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRpt_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpt_date, other.rpt_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutlet_id()).compareTo(other.isSetOutlet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, other.outlet_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptSaleDataUser_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rpt_date:");
      sb.append(this.rpt_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptSaleDataUser_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataUser_argsStandardScheme getScheme() {
        return new rptSaleDataUser_argsStandardScheme();
      }
    }

    private static class rptSaleDataUser_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptSaleDataUser_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptSaleDataUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RPT_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rpt_date = iprot.readI64();
                struct.setRpt_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outlet_id = iprot.readI64();
                struct.setOutlet_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptSaleDataUser_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RPT_DATE_FIELD_DESC);
        oprot.writeI64(struct.rpt_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outlet_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptSaleDataUser_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataUser_argsTupleScheme getScheme() {
        return new rptSaleDataUser_argsTupleScheme();
      }
    }

    private static class rptSaleDataUser_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptSaleDataUser_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptSaleDataUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetRpt_date()) {
          optionals.set(1);
        }
        if (struct.isSetOutlet_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetRpt_date()) {
          oprot.writeI64(struct.rpt_date);
        }
        if (struct.isSetOutlet_id()) {
          oprot.writeI64(struct.outlet_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptSaleDataUser_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rpt_date = iprot.readI64();
          struct.setRpt_dateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outlet_id = iprot.readI64();
          struct.setOutlet_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptSaleDataUser_result implements org.apache.thrift.TBase<rptSaleDataUser_result, rptSaleDataUser_result._Fields>, java.io.Serializable, Cloneable, Comparable<rptSaleDataUser_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptSaleDataUser_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptSaleDataUser_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptSaleDataUser_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPT_SALE_DATA_USER.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptSaleDataUser_result.class, metaDataMap);
    }

    public rptSaleDataUser_result() {
    }

    public rptSaleDataUser_result(
      java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptSaleDataUser_result(rptSaleDataUser_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_USER>(other.success.size());
        for (com.tbims.rpc.entity.RPT_SALE_DATA_USER other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.RPT_SALE_DATA_USER(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public rptSaleDataUser_result deepCopy() {
      return new rptSaleDataUser_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.RPT_SALE_DATA_USER> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.RPT_SALE_DATA_USER elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_USER>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> getSuccess() {
      return this.success;
    }

    public rptSaleDataUser_result setSuccess(java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public rptSaleDataUser_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_USER>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptSaleDataUser_result)
        return this.equals((rptSaleDataUser_result)that);
      return false;
    }

    public boolean equals(rptSaleDataUser_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rptSaleDataUser_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptSaleDataUser_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptSaleDataUser_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataUser_resultStandardScheme getScheme() {
        return new rptSaleDataUser_resultStandardScheme();
      }
    }

    private static class rptSaleDataUser_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptSaleDataUser_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptSaleDataUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list72 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_USER>(_list72.size);
                  com.tbims.rpc.entity.RPT_SALE_DATA_USER _elem73;
                  for (int _i74 = 0; _i74 < _list72.size; ++_i74)
                  {
                    _elem73 = new com.tbims.rpc.entity.RPT_SALE_DATA_USER();
                    _elem73.read(iprot);
                    struct.success.add(_elem73);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptSaleDataUser_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.RPT_SALE_DATA_USER _iter75 : struct.success)
            {
              _iter75.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptSaleDataUser_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataUser_resultTupleScheme getScheme() {
        return new rptSaleDataUser_resultTupleScheme();
      }
    }

    private static class rptSaleDataUser_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptSaleDataUser_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptSaleDataUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.RPT_SALE_DATA_USER _iter76 : struct.success)
            {
              _iter76.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptSaleDataUser_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list77 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_USER>(_list77.size);
            com.tbims.rpc.entity.RPT_SALE_DATA_USER _elem78;
            for (int _i79 = 0; _i79 < _list77.size; ++_i79)
            {
              _elem78 = new com.tbims.rpc.entity.RPT_SALE_DATA_USER();
              _elem78.read(iprot);
              struct.success.add(_elem78);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptSaleDataOutlet_args implements org.apache.thrift.TBase<rptSaleDataOutlet_args, rptSaleDataOutlet_args._Fields>, java.io.Serializable, Cloneable, Comparable<rptSaleDataOutlet_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptSaleDataOutlet_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RPT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rpt_date", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptSaleDataOutlet_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptSaleDataOutlet_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 统计日期
     */
    public long rpt_date; // required
    /**
     * 网点编号
     */
    public long outlet_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 统计日期
       */
      RPT_DATE((short)2, "rpt_date"),
      /**
       * 网点编号
       */
      OUTLET_ID((short)3, "outlet_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // RPT_DATE
            return RPT_DATE;
          case 3: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RPT_DATE_ISSET_ID = 0;
    private static final int __OUTLET_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.RPT_DATE, new org.apache.thrift.meta_data.FieldMetaData("rpt_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptSaleDataOutlet_args.class, metaDataMap);
    }

    public rptSaleDataOutlet_args() {
    }

    public rptSaleDataOutlet_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long rpt_date,
      long outlet_id)
    {
      this();
      this.auth = auth;
      this.rpt_date = rpt_date;
      setRpt_dateIsSet(true);
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptSaleDataOutlet_args(rptSaleDataOutlet_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.rpt_date = other.rpt_date;
      this.outlet_id = other.outlet_id;
    }

    public rptSaleDataOutlet_args deepCopy() {
      return new rptSaleDataOutlet_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setRpt_dateIsSet(false);
      this.rpt_date = 0;
      setOutlet_idIsSet(false);
      this.outlet_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public rptSaleDataOutlet_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 统计日期
     */
    public long getRpt_date() {
      return this.rpt_date;
    }

    /**
     * 统计日期
     */
    public rptSaleDataOutlet_args setRpt_date(long rpt_date) {
      this.rpt_date = rpt_date;
      setRpt_dateIsSet(true);
      return this;
    }

    public void unsetRpt_date() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RPT_DATE_ISSET_ID);
    }

    /** Returns true if field rpt_date is set (has been assigned a value) and false otherwise */
    public boolean isSetRpt_date() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RPT_DATE_ISSET_ID);
    }

    public void setRpt_dateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RPT_DATE_ISSET_ID, value);
    }

    /**
     * 网点编号
     */
    public long getOutlet_id() {
      return this.outlet_id;
    }

    /**
     * 网点编号
     */
    public rptSaleDataOutlet_args setOutlet_id(long outlet_id) {
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
      return this;
    }

    public void unsetOutlet_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlet_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    public void setOutlet_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case RPT_DATE:
        if (value == null) {
          unsetRpt_date();
        } else {
          setRpt_date((java.lang.Long)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutlet_id();
        } else {
          setOutlet_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case RPT_DATE:
        return getRpt_date();

      case OUTLET_ID:
        return getOutlet_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case RPT_DATE:
        return isSetRpt_date();
      case OUTLET_ID:
        return isSetOutlet_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptSaleDataOutlet_args)
        return this.equals((rptSaleDataOutlet_args)that);
      return false;
    }

    public boolean equals(rptSaleDataOutlet_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_rpt_date = true;
      boolean that_present_rpt_date = true;
      if (this_present_rpt_date || that_present_rpt_date) {
        if (!(this_present_rpt_date && that_present_rpt_date))
          return false;
        if (this.rpt_date != that.rpt_date)
          return false;
      }

      boolean this_present_outlet_id = true;
      boolean that_present_outlet_id = true;
      if (this_present_outlet_id || that_present_outlet_id) {
        if (!(this_present_outlet_id && that_present_outlet_id))
          return false;
        if (this.outlet_id != that.outlet_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rpt_date);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outlet_id);

      return hashCode;
    }

    @Override
    public int compareTo(rptSaleDataOutlet_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRpt_date()).compareTo(other.isSetRpt_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRpt_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpt_date, other.rpt_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutlet_id()).compareTo(other.isSetOutlet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, other.outlet_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptSaleDataOutlet_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rpt_date:");
      sb.append(this.rpt_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptSaleDataOutlet_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataOutlet_argsStandardScheme getScheme() {
        return new rptSaleDataOutlet_argsStandardScheme();
      }
    }

    private static class rptSaleDataOutlet_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptSaleDataOutlet_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptSaleDataOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RPT_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rpt_date = iprot.readI64();
                struct.setRpt_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outlet_id = iprot.readI64();
                struct.setOutlet_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptSaleDataOutlet_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RPT_DATE_FIELD_DESC);
        oprot.writeI64(struct.rpt_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outlet_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptSaleDataOutlet_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataOutlet_argsTupleScheme getScheme() {
        return new rptSaleDataOutlet_argsTupleScheme();
      }
    }

    private static class rptSaleDataOutlet_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptSaleDataOutlet_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptSaleDataOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetRpt_date()) {
          optionals.set(1);
        }
        if (struct.isSetOutlet_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetRpt_date()) {
          oprot.writeI64(struct.rpt_date);
        }
        if (struct.isSetOutlet_id()) {
          oprot.writeI64(struct.outlet_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptSaleDataOutlet_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rpt_date = iprot.readI64();
          struct.setRpt_dateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outlet_id = iprot.readI64();
          struct.setOutlet_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptSaleDataOutlet_result implements org.apache.thrift.TBase<rptSaleDataOutlet_result, rptSaleDataOutlet_result._Fields>, java.io.Serializable, Cloneable, Comparable<rptSaleDataOutlet_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptSaleDataOutlet_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptSaleDataOutlet_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptSaleDataOutlet_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptSaleDataOutlet_result.class, metaDataMap);
    }

    public rptSaleDataOutlet_result() {
    }

    public rptSaleDataOutlet_result(
      java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptSaleDataOutlet_result(rptSaleDataOutlet_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>(other.success.size());
        for (com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public rptSaleDataOutlet_result deepCopy() {
      return new rptSaleDataOutlet_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> getSuccess() {
      return this.success;
    }

    public rptSaleDataOutlet_result setSuccess(java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public rptSaleDataOutlet_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptSaleDataOutlet_result)
        return this.equals((rptSaleDataOutlet_result)that);
      return false;
    }

    public boolean equals(rptSaleDataOutlet_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rptSaleDataOutlet_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptSaleDataOutlet_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptSaleDataOutlet_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataOutlet_resultStandardScheme getScheme() {
        return new rptSaleDataOutlet_resultStandardScheme();
      }
    }

    private static class rptSaleDataOutlet_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptSaleDataOutlet_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptSaleDataOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list80 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>(_list80.size);
                  com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET _elem81;
                  for (int _i82 = 0; _i82 < _list80.size; ++_i82)
                  {
                    _elem81 = new com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET();
                    _elem81.read(iprot);
                    struct.success.add(_elem81);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptSaleDataOutlet_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET _iter83 : struct.success)
            {
              _iter83.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptSaleDataOutlet_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptSaleDataOutlet_resultTupleScheme getScheme() {
        return new rptSaleDataOutlet_resultTupleScheme();
      }
    }

    private static class rptSaleDataOutlet_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptSaleDataOutlet_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptSaleDataOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET _iter84 : struct.success)
            {
              _iter84.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptSaleDataOutlet_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list85 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET>(_list85.size);
            com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET _elem86;
            for (int _i87 = 0; _i87 < _list85.size; ++_i87)
            {
              _elem86 = new com.tbims.rpc.entity.RPT_SALE_DATA_OUTLET();
              _elem86.read(iprot);
              struct.success.add(_elem86);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptStrData_args implements org.apache.thrift.TBase<rptStrData_args, rptStrData_args._Fields>, java.io.Serializable, Cloneable, Comparable<rptStrData_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptStrData_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField RPT_DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("rpt_date", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I64, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptStrData_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptStrData_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 统计日期
     */
    public long rpt_date; // required
    /**
     * 网点编号
     */
    public long outlet_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 统计日期
       */
      RPT_DATE((short)2, "rpt_date"),
      /**
       * 网点编号
       */
      OUTLET_ID((short)3, "outlet_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // RPT_DATE
            return RPT_DATE;
          case 3: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __RPT_DATE_ISSET_ID = 0;
    private static final int __OUTLET_ID_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.RPT_DATE, new org.apache.thrift.meta_data.FieldMetaData("rpt_date", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptStrData_args.class, metaDataMap);
    }

    public rptStrData_args() {
    }

    public rptStrData_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long rpt_date,
      long outlet_id)
    {
      this();
      this.auth = auth;
      this.rpt_date = rpt_date;
      setRpt_dateIsSet(true);
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptStrData_args(rptStrData_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.rpt_date = other.rpt_date;
      this.outlet_id = other.outlet_id;
    }

    public rptStrData_args deepCopy() {
      return new rptStrData_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setRpt_dateIsSet(false);
      this.rpt_date = 0;
      setOutlet_idIsSet(false);
      this.outlet_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public rptStrData_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 统计日期
     */
    public long getRpt_date() {
      return this.rpt_date;
    }

    /**
     * 统计日期
     */
    public rptStrData_args setRpt_date(long rpt_date) {
      this.rpt_date = rpt_date;
      setRpt_dateIsSet(true);
      return this;
    }

    public void unsetRpt_date() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RPT_DATE_ISSET_ID);
    }

    /** Returns true if field rpt_date is set (has been assigned a value) and false otherwise */
    public boolean isSetRpt_date() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RPT_DATE_ISSET_ID);
    }

    public void setRpt_dateIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RPT_DATE_ISSET_ID, value);
    }

    /**
     * 网点编号
     */
    public long getOutlet_id() {
      return this.outlet_id;
    }

    /**
     * 网点编号
     */
    public rptStrData_args setOutlet_id(long outlet_id) {
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
      return this;
    }

    public void unsetOutlet_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlet_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    public void setOutlet_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case RPT_DATE:
        if (value == null) {
          unsetRpt_date();
        } else {
          setRpt_date((java.lang.Long)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutlet_id();
        } else {
          setOutlet_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case RPT_DATE:
        return getRpt_date();

      case OUTLET_ID:
        return getOutlet_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case RPT_DATE:
        return isSetRpt_date();
      case OUTLET_ID:
        return isSetOutlet_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptStrData_args)
        return this.equals((rptStrData_args)that);
      return false;
    }

    public boolean equals(rptStrData_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_rpt_date = true;
      boolean that_present_rpt_date = true;
      if (this_present_rpt_date || that_present_rpt_date) {
        if (!(this_present_rpt_date && that_present_rpt_date))
          return false;
        if (this.rpt_date != that.rpt_date)
          return false;
      }

      boolean this_present_outlet_id = true;
      boolean that_present_outlet_id = true;
      if (this_present_outlet_id || that_present_outlet_id) {
        if (!(this_present_outlet_id && that_present_outlet_id))
          return false;
        if (this.outlet_id != that.outlet_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(rpt_date);

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outlet_id);

      return hashCode;
    }

    @Override
    public int compareTo(rptStrData_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRpt_date()).compareTo(other.isSetRpt_date());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRpt_date()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rpt_date, other.rpt_date);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutlet_id()).compareTo(other.isSetOutlet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, other.outlet_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptStrData_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rpt_date:");
      sb.append(this.rpt_date);
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptStrData_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrData_argsStandardScheme getScheme() {
        return new rptStrData_argsStandardScheme();
      }
    }

    private static class rptStrData_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptStrData_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptStrData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // RPT_DATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.rpt_date = iprot.readI64();
                struct.setRpt_dateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outlet_id = iprot.readI64();
                struct.setOutlet_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptStrData_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(RPT_DATE_FIELD_DESC);
        oprot.writeI64(struct.rpt_date);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outlet_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptStrData_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrData_argsTupleScheme getScheme() {
        return new rptStrData_argsTupleScheme();
      }
    }

    private static class rptStrData_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptStrData_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptStrData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetRpt_date()) {
          optionals.set(1);
        }
        if (struct.isSetOutlet_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetRpt_date()) {
          oprot.writeI64(struct.rpt_date);
        }
        if (struct.isSetOutlet_id()) {
          oprot.writeI64(struct.outlet_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptStrData_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rpt_date = iprot.readI64();
          struct.setRpt_dateIsSet(true);
        }
        if (incoming.get(2)) {
          struct.outlet_id = iprot.readI64();
          struct.setOutlet_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptStrData_result implements org.apache.thrift.TBase<rptStrData_result, rptStrData_result._Fields>, java.io.Serializable, Cloneable, Comparable<rptStrData_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptStrData_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptStrData_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptStrData_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPT_STR_DATA.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptStrData_result.class, metaDataMap);
    }

    public rptStrData_result() {
    }

    public rptStrData_result(
      java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptStrData_result(rptStrData_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>(other.success.size());
        for (com.tbims.rpc.entity.RPT_STR_DATA other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.RPT_STR_DATA(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public rptStrData_result deepCopy() {
      return new rptStrData_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.RPT_STR_DATA> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.RPT_STR_DATA elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> getSuccess() {
      return this.success;
    }

    public rptStrData_result setSuccess(java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public rptStrData_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptStrData_result)
        return this.equals((rptStrData_result)that);
      return false;
    }

    public boolean equals(rptStrData_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rptStrData_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptStrData_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptStrData_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrData_resultStandardScheme getScheme() {
        return new rptStrData_resultStandardScheme();
      }
    }

    private static class rptStrData_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptStrData_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptStrData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list88 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>(_list88.size);
                  com.tbims.rpc.entity.RPT_STR_DATA _elem89;
                  for (int _i90 = 0; _i90 < _list88.size; ++_i90)
                  {
                    _elem89 = new com.tbims.rpc.entity.RPT_STR_DATA();
                    _elem89.read(iprot);
                    struct.success.add(_elem89);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptStrData_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.RPT_STR_DATA _iter91 : struct.success)
            {
              _iter91.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptStrData_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrData_resultTupleScheme getScheme() {
        return new rptStrData_resultTupleScheme();
      }
    }

    private static class rptStrData_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptStrData_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptStrData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.RPT_STR_DATA _iter92 : struct.success)
            {
              _iter92.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptStrData_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list93 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>(_list93.size);
            com.tbims.rpc.entity.RPT_STR_DATA _elem94;
            for (int _i95 = 0; _i95 < _list93.size; ++_i95)
            {
              _elem94 = new com.tbims.rpc.entity.RPT_STR_DATA();
              _elem94.read(iprot);
              struct.success.add(_elem94);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptStrDataNow_args implements org.apache.thrift.TBase<rptStrDataNow_args, rptStrDataNow_args._Fields>, java.io.Serializable, Cloneable, Comparable<rptStrDataNow_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptStrDataNow_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField OUTLET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("outlet_id", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptStrDataNow_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptStrDataNow_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 网点编号
     */
    public long outlet_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 网点编号
       */
      OUTLET_ID((short)2, "outlet_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // OUTLET_ID
            return OUTLET_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __OUTLET_ID_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.OUTLET_ID, new org.apache.thrift.meta_data.FieldMetaData("outlet_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptStrDataNow_args.class, metaDataMap);
    }

    public rptStrDataNow_args() {
    }

    public rptStrDataNow_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long outlet_id)
    {
      this();
      this.auth = auth;
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptStrDataNow_args(rptStrDataNow_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.outlet_id = other.outlet_id;
    }

    public rptStrDataNow_args deepCopy() {
      return new rptStrDataNow_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setOutlet_idIsSet(false);
      this.outlet_id = 0;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public rptStrDataNow_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 网点编号
     */
    public long getOutlet_id() {
      return this.outlet_id;
    }

    /**
     * 网点编号
     */
    public rptStrDataNow_args setOutlet_id(long outlet_id) {
      this.outlet_id = outlet_id;
      setOutlet_idIsSet(true);
      return this;
    }

    public void unsetOutlet_id() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    /** Returns true if field outlet_id is set (has been assigned a value) and false otherwise */
    public boolean isSetOutlet_id() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OUTLET_ID_ISSET_ID);
    }

    public void setOutlet_idIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OUTLET_ID_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case OUTLET_ID:
        if (value == null) {
          unsetOutlet_id();
        } else {
          setOutlet_id((java.lang.Long)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case OUTLET_ID:
        return getOutlet_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case OUTLET_ID:
        return isSetOutlet_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptStrDataNow_args)
        return this.equals((rptStrDataNow_args)that);
      return false;
    }

    public boolean equals(rptStrDataNow_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_outlet_id = true;
      boolean that_present_outlet_id = true;
      if (this_present_outlet_id || that_present_outlet_id) {
        if (!(this_present_outlet_id && that_present_outlet_id))
          return false;
        if (this.outlet_id != that.outlet_id)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(outlet_id);

      return hashCode;
    }

    @Override
    public int compareTo(rptStrDataNow_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetOutlet_id()).compareTo(other.isSetOutlet_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetOutlet_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outlet_id, other.outlet_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptStrDataNow_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("outlet_id:");
      sb.append(this.outlet_id);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptStrDataNow_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrDataNow_argsStandardScheme getScheme() {
        return new rptStrDataNow_argsStandardScheme();
      }
    }

    private static class rptStrDataNow_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptStrDataNow_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptStrDataNow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // OUTLET_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.outlet_id = iprot.readI64();
                struct.setOutlet_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptStrDataNow_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(OUTLET_ID_FIELD_DESC);
        oprot.writeI64(struct.outlet_id);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptStrDataNow_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrDataNow_argsTupleScheme getScheme() {
        return new rptStrDataNow_argsTupleScheme();
      }
    }

    private static class rptStrDataNow_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptStrDataNow_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptStrDataNow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetOutlet_id()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetOutlet_id()) {
          oprot.writeI64(struct.outlet_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptStrDataNow_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.outlet_id = iprot.readI64();
          struct.setOutlet_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class rptStrDataNow_result implements org.apache.thrift.TBase<rptStrDataNow_result, rptStrDataNow_result._Fields>, java.io.Serializable, Cloneable, Comparable<rptStrDataNow_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("rptStrDataNow_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new rptStrDataNow_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new rptStrDataNow_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPT_STR_DATA.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(rptStrDataNow_result.class, metaDataMap);
    }

    public rptStrDataNow_result() {
    }

    public rptStrDataNow_result(
      java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public rptStrDataNow_result(rptStrDataNow_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>(other.success.size());
        for (com.tbims.rpc.entity.RPT_STR_DATA other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.RPT_STR_DATA(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public rptStrDataNow_result deepCopy() {
      return new rptStrDataNow_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.RPT_STR_DATA> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.RPT_STR_DATA elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> getSuccess() {
      return this.success;
    }

    public rptStrDataNow_result setSuccess(java.util.List<com.tbims.rpc.entity.RPT_STR_DATA> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public rptStrDataNow_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.RPT_STR_DATA>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof rptStrDataNow_result)
        return this.equals((rptStrDataNow_result)that);
      return false;
    }

    public boolean equals(rptStrDataNow_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(rptStrDataNow_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("rptStrDataNow_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class rptStrDataNow_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrDataNow_resultStandardScheme getScheme() {
        return new rptStrDataNow_resultStandardScheme();
      }
    }

    private static class rptStrDataNow_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<rptStrDataNow_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, rptStrDataNow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list96 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>(_list96.size);
                  com.tbims.rpc.entity.RPT_STR_DATA _elem97;
                  for (int _i98 = 0; _i98 < _list96.size; ++_i98)
                  {
                    _elem97 = new com.tbims.rpc.entity.RPT_STR_DATA();
                    _elem97.read(iprot);
                    struct.success.add(_elem97);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, rptStrDataNow_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.RPT_STR_DATA _iter99 : struct.success)
            {
              _iter99.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class rptStrDataNow_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public rptStrDataNow_resultTupleScheme getScheme() {
        return new rptStrDataNow_resultTupleScheme();
      }
    }

    private static class rptStrDataNow_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<rptStrDataNow_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, rptStrDataNow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.RPT_STR_DATA _iter100 : struct.success)
            {
              _iter100.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, rptStrDataNow_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list101 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.RPT_STR_DATA>(_list101.size);
            com.tbims.rpc.entity.RPT_STR_DATA _elem102;
            for (int _i103 = 0; _i103 < _list101.size; ++_i103)
            {
              _elem102 = new com.tbims.rpc.entity.RPT_STR_DATA();
              _elem102.read(iprot);
              struct.success.add(_elem102);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTeamOrderDetail_args implements org.apache.thrift.TBase<queryTeamOrderDetail_args, queryTeamOrderDetail_args._Fields>, java.io.Serializable, Cloneable, Comparable<queryTeamOrderDetail_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTeamOrderDetail_args");

    private static final org.apache.thrift.protocol.TField AUTH_FIELD_DESC = new org.apache.thrift.protocol.TField("auth", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField CHANGE_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("change_time", org.apache.thrift.protocol.TType.I64, (short)2);
    private static final org.apache.thrift.protocol.TField APPLY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("apply_id", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTeamOrderDetail_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTeamOrderDetail_argsTupleSchemeFactory();

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION auth; // required
    /**
     * 换票时间
     */
    public long change_time; // required
    /**
     * 申请单号
     */
    public java.lang.String apply_id; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      /**
       * 通用参数
       */
      AUTH((short)1, "auth"),
      /**
       * 换票时间
       */
      CHANGE_TIME((short)2, "change_time"),
      /**
       * 申请单号
       */
      APPLY_ID((short)3, "apply_id");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // AUTH
            return AUTH;
          case 2: // CHANGE_TIME
            return CHANGE_TIME;
          case 3: // APPLY_ID
            return APPLY_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __CHANGE_TIME_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.AUTH, new org.apache.thrift.meta_data.FieldMetaData("auth", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.AUTHORIZATION.class)));
      tmpMap.put(_Fields.CHANGE_TIME, new org.apache.thrift.meta_data.FieldMetaData("change_time", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.APPLY_ID, new org.apache.thrift.meta_data.FieldMetaData("apply_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTeamOrderDetail_args.class, metaDataMap);
    }

    public queryTeamOrderDetail_args() {
    }

    public queryTeamOrderDetail_args(
      com.tbims.rpc.entity.AUTHORIZATION auth,
      long change_time,
      java.lang.String apply_id)
    {
      this();
      this.auth = auth;
      this.change_time = change_time;
      setChange_timeIsSet(true);
      this.apply_id = apply_id;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTeamOrderDetail_args(queryTeamOrderDetail_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetAuth()) {
        this.auth = new com.tbims.rpc.entity.AUTHORIZATION(other.auth);
      }
      this.change_time = other.change_time;
      if (other.isSetApply_id()) {
        this.apply_id = other.apply_id;
      }
    }

    public queryTeamOrderDetail_args deepCopy() {
      return new queryTeamOrderDetail_args(this);
    }

    @Override
    public void clear() {
      this.auth = null;
      setChange_timeIsSet(false);
      this.change_time = 0;
      this.apply_id = null;
    }

    /**
     * 通用参数
     */
    public com.tbims.rpc.entity.AUTHORIZATION getAuth() {
      return this.auth;
    }

    /**
     * 通用参数
     */
    public queryTeamOrderDetail_args setAuth(com.tbims.rpc.entity.AUTHORIZATION auth) {
      this.auth = auth;
      return this;
    }

    public void unsetAuth() {
      this.auth = null;
    }

    /** Returns true if field auth is set (has been assigned a value) and false otherwise */
    public boolean isSetAuth() {
      return this.auth != null;
    }

    public void setAuthIsSet(boolean value) {
      if (!value) {
        this.auth = null;
      }
    }

    /**
     * 换票时间
     */
    public long getChange_time() {
      return this.change_time;
    }

    /**
     * 换票时间
     */
    public queryTeamOrderDetail_args setChange_time(long change_time) {
      this.change_time = change_time;
      setChange_timeIsSet(true);
      return this;
    }

    public void unsetChange_time() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __CHANGE_TIME_ISSET_ID);
    }

    /** Returns true if field change_time is set (has been assigned a value) and false otherwise */
    public boolean isSetChange_time() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __CHANGE_TIME_ISSET_ID);
    }

    public void setChange_timeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __CHANGE_TIME_ISSET_ID, value);
    }

    /**
     * 申请单号
     */
    public java.lang.String getApply_id() {
      return this.apply_id;
    }

    /**
     * 申请单号
     */
    public queryTeamOrderDetail_args setApply_id(java.lang.String apply_id) {
      this.apply_id = apply_id;
      return this;
    }

    public void unsetApply_id() {
      this.apply_id = null;
    }

    /** Returns true if field apply_id is set (has been assigned a value) and false otherwise */
    public boolean isSetApply_id() {
      return this.apply_id != null;
    }

    public void setApply_idIsSet(boolean value) {
      if (!value) {
        this.apply_id = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case AUTH:
        if (value == null) {
          unsetAuth();
        } else {
          setAuth((com.tbims.rpc.entity.AUTHORIZATION)value);
        }
        break;

      case CHANGE_TIME:
        if (value == null) {
          unsetChange_time();
        } else {
          setChange_time((java.lang.Long)value);
        }
        break;

      case APPLY_ID:
        if (value == null) {
          unsetApply_id();
        } else {
          setApply_id((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case AUTH:
        return getAuth();

      case CHANGE_TIME:
        return getChange_time();

      case APPLY_ID:
        return getApply_id();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case AUTH:
        return isSetAuth();
      case CHANGE_TIME:
        return isSetChange_time();
      case APPLY_ID:
        return isSetApply_id();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTeamOrderDetail_args)
        return this.equals((queryTeamOrderDetail_args)that);
      return false;
    }

    public boolean equals(queryTeamOrderDetail_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_auth = true && this.isSetAuth();
      boolean that_present_auth = true && that.isSetAuth();
      if (this_present_auth || that_present_auth) {
        if (!(this_present_auth && that_present_auth))
          return false;
        if (!this.auth.equals(that.auth))
          return false;
      }

      boolean this_present_change_time = true;
      boolean that_present_change_time = true;
      if (this_present_change_time || that_present_change_time) {
        if (!(this_present_change_time && that_present_change_time))
          return false;
        if (this.change_time != that.change_time)
          return false;
      }

      boolean this_present_apply_id = true && this.isSetApply_id();
      boolean that_present_apply_id = true && that.isSetApply_id();
      if (this_present_apply_id || that_present_apply_id) {
        if (!(this_present_apply_id && that_present_apply_id))
          return false;
        if (!this.apply_id.equals(that.apply_id))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetAuth()) ? 131071 : 524287);
      if (isSetAuth())
        hashCode = hashCode * 8191 + auth.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(change_time);

      hashCode = hashCode * 8191 + ((isSetApply_id()) ? 131071 : 524287);
      if (isSetApply_id())
        hashCode = hashCode * 8191 + apply_id.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTeamOrderDetail_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetAuth()).compareTo(other.isSetAuth());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAuth()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.auth, other.auth);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChange_time()).compareTo(other.isSetChange_time());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChange_time()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.change_time, other.change_time);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetApply_id()).compareTo(other.isSetApply_id());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetApply_id()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.apply_id, other.apply_id);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTeamOrderDetail_args(");
      boolean first = true;

      sb.append("auth:");
      if (this.auth == null) {
        sb.append("null");
      } else {
        sb.append(this.auth);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("change_time:");
      sb.append(this.change_time);
      first = false;
      if (!first) sb.append(", ");
      sb.append("apply_id:");
      if (this.apply_id == null) {
        sb.append("null");
      } else {
        sb.append(this.apply_id);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (auth != null) {
        auth.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTeamOrderDetail_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTeamOrderDetail_argsStandardScheme getScheme() {
        return new queryTeamOrderDetail_argsStandardScheme();
      }
    }

    private static class queryTeamOrderDetail_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTeamOrderDetail_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTeamOrderDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // AUTH
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
                struct.auth.read(iprot);
                struct.setAuthIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHANGE_TIME
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.change_time = iprot.readI64();
                struct.setChange_timeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // APPLY_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.apply_id = iprot.readString();
                struct.setApply_idIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTeamOrderDetail_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.auth != null) {
          oprot.writeFieldBegin(AUTH_FIELD_DESC);
          struct.auth.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(CHANGE_TIME_FIELD_DESC);
        oprot.writeI64(struct.change_time);
        oprot.writeFieldEnd();
        if (struct.apply_id != null) {
          oprot.writeFieldBegin(APPLY_ID_FIELD_DESC);
          oprot.writeString(struct.apply_id);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTeamOrderDetail_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTeamOrderDetail_argsTupleScheme getScheme() {
        return new queryTeamOrderDetail_argsTupleScheme();
      }
    }

    private static class queryTeamOrderDetail_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTeamOrderDetail_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTeamOrderDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetAuth()) {
          optionals.set(0);
        }
        if (struct.isSetChange_time()) {
          optionals.set(1);
        }
        if (struct.isSetApply_id()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetAuth()) {
          struct.auth.write(oprot);
        }
        if (struct.isSetChange_time()) {
          oprot.writeI64(struct.change_time);
        }
        if (struct.isSetApply_id()) {
          oprot.writeString(struct.apply_id);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTeamOrderDetail_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.auth = new com.tbims.rpc.entity.AUTHORIZATION();
          struct.auth.read(iprot);
          struct.setAuthIsSet(true);
        }
        if (incoming.get(1)) {
          struct.change_time = iprot.readI64();
          struct.setChange_timeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.apply_id = iprot.readString();
          struct.setApply_idIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queryTeamOrderDetail_result implements org.apache.thrift.TBase<queryTeamOrderDetail_result, queryTeamOrderDetail_result._Fields>, java.io.Serializable, Cloneable, Comparable<queryTeamOrderDetail_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queryTeamOrderDetail_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);
    private static final org.apache.thrift.protocol.TField E_FIELD_DESC = new org.apache.thrift.protocol.TField("e", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queryTeamOrderDetail_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queryTeamOrderDetail_resultTupleSchemeFactory();

    public java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> success; // required
    public com.tbims.rpc.entity.RPCException e; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      E((short)1, "e");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // E
            return E;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.SL_TEAM_ORDER.class))));
      tmpMap.put(_Fields.E, new org.apache.thrift.meta_data.FieldMetaData("e", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, com.tbims.rpc.entity.RPCException.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queryTeamOrderDetail_result.class, metaDataMap);
    }

    public queryTeamOrderDetail_result() {
    }

    public queryTeamOrderDetail_result(
      java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> success,
      com.tbims.rpc.entity.RPCException e)
    {
      this();
      this.success = success;
      this.e = e;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queryTeamOrderDetail_result(queryTeamOrderDetail_result other) {
      if (other.isSetSuccess()) {
        java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> __this__success = new java.util.ArrayList<com.tbims.rpc.entity.SL_TEAM_ORDER>(other.success.size());
        for (com.tbims.rpc.entity.SL_TEAM_ORDER other_element : other.success) {
          __this__success.add(new com.tbims.rpc.entity.SL_TEAM_ORDER(other_element));
        }
        this.success = __this__success;
      }
      if (other.isSetE()) {
        this.e = new com.tbims.rpc.entity.RPCException(other.e);
      }
    }

    public queryTeamOrderDetail_result deepCopy() {
      return new queryTeamOrderDetail_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.e = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<com.tbims.rpc.entity.SL_TEAM_ORDER> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(com.tbims.rpc.entity.SL_TEAM_ORDER elem) {
      if (this.success == null) {
        this.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_TEAM_ORDER>();
      }
      this.success.add(elem);
    }

    public java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> getSuccess() {
      return this.success;
    }

    public queryTeamOrderDetail_result setSuccess(java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public com.tbims.rpc.entity.RPCException getE() {
      return this.e;
    }

    public queryTeamOrderDetail_result setE(com.tbims.rpc.entity.RPCException e) {
      this.e = e;
      return this;
    }

    public void unsetE() {
      this.e = null;
    }

    /** Returns true if field e is set (has been assigned a value) and false otherwise */
    public boolean isSetE() {
      return this.e != null;
    }

    public void setEIsSet(boolean value) {
      if (!value) {
        this.e = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.util.List<com.tbims.rpc.entity.SL_TEAM_ORDER>)value);
        }
        break;

      case E:
        if (value == null) {
          unsetE();
        } else {
          setE((com.tbims.rpc.entity.RPCException)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case E:
        return getE();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case E:
        return isSetE();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queryTeamOrderDetail_result)
        return this.equals((queryTeamOrderDetail_result)that);
      return false;
    }

    public boolean equals(queryTeamOrderDetail_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_e = true && this.isSetE();
      boolean that_present_e = true && that.isSetE();
      if (this_present_e || that_present_e) {
        if (!(this_present_e && that_present_e))
          return false;
        if (!this.e.equals(that.e))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      hashCode = hashCode * 8191 + ((isSetE()) ? 131071 : 524287);
      if (isSetE())
        hashCode = hashCode * 8191 + e.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queryTeamOrderDetail_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetE()).compareTo(other.isSetE());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetE()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.e, other.e);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queryTeamOrderDetail_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("e:");
      if (this.e == null) {
        sb.append("null");
      } else {
        sb.append(this.e);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queryTeamOrderDetail_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTeamOrderDetail_resultStandardScheme getScheme() {
        return new queryTeamOrderDetail_resultStandardScheme();
      }
    }

    private static class queryTeamOrderDetail_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queryTeamOrderDetail_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queryTeamOrderDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list104 = iprot.readListBegin();
                  struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_TEAM_ORDER>(_list104.size);
                  com.tbims.rpc.entity.SL_TEAM_ORDER _elem105;
                  for (int _i106 = 0; _i106 < _list104.size; ++_i106)
                  {
                    _elem105 = new com.tbims.rpc.entity.SL_TEAM_ORDER();
                    _elem105.read(iprot);
                    struct.success.add(_elem105);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // E
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.e = new com.tbims.rpc.entity.RPCException();
                struct.e.read(iprot);
                struct.setEIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queryTeamOrderDetail_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (com.tbims.rpc.entity.SL_TEAM_ORDER _iter107 : struct.success)
            {
              _iter107.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.e != null) {
          oprot.writeFieldBegin(E_FIELD_DESC);
          struct.e.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queryTeamOrderDetail_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queryTeamOrderDetail_resultTupleScheme getScheme() {
        return new queryTeamOrderDetail_resultTupleScheme();
      }
    }

    private static class queryTeamOrderDetail_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queryTeamOrderDetail_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queryTeamOrderDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetE()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (com.tbims.rpc.entity.SL_TEAM_ORDER _iter108 : struct.success)
            {
              _iter108.write(oprot);
            }
          }
        }
        if (struct.isSetE()) {
          struct.e.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queryTeamOrderDetail_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list109 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new java.util.ArrayList<com.tbims.rpc.entity.SL_TEAM_ORDER>(_list109.size);
            com.tbims.rpc.entity.SL_TEAM_ORDER _elem110;
            for (int _i111 = 0; _i111 < _list109.size; ++_i111)
            {
              _elem110 = new com.tbims.rpc.entity.SL_TEAM_ORDER();
              _elem110.read(iprot);
              struct.success.add(_elem110);
            }
          }
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.e = new com.tbims.rpc.entity.RPCException();
          struct.e.read(iprot);
          struct.setEIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
